
BroadMarket_Support_ADBMS6830.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c40  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001780  08016e20  08016e20  00017e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  080185a0  080185a0  000195a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000224  20000000  080185a8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000229c  20000224  080187cc  0001a224  2**2
                  ALLOC
  6 ._user_heap_stack 00000600  200024c0  080187cc  0001a4c0  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  0001a224  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002cc38  00000000  00000000  0001a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00004c5f  00000000  00000000  00046e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00002198  00000000  00000000  0004baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00001a4e  00000000  00000000  0004dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0002e574  00000000  00000000  0004f6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002b83a  00000000  00000000  0007dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    001282e8  00000000  00000000  000a9484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000043  00000000  00000000  001d176c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000a8d0  00000000  00000000  001d17b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000082  00000000  00000000  001dc080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <Pec15_Calc>:
uint16_t Pec15_Calc
( 
uint8_t len, /* Number of bytes that will be used to calculate a PEC */
uint8_t *data /* Array of data that will be used to calculate  a PEC */								 
)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 800103c:	2310      	movs	r3, #16
 800103e:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001040:	2300      	movs	r3, #0
 8001042:	737b      	strb	r3, [r7, #13]
 8001044:	e019      	b.n	800107a <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	09db      	lsrs	r3, r3, #7
 800104a:	b29b      	uxth	r3, r3
 800104c:	7b7a      	ldrb	r2, [r7, #13]
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	440a      	add	r2, r1
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	4053      	eors	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 800105c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	897b      	ldrh	r3, [r7, #10]
 8001066:	490b      	ldr	r1, [pc, #44]	@ (8001094 <Pec15_Calc+0x64>)
 8001068:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4053      	eors	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	3301      	adds	r3, #1
 8001078:	737b      	strb	r3, [r7, #13]
 800107a:	7b7a      	ldrb	r2, [r7, #13]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3e1      	bcc.n	8001046 <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b29b      	uxth	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08017f00 	.word	0x08017f00

08001098 <pec10_calc>:

uint16_t pec10_calc( bool bIsRxCmd, int nLength, uint8_t *pDataBuf)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 80010a6:	2310      	movs	r3, #16
 80010a8:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 80010aa:	238f      	movs	r3, #143	@ 0x8f
 80010ac:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 80010ae:	2300      	movs	r3, #0
 80010b0:	757b      	strb	r3, [r7, #21]
 80010b2:	e024      	b.n	80010fe <pec10_calc+0x66>
  {
    /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)pDataBuf[nByteIndex] << 2u);
 80010b4:	7d7b      	ldrb	r3, [r7, #21]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	b29a      	uxth	r2, r3
 80010c0:	8afb      	ldrh	r3, [r7, #22]
 80010c2:	4053      	eors	r3, r2
 80010c4:	82fb      	strh	r3, [r7, #22]
 
    /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010c6:	2308      	movs	r3, #8
 80010c8:	753b      	strb	r3, [r7, #20]
 80010ca:	e012      	b.n	80010f2 <pec10_calc+0x5a>
    {
      /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 80010cc:	8afb      	ldrh	r3, [r7, #22]
 80010ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <pec10_calc+0x4e>
      {
                nRemainder = (uint16_t)((nRemainder << 1u));
 80010d6:	8afb      	ldrh	r3, [r7, #22]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010dc:	8afa      	ldrh	r2, [r7, #22]
 80010de:	8a7b      	ldrh	r3, [r7, #18]
 80010e0:	4053      	eors	r3, r2
 80010e2:	82fb      	strh	r3, [r7, #22]
 80010e4:	e002      	b.n	80010ec <pec10_calc+0x54>
      }
      else
      {
                nRemainder = (uint16_t)(nRemainder << 1u);
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010ec:	7d3b      	ldrb	r3, [r7, #20]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	753b      	strb	r3, [r7, #20]
 80010f2:	7d3b      	ldrb	r3, [r7, #20]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e9      	bne.n	80010cc <pec10_calc+0x34>
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7b      	ldrb	r3, [r7, #21]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	429a      	cmp	r2, r3
 8001104:	dcd6      	bgt.n	80010b4 <pec10_calc+0x1c>
      }
    }
  }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == true)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00e      	beq.n	800112a <pec10_calc+0x92>
  {  
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	b21b      	sxth	r3, r3
 800111a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 800111e:	b21a      	sxth	r2, r3
 8001120:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001124:	4053      	eors	r3, r2
 8001126:	b21b      	sxth	r3, r3
 8001128:	82fb      	strh	r3, [r7, #22]
  }
  /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800112a:	2306      	movs	r3, #6
 800112c:	753b      	strb	r3, [r7, #20]
 800112e:	e012      	b.n	8001156 <pec10_calc+0xbe>
  {
    /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <pec10_calc+0xb2>
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800113a:	8afb      	ldrh	r3, [r7, #22]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001140:	8afa      	ldrh	r2, [r7, #22]
 8001142:	8a7b      	ldrh	r3, [r7, #18]
 8001144:	4053      	eors	r3, r2
 8001146:	82fb      	strh	r3, [r7, #22]
 8001148:	e002      	b.n	8001150 <pec10_calc+0xb8>
    }
    else
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800114a:	8afb      	ldrh	r3, [r7, #22]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001150:	7d3b      	ldrb	r3, [r7, #20]
 8001152:	3b01      	subs	r3, #1
 8001154:	753b      	strb	r3, [r7, #20]
 8001156:	7d3b      	ldrb	r3, [r7, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e9      	bne.n	8001130 <pec10_calc+0x98>
    }
  }
    return ((uint16_t)(nRemainder & 0x3FFu));
 800115c:	8afb      	ldrh	r3, [r7, #22]
 800115e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001162:	b29b      	uxth	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <spiSendCmd>:
* @return None
*
*******************************************************************************
*/
void spiSendCmd(uint8_t tx_cmd[2])
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint16_t cmd_pec;	
  cmd[0] = tx_cmd[0];
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	723b      	strb	r3, [r7, #8]
  cmd[1] =  tx_cmd[1];
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	727b      	strb	r3, [r7, #9]
  cmd_pec = Pec15_Calc(2, cmd);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff ff50 	bl	8001030 <Pec15_Calc>
 8001190:	4603      	mov	r3, r0
 8001192:	81fb      	strh	r3, [r7, #14]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	72fb      	strb	r3, [r7, #11]
  adBmsCsLow();
 80011a4:	f005 ffdc 	bl	8007160 <adBmsCsLow>
  spiWriteBytes(4, &cmd[0]);
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	2004      	movs	r0, #4
 80011b0:	f005 ffee 	bl	8007190 <spiWriteBytes>
  adBmsCsHigh();
 80011b4:	f005 ffe0 	bl	8007178 <adBmsCsHigh>
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <spiReadData>:
uint8_t *rx_data,
uint8_t *pec_error,
uint8_t *cmd_cntr,
uint8_t regData_size
)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *data, *copyArray, src_address = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t cmd_pec, received_pec, calculated_pec;
  uint8_t BYTES_IN_REG = regData_size;
 80011d6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80011da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t RX_BUFFER = (regData_size * tIC);
 80011de:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	fb12 f303 	smulbb	r3, r2, r3
 80011e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  
  data = (uint8_t *)calloc(RX_BUFFER, sizeof(uint8_t));
 80011ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f011 f9d0 	bl	8012598 <calloc>
 80011f8:	4603      	mov	r3, r0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  copyArray = (uint8_t *)calloc(BYTES_IN_REG, sizeof(uint8_t));
 80011fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f011 f9c8 	bl	8012598 <calloc>
 8001208:	4603      	mov	r3, r0
 800120a:	623b      	str	r3, [r7, #32]
  if((data == NULL) || (copyArray == NULL))
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <spiReadData+0x58>
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <spiReadData+0x64>
  {
   #ifdef MBED     
    pc.printf(" Failed to allocate spi read data memory \n");
    #else
    printf(" Failed to allocate spi read data memory \n");
 8001218:	486c      	ldr	r0, [pc, #432]	@ (80013cc <spiReadData+0x20c>)
 800121a:	f013 f8e5 	bl	80143e8 <puts>
    #endif	  
    exit(0);
 800121e:	2000      	movs	r0, #0
 8001220:	f011 f9d6 	bl	80125d0 <exit>
  }
  else
  {
    uint8_t cmd[4];
    cmd[0] = tx_cmd[0];
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	753b      	strb	r3, [r7, #20]
    cmd[1] = tx_cmd[1];
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	757b      	strb	r3, [r7, #21]
    cmd_pec = Pec15_Calc(2, cmd);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff fefa 	bl	8001030 <Pec15_Calc>
 800123c:	4603      	mov	r3, r0
 800123e:	83fb      	strh	r3, [r7, #30]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001240:	8bfb      	ldrh	r3, [r7, #30]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b29b      	uxth	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	75bb      	strb	r3, [r7, #22]
    cmd[3] = (uint8_t)(cmd_pec);
 800124a:	8bfb      	ldrh	r3, [r7, #30]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	75fb      	strb	r3, [r7, #23]
    adBmsWakeupIc(tIC);
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4618      	mov	r0, r3
 8001254:	f005 ffce 	bl	80071f4 <adBmsWakeupIc>
    adBmsCsLow();
 8001258:	f005 ff82 	bl	8007160 <adBmsCsLow>
    spiWriteReadBytes(&cmd[0], &data[0], RX_BUFFER);                 /* Read the configuration data of all ICs on the daisy chain into readdata array */
 800125c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001260:	b29a      	uxth	r2, r3
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001268:	4618      	mov	r0, r3
 800126a:	f005 ffa5 	bl	80071b8 <spiWriteReadBytes>
    adBmsCsHigh();
 800126e:	f005 ff83 	bl	8007178 <adBmsCsHigh>
    for (uint8_t current_ic = 0; current_ic < tIC; current_ic++)     /* executes for each ic in the daisy chain and packs the data */
 8001272:	2300      	movs	r3, #0
 8001274:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001278:	e097      	b.n	80013aa <spiReadData+0x1ea>
    {																																      /* Into the r_comm array as well as check the received data for any bit errors */
      for (uint8_t current_byte = 0; current_byte < (BYTES_IN_REG); current_byte++)
 800127a:	2300      	movs	r3, #0
 800127c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001280:	e01e      	b.n	80012c0 <spiReadData+0x100>
      {
        rx_data[(current_ic*BYTES_IN_REG)+current_byte] = data[current_byte + (current_ic*BYTES_IN_REG)];
 8001282:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001286:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800128a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800128e:	fb01 f303 	mul.w	r3, r1, r3
 8001292:	4413      	add	r3, r2
 8001294:	461a      	mov	r2, r3
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	441a      	add	r2, r3
 800129a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800129e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80012a2:	fb03 f101 	mul.w	r1, r3, r1
 80012a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012aa:	440b      	add	r3, r1
 80012ac:	4619      	mov	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	440b      	add	r3, r1
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	701a      	strb	r2, [r3, #0]
      for (uint8_t current_byte = 0; current_byte < (BYTES_IN_REG); current_byte++)
 80012b6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012ba:	3301      	adds	r3, #1
 80012bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80012c0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80012c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3da      	bcc.n	8001282 <spiReadData+0xc2>
      }
      /* Get command counter value */
      cmd_cntr[current_ic] = (data[(current_ic * BYTES_IN_REG) + (BYTES_IN_REG - 2)] >> 2);
 80012cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012d0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80012d4:	fb03 f202 	mul.w	r2, r3, r2
 80012d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012dc:	3b02      	subs	r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	4413      	add	r3, r2
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80012ee:	440b      	add	r3, r1
 80012f0:	0892      	lsrs	r2, r2, #2
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]
      /* Get received pec value from ic*/
      received_pec = (uint16_t)(((data[(current_ic * BYTES_IN_REG) + (BYTES_IN_REG - 2)] & 0x03) << 8) | data[(current_ic * BYTES_IN_REG) + (BYTES_IN_REG - 1)]);
 80012f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012fa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80012fe:	fb03 f202 	mul.w	r2, r3, r2
 8001302:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001306:	3b02      	subs	r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	461a      	mov	r2, r3
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21b      	sxth	r3, r3
 8001318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800131c:	b21a      	sxth	r2, r3
 800131e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001322:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001326:	fb03 f101 	mul.w	r1, r3, r1
 800132a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800132e:	3b01      	subs	r3, #1
 8001330:	440b      	add	r3, r1
 8001332:	4619      	mov	r1, r3
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	440b      	add	r3, r1
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	83bb      	strh	r3, [r7, #28]
      /* Copy each ic correspond data + pec value for calculate data pec */
      memcpy(&copyArray[0], &data[src_address], BYTES_IN_REG);
 8001342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001348:	4413      	add	r3, r2
 800134a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800134e:	4619      	mov	r1, r3
 8001350:	6a38      	ldr	r0, [r7, #32]
 8001352:	f013 f8ad 	bl	80144b0 <memcpy>
      src_address = ((current_ic+1) * (regData_size));
 8001356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800135a:	3301      	adds	r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001362:	fb12 f303 	smulbb	r3, r2, r3
 8001366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      /* Calculate data pec */
      calculated_pec = (uint16_t)pec10_calc(true, (BYTES_IN_REG-2), &copyArray[0]);
 800136a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800136e:	3b02      	subs	r3, #2
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	4619      	mov	r1, r3
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fe8f 	bl	8001098 <pec10_calc>
 800137a:	4603      	mov	r3, r0
 800137c:	837b      	strh	r3, [r7, #26]
      /* Match received pec with calculated pec */
      if (received_pec == calculated_pec){ pec_error[current_ic] = 0; }/* If no error is there value set to 0 */
 800137e:	8bba      	ldrh	r2, [r7, #28]
 8001380:	8b7b      	ldrh	r3, [r7, #26]
 8001382:	429a      	cmp	r2, r3
 8001384:	d106      	bne.n	8001394 <spiReadData+0x1d4>
 8001386:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e005      	b.n	80013a0 <spiReadData+0x1e0>
      else{ pec_error[current_ic] = 1; }                               /* If error is there value set to 1 */                         
 8001394:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4413      	add	r3, r2
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
    for (uint8_t current_ic = 0; current_ic < tIC; current_ic++)     /* executes for each ic in the daisy chain and packs the data */
 80013a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013a4:	3301      	adds	r3, #1
 80013a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80013aa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f4ff af62 	bcc.w	800127a <spiReadData+0xba>
    }
  }
  free(data);
 80013b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013b8:	f011 fbee 	bl	8012b98 <free>
  free(copyArray);
 80013bc:	6a38      	ldr	r0, [r7, #32]
 80013be:	f011 fbeb 	bl	8012b98 <free>
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08016e20 	.word	0x08016e20

080013d0 <adBmsReadData>:
* @return None 
*
*******************************************************************************
*/
void adBmsReadData(uint8_t tIC, cell_asic *ic, uint8_t cmd_arg[2], TYPE type, GRP group)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b090      	sub	sp, #64	@ 0x40
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	461a      	mov	r2, r3
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	4613      	mov	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
  uint16_t rBuff_size;
  uint8_t regData_size;
  if(group == ALL_GRP)
 80013e4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d142      	bne.n	8001472 <adBmsReadData+0xa2>
  {
    if(type == Rdcvall){rBuff_size = RDCVALL_SIZE; regData_size = RDCVALL_SIZE;}
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d105      	bne.n	80013fe <adBmsReadData+0x2e>
 80013f2:	2322      	movs	r3, #34	@ 0x22
 80013f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80013f6:	2322      	movs	r3, #34	@ 0x22
 80013f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80013fc:	e040      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdsall){rBuff_size = RDSALL_SIZE; regData_size = RDSALL_SIZE;}
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	2b0e      	cmp	r3, #14
 8001402:	d105      	bne.n	8001410 <adBmsReadData+0x40>
 8001404:	2322      	movs	r3, #34	@ 0x22
 8001406:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001408:	2322      	movs	r3, #34	@ 0x22
 800140a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800140e:	e037      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdacall){rBuff_size = RDACALL_SIZE; regData_size = RDACALL_SIZE;}
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	2b0d      	cmp	r3, #13
 8001414:	d105      	bne.n	8001422 <adBmsReadData+0x52>
 8001416:	2322      	movs	r3, #34	@ 0x22
 8001418:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800141a:	2322      	movs	r3, #34	@ 0x22
 800141c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001420:	e02e      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdfcall){rBuff_size = RDFCALL_SIZE; regData_size = RDFCALL_SIZE;}
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	2b11      	cmp	r3, #17
 8001426:	d105      	bne.n	8001434 <adBmsReadData+0x64>
 8001428:	2322      	movs	r3, #34	@ 0x22
 800142a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800142c:	2322      	movs	r3, #34	@ 0x22
 800142e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001432:	e025      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdcsall){rBuff_size = RDCSALL_SIZE; regData_size = RDCSALL_SIZE;}
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d105      	bne.n	8001446 <adBmsReadData+0x76>
 800143a:	2342      	movs	r3, #66	@ 0x42
 800143c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800143e:	2342      	movs	r3, #66	@ 0x42
 8001440:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001444:	e01c      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdasall){rBuff_size = RDASALL_SIZE; regData_size = RDASALL_SIZE;}
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	2b12      	cmp	r3, #18
 800144a:	d105      	bne.n	8001458 <adBmsReadData+0x88>
 800144c:	2346      	movs	r3, #70	@ 0x46
 800144e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001450:	2346      	movs	r3, #70	@ 0x46
 8001452:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001456:	e013      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdacsall){rBuff_size = RDACSALL_SIZE; regData_size = RDACSALL_SIZE;}
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d105      	bne.n	800146a <adBmsReadData+0x9a>
 800145e:	2342      	movs	r3, #66	@ 0x42
 8001460:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001462:	2342      	movs	r3, #66	@ 0x42
 8001464:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001468:	e00a      	b.n	8001480 <adBmsReadData+0xb0>
    else{printf("Read All cmd wrong type select \n");}
 800146a:	48bc      	ldr	r0, [pc, #752]	@ (800175c <adBmsReadData+0x38c>)
 800146c:	f012 ffbc 	bl	80143e8 <puts>
 8001470:	e006      	b.n	8001480 <adBmsReadData+0xb0>
  }
  else{rBuff_size = (tIC * RX_DATA); regData_size = RX_DATA;}
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	b29b      	uxth	r3, r3
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800147a:	2308      	movs	r3, #8
 800147c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t *read_buffer, *pec_error, *cmd_count;
  read_buffer = (uint8_t *)calloc(rBuff_size, sizeof(uint8_t));
 8001480:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001482:	2101      	movs	r1, #1
 8001484:	4618      	mov	r0, r3
 8001486:	f011 f887 	bl	8012598 <calloc>
 800148a:	4603      	mov	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]
  pec_error = (uint8_t *)calloc(tIC, sizeof(uint8_t)); 
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f011 f880 	bl	8012598 <calloc>
 8001498:	4603      	mov	r3, r0
 800149a:	617b      	str	r3, [r7, #20]
  cmd_count = (uint8_t *)calloc(tIC, sizeof(uint8_t));
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f011 f879 	bl	8012598 <calloc>
 80014a6:	4603      	mov	r3, r0
 80014a8:	613b      	str	r3, [r7, #16]
  if((pec_error == NULL) || (cmd_count == NULL) || (read_buffer == NULL))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <adBmsReadData+0xec>
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <adBmsReadData+0xec>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <adBmsReadData+0xf8>
  {
#ifdef MBED
    pc.printf(" Failed to allocate memory \n");
#else
    printf(" Failed to allocate memory \n");
 80014bc:	48a8      	ldr	r0, [pc, #672]	@ (8001760 <adBmsReadData+0x390>)
 80014be:	f012 ff93 	bl	80143e8 <puts>
#endif
    exit(0);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f011 f884 	bl	80125d0 <exit>
  }
  else
  {
    spiReadData(tIC, &cmd_arg[0], &read_buffer[0], &pec_error[0], &cmd_count[0], regData_size);
 80014c8:	7bf8      	ldrb	r0, [r7, #15]
 80014ca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	f7ff fe71 	bl	80011c0 <spiReadData>
    switch (type)
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	2b12      	cmp	r3, #18
 80014e2:	f200 849e 	bhi.w	8001e22 <adBmsReadData+0xa52>
 80014e6:	a201      	add	r2, pc, #4	@ (adr r2, 80014ec <adBmsReadData+0x11c>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	080015a3 	.word	0x080015a3
 80014f0:	08001745 	.word	0x08001745
 80014f4:	080017b7 	.word	0x080017b7
 80014f8:	0800181f 	.word	0x0800181f
 80014fc:	080018ed 	.word	0x080018ed
 8001500:	0800160d 	.word	0x0800160d
 8001504:	08001675 	.word	0x08001675
 8001508:	080016dd 	.word	0x080016dd
 800150c:	08001539 	.word	0x08001539
 8001510:	08001887 	.word	0x08001887
 8001514:	08001955 	.word	0x08001955
 8001518:	08001e23 	.word	0x08001e23
 800151c:	080019bb 	.word	0x080019bb
 8001520:	08001a23 	.word	0x08001a23
 8001524:	08001a8b 	.word	0x08001a8b
 8001528:	08001b5b 	.word	0x08001b5b
 800152c:	08001c2b 	.word	0x08001c2b
 8001530:	08001af3 	.word	0x08001af3
 8001534:	08001cfb 	.word	0x08001cfb
    {
    case Config:
      adBms6830ParseConfig(tIC, ic, group, &read_buffer[0]);
 8001538:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800153c:	7bf8      	ldrb	r0, [r7, #15]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	f001 f9a3 	bl	800288c <adBms6830ParseConfig>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800154c:	e022      	b.n	8001594 <adBmsReadData+0x1c4>
      {							
        ic[cic].cccrc.cfgr_pec = pec_error[cic];
 800154e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	441a      	add	r2, r3
 8001556:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800155a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	440b      	add	r3, r1
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 800156c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	441a      	add	r2, r3
 8001574:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001578:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	440b      	add	r3, r1
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800158a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800158e:	3301      	adds	r3, #1
 8001590:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001594:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3d7      	bcc.n	800154e <adBmsReadData+0x17e>
      }
      break;
 800159e:	f000 bc41 	b.w	8001e24 <adBmsReadData+0xa54>
      
    case Cell:
      adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 80015a2:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80015a6:	7bf8      	ldrb	r0, [r7, #15]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	f001 f990 	bl	80028d0 <adBms6830ParseCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015b6:	e022      	b.n	80015fe <adBmsReadData+0x22e>
      {							
        ic[cic].cccrc.cell_pec = pec_error[cic];
 80015b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	441a      	add	r2, r3
 80015c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	440b      	add	r3, r1
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80015d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	441a      	add	r2, r3
 80015de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	440b      	add	r3, r1
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015f8:	3301      	adds	r3, #1
 80015fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015fe:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3d7      	bcc.n	80015b8 <adBmsReadData+0x1e8>
//        printf("%X \n", pec_error[cic]);
//        printf("%X \n", cmd_count[cic]);
      }
      break;
 8001608:	f000 bc0c 	b.w	8001e24 <adBmsReadData+0xa54>
      
    case AvgCell:
      adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 800160c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001610:	7bf8      	ldrb	r0, [r7, #15]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	f001 fc37 	bl	8002e88 <adBms6830ParseAverageCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001620:	e022      	b.n	8001668 <adBmsReadData+0x298>
      {							
        ic[cic].cccrc.acell_pec = pec_error[cic];
 8001622:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	441a      	add	r2, r3
 800162a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800162e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	440b      	add	r3, r1
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001640:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	441a      	add	r2, r3
 8001648:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800164c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	440b      	add	r3, r1
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800165e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001662:	3301      	adds	r3, #1
 8001664:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001668:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	429a      	cmp	r2, r3
 8001670:	d3d7      	bcc.n	8001622 <adBmsReadData+0x252>
      }
      break;
 8001672:	e3d7      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case S_volt:
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[0]);
 8001674:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001678:	7bf8      	ldrb	r0, [r7, #15]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	f001 feff 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001688:	e022      	b.n	80016d0 <adBmsReadData+0x300>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 800168a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	441a      	add	r2, r3
 8001692:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001696:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	440b      	add	r3, r1
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80016a8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	441a      	add	r2, r3
 80016b0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016b4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	440b      	add	r3, r1
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80016c6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016ca:	3301      	adds	r3, #1
 80016cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80016d0:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3d7      	bcc.n	800168a <adBmsReadData+0x2ba>
      }
      break;
 80016da:	e3a3      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case F_volt:
      adBms6830ParseFCell(tIC, ic, group, &read_buffer[0]);
 80016dc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80016e0:	7bf8      	ldrb	r0, [r7, #15]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	f002 f9c7 	bl	8003a78 <adBms6830ParseFCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80016f0:	e022      	b.n	8001738 <adBmsReadData+0x368>
      {							
        ic[cic].cccrc.fcell_pec = pec_error[cic];
 80016f2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	441a      	add	r2, r3
 80016fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016fe:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	440b      	add	r3, r1
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001710:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	441a      	add	r2, r3
 8001718:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800171c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	440b      	add	r3, r1
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800172e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001732:	3301      	adds	r3, #1
 8001734:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001738:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3d7      	bcc.n	80016f2 <adBmsReadData+0x322>
      }
      break;
 8001742:	e36f      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Aux:
      adBms6830ParseAux(tIC, ic, group, &read_buffer[0]);
 8001744:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001748:	7bf8      	ldrb	r0, [r7, #15]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	f002 fc8f 	bl	8004070 <adBms6830ParseAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001752:	2300      	movs	r3, #0
 8001754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001758:	e027      	b.n	80017aa <adBmsReadData+0x3da>
 800175a:	bf00      	nop
 800175c:	08016e4c 	.word	0x08016e4c
 8001760:	08016e6c 	.word	0x08016e6c
      {
        ic[cic].cccrc.aux_pec = pec_error[cic];
 8001764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	441a      	add	r2, r3
 800176c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001770:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	440b      	add	r3, r1
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	441a      	add	r2, r3
 800178a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800178e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	440b      	add	r3, r1
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80017a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017a4:	3301      	adds	r3, #1
 80017a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3d7      	bcc.n	8001764 <adBmsReadData+0x394>
      }
      break;
 80017b4:	e336      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case RAux:
      adBms6830ParseRAux(tIC, ic, group, &read_buffer[0]);
 80017b6:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80017ba:	7bf8      	ldrb	r0, [r7, #15]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	f002 fea6 	bl	8004510 <adBms6830ParseRAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80017ca:	e022      	b.n	8001812 <adBmsReadData+0x442>
      {
        ic[cic].cccrc.raux_pec = pec_error[cic];
 80017cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	441a      	add	r2, r3
 80017d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017d8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	440b      	add	r3, r1
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80017ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	441a      	add	r2, r3
 80017f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017f6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	440b      	add	r3, r1
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800180c:	3301      	adds	r3, #1
 800180e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001812:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3d7      	bcc.n	80017cc <adBmsReadData+0x3fc>
      }
      break;
 800181c:	e302      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Status:
      adBms6830ParseStatus(tIC, ic, group, &read_buffer[0]);
 800181e:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001822:	7bf8      	ldrb	r0, [r7, #15]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	f003 ff44 	bl	80056b4 <adBms6830ParseStatus>
      for (uint8_t cic = 0; cic < tIC; cic++)
 800182c:	2300      	movs	r3, #0
 800182e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001832:	e022      	b.n	800187a <adBmsReadData+0x4aa>
      {
        ic[cic].cccrc.stat_pec = pec_error[cic];
 8001834:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	441a      	add	r2, r3
 800183c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001840:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	440b      	add	r3, r1
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001852:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	441a      	add	r2, r3
 800185a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800185e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	440b      	add	r3, r1
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001870:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001874:	3301      	adds	r3, #1
 8001876:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800187a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3d7      	bcc.n	8001834 <adBmsReadData+0x464>
      }
      break;
 8001884:	e2ce      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Comm:
      adBms6830ParseComm(tIC, ic, &read_buffer[0]);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 ff8b 	bl	80057a8 <adBms6830ParseComm>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001892:	2300      	movs	r3, #0
 8001894:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001898:	e022      	b.n	80018e0 <adBmsReadData+0x510>
      {
        ic[cic].cccrc.comm_pec = pec_error[cic];
 800189a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	441a      	add	r2, r3
 80018a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018a6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	440b      	add	r3, r1
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80018b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	441a      	add	r2, r3
 80018c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018c4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	440b      	add	r3, r1
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80018d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018da:	3301      	adds	r3, #1
 80018dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80018e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d3d7      	bcc.n	800189a <adBmsReadData+0x4ca>
      }
      break;
 80018ea:	e29b      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Pwm:
      adBms6830ParsePwm(tIC, ic, group, &read_buffer[0]);
 80018ec:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80018f0:	7bf8      	ldrb	r0, [r7, #15]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	f004 fa73 	bl	8005de0 <adBms6830ParsePwm>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001900:	e022      	b.n	8001948 <adBmsReadData+0x578>
      {
        ic[cic].cccrc.pwm_pec = pec_error[cic];
 8001902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	441a      	add	r2, r3
 800190a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800190e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	440b      	add	r3, r1
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	f883 2199 	strb.w	r2, [r3, #409]	@ 0x199
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001920:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	441a      	add	r2, r3
 8001928:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800192c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	440b      	add	r3, r1
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800193e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001942:	3301      	adds	r3, #1
 8001944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001948:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3d7      	bcc.n	8001902 <adBmsReadData+0x532>
      }
      break;
 8001952:	e267      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Sid:
      adBms6830ParseSID(tIC, ic, &read_buffer[0]);
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f803 	bl	8005966 <adBms6830ParseSID>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001960:	2300      	movs	r3, #0
 8001962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001966:	e022      	b.n	80019ae <adBmsReadData+0x5de>
      {
        ic[cic].cccrc.sid_pec = pec_error[cic];
 8001968:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	441a      	add	r2, r3
 8001970:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001974:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	440b      	add	r3, r1
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001986:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	441a      	add	r2, r3
 800198e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001992:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	440b      	add	r3, r1
 800199e:	7812      	ldrb	r2, [r2, #0]
 80019a0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80019a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80019a8:	3301      	adds	r3, #1
 80019aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80019ae:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3d7      	bcc.n	8001968 <adBmsReadData+0x598>
      }
      break;
 80019b8:	e234      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdcvall:
      /* 32 byte cell data + 2 byte pec */
      adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 80019ba:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80019be:	7bf8      	ldrb	r0, [r7, #15]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	f000 ff84 	bl	80028d0 <adBms6830ParseCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80019ce:	e022      	b.n	8001a16 <adBmsReadData+0x646>
      {							
        ic[cic].cccrc.cell_pec = pec_error[cic];
 80019d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	441a      	add	r2, r3
 80019d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019dc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	440b      	add	r3, r1
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80019ee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	441a      	add	r2, r3
 80019f6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019fa:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	440b      	add	r3, r1
 8001a06:	7812      	ldrb	r2, [r2, #0]
 8001a08:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001a10:	3301      	adds	r3, #1
 8001a12:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001a16:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3d7      	bcc.n	80019d0 <adBmsReadData+0x600>
      }
      break;
 8001a20:	e200      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdacall:
      /* 32 byte avg cell data + 2 byte pec */
      adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 8001a22:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001a26:	7bf8      	ldrb	r0, [r7, #15]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	f001 fa2c 	bl	8002e88 <adBms6830ParseAverageCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001a36:	e022      	b.n	8001a7e <adBmsReadData+0x6ae>
      {							
        ic[cic].cccrc.acell_pec = pec_error[cic];
 8001a38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	441a      	add	r2, r3
 8001a40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a44:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	440b      	add	r3, r1
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001a56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	441a      	add	r2, r3
 8001a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a62:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001a7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3d7      	bcc.n	8001a38 <adBmsReadData+0x668>
      }
      break;
 8001a88:	e1cc      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdsall:
      /* 32 byte scell volt data + 2 byte pec */
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[0]);
 8001a8a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001a8e:	7bf8      	ldrb	r0, [r7, #15]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	f001 fcf4 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a9e:	e022      	b.n	8001ae6 <adBmsReadData+0x716>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 8001aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aac:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	440b      	add	r3, r1
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ae6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3d7      	bcc.n	8001aa0 <adBmsReadData+0x6d0>
      }
      break;
 8001af0:	e198      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdfcall:
      /* 32 byte fcell data + 2 byte pec */
      adBms6830ParseFCell(tIC, ic, group, &read_buffer[0]);
 8001af2:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001af6:	7bf8      	ldrb	r0, [r7, #15]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	f001 ffbc 	bl	8003a78 <adBms6830ParseFCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b06:	e022      	b.n	8001b4e <adBmsReadData+0x77e>
      {							
        ic[cic].cccrc.fcell_pec = pec_error[cic];
 8001b08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	441a      	add	r2, r3
 8001b10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b14:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	440b      	add	r3, r1
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001b26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	441a      	add	r2, r3
 8001b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b32:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b4e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3d7      	bcc.n	8001b08 <adBmsReadData+0x738>
      }
      break;
 8001b58:	e164      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdcsall:
      /* 64 byte + 2 byte pec = 32 byte cell data + 32 byte scell volt data */
      adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 8001b5a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001b5e:	7bf8      	ldrb	r0, [r7, #15]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	f000 feb4 	bl	80028d0 <adBms6830ParseCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001b6e:	e022      	b.n	8001bb6 <adBmsReadData+0x7e6>
      {							
        ic[cic].cccrc.cell_pec = pec_error[cic];
 8001b70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	441a      	add	r2, r3
 8001b78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b7c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	440b      	add	r3, r1
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001b8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	441a      	add	r2, r3
 8001b96:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b9a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	7812      	ldrb	r2, [r2, #0]
 8001ba8:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001bac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001bb6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3d7      	bcc.n	8001b70 <adBmsReadData+0x7a0>
      }
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[32]);
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001bc8:	7bf8      	ldrb	r0, [r7, #15]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	f001 fc58 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001bd6:	e022      	b.n	8001c1e <adBmsReadData+0x84e>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 8001bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	441a      	add	r2, r3
 8001be0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001be4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	440b      	add	r3, r1
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c02:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001c14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001c1e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3d7      	bcc.n	8001bd8 <adBmsReadData+0x808>
      }
      break;
 8001c28:	e0fc      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdacsall:
      /* 64 byte + 2 byte pec = 32 byte avg cell data + 32 byte scell volt data */
      adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 8001c2a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001c2e:	7bf8      	ldrb	r0, [r7, #15]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	f001 f928 	bl	8002e88 <adBms6830ParseAverageCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001c3e:	e022      	b.n	8001c86 <adBmsReadData+0x8b6>
      {							
        ic[cic].cccrc.acell_pec = pec_error[cic];
 8001c40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	441a      	add	r2, r3
 8001c48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c4c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	440b      	add	r3, r1
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	441a      	add	r2, r3
 8001c66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c6a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	440b      	add	r3, r1
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c80:	3301      	adds	r3, #1
 8001c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001c86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3d7      	bcc.n	8001c40 <adBmsReadData+0x870>
      }
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[32]);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	3320      	adds	r3, #32
 8001c94:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001c98:	7bf8      	ldrb	r0, [r7, #15]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	f001 fbf0 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001ca6:	e022      	b.n	8001cee <adBmsReadData+0x91e>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 8001ca8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	441a      	add	r2, r3
 8001cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cb4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	440b      	add	r3, r1
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001cc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	441a      	add	r2, r3
 8001cce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cd2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	440b      	add	r3, r1
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001ce4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001cee:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3d7      	bcc.n	8001ca8 <adBmsReadData+0x8d8>
      }
      break;
 8001cf8:	e094      	b.n	8001e24 <adBmsReadData+0xa54>
    case Rdasall:
      /* 68 byte + 2 byte pec: 
      24 byte gpio data + 20 byte Redundant gpio data +
      24 byte status A(6 byte), B(6 byte), C(4 byte), D(6 byte) & E(2 byte)
      */
      adBms6830ParseAux(tIC, ic, group, &read_buffer[0]);
 8001cfa:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001cfe:	7bf8      	ldrb	r0, [r7, #15]
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	f002 f9b4 	bl	8004070 <adBms6830ParseAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001d0e:	e022      	b.n	8001d56 <adBmsReadData+0x986>
      {
        ic[cic].cccrc.aux_pec = pec_error[cic];
 8001d10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	441a      	add	r2, r3
 8001d18:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d1c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	440b      	add	r3, r1
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001d2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	441a      	add	r2, r3
 8001d36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d3a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	440b      	add	r3, r1
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001d4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d50:	3301      	adds	r3, #1
 8001d52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001d56:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3d7      	bcc.n	8001d10 <adBmsReadData+0x940>
      }
      adBms6830ParseRAux(tIC, ic, group, &read_buffer[24]);
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	3318      	adds	r3, #24
 8001d64:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001d68:	7bf8      	ldrb	r0, [r7, #15]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	f002 fbd0 	bl	8004510 <adBms6830ParseRAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3020 	strb.w	r3, [r7, #32]
 8001d76:	e022      	b.n	8001dbe <adBmsReadData+0x9ee>
      {
        ic[cic].cccrc.raux_pec = pec_error[cic];
 8001d78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	441a      	add	r2, r3
 8001d80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d84:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	440b      	add	r3, r1
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001d96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001da2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	440b      	add	r3, r1
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001db4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001db8:	3301      	adds	r3, #1
 8001dba:	f887 3020 	strb.w	r3, [r7, #32]
 8001dbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3d7      	bcc.n	8001d78 <adBmsReadData+0x9a8>
      }
      adBms6830ParseStatus(tIC, ic, group, &read_buffer[44]);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	332c      	adds	r3, #44	@ 0x2c
 8001dcc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001dd0:	7bf8      	ldrb	r0, [r7, #15]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	f003 fc6e 	bl	80056b4 <adBms6830ParseStatus>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	77fb      	strb	r3, [r7, #31]
 8001ddc:	e01c      	b.n	8001e18 <adBmsReadData+0xa48>
      {
        ic[cic].cccrc.stat_pec = pec_error[cic];
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	441a      	add	r2, r3
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
 8001de6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	440b      	add	r3, r1
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001df8:	7ffb      	ldrb	r3, [r7, #31]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	441a      	add	r2, r3
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	3301      	adds	r3, #1
 8001e16:	77fb      	strb	r3, [r7, #31]
 8001e18:	7ffa      	ldrb	r2, [r7, #31]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3de      	bcc.n	8001dde <adBmsReadData+0xa0e>
      }
      break;
 8001e20:	e000      	b.n	8001e24 <adBmsReadData+0xa54>
      
    default:
      break;
 8001e22:	bf00      	nop
    }
  }
  free(read_buffer);
 8001e24:	69b8      	ldr	r0, [r7, #24]
 8001e26:	f010 feb7 	bl	8012b98 <free>
  free(pec_error); 
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f010 feb4 	bl	8012b98 <free>
  free(cmd_count); 
 8001e30:	6938      	ldr	r0, [r7, #16]
 8001e32:	f010 feb1 	bl	8012b98 <free>
}
 8001e36:	bf00      	nop
 8001e38:	3738      	adds	r7, #56	@ 0x38
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <spiWriteData>:
(
uint8_t tIC, 
uint8_t tx_cmd[2], 
uint8_t *data
)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	@ 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	73fb      	strb	r3, [r7, #15]
  uint8_t BYTES_IN_REG = TX_DATA;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t CMD_LEN = 4 + (RX_DATA * tIC);
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint16_t data_pec, cmd_pec;
  uint8_t *cmd, copyArray[TX_DATA], src_address = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t cmd_index;
  cmd = (uint8_t *)calloc(CMD_LEN, sizeof(uint8_t)); 
 8001e66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f010 fb93 	bl	8012598 <calloc>
 8001e72:	4603      	mov	r3, r0
 8001e74:	61fb      	str	r3, [r7, #28]
  if(cmd == NULL)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <spiWriteData+0x48>
  {
#ifdef MBED
    pc.printf(" Failed to allocate cmd array memory \n");
#else
    printf(" Failed to allocate cmd array memory \n");
 8001e7c:	4851      	ldr	r0, [pc, #324]	@ (8001fc4 <spiWriteData+0x184>)
 8001e7e:	f012 fab3 	bl	80143e8 <puts>
#endif  
    exit(0);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f010 fba4 	bl	80125d0 <exit>
  }
  else
  {
    cmd[0] = tx_cmd[0];
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3301      	adds	r3, #1
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	7852      	ldrb	r2, [r2, #1]
 8001e98:	701a      	strb	r2, [r3, #0]
    cmd_pec = Pec15_Calc(2, cmd);
 8001e9a:	69f9      	ldr	r1, [r7, #28]
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff f8c7 	bl	8001030 <Pec15_Calc>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	837b      	strh	r3, [r7, #26]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001ea6:	8b7b      	ldrh	r3, [r7, #26]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t)(cmd_pec);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3303      	adds	r3, #3
 8001eb8:	8b7a      	ldrh	r2, [r7, #26]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
    cmd_index = 4;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* executes for each LTC68xx, this loops starts with the last IC on the stack */
    for (uint8_t current_ic = tIC; current_ic > 0; current_ic--)                
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001eca:	e064      	b.n	8001f96 <spiWriteData+0x156>
    {                                                                         
      src_address = ((current_ic-1) * TX_DATA); 
 8001ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	0052      	lsls	r2, r2, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3b06      	subs	r3, #6
 8001edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      /* The first configuration written is received by the last IC in the daisy chain */
      for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001ee6:	e01d      	b.n	8001f24 <spiWriteData+0xe4>
      {
        cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001efc:	4413      	add	r3, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	441a      	add	r2, r3
 8001f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f08:	69f9      	ldr	r1, [r7, #28]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 1;
 8001f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f14:	3301      	adds	r3, #1
 8001f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001f1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001f24:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001f28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3db      	bcc.n	8001ee8 <spiWriteData+0xa8>
      }
      /* Copy each ic correspond data + pec value for calculate data pec */
      memcpy(&copyArray[0], &data[src_address], TX_DATA); /* dst, src, size */
 8001f30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	18d1      	adds	r1, r2, r3
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2206      	movs	r2, #6
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f012 fab6 	bl	80144b0 <memcpy>
      /* calculating the PEC for each Ics configuration register data */
      data_pec = (uint16_t)pec10_calc(false, BYTES_IN_REG, &copyArray[0]);  
 8001f44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f48:	f107 0210 	add.w	r2, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff f8a2 	bl	8001098 <pec10_calc>
 8001f54:	4603      	mov	r3, r0
 8001f56:	833b      	strh	r3, [r7, #24]
      cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8001f58:	8b3b      	ldrh	r3, [r7, #24]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	b299      	uxth	r1, r3
 8001f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8001f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      cmd[cmd_index] = (uint8_t)data_pec;
 8001f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	8b3a      	ldrh	r2, [r7, #24]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8001f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f86:	3301      	adds	r3, #1
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for (uint8_t current_ic = tIC; current_ic > 0; current_ic--)                
 8001f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f90:	3b01      	subs	r3, #1
 8001f92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d196      	bne.n	8001ecc <spiWriteData+0x8c>
    }
    adBmsCsLow();
 8001f9e:	f005 f8df 	bl	8007160 <adBmsCsLow>
    spiWriteBytes(CMD_LEN, &cmd[0]);
 8001fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	69f9      	ldr	r1, [r7, #28]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 f8f0 	bl	8007190 <spiWriteBytes>
    adBmsCsHigh();
 8001fb0:	f005 f8e2 	bl	8007178 <adBmsCsHigh>
  }
  free(cmd); 
 8001fb4:	69f8      	ldr	r0, [r7, #28]
 8001fb6:	f010 fdef 	bl	8012b98 <free>
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08016e88 	.word	0x08016e88

08001fc8 <adBmsWriteData>:
* @return None 
*
*******************************************************************************
*/
void adBmsWriteData(uint8_t tIC, cell_asic *ic, uint8_t cmd_arg[2], TYPE type, GRP group)
{	  
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	73bb      	strb	r3, [r7, #14]
  uint8_t data_len = TX_DATA, write_size = (TX_DATA * tIC);
 8001fdc:	2306      	movs	r3, #6
 8001fde:	76fb      	strb	r3, [r7, #27]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	0052      	lsls	r2, r2, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	76bb      	strb	r3, [r7, #26]
  uint8_t *write_buffer = (uint8_t *)calloc(write_size, sizeof(uint8_t));
 8001fec:	7ebb      	ldrb	r3, [r7, #26]
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f010 fad1 	bl	8012598 <calloc>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	617b      	str	r3, [r7, #20]
  if(write_buffer == NULL)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <adBmsWriteData+0x44>
  {
#ifdef MBED
    pc.printf(" Failed to allocate write_buffer array memory \n");
#else
    printf(" Failed to allocate write_buffer array memory \n");
 8002000:	48bb      	ldr	r0, [pc, #748]	@ (80022f0 <adBmsWriteData+0x328>)
 8002002:	f012 f9f1 	bl	80143e8 <puts>
#endif
    exit(0);
 8002006:	2000      	movs	r0, #0
 8002008:	f010 fae2 	bl	80125d0 <exit>
  }
  else
  {
    switch (type)
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	3b04      	subs	r3, #4
 8002010:	2b07      	cmp	r3, #7
 8002012:	f200 816f 	bhi.w	80022f4 <adBmsWriteData+0x32c>
 8002016:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <adBmsWriteData+0x54>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	080021af 	.word	0x080021af
 8002020:	080022f5 	.word	0x080022f5
 8002024:	080022f5 	.word	0x080022f5
 8002028:	080022f5 	.word	0x080022f5
 800202c:	0800203d 	.word	0x0800203d
 8002030:	08002139 	.word	0x08002139
 8002034:	080022f5 	.word	0x080022f5
 8002038:	08002293 	.word	0x08002293
    {	   
    case Config:	
      switch (group)
 800203c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <adBmsWriteData+0x82>
 8002044:	2b02      	cmp	r3, #2
 8002046:	d03b      	beq.n	80020c0 <adBmsWriteData+0xf8>
          }		
        }
        break;

      default:
    	  break;
 8002048:	e075      	b.n	8002136 <adBmsWriteData+0x16e>
        adBms6830CreateConfiga(tIC, &ic[0]);
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fee7 	bl	8005e22 <adBms6830CreateConfiga>
        for (uint8_t cic = 0; cic < tIC; cic++)
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800205a:	e02b      	b.n	80020b4 <adBmsWriteData+0xec>
          for (uint8_t data = 0; data < data_len; data++)
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002062:	e01d      	b.n	80020a0 <adBmsWriteData+0xd8>
            write_buffer[(cic * data_len) + data] = ic[cic].configa.tx_data[data];
 8002064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002068:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	18d1      	adds	r1, r2, r3
 8002074:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800207c:	7ef8      	ldrb	r0, [r7, #27]
 800207e:	fb03 f000 	mul.w	r0, r3, r0
 8002082:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002086:	4403      	add	r3, r0
 8002088:	4618      	mov	r0, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	4403      	add	r3, r0
 800208e:	440a      	add	r2, r1
 8002090:	f892 211f 	ldrb.w	r2, [r2, #287]	@ 0x11f
 8002094:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 8002096:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800209a:	3301      	adds	r3, #1
 800209c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80020a4:	7efb      	ldrb	r3, [r7, #27]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3dc      	bcc.n	8002064 <adBmsWriteData+0x9c>
        for (uint8_t cic = 0; cic < tIC; cic++)
 80020aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020ae:	3301      	adds	r3, #1
 80020b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3ce      	bcc.n	800205c <adBmsWriteData+0x94>
        break;
 80020be:	e03a      	b.n	8002136 <adBmsWriteData+0x16e>
        adBms6830CreateConfigb(tIC, &ic[0]);
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 ffbc 	bl	8006042 <adBms6830CreateConfigb>
        for (uint8_t cic = 0; cic < tIC; cic++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80020d0:	e02b      	b.n	800212a <adBmsWriteData+0x162>
          for (uint8_t data = 0; data < data_len; data++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80020d8:	e01d      	b.n	8002116 <adBmsWriteData+0x14e>
            write_buffer[(cic * data_len) + data] = ic[cic].configb.tx_data[data];
 80020da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020de:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	18d1      	adds	r1, r2, r3
 80020ea:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020f2:	7ef8      	ldrb	r0, [r7, #27]
 80020f4:	fb03 f000 	mul.w	r0, r3, r0
 80020f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020fc:	4403      	add	r3, r0
 80020fe:	4618      	mov	r0, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4403      	add	r3, r0
 8002104:	440a      	add	r2, r1
 8002106:	f892 212d 	ldrb.w	r2, [r2, #301]	@ 0x12d
 800210a:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 800210c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002116:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800211a:	7efb      	ldrb	r3, [r7, #27]
 800211c:	429a      	cmp	r2, r3
 800211e:	d3dc      	bcc.n	80020da <adBmsWriteData+0x112>
        for (uint8_t cic = 0; cic < tIC; cic++)
 8002120:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002124:	3301      	adds	r3, #1
 8002126:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800212a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3ce      	bcc.n	80020d2 <adBmsWriteData+0x10a>
        break;
 8002134:	bf00      	nop
      }
      break;
 8002136:	e0de      	b.n	80022f6 <adBmsWriteData+0x32e>
      
    case Comm:
      adBms6830CreateComm(tIC, &ic[0]);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	4618      	mov	r0, r3
 800213e:	f004 f990 	bl	8006462 <adBms6830CreateComm>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8002142:	2300      	movs	r3, #0
 8002144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002148:	e02b      	b.n	80021a2 <adBmsWriteData+0x1da>
      {
        for (uint8_t data = 0; data < data_len; data++)
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002150:	e01d      	b.n	800218e <adBmsWriteData+0x1c6>
        {
          write_buffer[(cic * data_len) + data] = ic[cic].com.tx_data[data];
 8002152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002156:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	18d1      	adds	r1, r2, r3
 8002162:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002166:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800216a:	7ef8      	ldrb	r0, [r7, #27]
 800216c:	fb03 f000 	mul.w	r0, r3, r0
 8002170:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002174:	4403      	add	r3, r0
 8002176:	4618      	mov	r0, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4403      	add	r3, r0
 800217c:	440a      	add	r2, r1
 800217e:	f892 2157 	ldrb.w	r2, [r2, #343]	@ 0x157
 8002182:	701a      	strb	r2, [r3, #0]
        for (uint8_t data = 0; data < data_len; data++)
 8002184:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002188:	3301      	adds	r3, #1
 800218a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800218e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002192:	7efb      	ldrb	r3, [r7, #27]
 8002194:	429a      	cmp	r2, r3
 8002196:	d3dc      	bcc.n	8002152 <adBmsWriteData+0x18a>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8002198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800219c:	3301      	adds	r3, #1
 800219e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021a2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d3ce      	bcc.n	800214a <adBmsWriteData+0x182>
        }	
      }
      break;
 80021ac:	e0a3      	b.n	80022f6 <adBmsWriteData+0x32e>
      
    case Pwm:
      switch (group)
 80021ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <adBmsWriteData+0x1f4>
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d03b      	beq.n	8002232 <adBmsWriteData+0x26a>
          }	
        }
        break;

      default:
    	  break;
 80021ba:	e069      	b.n	8002290 <adBmsWriteData+0x2c8>
        adBms6830CreatePwma(tIC, &ic[0]);
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f004 fa0b 	bl	80065dc <adBms6830CreatePwma>
        for (uint8_t cic = 0; cic < tIC; cic++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80021cc:	e02b      	b.n	8002226 <adBmsWriteData+0x25e>
          for (uint8_t data = 0; data < data_len; data++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3020 	strb.w	r3, [r7, #32]
 80021d4:	e01d      	b.n	8002212 <adBmsWriteData+0x24a>
            write_buffer[(cic * data_len) + data] = ic[cic].pwma.tx_data[data];
 80021d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80021da:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	18d1      	adds	r1, r2, r3
 80021e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80021ee:	7ef8      	ldrb	r0, [r7, #27]
 80021f0:	fb03 f000 	mul.w	r0, r3, r0
 80021f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021f8:	4403      	add	r3, r0
 80021fa:	4618      	mov	r0, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4403      	add	r3, r0
 8002200:	440a      	add	r2, r1
 8002202:	f892 2165 	ldrb.w	r2, [r2, #357]	@ 0x165
 8002206:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 8002208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800220c:	3301      	adds	r3, #1
 800220e:	f887 3020 	strb.w	r3, [r7, #32]
 8002212:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002216:	7efb      	ldrb	r3, [r7, #27]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3dc      	bcc.n	80021d6 <adBmsWriteData+0x20e>
        for (uint8_t cic = 0; cic < tIC; cic++)
 800221c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002220:	3301      	adds	r3, #1
 8002222:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8002226:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3ce      	bcc.n	80021ce <adBmsWriteData+0x206>
        break;   
 8002230:	e02e      	b.n	8002290 <adBmsWriteData+0x2c8>
        adBms6830CreatePwmb(tIC, &ic[0]);
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fac6 	bl	80067c8 <adBms6830CreatePwmb>
        for (uint8_t cic = 0; cic < tIC; cic++)
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
 8002240:	e021      	b.n	8002286 <adBmsWriteData+0x2be>
          for (uint8_t data = 0; data < data_len; data++)
 8002242:	2300      	movs	r3, #0
 8002244:	77bb      	strb	r3, [r7, #30]
 8002246:	e017      	b.n	8002278 <adBmsWriteData+0x2b0>
            write_buffer[(cic * data_len) + data] = ic[cic].pwmb.tx_data[data];
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	18d1      	adds	r1, r2, r3
 8002256:	7fba      	ldrb	r2, [r7, #30]
 8002258:	7ffb      	ldrb	r3, [r7, #31]
 800225a:	7ef8      	ldrb	r0, [r7, #27]
 800225c:	fb03 f000 	mul.w	r0, r3, r0
 8002260:	7fbb      	ldrb	r3, [r7, #30]
 8002262:	4403      	add	r3, r0
 8002264:	4618      	mov	r0, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4403      	add	r3, r0
 800226a:	440a      	add	r2, r1
 800226c:	f892 2173 	ldrb.w	r2, [r2, #371]	@ 0x173
 8002270:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 8002272:	7fbb      	ldrb	r3, [r7, #30]
 8002274:	3301      	adds	r3, #1
 8002276:	77bb      	strb	r3, [r7, #30]
 8002278:	7fba      	ldrb	r2, [r7, #30]
 800227a:	7efb      	ldrb	r3, [r7, #27]
 800227c:	429a      	cmp	r2, r3
 800227e:	d3e3      	bcc.n	8002248 <adBmsWriteData+0x280>
        for (uint8_t cic = 0; cic < tIC; cic++)
 8002280:	7ffb      	ldrb	r3, [r7, #31]
 8002282:	3301      	adds	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	7ffa      	ldrb	r2, [r7, #31]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3d9      	bcc.n	8002242 <adBmsWriteData+0x27a>
        break;
 800228e:	bf00      	nop
      }
      break;
 8002290:	e031      	b.n	80022f6 <adBmsWriteData+0x32e>
      
    case Clrflag:	
      adBms6830CreateClrflagData(tIC, &ic[0]);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f003 ff95 	bl	80061c6 <adBms6830CreateClrflagData>
      for (uint8_t cic = 0; cic < tIC; cic++)
 800229c:	2300      	movs	r3, #0
 800229e:	777b      	strb	r3, [r7, #29]
 80022a0:	e021      	b.n	80022e6 <adBmsWriteData+0x31e>
      {
        for (uint8_t data = 0; data < data_len; data++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	773b      	strb	r3, [r7, #28]
 80022a6:	e017      	b.n	80022d8 <adBmsWriteData+0x310>
        {
          write_buffer[(cic * data_len) + data] = ic[cic].clrflag.tx_data[data];
 80022a8:	7f7b      	ldrb	r3, [r7, #29]
 80022aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	18d1      	adds	r1, r2, r3
 80022b6:	7f3a      	ldrb	r2, [r7, #28]
 80022b8:	7f7b      	ldrb	r3, [r7, #29]
 80022ba:	7ef8      	ldrb	r0, [r7, #27]
 80022bc:	fb03 f000 	mul.w	r0, r3, r0
 80022c0:	7f3b      	ldrb	r3, [r7, #28]
 80022c2:	4403      	add	r3, r0
 80022c4:	4618      	mov	r0, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4403      	add	r3, r0
 80022ca:	440a      	add	r2, r1
 80022cc:	f892 213b 	ldrb.w	r2, [r2, #315]	@ 0x13b
 80022d0:	701a      	strb	r2, [r3, #0]
        for (uint8_t data = 0; data < data_len; data++)
 80022d2:	7f3b      	ldrb	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	773b      	strb	r3, [r7, #28]
 80022d8:	7f3a      	ldrb	r2, [r7, #28]
 80022da:	7efb      	ldrb	r3, [r7, #27]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3e3      	bcc.n	80022a8 <adBmsWriteData+0x2e0>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80022e0:	7f7b      	ldrb	r3, [r7, #29]
 80022e2:	3301      	adds	r3, #1
 80022e4:	777b      	strb	r3, [r7, #29]
 80022e6:	7f7a      	ldrb	r2, [r7, #29]
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3d9      	bcc.n	80022a2 <adBmsWriteData+0x2da>
        }
      }
      break;
 80022ee:	e002      	b.n	80022f6 <adBmsWriteData+0x32e>
 80022f0:	08016eb0 	.word	0x08016eb0
      
    default:
      break;
 80022f4:	bf00      	nop
    }
  }
  adBmsWakeupIc(tIC);
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 ff7b 	bl	80071f4 <adBmsWakeupIc>
  spiWriteData(tIC, cmd_arg, &write_buffer[0]);	
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd9b 	bl	8001e40 <spiWriteData>
  free(write_buffer);
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f010 fc44 	bl	8012b98 <free>
}
 8002310:	bf00      	nop
 8002312:	3728      	adds	r7, #40	@ 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <adBms6830_Adcv>:
CONT cont,
DCP dcp,
RSTF rstf,
OW_C_S owcs
)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	4604      	mov	r4, r0
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4623      	mov	r3, r4
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	4603      	mov	r3, r0
 800232c:	71bb      	strb	r3, [r7, #6]
 800232e:	460b      	mov	r3, r1
 8002330:	717b      	strb	r3, [r7, #5]
 8002332:	4613      	mov	r3, r2
 8002334:	713b      	strb	r3, [r7, #4]
  uint8_t cmd[2];
  cmd[0] = 0x02 + rd;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	3302      	adds	r3, #2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	733b      	strb	r3, [r7, #12]
  cmd[1] = (cont<<7)+(dcp<<4)+(rstf<<2)+(owcs & 0x03) + 0x60;
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	01db      	lsls	r3, r3, #7
 8002342:	b2da      	uxtb	r2, r3
 8002344:	797b      	ldrb	r3, [r7, #5]
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4413      	add	r3, r2
 800234c:	b2da      	uxtb	r2, r3
 800234e:	793b      	ldrb	r3, [r7, #4]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b2da      	uxtb	r2, r3
 8002358:	f897 3020 	ldrb.w	r3, [r7, #32]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4413      	add	r3, r2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3360      	adds	r3, #96	@ 0x60
 8002368:	b2db      	uxtb	r3, r3
 800236a:	737b      	strb	r3, [r7, #13]
  spiSendCmd(cmd);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fefd 	bl	8001170 <spiSendCmd>
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}

0800237e <adBms6830_Snap>:
* @return None
*
*******************************************************************************
*/
void adBms6830_Snap()
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
  uint8_t cmd[2];
  cmd[0] = 0x00;
 8002384:	2300      	movs	r3, #0
 8002386:	713b      	strb	r3, [r7, #4]
  cmd[1] = 0x2D;
 8002388:	232d      	movs	r3, #45	@ 0x2d
 800238a:	717b      	strb	r3, [r7, #5]
  spiSendCmd(cmd);
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe feee 	bl	8001170 <spiSendCmd>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <adBms6830_Unsnap>:
* @return None
*
*******************************************************************************
*/
void adBms6830_Unsnap()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  uint8_t cmd[2];
  cmd[0] = 0x00;
 80023a2:	2300      	movs	r3, #0
 80023a4:	713b      	strb	r3, [r7, #4]
  cmd[1] = 0x2F;
 80023a6:	232f      	movs	r3, #47	@ 0x2f
 80023a8:	717b      	strb	r3, [r7, #5]
  spiSendCmd(cmd);
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fedf 	bl	8001170 <spiSendCmd>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <adBms6830_Adax>:
(
OW_AUX owaux, 							
PUP pup,
CH ch
)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	460b      	mov	r3, r1
 80023c6:	71bb      	strb	r3, [r7, #6]
 80023c8:	4613      	mov	r3, r2
 80023ca:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[2];
  cmd[0] = 0x04 + owaux;
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	3304      	adds	r3, #4
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	733b      	strb	r3, [r7, #12]
  cmd[1] = (pup << 7) + (((ch >>4)&0x01)<<6) + (ch & 0x0F) + 0x10;
 80023d4:	79bb      	ldrb	r3, [r7, #6]
 80023d6:	01db      	lsls	r3, r3, #7
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	797b      	ldrb	r3, [r7, #5]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	797b      	ldrb	r3, [r7, #5]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	3310      	adds	r3, #16
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	737b      	strb	r3, [r7, #13]
  spiSendCmd(cmd);
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe feb3 	bl	8001170 <spiSendCmd>
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <ConfigB_DccBits>:
 * @return uint16_t      Value suitable for the `dcc` field in Config-B.
 *
 *******************************************************************************
 */
uint16_t ConfigB_DccBits(uint16_t mask, DCC_BIT dccbit)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	460a      	mov	r2, r1
 800241c:	80fb      	strh	r3, [r7, #6]
 800241e:	4613      	mov	r3, r2
 8002420:	717b      	strb	r3, [r7, #5]
    if (dccbit == DCC_BIT_SET)
 8002422:	797b      	ldrb	r3, [r7, #5]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <ConfigB_DccBits+0x1a>
    {
        /* Enable the requested DCC bits */
        return mask;
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	e000      	b.n	800242e <ConfigB_DccBits+0x1c>
    }
    else
    {
        /* Clearing: caller should clear these bits with AND & ~mask */
        return 0;
 800242c:	2300      	movs	r3, #0
    }
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <adBms6830ParseConfiga>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfiga(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800244c:	2300      	movs	r3, #0
 800244e:	75bb      	strb	r3, [r7, #22]
 8002450:	e133      	b.n	80026ba <adBms6830ParseConfiga+0x280>
  {
    memcpy(&ic[curr_ic].configa.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8002452:	7dbb      	ldrb	r3, [r7, #22]
 8002454:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	4413      	add	r3, r2
 8002460:	f203 1025 	addw	r0, r3, #293	@ 0x125
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	2208      	movs	r2, #8
 800246c:	4619      	mov	r1, r3
 800246e:	f012 f81f 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8002472:	7dbb      	ldrb	r3, [r7, #22]
 8002474:	3301      	adds	r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	75fb      	strb	r3, [r7, #23]

    ic[curr_ic].rx_cfga.cth = (ic[curr_ic].configa.rx_data[0] & 0x07);
 800247c:	7dbb      	ldrb	r3, [r7, #22]
 800247e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4413      	add	r3, r2
 800248a:	f893 1125 	ldrb.w	r1, [r3, #293]	@ 0x125
 800248e:	7dbb      	ldrb	r3, [r7, #22]
 8002490:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	441a      	add	r2, r3
 800249c:	460b      	mov	r3, r1
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	b2d9      	uxtb	r1, r3
 80024a4:	7993      	ldrb	r3, [r2, #6]
 80024a6:	f361 0343 	bfi	r3, r1, #1, #3
 80024aa:	7193      	strb	r3, [r2, #6]
    ic[curr_ic].rx_cfga.refon   = (ic[curr_ic].configa.rx_data[0] & 0x80) >> 7;
 80024ac:	7dbb      	ldrb	r3, [r7, #22]
 80024ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	4413      	add	r3, r2
 80024ba:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80024be:	09db      	lsrs	r3, r3, #7
 80024c0:	b2d9      	uxtb	r1, r3
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	441a      	add	r2, r3
 80024d0:	460b      	mov	r3, r1
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	7993      	ldrb	r3, [r2, #6]
 80024da:	f361 0300 	bfi	r3, r1, #0, #1
 80024de:	7193      	strb	r3, [r2, #6]

    ic[curr_ic].rx_cfga.flag_d  = (ic[curr_ic].configa.rx_data[1] & 0xFF);
 80024e0:	7dbb      	ldrb	r3, [r7, #22]
 80024e2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	441a      	add	r2, r3
 80024ee:	7dbb      	ldrb	r3, [r7, #22]
 80024f0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	440b      	add	r3, r1
 80024fc:	f892 2126 	ldrb.w	r2, [r2, #294]	@ 0x126
 8002500:	71da      	strb	r2, [r3, #7]

    ic[curr_ic].rx_cfga.soakon   = (ic[curr_ic].configa.rx_data[2] & 0x80) >> 7;
 8002502:	7dbb      	ldrb	r3, [r7, #22]
 8002504:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	4413      	add	r3, r2
 8002510:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 8002514:	09db      	lsrs	r3, r3, #7
 8002516:	b2d9      	uxtb	r1, r3
 8002518:	7dbb      	ldrb	r3, [r7, #22]
 800251a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	441a      	add	r2, r3
 8002526:	460b      	mov	r3, r1
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	b2d9      	uxtb	r1, r3
 800252e:	7a13      	ldrb	r3, [r2, #8]
 8002530:	f361 0300 	bfi	r3, r1, #0, #1
 8002534:	7213      	strb	r3, [r2, #8]
    ic[curr_ic].rx_cfga.owrng    = (((ic[curr_ic].configa.rx_data[2] & 0x40) >> 6));
 8002536:	7dbb      	ldrb	r3, [r7, #22]
 8002538:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 8002548:	1199      	asrs	r1, r3, #6
 800254a:	7dbb      	ldrb	r3, [r7, #22]
 800254c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	441a      	add	r2, r3
 8002558:	460b      	mov	r3, r1
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	b2d9      	uxtb	r1, r3
 8002560:	7a13      	ldrb	r3, [r2, #8]
 8002562:	f361 0341 	bfi	r3, r1, #1, #1
 8002566:	7213      	strb	r3, [r2, #8]
    ic[curr_ic].rx_cfga.owa    = ( (ic[curr_ic].configa.rx_data[2] & 0x38) >> 3);
 8002568:	7dbb      	ldrb	r3, [r7, #22]
 800256a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 800257a:	10d9      	asrs	r1, r3, #3
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	441a      	add	r2, r3
 800258a:	460b      	mov	r3, r1
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	b2d9      	uxtb	r1, r3
 8002592:	7a13      	ldrb	r3, [r2, #8]
 8002594:	f361 0384 	bfi	r3, r1, #2, #3
 8002598:	7213      	strb	r3, [r2, #8]

    ic[curr_ic].rx_cfga.gpo        = ( (ic[curr_ic].configa.rx_data[3] & 0xFF)| ((ic[curr_ic].configa.rx_data[4] & 0x03) << 8) );
 800259a:	7dbb      	ldrb	r3, [r7, #22]
 800259c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4413      	add	r3, r2
 80025a8:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	7dbb      	ldrb	r3, [r7, #22]
 80025b0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	440b      	add	r3, r1
 80025bc:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b219      	sxth	r1, r3
 80025d0:	7dbb      	ldrb	r3, [r7, #22]
 80025d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	441a      	add	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e4:	b299      	uxth	r1, r3
 80025e6:	8913      	ldrh	r3, [r2, #8]
 80025e8:	f361 134e 	bfi	r3, r1, #5, #10
 80025ec:	8113      	strh	r3, [r2, #8]

    ic[curr_ic].rx_cfga.snap   = ((ic[curr_ic].configa.rx_data[5] & 0x20) >> 5);
 80025ee:	7dbb      	ldrb	r3, [r7, #22]
 80025f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80025f4:	fb02 f303 	mul.w	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	4413      	add	r3, r2
 80025fc:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8002600:	1159      	asrs	r1, r3, #5
 8002602:	7dbb      	ldrb	r3, [r7, #22]
 8002604:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	441a      	add	r2, r3
 8002610:	460b      	mov	r3, r1
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	b2d9      	uxtb	r1, r3
 8002618:	7a53      	ldrb	r3, [r2, #9]
 800261a:	f361 13c7 	bfi	r3, r1, #7, #1
 800261e:	7253      	strb	r3, [r2, #9]
    ic[curr_ic].rx_cfga.mute_st   = ((ic[curr_ic].configa.rx_data[5] & 0x10) >> 4);
 8002620:	7dbb      	ldrb	r3, [r7, #22]
 8002622:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	4413      	add	r3, r2
 800262e:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8002632:	1119      	asrs	r1, r3, #4
 8002634:	7dbb      	ldrb	r3, [r7, #22]
 8002636:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	441a      	add	r2, r3
 8002642:	460b      	mov	r3, r1
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	b2d9      	uxtb	r1, r3
 800264a:	7a93      	ldrb	r3, [r2, #10]
 800264c:	f361 0300 	bfi	r3, r1, #0, #1
 8002650:	7293      	strb	r3, [r2, #10]
    ic[curr_ic].rx_cfga.comm_bk   = ((ic[curr_ic].configa.rx_data[5] & 0x08) >> 3);
 8002652:	7dbb      	ldrb	r3, [r7, #22]
 8002654:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	4413      	add	r3, r2
 8002660:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8002664:	10d9      	asrs	r1, r3, #3
 8002666:	7dbb      	ldrb	r3, [r7, #22]
 8002668:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	441a      	add	r2, r3
 8002674:	460b      	mov	r3, r1
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	b2d9      	uxtb	r1, r3
 800267c:	7a93      	ldrb	r3, [r2, #10]
 800267e:	f361 0341 	bfi	r3, r1, #1, #1
 8002682:	7293      	strb	r3, [r2, #10]
    ic[curr_ic].rx_cfga.fc   = ((ic[curr_ic].configa.rx_data[5] & 0x07) >> 0);
 8002684:	7dbb      	ldrb	r3, [r7, #22]
 8002686:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4413      	add	r3, r2
 8002692:	f893 112a 	ldrb.w	r1, [r3, #298]	@ 0x12a
 8002696:	7dbb      	ldrb	r3, [r7, #22]
 8002698:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	441a      	add	r2, r3
 80026a4:	460b      	mov	r3, r1
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	b2d9      	uxtb	r1, r3
 80026ac:	7a93      	ldrb	r3, [r2, #10]
 80026ae:	f361 0384 	bfi	r3, r1, #2, #3
 80026b2:	7293      	strb	r3, [r2, #10]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80026b4:	7dbb      	ldrb	r3, [r7, #22]
 80026b6:	3301      	adds	r3, #1
 80026b8:	75bb      	strb	r3, [r7, #22]
 80026ba:	7dba      	ldrb	r2, [r7, #22]
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	429a      	cmp	r2, r3
 80026c0:	f4ff aec7 	bcc.w	8002452 <adBms6830ParseConfiga+0x18>
  }
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <adBms6830ParseConfigb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfigb(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	75bb      	strb	r3, [r7, #22]
 80026e4:	e0c8      	b.n	8002878 <adBms6830ParseConfigb+0x1aa>
  {
    memcpy(&ic[curr_ic].configb.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80026e6:	7dbb      	ldrb	r3, [r7, #22]
 80026e8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	4413      	add	r3, r2
 80026f4:	f203 1033 	addw	r0, r3, #307	@ 0x133
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	2208      	movs	r2, #8
 8002700:	4619      	mov	r1, r3
 8002702:	f011 fed5 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8002706:	7dbb      	ldrb	r3, [r7, #22]
 8002708:	3301      	adds	r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	75fb      	strb	r3, [r7, #23]

    ic[curr_ic].rx_cfgb.vuv = ((ic[curr_ic].configb.rx_data[0])  | ((ic[curr_ic].configb.rx_data[1] & 0x0F) << 8));
 8002710:	7dbb      	ldrb	r3, [r7, #22]
 8002712:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4413      	add	r3, r2
 800271e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8002722:	b21a      	sxth	r2, r3
 8002724:	7dbb      	ldrb	r3, [r7, #22]
 8002726:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	440b      	add	r3, r1
 8002732:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8002736:	b21b      	sxth	r3, r3
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	b21b      	sxth	r3, r3
 800273c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b219      	sxth	r1, r3
 8002746:	7dbb      	ldrb	r3, [r7, #22]
 8002748:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	4413      	add	r3, r2
 8002754:	b28a      	uxth	r2, r1
 8002756:	829a      	strh	r2, [r3, #20]
    ic[curr_ic].rx_cfgb.vov  = (ic[curr_ic].configb.rx_data[2]<<4)+((ic[curr_ic].configb.rx_data[1] &0xF0)>>4)  ;
 8002758:	7dbb      	ldrb	r3, [r7, #22]
 800275a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	b29a      	uxth	r2, r3
 800276e:	7dbb      	ldrb	r3, [r7, #22]
 8002770:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	440b      	add	r3, r1
 800277c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	7dbb      	ldrb	r3, [r7, #22]
 8002788:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	440b      	add	r3, r1
 8002794:	4402      	add	r2, r0
 8002796:	b292      	uxth	r2, r2
 8002798:	82da      	strh	r2, [r3, #22]
    ic[curr_ic].rx_cfgb.dtmen = (((ic[curr_ic].configb.rx_data[3] & 0x80) >> 7));
 800279a:	7dbb      	ldrb	r3, [r7, #22]
 800279c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4413      	add	r3, r2
 80027a8:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80027ac:	09db      	lsrs	r3, r3, #7
 80027ae:	b2d9      	uxtb	r1, r3
 80027b0:	7dbb      	ldrb	r3, [r7, #22]
 80027b2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	441a      	add	r2, r3
 80027be:	460b      	mov	r3, r1
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2d9      	uxtb	r1, r3
 80027c6:	7e13      	ldrb	r3, [r2, #24]
 80027c8:	f361 0300 	bfi	r3, r1, #0, #1
 80027cc:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dtrng= ((ic[curr_ic].configb.rx_data[3] & 0x40) >> 6);
 80027ce:	7dbb      	ldrb	r3, [r7, #22]
 80027d0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4413      	add	r3, r2
 80027dc:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80027e0:	1199      	asrs	r1, r3, #6
 80027e2:	7dbb      	ldrb	r3, [r7, #22]
 80027e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	441a      	add	r2, r3
 80027f0:	460b      	mov	r3, r1
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2d9      	uxtb	r1, r3
 80027f8:	7e13      	ldrb	r3, [r2, #24]
 80027fa:	f361 0341 	bfi	r3, r1, #1, #1
 80027fe:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dcto   = ((ic[curr_ic].configb.rx_data[3] & 0x3F));
 8002800:	7dbb      	ldrb	r3, [r7, #22]
 8002802:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	f893 1136 	ldrb.w	r1, [r3, #310]	@ 0x136
 8002812:	7dbb      	ldrb	r3, [r7, #22]
 8002814:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	441a      	add	r2, r3
 8002820:	460b      	mov	r3, r1
 8002822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002826:	b2d9      	uxtb	r1, r3
 8002828:	7e13      	ldrb	r3, [r2, #24]
 800282a:	f361 0387 	bfi	r3, r1, #2, #6
 800282e:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dcc = ((ic[curr_ic].configb.rx_data[4]) | ((ic[curr_ic].configb.rx_data[5] & 0xFF) << 8));
 8002830:	7dbb      	ldrb	r3, [r7, #22]
 8002832:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4413      	add	r3, r2
 800283e:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 8002842:	b21a      	sxth	r2, r3
 8002844:	7dbb      	ldrb	r3, [r7, #22]
 8002846:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	440b      	add	r3, r1
 8002852:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8002856:	b21b      	sxth	r3, r3
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	b21b      	sxth	r3, r3
 800285c:	4313      	orrs	r3, r2
 800285e:	b219      	sxth	r1, r3
 8002860:	7dbb      	ldrb	r3, [r7, #22]
 8002862:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4413      	add	r3, r2
 800286e:	b28a      	uxth	r2, r1
 8002870:	835a      	strh	r2, [r3, #26]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002872:	7dbb      	ldrb	r3, [r7, #22]
 8002874:	3301      	adds	r3, #1
 8002876:	75bb      	strb	r3, [r7, #22]
 8002878:	7dba      	ldrb	r2, [r7, #22]
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	429a      	cmp	r2, r3
 800287e:	f4ff af32 	bcc.w	80026e6 <adBms6830ParseConfigb+0x18>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <adBms6830ParseConfig>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfig(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	4613      	mov	r3, r2
 800289c:	73bb      	strb	r3, [r7, #14]
  switch (grp)
 800289e:	7bbb      	ldrb	r3, [r7, #14]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d002      	beq.n	80028aa <adBms6830ParseConfig+0x1e>
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d007      	beq.n	80028b8 <adBms6830ParseConfig+0x2c>
  case B:
    adBms6830ParseConfigb(tIC, &ic[0], &data[0]);
    break;

  default:
    break;
 80028a8:	e00d      	b.n	80028c6 <adBms6830ParseConfig+0x3a>
    adBms6830ParseConfiga(tIC, &ic[0], &data[0]);
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fdc2 	bl	800243a <adBms6830ParseConfiga>
    break;
 80028b6:	e006      	b.n	80028c6 <adBms6830ParseConfig+0x3a>
    adBms6830ParseConfigb(tIC, &ic[0], &data[0]);
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff05 	bl	80026ce <adBms6830ParseConfigb>
    break;
 80028c4:	bf00      	nop
  }
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <adBms6830ParseCell>:
 *
 *******************************************************************************
*/
/* Parse cell voltages */
void adBms6830ParseCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *cv_data)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4603      	mov	r3, r0
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	4613      	mov	r3, r2
 80028e0:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDCVALL_SIZE;}
 80028e6:	7bbb      	ldrb	r3, [r7, #14]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <adBms6830ParseCell+0x22>
 80028ec:	2322      	movs	r3, #34	@ 0x22
 80028ee:	75fb      	strb	r3, [r7, #23]
 80028f0:	e001      	b.n	80028f6 <adBms6830ParseCell+0x26>
  else {data_size = RX_DATA;}
 80028f2:	2308      	movs	r3, #8
 80028f4:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2101      	movs	r1, #1
 80028fa:	4618      	mov	r0, r3
 80028fc:	f00f fe4c 	bl	8012598 <calloc>
 8002900:	4603      	mov	r3, r0
 8002902:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <adBms6830ParseCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse cell memory \n");
    #else
    printf(" Failed to allocate parse cell memory \n");
 800290a:	488e      	ldr	r0, [pc, #568]	@ (8002b44 <adBms6830ParseCell+0x274>)
 800290c:	f011 fd6c 	bl	80143e8 <puts>
    #endif
    exit(0);
 8002910:	2000      	movs	r0, #0
 8002912:	f00f fe5d 	bl	80125d0 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002916:	2300      	movs	r3, #0
 8002918:	757b      	strb	r3, [r7, #21]
 800291a:	e2a9      	b.n	8002e70 <adBms6830ParseCell+0x5a0>
  {
    memcpy(&data[0], &cv_data[address], data_size); /* dst , src , size */
 800291c:	7dbb      	ldrb	r3, [r7, #22]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	7dfa      	ldrb	r2, [r7, #23]
 8002924:	4619      	mov	r1, r3
 8002926:	6938      	ldr	r0, [r7, #16]
 8002928:	f011 fdc2 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (data_size));
 800292c:	7d7b      	ldrb	r3, [r7, #21]
 800292e:	3301      	adds	r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	7dfa      	ldrb	r2, [r7, #23]
 8002934:	fb12 f303 	smulbb	r3, r2, r3
 8002938:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 800293a:	7bbb      	ldrb	r3, [r7, #14]
 800293c:	2b06      	cmp	r3, #6
 800293e:	f200 8293 	bhi.w	8002e68 <adBms6830ParseCell+0x598>
 8002942:	a201      	add	r2, pc, #4	@ (adr r2, 8002948 <adBms6830ParseCell+0x78>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002be9 	.word	0x08002be9
 800294c:	08002965 	.word	0x08002965
 8002950:	080029dd 	.word	0x080029dd
 8002954:	08002a55 	.word	0x08002a55
 8002958:	08002acd 	.word	0x08002acd
 800295c:	08002b49 	.word	0x08002b49
 8002960:	08002bc1 	.word	0x08002bc1
    {
    case A: /* Cell Register group A */
      ic[curr_ic].cell.c_codes[0] = (data[0] + (data[1] << 8));
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3301      	adds	r3, #1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	b29b      	uxth	r3, r3
 8002974:	4413      	add	r3, r2
 8002976:	b299      	uxth	r1, r3
 8002978:	7d7b      	ldrb	r3, [r7, #21]
 800297a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4413      	add	r3, r2
 8002986:	b20a      	sxth	r2, r1
 8002988:	841a      	strh	r2, [r3, #32]
      ic[curr_ic].cell.c_codes[1] = (data[2] + (data[3] << 8));
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	3302      	adds	r3, #2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	3303      	adds	r3, #3
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	b29b      	uxth	r3, r3
 800299c:	4413      	add	r3, r2
 800299e:	b299      	uxth	r1, r3
 80029a0:	7d7b      	ldrb	r3, [r7, #21]
 80029a2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4413      	add	r3, r2
 80029ae:	b20a      	sxth	r2, r1
 80029b0:	845a      	strh	r2, [r3, #34]	@ 0x22
      ic[curr_ic].cell.c_codes[2] = (data[4] + (data[5] << 8));
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3304      	adds	r3, #4
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3305      	adds	r3, #5
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	b299      	uxth	r1, r3
 80029c8:	7d7b      	ldrb	r3, [r7, #21]
 80029ca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4413      	add	r3, r2
 80029d6:	b20a      	sxth	r2, r1
 80029d8:	849a      	strh	r2, [r3, #36]	@ 0x24
      break;
 80029da:	e246      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case B: /* Cell Register group B */
      ic[curr_ic].cell.c_codes[3] = (data[0] + (data[1] << 8));
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	3301      	adds	r3, #1
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	b299      	uxth	r1, r3
 80029f0:	7d7b      	ldrb	r3, [r7, #21]
 80029f2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4413      	add	r3, r2
 80029fe:	b20a      	sxth	r2, r1
 8002a00:	84da      	strh	r2, [r3, #38]	@ 0x26
      ic[curr_ic].cell.c_codes[4] = (data[2] + (data[3] << 8));
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	3302      	adds	r3, #2
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	3303      	adds	r3, #3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	b299      	uxth	r1, r3
 8002a18:	7d7b      	ldrb	r3, [r7, #21]
 8002a1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	b20a      	sxth	r2, r1
 8002a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      ic[curr_ic].cell.c_codes[5] = (data[4] + (data[5] << 8));
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3305      	adds	r3, #5
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	7d7b      	ldrb	r3, [r7, #21]
 8002a42:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b20a      	sxth	r2, r1
 8002a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      break;
 8002a52:	e20a      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case C: /* Cell Register group C */
      ic[curr_ic].cell.c_codes[6] = (data[0] + (data[1] << 8));
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	b299      	uxth	r1, r3
 8002a68:	7d7b      	ldrb	r3, [r7, #21]
 8002a6a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	b20a      	sxth	r2, r1
 8002a78:	859a      	strh	r2, [r3, #44]	@ 0x2c
      ic[curr_ic].cell.c_codes[7] = (data[2] + (data[3] << 8));
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3303      	adds	r3, #3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	7d7b      	ldrb	r3, [r7, #21]
 8002a92:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b20a      	sxth	r2, r1
 8002aa0:	85da      	strh	r2, [r3, #46]	@ 0x2e
      ic[curr_ic].cell.c_codes[8] = (data[4] + (data[5] << 8));
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	3305      	adds	r3, #5
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b299      	uxth	r1, r3
 8002ab8:	7d7b      	ldrb	r3, [r7, #21]
 8002aba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b20a      	sxth	r2, r1
 8002ac8:	861a      	strh	r2, [r3, #48]	@ 0x30
      break;
 8002aca:	e1ce      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case D: /* Cell Register group D */
      ic[curr_ic].cell.c_codes[9] =  (data[0] + (data[1] << 8));
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	b299      	uxth	r1, r3
 8002ae0:	7d7b      	ldrb	r3, [r7, #21]
 8002ae2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	b20a      	sxth	r2, r1
 8002af0:	865a      	strh	r2, [r3, #50]	@ 0x32
      ic[curr_ic].cell.c_codes[10] = (data[2] + (data[3] << 8));
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3302      	adds	r3, #2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3303      	adds	r3, #3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	b299      	uxth	r1, r3
 8002b08:	7d7b      	ldrb	r3, [r7, #21]
 8002b0a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4413      	add	r3, r2
 8002b16:	b20a      	sxth	r2, r1
 8002b18:	869a      	strh	r2, [r3, #52]	@ 0x34
      ic[curr_ic].cell.c_codes[11] = (data[4] + (data[5] << 8));
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	3305      	adds	r3, #5
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	7d7b      	ldrb	r3, [r7, #21]
 8002b32:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b20a      	sxth	r2, r1
 8002b40:	86da      	strh	r2, [r3, #54]	@ 0x36
      break;
 8002b42:	e192      	b.n	8002e6a <adBms6830ParseCell+0x59a>
 8002b44:	08016ee0 	.word	0x08016ee0

    case E: /* Cell Register group E */
      ic[curr_ic].cell.c_codes[12] = (data[0] + (data[1] << 8));
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	3301      	adds	r3, #1
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	b299      	uxth	r1, r3
 8002b5c:	7d7b      	ldrb	r3, [r7, #21]
 8002b5e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4413      	add	r3, r2
 8002b6a:	b20a      	sxth	r2, r1
 8002b6c:	871a      	strh	r2, [r3, #56]	@ 0x38
      ic[curr_ic].cell.c_codes[13] = (data[2] + (data[3] << 8));
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3302      	adds	r3, #2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	3303      	adds	r3, #3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	b299      	uxth	r1, r3
 8002b84:	7d7b      	ldrb	r3, [r7, #21]
 8002b86:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	b20a      	sxth	r2, r1
 8002b94:	875a      	strh	r2, [r3, #58]	@ 0x3a
      ic[curr_ic].cell.c_codes[14] = (data[4] + (data[5] << 8));
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	3305      	adds	r3, #5
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	b299      	uxth	r1, r3
 8002bac:	7d7b      	ldrb	r3, [r7, #21]
 8002bae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	b20a      	sxth	r2, r1
 8002bbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
      break;
 8002bbe:	e154      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case F: /* Cell Register group F */
      ic[curr_ic].cell.c_codes[15] = (data[0] + (data[1] << 8));
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b299      	uxth	r1, r3
 8002bd4:	7d7b      	ldrb	r3, [r7, #21]
 8002bd6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4413      	add	r3, r2
 8002be2:	b20a      	sxth	r2, r1
 8002be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      break;
 8002be6:	e140      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].cell.c_codes[0] = (data[0] + (data[1] << 8));
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	7d7b      	ldrb	r3, [r7, #21]
 8002bfe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b20a      	sxth	r2, r1
 8002c0c:	841a      	strh	r2, [r3, #32]
      ic[curr_ic].cell.c_codes[1] = (data[2] + (data[3] << 8));
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	3302      	adds	r3, #2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	3303      	adds	r3, #3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	b299      	uxth	r1, r3
 8002c24:	7d7b      	ldrb	r3, [r7, #21]
 8002c26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	b20a      	sxth	r2, r1
 8002c34:	845a      	strh	r2, [r3, #34]	@ 0x22
      ic[curr_ic].cell.c_codes[2] = (data[4] + (data[5] << 8));
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3305      	adds	r3, #5
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	b299      	uxth	r1, r3
 8002c4c:	7d7b      	ldrb	r3, [r7, #21]
 8002c4e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b20a      	sxth	r2, r1
 8002c5c:	849a      	strh	r2, [r3, #36]	@ 0x24
      ic[curr_ic].cell.c_codes[3] = (data[6] + (data[7] << 8));
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3306      	adds	r3, #6
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	3307      	adds	r3, #7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	b299      	uxth	r1, r3
 8002c74:	7d7b      	ldrb	r3, [r7, #21]
 8002c76:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	4413      	add	r3, r2
 8002c82:	b20a      	sxth	r2, r1
 8002c84:	84da      	strh	r2, [r3, #38]	@ 0x26
      ic[curr_ic].cell.c_codes[4] = (data[8] + (data[9] << 8));
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	3309      	adds	r3, #9
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	b299      	uxth	r1, r3
 8002c9c:	7d7b      	ldrb	r3, [r7, #21]
 8002c9e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b20a      	sxth	r2, r1
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      ic[curr_ic].cell.c_codes[5] = (data[10] + (data[11] << 8));
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	330a      	adds	r3, #10
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	330b      	adds	r3, #11
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b299      	uxth	r1, r3
 8002cc4:	7d7b      	ldrb	r3, [r7, #21]
 8002cc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b20a      	sxth	r2, r1
 8002cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      ic[curr_ic].cell.c_codes[6] = (data[12] + (data[13] << 8));
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	330d      	adds	r3, #13
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	b299      	uxth	r1, r3
 8002cec:	7d7b      	ldrb	r3, [r7, #21]
 8002cee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b20a      	sxth	r2, r1
 8002cfc:	859a      	strh	r2, [r3, #44]	@ 0x2c
      ic[curr_ic].cell.c_codes[7] = (data[14] + (data[15] << 8));
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	330e      	adds	r3, #14
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	330f      	adds	r3, #15
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	b299      	uxth	r1, r3
 8002d14:	7d7b      	ldrb	r3, [r7, #21]
 8002d16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4413      	add	r3, r2
 8002d22:	b20a      	sxth	r2, r1
 8002d24:	85da      	strh	r2, [r3, #46]	@ 0x2e
      ic[curr_ic].cell.c_codes[8] = (data[16] + (data[17] << 8));
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3310      	adds	r3, #16
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	3311      	adds	r3, #17
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	7d7b      	ldrb	r3, [r7, #21]
 8002d3e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	b20a      	sxth	r2, r1
 8002d4c:	861a      	strh	r2, [r3, #48]	@ 0x30
      ic[curr_ic].cell.c_codes[9] =  (data[18] + (data[19] << 8));
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3312      	adds	r3, #18
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	3313      	adds	r3, #19
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	b299      	uxth	r1, r3
 8002d64:	7d7b      	ldrb	r3, [r7, #21]
 8002d66:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	b20a      	sxth	r2, r1
 8002d74:	865a      	strh	r2, [r3, #50]	@ 0x32
      ic[curr_ic].cell.c_codes[10] = (data[20] + (data[21] << 8));
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	3315      	adds	r3, #21
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	b299      	uxth	r1, r3
 8002d8c:	7d7b      	ldrb	r3, [r7, #21]
 8002d8e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	b20a      	sxth	r2, r1
 8002d9c:	869a      	strh	r2, [r3, #52]	@ 0x34
      ic[curr_ic].cell.c_codes[11] = (data[22] + (data[23] << 8));
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	3316      	adds	r3, #22
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	3317      	adds	r3, #23
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	b299      	uxth	r1, r3
 8002db4:	7d7b      	ldrb	r3, [r7, #21]
 8002db6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b20a      	sxth	r2, r1
 8002dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      ic[curr_ic].cell.c_codes[12] = (data[24] + (data[25] << 8));
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3319      	adds	r3, #25
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	b299      	uxth	r1, r3
 8002ddc:	7d7b      	ldrb	r3, [r7, #21]
 8002dde:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4413      	add	r3, r2
 8002dea:	b20a      	sxth	r2, r1
 8002dec:	871a      	strh	r2, [r3, #56]	@ 0x38
      ic[curr_ic].cell.c_codes[13] = (data[26] + (data[27] << 8));
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	331a      	adds	r3, #26
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	331b      	adds	r3, #27
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	b299      	uxth	r1, r3
 8002e04:	7d7b      	ldrb	r3, [r7, #21]
 8002e06:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	b20a      	sxth	r2, r1
 8002e14:	875a      	strh	r2, [r3, #58]	@ 0x3a
      ic[curr_ic].cell.c_codes[14] = (data[28] + (data[29] << 8));
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	331c      	adds	r3, #28
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	331d      	adds	r3, #29
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	b299      	uxth	r1, r3
 8002e2c:	7d7b      	ldrb	r3, [r7, #21]
 8002e2e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	b20a      	sxth	r2, r1
 8002e3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      ic[curr_ic].cell.c_codes[15] = (data[30] + (data[31] << 8));
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	331e      	adds	r3, #30
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	331f      	adds	r3, #31
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	b299      	uxth	r1, r3
 8002e54:	7d7b      	ldrb	r3, [r7, #21]
 8002e56:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	b20a      	sxth	r2, r1
 8002e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
      break;
 8002e66:	e000      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    default:
      break;
 8002e68:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002e6a:	7d7b      	ldrb	r3, [r7, #21]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	757b      	strb	r3, [r7, #21]
 8002e70:	7d7a      	ldrb	r2, [r7, #21]
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f4ff ad51 	bcc.w	800291c <adBms6830ParseCell+0x4c>
    }
  }
  free(data);
 8002e7a:	6938      	ldr	r0, [r7, #16]
 8002e7c:	f00f fe8c 	bl	8012b98 <free>
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <adBms6830ParseAverageCell>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseAverageCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *acv_data)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	4603      	mov	r3, r0
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	4613      	mov	r3, r2
 8002e98:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDACALL_SIZE;}
 8002e9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <adBms6830ParseAverageCell+0x22>
 8002ea4:	2322      	movs	r3, #34	@ 0x22
 8002ea6:	75fb      	strb	r3, [r7, #23]
 8002ea8:	e001      	b.n	8002eae <adBms6830ParseAverageCell+0x26>
  else {data_size = RX_DATA;}
 8002eaa:	2308      	movs	r3, #8
 8002eac:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00f fb70 	bl	8012598 <calloc>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <adBms6830ParseAverageCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse avg cell memory \n");
    #else
    printf(" Failed to allocate parse avg cell memory \n");
 8002ec2:	4894      	ldr	r0, [pc, #592]	@ (8003114 <adBms6830ParseAverageCell+0x28c>)
 8002ec4:	f011 fa90 	bl	80143e8 <puts>
    #endif
    exit(0);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f00f fb81 	bl	80125d0 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	757b      	strb	r3, [r7, #21]
 8002ed2:	e2c9      	b.n	8003468 <adBms6830ParseAverageCell+0x5e0>
  {
    memcpy(&data[0], &acv_data[address], data_size); /* dst , src , size */
 8002ed4:	7dbb      	ldrb	r3, [r7, #22]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	7dfa      	ldrb	r2, [r7, #23]
 8002edc:	4619      	mov	r1, r3
 8002ede:	6938      	ldr	r0, [r7, #16]
 8002ee0:	f011 fae6 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8002ee4:	7d7b      	ldrb	r3, [r7, #21]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	7dfa      	ldrb	r2, [r7, #23]
 8002eec:	fb12 f303 	smulbb	r3, r2, r3
 8002ef0:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8002ef2:	7bbb      	ldrb	r3, [r7, #14]
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	f200 82b3 	bhi.w	8003460 <adBms6830ParseAverageCell+0x5d8>
 8002efa:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <adBms6830ParseAverageCell+0x78>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	080031c1 	.word	0x080031c1
 8002f04:	08002f1d 	.word	0x08002f1d
 8002f08:	08002f9b 	.word	0x08002f9b
 8002f0c:	08003019 	.word	0x08003019
 8002f10:	08003097 	.word	0x08003097
 8002f14:	08003119 	.word	0x08003119
 8002f18:	08003197 	.word	0x08003197
    {
    case A: /* Cell Register group A */
      ic[curr_ic].acell.ac_codes[0] = (data[0] + (data[1] << 8));
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	3301      	adds	r3, #1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b299      	uxth	r1, r3
 8002f30:	7d7b      	ldrb	r3, [r7, #21]
 8002f32:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b20a      	sxth	r2, r1
 8002f40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      ic[curr_ic].acell.ac_codes[1] = (data[2] + (data[3] << 8));
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	3302      	adds	r3, #2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	3303      	adds	r3, #3
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	b299      	uxth	r1, r3
 8002f5a:	7d7b      	ldrb	r3, [r7, #21]
 8002f5c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	4413      	add	r3, r2
 8002f68:	b20a      	sxth	r2, r1
 8002f6a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      ic[curr_ic].acell.ac_codes[2] = (data[4] + (data[5] << 8));
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	3304      	adds	r3, #4
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	3305      	adds	r3, #5
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	b299      	uxth	r1, r3
 8002f84:	7d7b      	ldrb	r3, [r7, #21]
 8002f86:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	4413      	add	r3, r2
 8002f92:	b20a      	sxth	r2, r1
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      break;
 8002f98:	e263      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case B: /* Cell Register group B */
      ic[curr_ic].acell.ac_codes[3] = (data[0] + (data[1] << 8));
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	b299      	uxth	r1, r3
 8002fae:	7d7b      	ldrb	r3, [r7, #21]
 8002fb0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b20a      	sxth	r2, r1
 8002fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      ic[curr_ic].acell.ac_codes[4] = (data[2] + (data[3] << 8));
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3303      	adds	r3, #3
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b299      	uxth	r1, r3
 8002fd8:	7d7b      	ldrb	r3, [r7, #21]
 8002fda:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	b20a      	sxth	r2, r1
 8002fe8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      ic[curr_ic].acell.ac_codes[5] = (data[4] + (data[5] << 8));
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3305      	adds	r3, #5
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	b299      	uxth	r1, r3
 8003002:	7d7b      	ldrb	r3, [r7, #21]
 8003004:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	4413      	add	r3, r2
 8003010:	b20a      	sxth	r2, r1
 8003012:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      break;
 8003016:	e224      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case C: /* Cell Register group C */
      ic[curr_ic].acell.ac_codes[6] = (data[0] + (data[1] << 8));
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3301      	adds	r3, #1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	b29b      	uxth	r3, r3
 8003028:	4413      	add	r3, r2
 800302a:	b299      	uxth	r1, r3
 800302c:	7d7b      	ldrb	r3, [r7, #21]
 800302e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4413      	add	r3, r2
 800303a:	b20a      	sxth	r2, r1
 800303c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
      ic[curr_ic].acell.ac_codes[7] = (data[2] + (data[3] << 8));
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3302      	adds	r3, #2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	3303      	adds	r3, #3
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b29b      	uxth	r3, r3
 8003052:	4413      	add	r3, r2
 8003054:	b299      	uxth	r1, r3
 8003056:	7d7b      	ldrb	r3, [r7, #21]
 8003058:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	4413      	add	r3, r2
 8003064:	b20a      	sxth	r2, r1
 8003066:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      ic[curr_ic].acell.ac_codes[8] = (data[4] + (data[5] << 8));
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	3304      	adds	r3, #4
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	3305      	adds	r3, #5
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b29b      	uxth	r3, r3
 800307c:	4413      	add	r3, r2
 800307e:	b299      	uxth	r1, r3
 8003080:	7d7b      	ldrb	r3, [r7, #21]
 8003082:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4413      	add	r3, r2
 800308e:	b20a      	sxth	r2, r1
 8003090:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      break;
 8003094:	e1e5      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case D: /* Cell Register group D */
      ic[curr_ic].acell.ac_codes[9] =  (data[0] + (data[1] << 8));
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	3301      	adds	r3, #1
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	b299      	uxth	r1, r3
 80030aa:	7d7b      	ldrb	r3, [r7, #21]
 80030ac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	b20a      	sxth	r2, r1
 80030ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      ic[curr_ic].acell.ac_codes[10] = (data[2] + (data[3] << 8));
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3302      	adds	r3, #2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	3303      	adds	r3, #3
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b299      	uxth	r1, r3
 80030d4:	7d7b      	ldrb	r3, [r7, #21]
 80030d6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	b20a      	sxth	r2, r1
 80030e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
      ic[curr_ic].acell.ac_codes[11] = (data[4] + (data[5] << 8));
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	3304      	adds	r3, #4
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	3305      	adds	r3, #5
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	b299      	uxth	r1, r3
 80030fe:	7d7b      	ldrb	r3, [r7, #21]
 8003100:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	b20a      	sxth	r2, r1
 800310e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
      break;
 8003112:	e1a6      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>
 8003114:	08016f08 	.word	0x08016f08

    case E: /* Cell Register group E */
      ic[curr_ic].acell.ac_codes[12] = (data[0] + (data[1] << 8));
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	3301      	adds	r3, #1
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b29b      	uxth	r3, r3
 8003128:	4413      	add	r3, r2
 800312a:	b299      	uxth	r1, r3
 800312c:	7d7b      	ldrb	r3, [r7, #21]
 800312e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	b20a      	sxth	r2, r1
 800313c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      ic[curr_ic].acell.ac_codes[13] = (data[2] + (data[3] << 8));
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	3302      	adds	r3, #2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3303      	adds	r3, #3
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	4413      	add	r3, r2
 8003154:	b299      	uxth	r1, r3
 8003156:	7d7b      	ldrb	r3, [r7, #21]
 8003158:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4413      	add	r3, r2
 8003164:	b20a      	sxth	r2, r1
 8003166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      ic[curr_ic].acell.ac_codes[14] = (data[4] + (data[5] << 8));
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3304      	adds	r3, #4
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	3305      	adds	r3, #5
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b29b      	uxth	r3, r3
 800317c:	4413      	add	r3, r2
 800317e:	b299      	uxth	r1, r3
 8003180:	7d7b      	ldrb	r3, [r7, #21]
 8003182:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4413      	add	r3, r2
 800318e:	b20a      	sxth	r2, r1
 8003190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      break;
 8003194:	e165      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case F: /* Cell Register group F */
      ic[curr_ic].acell.ac_codes[15] = (data[0] + (data[1] << 8));
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	3301      	adds	r3, #1
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	b299      	uxth	r1, r3
 80031aa:	7d7b      	ldrb	r3, [r7, #21]
 80031ac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4413      	add	r3, r2
 80031b8:	b20a      	sxth	r2, r1
 80031ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      break;
 80031be:	e150      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].acell.ac_codes[0] = (data[0] + (data[1] << 8));
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3301      	adds	r3, #1
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	b299      	uxth	r1, r3
 80031d4:	7d7b      	ldrb	r3, [r7, #21]
 80031d6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	4413      	add	r3, r2
 80031e2:	b20a      	sxth	r2, r1
 80031e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      ic[curr_ic].acell.ac_codes[1] = (data[2] + (data[3] << 8));
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	3302      	adds	r3, #2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	3303      	adds	r3, #3
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	b299      	uxth	r1, r3
 80031fe:	7d7b      	ldrb	r3, [r7, #21]
 8003200:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	4413      	add	r3, r2
 800320c:	b20a      	sxth	r2, r1
 800320e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      ic[curr_ic].acell.ac_codes[2] = (data[4] + (data[5] << 8));
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	3304      	adds	r3, #4
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3305      	adds	r3, #5
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	b29b      	uxth	r3, r3
 8003224:	4413      	add	r3, r2
 8003226:	b299      	uxth	r1, r3
 8003228:	7d7b      	ldrb	r3, [r7, #21]
 800322a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4413      	add	r3, r2
 8003236:	b20a      	sxth	r2, r1
 8003238:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      ic[curr_ic].acell.ac_codes[3] = (data[6] + (data[7] << 8));
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	3306      	adds	r3, #6
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3307      	adds	r3, #7
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	4413      	add	r3, r2
 8003250:	b299      	uxth	r1, r3
 8003252:	7d7b      	ldrb	r3, [r7, #21]
 8003254:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4413      	add	r3, r2
 8003260:	b20a      	sxth	r2, r1
 8003262:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      ic[curr_ic].acell.ac_codes[4] = (data[8] + (data[9] << 8));
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3308      	adds	r3, #8
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3309      	adds	r3, #9
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	4413      	add	r3, r2
 800327a:	b299      	uxth	r1, r3
 800327c:	7d7b      	ldrb	r3, [r7, #21]
 800327e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	b20a      	sxth	r2, r1
 800328c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      ic[curr_ic].acell.ac_codes[5] = (data[10] + (data[11] << 8));
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	330a      	adds	r3, #10
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	330b      	adds	r3, #11
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	b299      	uxth	r1, r3
 80032a6:	7d7b      	ldrb	r3, [r7, #21]
 80032a8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80032ac:	fb02 f303 	mul.w	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4413      	add	r3, r2
 80032b4:	b20a      	sxth	r2, r1
 80032b6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      ic[curr_ic].acell.ac_codes[6] = (data[12] + (data[13] << 8));
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	330c      	adds	r3, #12
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	330d      	adds	r3, #13
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	b299      	uxth	r1, r3
 80032d0:	7d7b      	ldrb	r3, [r7, #21]
 80032d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	b20a      	sxth	r2, r1
 80032e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
      ic[curr_ic].acell.ac_codes[7] = (data[14] + (data[15] << 8));
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	330e      	adds	r3, #14
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	330f      	adds	r3, #15
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	b299      	uxth	r1, r3
 80032fa:	7d7b      	ldrb	r3, [r7, #21]
 80032fc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	4413      	add	r3, r2
 8003308:	b20a      	sxth	r2, r1
 800330a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      ic[curr_ic].acell.ac_codes[8] = (data[16] + (data[17] << 8));
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3310      	adds	r3, #16
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	3311      	adds	r3, #17
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	b29b      	uxth	r3, r3
 8003320:	4413      	add	r3, r2
 8003322:	b299      	uxth	r1, r3
 8003324:	7d7b      	ldrb	r3, [r7, #21]
 8003326:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4413      	add	r3, r2
 8003332:	b20a      	sxth	r2, r1
 8003334:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      ic[curr_ic].acell.ac_codes[9] =  (data[18] + (data[19] << 8));
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3312      	adds	r3, #18
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	3313      	adds	r3, #19
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	4413      	add	r3, r2
 800334c:	b299      	uxth	r1, r3
 800334e:	7d7b      	ldrb	r3, [r7, #21]
 8003350:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	4413      	add	r3, r2
 800335c:	b20a      	sxth	r2, r1
 800335e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      ic[curr_ic].acell.ac_codes[10] = (data[20] + (data[21] << 8));
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	3314      	adds	r3, #20
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3315      	adds	r3, #21
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	b29b      	uxth	r3, r3
 8003374:	4413      	add	r3, r2
 8003376:	b299      	uxth	r1, r3
 8003378:	7d7b      	ldrb	r3, [r7, #21]
 800337a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	4413      	add	r3, r2
 8003386:	b20a      	sxth	r2, r1
 8003388:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
      ic[curr_ic].acell.ac_codes[11] = (data[22] + (data[23] << 8));
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	3316      	adds	r3, #22
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3317      	adds	r3, #23
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	4413      	add	r3, r2
 80033a0:	b299      	uxth	r1, r3
 80033a2:	7d7b      	ldrb	r3, [r7, #21]
 80033a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	4413      	add	r3, r2
 80033b0:	b20a      	sxth	r2, r1
 80033b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
      ic[curr_ic].acell.ac_codes[12] = (data[24] + (data[25] << 8));
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	3318      	adds	r3, #24
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	3319      	adds	r3, #25
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	b299      	uxth	r1, r3
 80033cc:	7d7b      	ldrb	r3, [r7, #21]
 80033ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4413      	add	r3, r2
 80033da:	b20a      	sxth	r2, r1
 80033dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      ic[curr_ic].acell.ac_codes[13] = (data[26] + (data[27] << 8));
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	331a      	adds	r3, #26
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	331b      	adds	r3, #27
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	b299      	uxth	r1, r3
 80033f6:	7d7b      	ldrb	r3, [r7, #21]
 80033f8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4413      	add	r3, r2
 8003404:	b20a      	sxth	r2, r1
 8003406:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      ic[curr_ic].acell.ac_codes[14] = (data[28] + (data[29] << 8));
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	331c      	adds	r3, #28
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	331d      	adds	r3, #29
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	b29b      	uxth	r3, r3
 800341c:	4413      	add	r3, r2
 800341e:	b299      	uxth	r1, r3
 8003420:	7d7b      	ldrb	r3, [r7, #21]
 8003422:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4413      	add	r3, r2
 800342e:	b20a      	sxth	r2, r1
 8003430:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      ic[curr_ic].acell.ac_codes[15] = (data[30] + (data[31] << 8));
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	331e      	adds	r3, #30
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	331f      	adds	r3, #31
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	b29b      	uxth	r3, r3
 8003446:	4413      	add	r3, r2
 8003448:	b299      	uxth	r1, r3
 800344a:	7d7b      	ldrb	r3, [r7, #21]
 800344c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4413      	add	r3, r2
 8003458:	b20a      	sxth	r2, r1
 800345a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      break;
 800345e:	e000      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    default:
      break;
 8003460:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003462:	7d7b      	ldrb	r3, [r7, #21]
 8003464:	3301      	adds	r3, #1
 8003466:	757b      	strb	r3, [r7, #21]
 8003468:	7d7a      	ldrb	r2, [r7, #21]
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	429a      	cmp	r2, r3
 800346e:	f4ff ad31 	bcc.w	8002ed4 <adBms6830ParseAverageCell+0x4c>
    }
  }
  free(data);
 8003472:	6938      	ldr	r0, [r7, #16]
 8003474:	f00f fb90 	bl	8012b98 <free>
}
 8003478:	bf00      	nop
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <adBms6830ParseSCell>:
 *
 *******************************************************************************
*/
/* Parse S cell voltages */
void adBms6830ParseSCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *scv_data)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4603      	mov	r3, r0
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	4613      	mov	r3, r2
 8003490:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDSALL_SIZE;}
 8003496:	7bbb      	ldrb	r3, [r7, #14]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <adBms6830ParseSCell+0x22>
 800349c:	2322      	movs	r3, #34	@ 0x22
 800349e:	75fb      	strb	r3, [r7, #23]
 80034a0:	e001      	b.n	80034a6 <adBms6830ParseSCell+0x26>
  else {data_size = RX_DATA;}
 80034a2:	2308      	movs	r3, #8
 80034a4:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2101      	movs	r1, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	f00f f874 	bl	8012598 <calloc>
 80034b0:	4603      	mov	r3, r0
 80034b2:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <adBms6830ParseSCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse scv memory \n");
    #else
    printf(" Failed to allocate parse scv memory \n");
 80034ba:	4894      	ldr	r0, [pc, #592]	@ (800370c <adBms6830ParseSCell+0x28c>)
 80034bc:	f010 ff94 	bl	80143e8 <puts>
    #endif
    exit(0);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f00f f885 	bl	80125d0 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	757b      	strb	r3, [r7, #21]
 80034ca:	e2c9      	b.n	8003a60 <adBms6830ParseSCell+0x5e0>
  {
    memcpy(&data[0], &scv_data[address], data_size); /* dst , src , size */
 80034cc:	7dbb      	ldrb	r3, [r7, #22]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	7dfa      	ldrb	r2, [r7, #23]
 80034d4:	4619      	mov	r1, r3
 80034d6:	6938      	ldr	r0, [r7, #16]
 80034d8:	f010 ffea 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (data_size));
 80034dc:	7d7b      	ldrb	r3, [r7, #21]
 80034de:	3301      	adds	r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	7dfa      	ldrb	r2, [r7, #23]
 80034e4:	fb12 f303 	smulbb	r3, r2, r3
 80034e8:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 80034ea:	7bbb      	ldrb	r3, [r7, #14]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	f200 82b3 	bhi.w	8003a58 <adBms6830ParseSCell+0x5d8>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <adBms6830ParseSCell+0x78>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	080037b9 	.word	0x080037b9
 80034fc:	08003515 	.word	0x08003515
 8003500:	08003593 	.word	0x08003593
 8003504:	08003611 	.word	0x08003611
 8003508:	0800368f 	.word	0x0800368f
 800350c:	08003711 	.word	0x08003711
 8003510:	0800378f 	.word	0x0800378f
    {
    case A: /* Cell Register group A */
      ic[curr_ic].scell.sc_codes[0] = (data[0] + (data[1] << 8));
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3301      	adds	r3, #1
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	b29b      	uxth	r3, r3
 8003524:	4413      	add	r3, r2
 8003526:	b299      	uxth	r1, r3
 8003528:	7d7b      	ldrb	r3, [r7, #21]
 800352a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4413      	add	r3, r2
 8003536:	b20a      	sxth	r2, r1
 8003538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      ic[curr_ic].scell.sc_codes[1] = (data[2] + (data[3] << 8));
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	3302      	adds	r3, #2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3303      	adds	r3, #3
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	b29b      	uxth	r3, r3
 800354e:	4413      	add	r3, r2
 8003550:	b299      	uxth	r1, r3
 8003552:	7d7b      	ldrb	r3, [r7, #21]
 8003554:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	4413      	add	r3, r2
 8003560:	b20a      	sxth	r2, r1
 8003562:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      ic[curr_ic].scell.sc_codes[2] = (data[4] + (data[5] << 8));
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3304      	adds	r3, #4
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3305      	adds	r3, #5
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	b29b      	uxth	r3, r3
 8003578:	4413      	add	r3, r2
 800357a:	b299      	uxth	r1, r3
 800357c:	7d7b      	ldrb	r3, [r7, #21]
 800357e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4413      	add	r3, r2
 800358a:	b20a      	sxth	r2, r1
 800358c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      break;
 8003590:	e263      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case B: /* Cell Register group B */
      ic[curr_ic].scell.sc_codes[3] = (data[0] + (data[1] << 8));
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3301      	adds	r3, #1
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	b299      	uxth	r1, r3
 80035a6:	7d7b      	ldrb	r3, [r7, #21]
 80035a8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4413      	add	r3, r2
 80035b4:	b20a      	sxth	r2, r1
 80035b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
      ic[curr_ic].scell.sc_codes[4] = (data[2] + (data[3] << 8));
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3302      	adds	r3, #2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3303      	adds	r3, #3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	b299      	uxth	r1, r3
 80035d0:	7d7b      	ldrb	r3, [r7, #21]
 80035d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	b20a      	sxth	r2, r1
 80035e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      ic[curr_ic].scell.sc_codes[5] = (data[4] + (data[5] << 8));
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3304      	adds	r3, #4
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	3305      	adds	r3, #5
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	b299      	uxth	r1, r3
 80035fa:	7d7b      	ldrb	r3, [r7, #21]
 80035fc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	4413      	add	r3, r2
 8003608:	b20a      	sxth	r2, r1
 800360a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      break;
 800360e:	e224      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case C: /* Cell Register group C */
      ic[curr_ic].scell.sc_codes[6] = (data[0] + (data[1] << 8));
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3301      	adds	r3, #1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	b29b      	uxth	r3, r3
 8003620:	4413      	add	r3, r2
 8003622:	b299      	uxth	r1, r3
 8003624:	7d7b      	ldrb	r3, [r7, #21]
 8003626:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	b20a      	sxth	r2, r1
 8003634:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
      ic[curr_ic].scell.sc_codes[7] = (data[2] + (data[3] << 8));
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	3302      	adds	r3, #2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3303      	adds	r3, #3
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	b29b      	uxth	r3, r3
 800364a:	4413      	add	r3, r2
 800364c:	b299      	uxth	r1, r3
 800364e:	7d7b      	ldrb	r3, [r7, #21]
 8003650:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4413      	add	r3, r2
 800365c:	b20a      	sxth	r2, r1
 800365e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
      ic[curr_ic].scell.sc_codes[8] = (data[4] + (data[5] << 8));
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3304      	adds	r3, #4
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3305      	adds	r3, #5
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b29b      	uxth	r3, r3
 8003674:	4413      	add	r3, r2
 8003676:	b299      	uxth	r1, r3
 8003678:	7d7b      	ldrb	r3, [r7, #21]
 800367a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	b20a      	sxth	r2, r1
 8003688:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      break;
 800368c:	e1e5      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case D: /* Cell Register group D */
      ic[curr_ic].scell.sc_codes[9] =  (data[0] + (data[1] << 8));
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	3301      	adds	r3, #1
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	b29b      	uxth	r3, r3
 800369e:	4413      	add	r3, r2
 80036a0:	b299      	uxth	r1, r3
 80036a2:	7d7b      	ldrb	r3, [r7, #21]
 80036a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4413      	add	r3, r2
 80036b0:	b20a      	sxth	r2, r1
 80036b2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      ic[curr_ic].scell.sc_codes[10] = (data[2] + (data[3] << 8));
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3302      	adds	r3, #2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	3303      	adds	r3, #3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	b299      	uxth	r1, r3
 80036cc:	7d7b      	ldrb	r3, [r7, #21]
 80036ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	b20a      	sxth	r2, r1
 80036dc:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
      ic[curr_ic].scell.sc_codes[11] = (data[4] + (data[5] << 8));
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3304      	adds	r3, #4
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3305      	adds	r3, #5
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	b299      	uxth	r1, r3
 80036f6:	7d7b      	ldrb	r3, [r7, #21]
 80036f8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4413      	add	r3, r2
 8003704:	b20a      	sxth	r2, r1
 8003706:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
      break;
 800370a:	e1a6      	b.n	8003a5a <adBms6830ParseSCell+0x5da>
 800370c:	08016f34 	.word	0x08016f34

    case E: /* Cell Register group E */
      ic[curr_ic].scell.sc_codes[12] = (data[0] + (data[1] << 8));
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3301      	adds	r3, #1
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	b29b      	uxth	r3, r3
 8003720:	4413      	add	r3, r2
 8003722:	b299      	uxth	r1, r3
 8003724:	7d7b      	ldrb	r3, [r7, #21]
 8003726:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4413      	add	r3, r2
 8003732:	b20a      	sxth	r2, r1
 8003734:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
      ic[curr_ic].scell.sc_codes[13] = (data[2] + (data[3] << 8));
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3302      	adds	r3, #2
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3303      	adds	r3, #3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	b29b      	uxth	r3, r3
 800374a:	4413      	add	r3, r2
 800374c:	b299      	uxth	r1, r3
 800374e:	7d7b      	ldrb	r3, [r7, #21]
 8003750:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4413      	add	r3, r2
 800375c:	b20a      	sxth	r2, r1
 800375e:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
      ic[curr_ic].scell.sc_codes[14] = (data[4] + (data[5] << 8));
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3304      	adds	r3, #4
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3305      	adds	r3, #5
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	b29b      	uxth	r3, r3
 8003774:	4413      	add	r3, r2
 8003776:	b299      	uxth	r1, r3
 8003778:	7d7b      	ldrb	r3, [r7, #21]
 800377a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4413      	add	r3, r2
 8003786:	b20a      	sxth	r2, r1
 8003788:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
      break;
 800378c:	e165      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case F: /* Cell Register group F */
      ic[curr_ic].scell.sc_codes[15] = (data[0] + (data[1] << 8));
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	3301      	adds	r3, #1
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	b29b      	uxth	r3, r3
 800379e:	4413      	add	r3, r2
 80037a0:	b299      	uxth	r1, r3
 80037a2:	7d7b      	ldrb	r3, [r7, #21]
 80037a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4413      	add	r3, r2
 80037b0:	b20a      	sxth	r2, r1
 80037b2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      break;
 80037b6:	e150      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].scell.sc_codes[0] = (data[0] + (data[1] << 8));
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	b299      	uxth	r1, r3
 80037cc:	7d7b      	ldrb	r3, [r7, #21]
 80037ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4413      	add	r3, r2
 80037da:	b20a      	sxth	r2, r1
 80037dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      ic[curr_ic].scell.sc_codes[1] = (data[2] + (data[3] << 8));
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3302      	adds	r3, #2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	b299      	uxth	r1, r3
 80037f6:	7d7b      	ldrb	r3, [r7, #21]
 80037f8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	4413      	add	r3, r2
 8003804:	b20a      	sxth	r2, r1
 8003806:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      ic[curr_ic].scell.sc_codes[2] = (data[4] + (data[5] << 8));
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3304      	adds	r3, #4
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3305      	adds	r3, #5
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	b29b      	uxth	r3, r3
 800381c:	4413      	add	r3, r2
 800381e:	b299      	uxth	r1, r3
 8003820:	7d7b      	ldrb	r3, [r7, #21]
 8003822:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4413      	add	r3, r2
 800382e:	b20a      	sxth	r2, r1
 8003830:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      ic[curr_ic].scell.sc_codes[3] = (data[6] + (data[7] << 8));
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3306      	adds	r3, #6
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3307      	adds	r3, #7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	b29b      	uxth	r3, r3
 8003846:	4413      	add	r3, r2
 8003848:	b299      	uxth	r1, r3
 800384a:	7d7b      	ldrb	r3, [r7, #21]
 800384c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	4413      	add	r3, r2
 8003858:	b20a      	sxth	r2, r1
 800385a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
      ic[curr_ic].scell.sc_codes[4] = (data[8] + (data[9] << 8));
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3308      	adds	r3, #8
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3309      	adds	r3, #9
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	b29b      	uxth	r3, r3
 8003870:	4413      	add	r3, r2
 8003872:	b299      	uxth	r1, r3
 8003874:	7d7b      	ldrb	r3, [r7, #21]
 8003876:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4413      	add	r3, r2
 8003882:	b20a      	sxth	r2, r1
 8003884:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      ic[curr_ic].scell.sc_codes[5] = (data[10] + (data[11] << 8));
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	330a      	adds	r3, #10
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	330b      	adds	r3, #11
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	b29b      	uxth	r3, r3
 800389a:	4413      	add	r3, r2
 800389c:	b299      	uxth	r1, r3
 800389e:	7d7b      	ldrb	r3, [r7, #21]
 80038a0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	4413      	add	r3, r2
 80038ac:	b20a      	sxth	r2, r1
 80038ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      ic[curr_ic].scell.sc_codes[6] = (data[12] + (data[13] << 8));
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	330c      	adds	r3, #12
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	330d      	adds	r3, #13
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	b299      	uxth	r1, r3
 80038c8:	7d7b      	ldrb	r3, [r7, #21]
 80038ca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4413      	add	r3, r2
 80038d6:	b20a      	sxth	r2, r1
 80038d8:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
      ic[curr_ic].scell.sc_codes[7] = (data[14] + (data[15] << 8));
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	330e      	adds	r3, #14
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	330f      	adds	r3, #15
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	b299      	uxth	r1, r3
 80038f2:	7d7b      	ldrb	r3, [r7, #21]
 80038f4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4413      	add	r3, r2
 8003900:	b20a      	sxth	r2, r1
 8003902:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
      ic[curr_ic].scell.sc_codes[8] = (data[16] + (data[17] << 8));
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3310      	adds	r3, #16
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3311      	adds	r3, #17
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	b29b      	uxth	r3, r3
 8003918:	4413      	add	r3, r2
 800391a:	b299      	uxth	r1, r3
 800391c:	7d7b      	ldrb	r3, [r7, #21]
 800391e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	b20a      	sxth	r2, r1
 800392c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ic[curr_ic].scell.sc_codes[9] = (data[18] + (data[19] << 8));
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	3312      	adds	r3, #18
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	3313      	adds	r3, #19
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	b29b      	uxth	r3, r3
 8003942:	4413      	add	r3, r2
 8003944:	b299      	uxth	r1, r3
 8003946:	7d7b      	ldrb	r3, [r7, #21]
 8003948:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	4413      	add	r3, r2
 8003954:	b20a      	sxth	r2, r1
 8003956:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      ic[curr_ic].scell.sc_codes[10] = (data[20] + (data[21] << 8));
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3314      	adds	r3, #20
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	3315      	adds	r3, #21
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	b29b      	uxth	r3, r3
 800396c:	4413      	add	r3, r2
 800396e:	b299      	uxth	r1, r3
 8003970:	7d7b      	ldrb	r3, [r7, #21]
 8003972:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	b20a      	sxth	r2, r1
 8003980:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
      ic[curr_ic].scell.sc_codes[11] = (data[22] + (data[23] << 8));
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	3316      	adds	r3, #22
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	3317      	adds	r3, #23
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	b29b      	uxth	r3, r3
 8003996:	4413      	add	r3, r2
 8003998:	b299      	uxth	r1, r3
 800399a:	7d7b      	ldrb	r3, [r7, #21]
 800399c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4413      	add	r3, r2
 80039a8:	b20a      	sxth	r2, r1
 80039aa:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
      ic[curr_ic].scell.sc_codes[12] = (data[24] + (data[25] << 8));
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	3318      	adds	r3, #24
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3319      	adds	r3, #25
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	b299      	uxth	r1, r3
 80039c4:	7d7b      	ldrb	r3, [r7, #21]
 80039c6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	b20a      	sxth	r2, r1
 80039d4:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
      ic[curr_ic].scell.sc_codes[13] = (data[26] + (data[27] << 8));
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	331a      	adds	r3, #26
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	331b      	adds	r3, #27
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	b299      	uxth	r1, r3
 80039ee:	7d7b      	ldrb	r3, [r7, #21]
 80039f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	4413      	add	r3, r2
 80039fc:	b20a      	sxth	r2, r1
 80039fe:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
      ic[curr_ic].scell.sc_codes[14] = (data[28] + (data[29] << 8));
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	331c      	adds	r3, #28
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	331d      	adds	r3, #29
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	b299      	uxth	r1, r3
 8003a18:	7d7b      	ldrb	r3, [r7, #21]
 8003a1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	b20a      	sxth	r2, r1
 8003a28:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
      ic[curr_ic].scell.sc_codes[15] = (data[30] + (data[31] << 8));
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	331e      	adds	r3, #30
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	331f      	adds	r3, #31
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	b299      	uxth	r1, r3
 8003a42:	7d7b      	ldrb	r3, [r7, #21]
 8003a44:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4413      	add	r3, r2
 8003a50:	b20a      	sxth	r2, r1
 8003a52:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      break;
 8003a56:	e000      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    default:
      break;
 8003a58:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003a5a:	7d7b      	ldrb	r3, [r7, #21]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	757b      	strb	r3, [r7, #21]
 8003a60:	7d7a      	ldrb	r2, [r7, #21]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f4ff ad31 	bcc.w	80034cc <adBms6830ParseSCell+0x4c>
    }
  }
  free(data);
 8003a6a:	6938      	ldr	r0, [r7, #16]
 8003a6c:	f00f f894 	bl	8012b98 <free>
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <adBms6830ParseFCell>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseFCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *fcv_data)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	4603      	mov	r3, r0
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	4613      	mov	r3, r2
 8003a88:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDFCALL_SIZE;}
 8003a8e:	7bbb      	ldrb	r3, [r7, #14]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <adBms6830ParseFCell+0x22>
 8003a94:	2322      	movs	r3, #34	@ 0x22
 8003a96:	75fb      	strb	r3, [r7, #23]
 8003a98:	e001      	b.n	8003a9e <adBms6830ParseFCell+0x26>
  else {data_size = RX_DATA;}
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00e fd78 	bl	8012598 <calloc>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <adBms6830ParseFCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse fcell memory \n");
    #else
    printf(" Failed to allocate parse fcell memory \n");
 8003ab2:	4894      	ldr	r0, [pc, #592]	@ (8003d04 <adBms6830ParseFCell+0x28c>)
 8003ab4:	f010 fc98 	bl	80143e8 <puts>
    #endif
    exit(0);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f00e fd89 	bl	80125d0 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	757b      	strb	r3, [r7, #21]
 8003ac2:	e2c9      	b.n	8004058 <adBms6830ParseFCell+0x5e0>
  {
    memcpy(&data[0], &fcv_data[address], data_size); /* dst , src , size */
 8003ac4:	7dbb      	ldrb	r3, [r7, #22]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	7dfa      	ldrb	r2, [r7, #23]
 8003acc:	4619      	mov	r1, r3
 8003ace:	6938      	ldr	r0, [r7, #16]
 8003ad0:	f010 fcee 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8003ad4:	7d7b      	ldrb	r3, [r7, #21]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	7dfa      	ldrb	r2, [r7, #23]
 8003adc:	fb12 f303 	smulbb	r3, r2, r3
 8003ae0:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8003ae2:	7bbb      	ldrb	r3, [r7, #14]
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	f200 82b3 	bhi.w	8004050 <adBms6830ParseFCell+0x5d8>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <adBms6830ParseFCell+0x78>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003db1 	.word	0x08003db1
 8003af4:	08003b0d 	.word	0x08003b0d
 8003af8:	08003b8b 	.word	0x08003b8b
 8003afc:	08003c09 	.word	0x08003c09
 8003b00:	08003c87 	.word	0x08003c87
 8003b04:	08003d09 	.word	0x08003d09
 8003b08:	08003d87 	.word	0x08003d87
    {
    case A: /* Cell Register group A */
      ic[curr_ic].fcell.fc_codes[0] = (data[0] + (data[1] << 8));
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3301      	adds	r3, #1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b299      	uxth	r1, r3
 8003b20:	7d7b      	ldrb	r3, [r7, #21]
 8003b22:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b20a      	sxth	r2, r1
 8003b30:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
      ic[curr_ic].fcell.fc_codes[1] = (data[2] + (data[3] << 8));
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3302      	adds	r3, #2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3303      	adds	r3, #3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	b299      	uxth	r1, r3
 8003b4a:	7d7b      	ldrb	r3, [r7, #21]
 8003b4c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4413      	add	r3, r2
 8003b58:	b20a      	sxth	r2, r1
 8003b5a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
      ic[curr_ic].fcell.fc_codes[2] = (data[4] + (data[5] << 8));
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3304      	adds	r3, #4
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3305      	adds	r3, #5
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	b299      	uxth	r1, r3
 8003b74:	7d7b      	ldrb	r3, [r7, #21]
 8003b76:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	b20a      	sxth	r2, r1
 8003b84:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
      break;
 8003b88:	e263      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case B: /* Cell Register group B */
      ic[curr_ic].fcell.fc_codes[3] = (data[0] + (data[1] << 8));
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3301      	adds	r3, #1
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	7d7b      	ldrb	r3, [r7, #21]
 8003ba0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	4413      	add	r3, r2
 8003bac:	b20a      	sxth	r2, r1
 8003bae:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
      ic[curr_ic].fcell.fc_codes[4] = (data[2] + (data[3] << 8));
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3303      	adds	r3, #3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	7d7b      	ldrb	r3, [r7, #21]
 8003bca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	b20a      	sxth	r2, r1
 8003bd8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      ic[curr_ic].fcell.fc_codes[5] = (data[4] + (data[5] << 8));
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	3304      	adds	r3, #4
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	3305      	adds	r3, #5
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	b299      	uxth	r1, r3
 8003bf2:	7d7b      	ldrb	r3, [r7, #21]
 8003bf4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4413      	add	r3, r2
 8003c00:	b20a      	sxth	r2, r1
 8003c02:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      break;
 8003c06:	e224      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case C: /* Cell Register group C */
      ic[curr_ic].fcell.fc_codes[6] = (data[0] + (data[1] << 8));
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3301      	adds	r3, #1
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	b299      	uxth	r1, r3
 8003c1c:	7d7b      	ldrb	r3, [r7, #21]
 8003c1e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b20a      	sxth	r2, r1
 8003c2c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      ic[curr_ic].fcell.fc_codes[7] = (data[2] + (data[3] << 8));
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3302      	adds	r3, #2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3303      	adds	r3, #3
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	b299      	uxth	r1, r3
 8003c46:	7d7b      	ldrb	r3, [r7, #21]
 8003c48:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4413      	add	r3, r2
 8003c54:	b20a      	sxth	r2, r1
 8003c56:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      ic[curr_ic].fcell.fc_codes[8] = (data[4] + (data[5] << 8));
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3305      	adds	r3, #5
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b299      	uxth	r1, r3
 8003c70:	7d7b      	ldrb	r3, [r7, #21]
 8003c72:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b20a      	sxth	r2, r1
 8003c80:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      break;
 8003c84:	e1e5      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case D: /* Cell Register group D */
      ic[curr_ic].fcell.fc_codes[9] =  (data[0] + (data[1] << 8));
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	b299      	uxth	r1, r3
 8003c9a:	7d7b      	ldrb	r3, [r7, #21]
 8003c9c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	b20a      	sxth	r2, r1
 8003caa:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
      ic[curr_ic].fcell.fc_codes[10] = (data[2] + (data[3] << 8));
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3303      	adds	r3, #3
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	b299      	uxth	r1, r3
 8003cc4:	7d7b      	ldrb	r3, [r7, #21]
 8003cc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	b20a      	sxth	r2, r1
 8003cd4:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
      ic[curr_ic].fcell.fc_codes[11] = (data[4] + (data[5] << 8));
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3305      	adds	r3, #5
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	b299      	uxth	r1, r3
 8003cee:	7d7b      	ldrb	r3, [r7, #21]
 8003cf0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b20a      	sxth	r2, r1
 8003cfe:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      break;
 8003d02:	e1a6      	b.n	8004052 <adBms6830ParseFCell+0x5da>
 8003d04:	08016f5c 	.word	0x08016f5c

    case E: /* Cell Register group E */
      ic[curr_ic].fcell.fc_codes[12] = (data[0] + (data[1] << 8));
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3301      	adds	r3, #1
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	b299      	uxth	r1, r3
 8003d1c:	7d7b      	ldrb	r3, [r7, #21]
 8003d1e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	b20a      	sxth	r2, r1
 8003d2c:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
      ic[curr_ic].fcell.fc_codes[13] = (data[2] + (data[3] << 8));
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	3302      	adds	r3, #2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3303      	adds	r3, #3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	b299      	uxth	r1, r3
 8003d46:	7d7b      	ldrb	r3, [r7, #21]
 8003d48:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4413      	add	r3, r2
 8003d54:	b20a      	sxth	r2, r1
 8003d56:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      ic[curr_ic].fcell.fc_codes[14] = (data[4] + (data[5] << 8));
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	3305      	adds	r3, #5
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b299      	uxth	r1, r3
 8003d70:	7d7b      	ldrb	r3, [r7, #21]
 8003d72:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b20a      	sxth	r2, r1
 8003d80:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      break;
 8003d84:	e165      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case F: /* Cell Register group F */
      ic[curr_ic].fcell.fc_codes[15] = (data[0] + (data[1] << 8));
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	b299      	uxth	r1, r3
 8003d9a:	7d7b      	ldrb	r3, [r7, #21]
 8003d9c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	b20a      	sxth	r2, r1
 8003daa:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
      break;
 8003dae:	e150      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].fcell.fc_codes[0] = (data[0] + (data[1] << 8));
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	3301      	adds	r3, #1
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b299      	uxth	r1, r3
 8003dc4:	7d7b      	ldrb	r3, [r7, #21]
 8003dc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	b20a      	sxth	r2, r1
 8003dd4:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
      ic[curr_ic].fcell.fc_codes[1] = (data[2] + (data[3] << 8));
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3302      	adds	r3, #2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3303      	adds	r3, #3
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	b299      	uxth	r1, r3
 8003dee:	7d7b      	ldrb	r3, [r7, #21]
 8003df0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	b20a      	sxth	r2, r1
 8003dfe:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
      ic[curr_ic].fcell.fc_codes[2] = (data[4] + (data[5] << 8));
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3304      	adds	r3, #4
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3305      	adds	r3, #5
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	b299      	uxth	r1, r3
 8003e18:	7d7b      	ldrb	r3, [r7, #21]
 8003e1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4413      	add	r3, r2
 8003e26:	b20a      	sxth	r2, r1
 8003e28:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
      ic[curr_ic].fcell.fc_codes[3] = (data[6] + (data[7] << 8));
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3306      	adds	r3, #6
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3307      	adds	r3, #7
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	b299      	uxth	r1, r3
 8003e42:	7d7b      	ldrb	r3, [r7, #21]
 8003e44:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	4413      	add	r3, r2
 8003e50:	b20a      	sxth	r2, r1
 8003e52:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
      ic[curr_ic].fcell.fc_codes[4] = (data[8] + (data[9] << 8));
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3309      	adds	r3, #9
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	7d7b      	ldrb	r3, [r7, #21]
 8003e6e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	b20a      	sxth	r2, r1
 8003e7c:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      ic[curr_ic].fcell.fc_codes[5] = (data[10] + (data[11] << 8));
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	330a      	adds	r3, #10
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	330b      	adds	r3, #11
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	b299      	uxth	r1, r3
 8003e96:	7d7b      	ldrb	r3, [r7, #21]
 8003e98:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	b20a      	sxth	r2, r1
 8003ea6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      ic[curr_ic].fcell.fc_codes[6] = (data[12] + (data[13] << 8));
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	330c      	adds	r3, #12
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	330d      	adds	r3, #13
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	b299      	uxth	r1, r3
 8003ec0:	7d7b      	ldrb	r3, [r7, #21]
 8003ec2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4413      	add	r3, r2
 8003ece:	b20a      	sxth	r2, r1
 8003ed0:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      ic[curr_ic].fcell.fc_codes[7] = (data[14] + (data[15] << 8));
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	330e      	adds	r3, #14
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	330f      	adds	r3, #15
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	7d7b      	ldrb	r3, [r7, #21]
 8003eec:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b20a      	sxth	r2, r1
 8003efa:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      ic[curr_ic].fcell.fc_codes[8] = (data[16] + (data[17] << 8));
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	3310      	adds	r3, #16
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3311      	adds	r3, #17
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	b299      	uxth	r1, r3
 8003f14:	7d7b      	ldrb	r3, [r7, #21]
 8003f16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	b20a      	sxth	r2, r1
 8003f24:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      ic[curr_ic].fcell.fc_codes[9] =  (data[18] + (data[19] << 8));
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3312      	adds	r3, #18
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3313      	adds	r3, #19
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	b299      	uxth	r1, r3
 8003f3e:	7d7b      	ldrb	r3, [r7, #21]
 8003f40:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	b20a      	sxth	r2, r1
 8003f4e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
      ic[curr_ic].fcell.fc_codes[10] = (data[20] + (data[21] << 8));
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3314      	adds	r3, #20
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3315      	adds	r3, #21
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	b299      	uxth	r1, r3
 8003f68:	7d7b      	ldrb	r3, [r7, #21]
 8003f6a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	4413      	add	r3, r2
 8003f76:	b20a      	sxth	r2, r1
 8003f78:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
      ic[curr_ic].fcell.fc_codes[11] = (data[22] + (data[23] << 8));
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3316      	adds	r3, #22
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	3317      	adds	r3, #23
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	b299      	uxth	r1, r3
 8003f92:	7d7b      	ldrb	r3, [r7, #21]
 8003f94:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	b20a      	sxth	r2, r1
 8003fa2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      ic[curr_ic].fcell.fc_codes[12] = (data[24] + (data[25] << 8));
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	3318      	adds	r3, #24
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3319      	adds	r3, #25
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	b299      	uxth	r1, r3
 8003fbc:	7d7b      	ldrb	r3, [r7, #21]
 8003fbe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	b20a      	sxth	r2, r1
 8003fcc:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
      ic[curr_ic].fcell.fc_codes[13] = (data[26] + (data[27] << 8));
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	331a      	adds	r3, #26
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	331b      	adds	r3, #27
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b299      	uxth	r1, r3
 8003fe6:	7d7b      	ldrb	r3, [r7, #21]
 8003fe8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	b20a      	sxth	r2, r1
 8003ff6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      ic[curr_ic].fcell.fc_codes[14] = (data[28] + (data[29] << 8));
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	331c      	adds	r3, #28
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	331d      	adds	r3, #29
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b29b      	uxth	r3, r3
 800400c:	4413      	add	r3, r2
 800400e:	b299      	uxth	r1, r3
 8004010:	7d7b      	ldrb	r3, [r7, #21]
 8004012:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4413      	add	r3, r2
 800401e:	b20a      	sxth	r2, r1
 8004020:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      ic[curr_ic].fcell.fc_codes[15] = (data[30] + (data[31] << 8));
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	331e      	adds	r3, #30
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	331f      	adds	r3, #31
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	b29b      	uxth	r3, r3
 8004036:	4413      	add	r3, r2
 8004038:	b299      	uxth	r1, r3
 800403a:	7d7b      	ldrb	r3, [r7, #21]
 800403c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	4413      	add	r3, r2
 8004048:	b20a      	sxth	r2, r1
 800404a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
      break;
 800404e:	e000      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    default:
      break;
 8004050:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004052:	7d7b      	ldrb	r3, [r7, #21]
 8004054:	3301      	adds	r3, #1
 8004056:	757b      	strb	r3, [r7, #21]
 8004058:	7d7a      	ldrb	r2, [r7, #21]
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	429a      	cmp	r2, r3
 800405e:	f4ff ad31 	bcc.w	8003ac4 <adBms6830ParseFCell+0x4c>
    }
  }
  free(data);
 8004062:	6938      	ldr	r0, [r7, #16]
 8004064:	f00e fd98 	bl	8012b98 <free>
}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <adBms6830ParseAux>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseAux(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *aux_data)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	4613      	mov	r3, r2
 8004080:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = (RDASALL_SIZE-44);}  /* RDASALL_SIZE 68 byte - (RAUX 20 byte + STATUS 24 byte) */
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <adBms6830ParseAux+0x22>
 800408c:	231a      	movs	r3, #26
 800408e:	75fb      	strb	r3, [r7, #23]
 8004090:	e001      	b.n	8004096 <adBms6830ParseAux+0x26>
  else {data_size = RX_DATA;}
 8004092:	2308      	movs	r3, #8
 8004094:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f00e fa7c 	bl	8012598 <calloc>
 80040a0:	4603      	mov	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <adBms6830ParseAux+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse aux memory \n");
    #else
    printf(" Failed to allocate parse aux memory \n");
 80040aa:	4892      	ldr	r0, [pc, #584]	@ (80042f4 <adBms6830ParseAux+0x284>)
 80040ac:	f010 f99c 	bl	80143e8 <puts>
    #endif
    exit(0);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f00e fa8d 	bl	80125d0 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	757b      	strb	r3, [r7, #21]
 80040ba:	e21d      	b.n	80044f8 <adBms6830ParseAux+0x488>
  {
    memcpy(&data[0], &aux_data[address], data_size); /* dst , src , size */
 80040bc:	7dbb      	ldrb	r3, [r7, #22]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	7dfa      	ldrb	r2, [r7, #23]
 80040c4:	4619      	mov	r1, r3
 80040c6:	6938      	ldr	r0, [r7, #16]
 80040c8:	f010 f9f2 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (data_size));
 80040cc:	7d7b      	ldrb	r3, [r7, #21]
 80040ce:	3301      	adds	r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	7dfa      	ldrb	r2, [r7, #23]
 80040d4:	fb12 f303 	smulbb	r3, r2, r3
 80040d8:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 80040da:	7bbb      	ldrb	r3, [r7, #14]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	f200 8207 	bhi.w	80044f0 <adBms6830ParseAux+0x480>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <adBms6830ParseAux+0x78>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080042f9 	.word	0x080042f9
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800417b 	.word	0x0800417b
 80040f4:	080041f9 	.word	0x080041f9
 80040f8:	08004277 	.word	0x08004277
    {
    case A: /* Aux Register group A */
      ic[curr_ic].aux.a_codes[0] = (data[0] + (data[1] << 8));
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3301      	adds	r3, #1
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	b29b      	uxth	r3, r3
 800410c:	4413      	add	r3, r2
 800410e:	b299      	uxth	r1, r3
 8004110:	7d7b      	ldrb	r3, [r7, #21]
 8004112:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	b20a      	sxth	r2, r1
 8004120:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      ic[curr_ic].aux.a_codes[1] = (data[2] + (data[3] << 8));
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	3302      	adds	r3, #2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3303      	adds	r3, #3
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	b29b      	uxth	r3, r3
 8004136:	4413      	add	r3, r2
 8004138:	b299      	uxth	r1, r3
 800413a:	7d7b      	ldrb	r3, [r7, #21]
 800413c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	4413      	add	r3, r2
 8004148:	b20a      	sxth	r2, r1
 800414a:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
      ic[curr_ic].aux.a_codes[2] = (data[4] + (data[5] << 8));
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3304      	adds	r3, #4
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3305      	adds	r3, #5
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	b29b      	uxth	r3, r3
 8004160:	4413      	add	r3, r2
 8004162:	b299      	uxth	r1, r3
 8004164:	7d7b      	ldrb	r3, [r7, #21]
 8004166:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	4413      	add	r3, r2
 8004172:	b20a      	sxth	r2, r1
 8004174:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      break;
 8004178:	e1bb      	b.n	80044f2 <adBms6830ParseAux+0x482>

    case B: /* Aux Register group B */
      ic[curr_ic].aux.a_codes[3] = (data[0] + (data[1] << 8));
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3301      	adds	r3, #1
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	b29b      	uxth	r3, r3
 800418a:	4413      	add	r3, r2
 800418c:	b299      	uxth	r1, r3
 800418e:	7d7b      	ldrb	r3, [r7, #21]
 8004190:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4413      	add	r3, r2
 800419c:	b20a      	sxth	r2, r1
 800419e:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      ic[curr_ic].aux.a_codes[4] = (data[2] + (data[3] << 8));
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3302      	adds	r3, #2
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	3303      	adds	r3, #3
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	b299      	uxth	r1, r3
 80041b8:	7d7b      	ldrb	r3, [r7, #21]
 80041ba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4413      	add	r3, r2
 80041c6:	b20a      	sxth	r2, r1
 80041c8:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
      ic[curr_ic].aux.a_codes[5] = (data[4] + (data[5] << 8));
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	3304      	adds	r3, #4
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3305      	adds	r3, #5
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	b29b      	uxth	r3, r3
 80041de:	4413      	add	r3, r2
 80041e0:	b299      	uxth	r1, r3
 80041e2:	7d7b      	ldrb	r3, [r7, #21]
 80041e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	4413      	add	r3, r2
 80041f0:	b20a      	sxth	r2, r1
 80041f2:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
      break;
 80041f6:	e17c      	b.n	80044f2 <adBms6830ParseAux+0x482>

    case C: /* Aux Register group C */
      ic[curr_ic].aux.a_codes[6] = (data[0] + (data[1] << 8));
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	b29b      	uxth	r3, r3
 8004208:	4413      	add	r3, r2
 800420a:	b299      	uxth	r1, r3
 800420c:	7d7b      	ldrb	r3, [r7, #21]
 800420e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4413      	add	r3, r2
 800421a:	b20a      	sxth	r2, r1
 800421c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
      ic[curr_ic].aux.a_codes[7] = (data[2] + (data[3] << 8));
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3302      	adds	r3, #2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	3303      	adds	r3, #3
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	b29b      	uxth	r3, r3
 8004232:	4413      	add	r3, r2
 8004234:	b299      	uxth	r1, r3
 8004236:	7d7b      	ldrb	r3, [r7, #21]
 8004238:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4413      	add	r3, r2
 8004244:	b20a      	sxth	r2, r1
 8004246:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
      ic[curr_ic].aux.a_codes[8] = (data[4] + (data[5] << 8));
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3304      	adds	r3, #4
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	3305      	adds	r3, #5
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	b29b      	uxth	r3, r3
 800425c:	4413      	add	r3, r2
 800425e:	b299      	uxth	r1, r3
 8004260:	7d7b      	ldrb	r3, [r7, #21]
 8004262:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	b20a      	sxth	r2, r1
 8004270:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
      break;
 8004274:	e13d      	b.n	80044f2 <adBms6830ParseAux+0x482>

    case D: /* Aux Register group D */
      ic[curr_ic].aux.a_codes[9] =  (data[0] + (data[1] << 8));
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	3301      	adds	r3, #1
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	b29b      	uxth	r3, r3
 8004286:	4413      	add	r3, r2
 8004288:	b299      	uxth	r1, r3
 800428a:	7d7b      	ldrb	r3, [r7, #21]
 800428c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	4413      	add	r3, r2
 8004298:	b20a      	sxth	r2, r1
 800429a:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
      ic[curr_ic].aux.a_codes[10] =  (data[2] + (data[3] << 8));
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3302      	adds	r3, #2
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3303      	adds	r3, #3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	b299      	uxth	r1, r3
 80042b4:	7d7b      	ldrb	r3, [r7, #21]
 80042b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4413      	add	r3, r2
 80042c2:	b20a      	sxth	r2, r1
 80042c4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
      ic[curr_ic].aux.a_codes[11] =  (data[4] + (data[5] << 8));
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3304      	adds	r3, #4
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	3305      	adds	r3, #5
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4413      	add	r3, r2
 80042dc:	b299      	uxth	r1, r3
 80042de:	7d7b      	ldrb	r3, [r7, #21]
 80042e0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80042e4:	fb02 f303 	mul.w	r3, r2, r3
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4413      	add	r3, r2
 80042ec:	b20a      	sxth	r2, r1
 80042ee:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
      break;
 80042f2:	e0fe      	b.n	80044f2 <adBms6830ParseAux+0x482>
 80042f4:	08016f84 	.word	0x08016f84

   case ALL_GRP: /* Aux Register group ALL */
      ic[curr_ic].aux.a_codes[0]  = (data[0] + (data[1] << 8));
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3301      	adds	r3, #1
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	b29b      	uxth	r3, r3
 8004308:	4413      	add	r3, r2
 800430a:	b299      	uxth	r1, r3
 800430c:	7d7b      	ldrb	r3, [r7, #21]
 800430e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	b20a      	sxth	r2, r1
 800431c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      ic[curr_ic].aux.a_codes[1]  = (data[2] + (data[3] << 8));
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3302      	adds	r3, #2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3303      	adds	r3, #3
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	4413      	add	r3, r2
 8004334:	b299      	uxth	r1, r3
 8004336:	7d7b      	ldrb	r3, [r7, #21]
 8004338:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	4413      	add	r3, r2
 8004344:	b20a      	sxth	r2, r1
 8004346:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
      ic[curr_ic].aux.a_codes[2]  = (data[4] + (data[5] << 8));
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3304      	adds	r3, #4
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3305      	adds	r3, #5
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	b29b      	uxth	r3, r3
 800435c:	4413      	add	r3, r2
 800435e:	b299      	uxth	r1, r3
 8004360:	7d7b      	ldrb	r3, [r7, #21]
 8004362:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	b20a      	sxth	r2, r1
 8004370:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      ic[curr_ic].aux.a_codes[3]  = (data[6] + (data[7] << 8));
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3306      	adds	r3, #6
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3307      	adds	r3, #7
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	b29b      	uxth	r3, r3
 8004386:	4413      	add	r3, r2
 8004388:	b299      	uxth	r1, r3
 800438a:	7d7b      	ldrb	r3, [r7, #21]
 800438c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	4413      	add	r3, r2
 8004398:	b20a      	sxth	r2, r1
 800439a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      ic[curr_ic].aux.a_codes[4]  = (data[8] + (data[9] << 8));
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	3308      	adds	r3, #8
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3309      	adds	r3, #9
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	b299      	uxth	r1, r3
 80043b4:	7d7b      	ldrb	r3, [r7, #21]
 80043b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	b20a      	sxth	r2, r1
 80043c4:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
      ic[curr_ic].aux.a_codes[5]  = (data[10] + (data[11] << 8));
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	330a      	adds	r3, #10
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	330b      	adds	r3, #11
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4413      	add	r3, r2
 80043dc:	b299      	uxth	r1, r3
 80043de:	7d7b      	ldrb	r3, [r7, #21]
 80043e0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4413      	add	r3, r2
 80043ec:	b20a      	sxth	r2, r1
 80043ee:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
      ic[curr_ic].aux.a_codes[6]  = (data[12] + (data[13] << 8));
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	330c      	adds	r3, #12
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	330d      	adds	r3, #13
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	b29b      	uxth	r3, r3
 8004404:	4413      	add	r3, r2
 8004406:	b299      	uxth	r1, r3
 8004408:	7d7b      	ldrb	r3, [r7, #21]
 800440a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4413      	add	r3, r2
 8004416:	b20a      	sxth	r2, r1
 8004418:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
      ic[curr_ic].aux.a_codes[7]  = (data[14] + (data[15] << 8));
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	330e      	adds	r3, #14
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	330f      	adds	r3, #15
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	b29b      	uxth	r3, r3
 800442e:	4413      	add	r3, r2
 8004430:	b299      	uxth	r1, r3
 8004432:	7d7b      	ldrb	r3, [r7, #21]
 8004434:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	4413      	add	r3, r2
 8004440:	b20a      	sxth	r2, r1
 8004442:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
      ic[curr_ic].aux.a_codes[8]  = (data[16] + (data[17] << 8));
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3310      	adds	r3, #16
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3311      	adds	r3, #17
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	b29b      	uxth	r3, r3
 8004458:	4413      	add	r3, r2
 800445a:	b299      	uxth	r1, r3
 800445c:	7d7b      	ldrb	r3, [r7, #21]
 800445e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4413      	add	r3, r2
 800446a:	b20a      	sxth	r2, r1
 800446c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
      ic[curr_ic].aux.a_codes[9]  = (data[18] + (data[19] << 8));
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3312      	adds	r3, #18
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3313      	adds	r3, #19
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	b29b      	uxth	r3, r3
 8004482:	4413      	add	r3, r2
 8004484:	b299      	uxth	r1, r3
 8004486:	7d7b      	ldrb	r3, [r7, #21]
 8004488:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	4413      	add	r3, r2
 8004494:	b20a      	sxth	r2, r1
 8004496:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
      ic[curr_ic].aux.a_codes[10] = (data[20] + (data[21] << 8));
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3314      	adds	r3, #20
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3315      	adds	r3, #21
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	b299      	uxth	r1, r3
 80044b0:	7d7b      	ldrb	r3, [r7, #21]
 80044b2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	b20a      	sxth	r2, r1
 80044c0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
      ic[curr_ic].aux.a_codes[11] = (data[22] + (data[23] << 8));
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3316      	adds	r3, #22
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3317      	adds	r3, #23
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	b299      	uxth	r1, r3
 80044da:	7d7b      	ldrb	r3, [r7, #21]
 80044dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4413      	add	r3, r2
 80044e8:	b20a      	sxth	r2, r1
 80044ea:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
     break;
 80044ee:	e000      	b.n	80044f2 <adBms6830ParseAux+0x482>

    default:
      break;
 80044f0:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80044f2:	7d7b      	ldrb	r3, [r7, #21]
 80044f4:	3301      	adds	r3, #1
 80044f6:	757b      	strb	r3, [r7, #21]
 80044f8:	7d7a      	ldrb	r2, [r7, #21]
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f4ff addd 	bcc.w	80040bc <adBms6830ParseAux+0x4c>
    }
  }
  free(data);
 8004502:	6938      	ldr	r0, [r7, #16]
 8004504:	f00e fb48 	bl	8012b98 <free>
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <adBms6830ParseRAux>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseRAux(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *raux_data)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	4613      	mov	r3, r2
 8004520:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = (RDASALL_SIZE-48);}  /* RDASALL_SIZE 68 byte - (AUX 24 byte + STATUS 24 byte) */
 8004526:	7bbb      	ldrb	r3, [r7, #14]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <adBms6830ParseRAux+0x22>
 800452c:	2316      	movs	r3, #22
 800452e:	75fb      	strb	r3, [r7, #23]
 8004530:	e001      	b.n	8004536 <adBms6830ParseRAux+0x26>
  else {data_size = RX_DATA;}
 8004532:	2308      	movs	r3, #8
 8004534:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f00e f82c 	bl	8012598 <calloc>
 8004540:	4603      	mov	r3, r0
 8004542:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <adBms6830ParseRAux+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse raux memory \n");
    #else
    printf(" Failed to allocate parse raux memory \n");
 800454a:	487d      	ldr	r0, [pc, #500]	@ (8004740 <adBms6830ParseRAux+0x230>)
 800454c:	f00f ff4c 	bl	80143e8 <puts>
    #endif
    exit(0);
 8004550:	2000      	movs	r0, #0
 8004552:	f00e f83d 	bl	80125d0 <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004556:	2300      	movs	r3, #0
 8004558:	757b      	strb	r3, [r7, #21]
 800455a:	e1c9      	b.n	80048f0 <adBms6830ParseRAux+0x3e0>
  {
    memcpy(&data[0], &raux_data[address], data_size); /* dst , src , size */
 800455c:	7dbb      	ldrb	r3, [r7, #22]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	7dfa      	ldrb	r2, [r7, #23]
 8004564:	4619      	mov	r1, r3
 8004566:	6938      	ldr	r0, [r7, #16]
 8004568:	f00f ffa2 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (data_size));
 800456c:	7d7b      	ldrb	r3, [r7, #21]
 800456e:	3301      	adds	r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	7dfa      	ldrb	r2, [r7, #23]
 8004574:	fb12 f303 	smulbb	r3, r2, r3
 8004578:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 800457a:	7bbb      	ldrb	r3, [r7, #14]
 800457c:	2b04      	cmp	r3, #4
 800457e:	f200 81b3 	bhi.w	80048e8 <adBms6830ParseRAux+0x3d8>
 8004582:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <adBms6830ParseRAux+0x78>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	08004745 	.word	0x08004745
 800458c:	0800459d 	.word	0x0800459d
 8004590:	0800461b 	.word	0x0800461b
 8004594:	08004699 	.word	0x08004699
 8004598:	08004717 	.word	0x08004717
    {
    case A: /* RAux Register group A */
      ic[curr_ic].raux.ra_codes[0] = (data[0] + (data[1] << 8));
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	3301      	adds	r3, #1
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4413      	add	r3, r2
 80045ae:	b299      	uxth	r1, r3
 80045b0:	7d7b      	ldrb	r3, [r7, #21]
 80045b2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	b20a      	sxth	r2, r1
 80045c0:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
      ic[curr_ic].raux.ra_codes[1] = (data[2] + (data[3] << 8));
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3302      	adds	r3, #2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	3303      	adds	r3, #3
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	b299      	uxth	r1, r3
 80045da:	7d7b      	ldrb	r3, [r7, #21]
 80045dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	4413      	add	r3, r2
 80045e8:	b20a      	sxth	r2, r1
 80045ea:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
      ic[curr_ic].raux.ra_codes[2] = (data[4] + (data[5] << 8));
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3304      	adds	r3, #4
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3305      	adds	r3, #5
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4413      	add	r3, r2
 8004602:	b299      	uxth	r1, r3
 8004604:	7d7b      	ldrb	r3, [r7, #21]
 8004606:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4413      	add	r3, r2
 8004612:	b20a      	sxth	r2, r1
 8004614:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
      break;
 8004618:	e167      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    case B: /* RAux Register group B */
      ic[curr_ic].raux.ra_codes[3] = (data[0] + (data[1] << 8));
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	3301      	adds	r3, #1
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	b29b      	uxth	r3, r3
 800462a:	4413      	add	r3, r2
 800462c:	b299      	uxth	r1, r3
 800462e:	7d7b      	ldrb	r3, [r7, #21]
 8004630:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	4413      	add	r3, r2
 800463c:	b20a      	sxth	r2, r1
 800463e:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
      ic[curr_ic].raux.ra_codes[4] = (data[2] + (data[3] << 8));
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3302      	adds	r3, #2
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3303      	adds	r3, #3
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b29b      	uxth	r3, r3
 8004654:	4413      	add	r3, r2
 8004656:	b299      	uxth	r1, r3
 8004658:	7d7b      	ldrb	r3, [r7, #21]
 800465a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4413      	add	r3, r2
 8004666:	b20a      	sxth	r2, r1
 8004668:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
      ic[curr_ic].raux.ra_codes[5] = (data[4] + (data[5] << 8));
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3304      	adds	r3, #4
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	3305      	adds	r3, #5
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	b29b      	uxth	r3, r3
 800467e:	4413      	add	r3, r2
 8004680:	b299      	uxth	r1, r3
 8004682:	7d7b      	ldrb	r3, [r7, #21]
 8004684:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	4413      	add	r3, r2
 8004690:	b20a      	sxth	r2, r1
 8004692:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      break;
 8004696:	e128      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    case C: /* RAux Register group C */
      ic[curr_ic].raux.ra_codes[6] = (data[0] + (data[1] << 8));
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3301      	adds	r3, #1
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	b299      	uxth	r1, r3
 80046ac:	7d7b      	ldrb	r3, [r7, #21]
 80046ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	b20a      	sxth	r2, r1
 80046bc:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
      ic[curr_ic].raux.ra_codes[7] = (data[2] + (data[3] << 8));
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3302      	adds	r3, #2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	3303      	adds	r3, #3
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	b299      	uxth	r1, r3
 80046d6:	7d7b      	ldrb	r3, [r7, #21]
 80046d8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4413      	add	r3, r2
 80046e4:	b20a      	sxth	r2, r1
 80046e6:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
      ic[curr_ic].raux.ra_codes[8] = (data[4] + (data[5] << 8));
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3305      	adds	r3, #5
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	b299      	uxth	r1, r3
 8004700:	7d7b      	ldrb	r3, [r7, #21]
 8004702:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	b20a      	sxth	r2, r1
 8004710:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
      break;
 8004714:	e0e9      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    case D: /* RAux Register group D */
      ic[curr_ic].raux.ra_codes[9] =  (data[0] + (data[1] << 8));
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3301      	adds	r3, #1
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b29b      	uxth	r3, r3
 8004726:	4413      	add	r3, r2
 8004728:	b299      	uxth	r1, r3
 800472a:	7d7b      	ldrb	r3, [r7, #21]
 800472c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4413      	add	r3, r2
 8004738:	b20a      	sxth	r2, r1
 800473a:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
      break;
 800473e:	e0d4      	b.n	80048ea <adBms6830ParseRAux+0x3da>
 8004740:	08016fac 	.word	0x08016fac

    case ALL_GRP: /* RAux Register group ALL */
      ic[curr_ic].raux.ra_codes[0]  = (data[0] + (data[1] << 8));
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	b29b      	uxth	r3, r3
 8004754:	4413      	add	r3, r2
 8004756:	b299      	uxth	r1, r3
 8004758:	7d7b      	ldrb	r3, [r7, #21]
 800475a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	b20a      	sxth	r2, r1
 8004768:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
      ic[curr_ic].raux.ra_codes[1]  = (data[2] + (data[3] << 8));
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	3302      	adds	r3, #2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3303      	adds	r3, #3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	b29b      	uxth	r3, r3
 800477e:	4413      	add	r3, r2
 8004780:	b299      	uxth	r1, r3
 8004782:	7d7b      	ldrb	r3, [r7, #21]
 8004784:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004788:	fb02 f303 	mul.w	r3, r2, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	4413      	add	r3, r2
 8004790:	b20a      	sxth	r2, r1
 8004792:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
      ic[curr_ic].raux.ra_codes[2]  = (data[4] + (data[5] << 8));
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3304      	adds	r3, #4
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3305      	adds	r3, #5
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	b299      	uxth	r1, r3
 80047ac:	7d7b      	ldrb	r3, [r7, #21]
 80047ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4413      	add	r3, r2
 80047ba:	b20a      	sxth	r2, r1
 80047bc:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
      ic[curr_ic].raux.ra_codes[3]  = (data[6] + (data[7] << 8));
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	3306      	adds	r3, #6
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3307      	adds	r3, #7
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	b299      	uxth	r1, r3
 80047d6:	7d7b      	ldrb	r3, [r7, #21]
 80047d8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80047dc:	fb02 f303 	mul.w	r3, r2, r3
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	4413      	add	r3, r2
 80047e4:	b20a      	sxth	r2, r1
 80047e6:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
      ic[curr_ic].raux.ra_codes[4]  = (data[8] + (data[9] << 8));
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3308      	adds	r3, #8
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3309      	adds	r3, #9
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	b299      	uxth	r1, r3
 8004800:	7d7b      	ldrb	r3, [r7, #21]
 8004802:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4413      	add	r3, r2
 800480e:	b20a      	sxth	r2, r1
 8004810:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
      ic[curr_ic].raux.ra_codes[5]  = (data[10] + (data[11] << 8));
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	330a      	adds	r3, #10
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	330b      	adds	r3, #11
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	b29b      	uxth	r3, r3
 8004826:	4413      	add	r3, r2
 8004828:	b299      	uxth	r1, r3
 800482a:	7d7b      	ldrb	r3, [r7, #21]
 800482c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	4413      	add	r3, r2
 8004838:	b20a      	sxth	r2, r1
 800483a:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      ic[curr_ic].raux.ra_codes[6]  = (data[12] + (data[13] << 8));
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	330c      	adds	r3, #12
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	330d      	adds	r3, #13
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	b29b      	uxth	r3, r3
 8004850:	4413      	add	r3, r2
 8004852:	b299      	uxth	r1, r3
 8004854:	7d7b      	ldrb	r3, [r7, #21]
 8004856:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4413      	add	r3, r2
 8004862:	b20a      	sxth	r2, r1
 8004864:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
      ic[curr_ic].raux.ra_codes[7]  = (data[14] + (data[15] << 8));
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	330e      	adds	r3, #14
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	330f      	adds	r3, #15
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	b29b      	uxth	r3, r3
 800487a:	4413      	add	r3, r2
 800487c:	b299      	uxth	r1, r3
 800487e:	7d7b      	ldrb	r3, [r7, #21]
 8004880:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	4413      	add	r3, r2
 800488c:	b20a      	sxth	r2, r1
 800488e:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
      ic[curr_ic].raux.ra_codes[8]  = (data[16] + (data[17] << 8));
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3310      	adds	r3, #16
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3311      	adds	r3, #17
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	b299      	uxth	r1, r3
 80048a8:	7d7b      	ldrb	r3, [r7, #21]
 80048aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4413      	add	r3, r2
 80048b6:	b20a      	sxth	r2, r1
 80048b8:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
      ic[curr_ic].raux.ra_codes[9]  = (data[18] + (data[19] << 8));
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3312      	adds	r3, #18
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3313      	adds	r3, #19
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	b299      	uxth	r1, r3
 80048d2:	7d7b      	ldrb	r3, [r7, #21]
 80048d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	4413      	add	r3, r2
 80048e0:	b20a      	sxth	r2, r1
 80048e2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
     break;
 80048e6:	e000      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    default:
      break;
 80048e8:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80048ea:	7d7b      	ldrb	r3, [r7, #21]
 80048ec:	3301      	adds	r3, #1
 80048ee:	757b      	strb	r3, [r7, #21]
 80048f0:	7d7a      	ldrb	r2, [r7, #21]
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	f4ff ae31 	bcc.w	800455c <adBms6830ParseRAux+0x4c>
    }
  }
  free(data);
 80048fa:	6938      	ldr	r0, [r7, #16]
 80048fc:	f00e f94c 	bl	8012b98 <free>
}
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <adBms6830ParseStatusA>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusA(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800491a:	2300      	movs	r3, #0
 800491c:	75bb      	strb	r3, [r7, #22]
 800491e:	e07d      	b.n	8004a1c <adBms6830ParseStatusA+0x114>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004920:	7dbb      	ldrb	r3, [r7, #22]
 8004922:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4413      	add	r3, r2
 800492e:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	2208      	movs	r2, #8
 800493a:	4619      	mov	r1, r3
 800493c:	f00f fdb8 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004940:	7dbb      	ldrb	r3, [r7, #22]
 8004942:	3301      	adds	r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].stata.vref2   = (ic[curr_ic].stat.rx_data[0] | (ic[curr_ic].stat.rx_data[1] << 8));
 800494a:	7dbb      	ldrb	r3, [r7, #22]
 800494c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4413      	add	r3, r2
 8004958:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 800495c:	b21a      	sxth	r2, r3
 800495e:	7dbb      	ldrb	r3, [r7, #22]
 8004960:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	440b      	add	r3, r1
 800496c:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8004970:	b21b      	sxth	r3, r3
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	b21b      	sxth	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	b219      	sxth	r1, r3
 800497a:	7dbb      	ldrb	r3, [r7, #22]
 800497c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	4413      	add	r3, r2
 8004988:	b28a      	uxth	r2, r1
 800498a:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    ic[curr_ic].stata.itmp = (ic[curr_ic].stat.rx_data[2] | (ic[curr_ic].stat.rx_data[3] << 8));
 800498e:	7dbb      	ldrb	r3, [r7, #22]
 8004990:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	4413      	add	r3, r2
 800499c:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 80049a0:	b21a      	sxth	r2, r3
 80049a2:	7dbb      	ldrb	r3, [r7, #22]
 80049a4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	440b      	add	r3, r1
 80049b0:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80049b4:	b21b      	sxth	r3, r3
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b219      	sxth	r1, r3
 80049be:	7dbb      	ldrb	r3, [r7, #22]
 80049c0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4413      	add	r3, r2
 80049cc:	b28a      	uxth	r2, r1
 80049ce:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
    ic[curr_ic].stata.vref3   = (ic[curr_ic].stat.rx_data[4] | (ic[curr_ic].stat.rx_data[5] << 8));
 80049d2:	7dbb      	ldrb	r3, [r7, #22]
 80049d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	4413      	add	r3, r2
 80049e0:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 80049e4:	b21a      	sxth	r2, r3
 80049e6:	7dbb      	ldrb	r3, [r7, #22]
 80049e8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	440b      	add	r3, r1
 80049f4:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 80049f8:	b21b      	sxth	r3, r3
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	b21b      	sxth	r3, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	b219      	sxth	r1, r3
 8004a02:	7dbb      	ldrb	r3, [r7, #22]
 8004a04:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	4413      	add	r3, r2
 8004a10:	b28a      	uxth	r2, r1
 8004a12:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004a16:	7dbb      	ldrb	r3, [r7, #22]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	75bb      	strb	r3, [r7, #22]
 8004a1c:	7dba      	ldrb	r2, [r7, #22]
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	f4ff af7d 	bcc.w	8004920 <adBms6830ParseStatusA+0x18>
  }
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <adBms6830ParseStatusB>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusB(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	75bb      	strb	r3, [r7, #22]
 8004a46:	e077      	b.n	8004b38 <adBms6830ParseStatusB+0x108>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004a48:	7dbb      	ldrb	r3, [r7, #22]
 8004a4a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	2208      	movs	r2, #8
 8004a62:	4619      	mov	r1, r3
 8004a64:	f00f fd24 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004a68:	7dbb      	ldrb	r3, [r7, #22]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].statb.vd   = (ic[curr_ic].stat.rx_data[0] + (ic[curr_ic].stat.rx_data[1] << 8));
 8004a72:	7dbb      	ldrb	r3, [r7, #22]
 8004a74:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004a84:	4618      	mov	r0, r3
 8004a86:	7dbb      	ldrb	r3, [r7, #22]
 8004a88:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4413      	add	r3, r2
 8004a94:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	7dbb      	ldrb	r3, [r7, #22]
 8004a9e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	440b      	add	r3, r1
 8004aaa:	4402      	add	r2, r0
 8004aac:	b292      	uxth	r2, r2
 8004aae:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    ic[curr_ic].statb.va = (ic[curr_ic].stat.rx_data[2] + (ic[curr_ic].stat.rx_data[3] << 8));
 8004ab2:	7dbb      	ldrb	r3, [r7, #22]
 8004ab4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	7dbb      	ldrb	r3, [r7, #22]
 8004ac8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	7dbb      	ldrb	r3, [r7, #22]
 8004ade:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	440b      	add	r3, r1
 8004aea:	4402      	add	r2, r0
 8004aec:	b292      	uxth	r2, r2
 8004aee:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    ic[curr_ic].statb.vr4k   = (ic[curr_ic].stat.rx_data[4] + (ic[curr_ic].stat.rx_data[5] << 8));
 8004af2:	7dbb      	ldrb	r3, [r7, #22]
 8004af4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	4413      	add	r3, r2
 8004b00:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004b04:	4618      	mov	r0, r3
 8004b06:	7dbb      	ldrb	r3, [r7, #22]
 8004b08:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4413      	add	r3, r2
 8004b14:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	7dbb      	ldrb	r3, [r7, #22]
 8004b1e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	440b      	add	r3, r1
 8004b2a:	4402      	add	r2, r0
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004b32:	7dbb      	ldrb	r3, [r7, #22]
 8004b34:	3301      	adds	r3, #1
 8004b36:	75bb      	strb	r3, [r7, #22]
 8004b38:	7dba      	ldrb	r2, [r7, #22]
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d383      	bcc.n	8004a48 <adBms6830ParseStatusB+0x18>
  }
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <adBms6830ParseStatusC>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusC(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	4603      	mov	r3, r0
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	75bb      	strb	r3, [r7, #22]
 8004b60:	e1e7      	b.n	8004f32 <adBms6830ParseStatusC+0x3e8>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004b62:	7dbb      	ldrb	r3, [r7, #22]
 8004b64:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f00f fc97 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004b82:	7dbb      	ldrb	r3, [r7, #22]
 8004b84:	3301      	adds	r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].statc.cs_flt   = (ic[curr_ic].stat.rx_data[0] + (ic[curr_ic].stat.rx_data[1] << 8));
 8004b8c:	7dbb      	ldrb	r3, [r7, #22]
 8004b8e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	7dbb      	ldrb	r3, [r7, #22]
 8004ba2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	7dbb      	ldrb	r3, [r7, #22]
 8004bb8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	440b      	add	r3, r1
 8004bc4:	4402      	add	r2, r0
 8004bc6:	b292      	uxth	r2, r2
 8004bc8:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
    ic[curr_ic].statc.otp2_med = (ic[curr_ic].stat.rx_data[4] & 0x01);
 8004bcc:	7dbb      	ldrb	r3, [r7, #22]
 8004bce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f893 1153 	ldrb.w	r1, [r3, #339]	@ 0x153
 8004bde:	7dbb      	ldrb	r3, [r7, #22]
 8004be0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004be4:	fb02 f303 	mul.w	r3, r2, r3
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	441a      	add	r2, r3
 8004bec:	460b      	mov	r3, r1
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	b2d9      	uxtb	r1, r3
 8004bf4:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004bf8:	f361 13c7 	bfi	r3, r1, #7, #1
 8004bfc:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.otp2_ed = ((ic[curr_ic].stat.rx_data[4] & 0x02) >> 1);
 8004c00:	7dbb      	ldrb	r3, [r7, #22]
 8004c02:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004c12:	1059      	asrs	r1, r3, #1
 8004c14:	7dbb      	ldrb	r3, [r7, #22]
 8004c16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	441a      	add	r2, r3
 8004c22:	460b      	mov	r3, r1
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	b2d9      	uxtb	r1, r3
 8004c2a:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004c2e:	f361 1386 	bfi	r3, r1, #6, #1
 8004c32:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.otp1_med = ((ic[curr_ic].stat.rx_data[4] & 0x04) >> 2);
 8004c36:	7dbb      	ldrb	r3, [r7, #22]
 8004c38:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	4413      	add	r3, r2
 8004c44:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004c48:	1099      	asrs	r1, r3, #2
 8004c4a:	7dbb      	ldrb	r3, [r7, #22]
 8004c4c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c50:	fb02 f303 	mul.w	r3, r2, r3
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	441a      	add	r2, r3
 8004c58:	460b      	mov	r3, r1
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2d9      	uxtb	r1, r3
 8004c60:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004c64:	f361 1345 	bfi	r3, r1, #5, #1
 8004c68:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.otp1_ed = ((ic[curr_ic].stat.rx_data[4] & 0x08) >> 3);
 8004c6c:	7dbb      	ldrb	r3, [r7, #22]
 8004c6e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004c7e:	10d9      	asrs	r1, r3, #3
 8004c80:	7dbb      	ldrb	r3, [r7, #22]
 8004c82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	460b      	mov	r3, r1
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	b2d9      	uxtb	r1, r3
 8004c96:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004c9a:	f361 1304 	bfi	r3, r1, #4, #1
 8004c9e:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.vd_uv  = ((ic[curr_ic].stat.rx_data[4] & 0x10) >> 4);
 8004ca2:	7dbb      	ldrb	r3, [r7, #22]
 8004ca4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004cb4:	1119      	asrs	r1, r3, #4
 8004cb6:	7dbb      	ldrb	r3, [r7, #22]
 8004cb8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	441a      	add	r2, r3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	b2d9      	uxtb	r1, r3
 8004ccc:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004cd0:	f361 03c3 	bfi	r3, r1, #3, #1
 8004cd4:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.vd_ov = ((ic[curr_ic].stat.rx_data[4] & 0x20) >> 5);
 8004cd8:	7dbb      	ldrb	r3, [r7, #22]
 8004cda:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004cea:	1159      	asrs	r1, r3, #5
 8004cec:	7dbb      	ldrb	r3, [r7, #22]
 8004cee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	b2d9      	uxtb	r1, r3
 8004d02:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004d06:	f361 0382 	bfi	r3, r1, #2, #1
 8004d0a:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.va_uv = ((ic[curr_ic].stat.rx_data[4] & 0x40) >> 6);
 8004d0e:	7dbb      	ldrb	r3, [r7, #22]
 8004d10:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004d20:	1199      	asrs	r1, r3, #6
 8004d22:	7dbb      	ldrb	r3, [r7, #22]
 8004d24:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	441a      	add	r2, r3
 8004d30:	460b      	mov	r3, r1
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	b2d9      	uxtb	r1, r3
 8004d38:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004d3c:	f361 0341 	bfi	r3, r1, #1, #1
 8004d40:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.va_ov = ((ic[curr_ic].stat.rx_data[4] & 0x80) >> 7);
 8004d44:	7dbb      	ldrb	r3, [r7, #22]
 8004d46:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	b2d9      	uxtb	r1, r3
 8004d5a:	7dbb      	ldrb	r3, [r7, #22]
 8004d5c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d60:	fb02 f303 	mul.w	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	441a      	add	r2, r3
 8004d68:	460b      	mov	r3, r1
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	b2d9      	uxtb	r1, r3
 8004d70:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004d74:	f361 0300 	bfi	r3, r1, #0, #1
 8004d78:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.oscchk = (ic[curr_ic].stat.rx_data[5] & 0x01);
 8004d7c:	7dbb      	ldrb	r3, [r7, #22]
 8004d7e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f893 1154 	ldrb.w	r1, [r3, #340]	@ 0x154
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	b2d9      	uxtb	r1, r3
 8004da4:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004da8:	f361 13c7 	bfi	r3, r1, #7, #1
 8004dac:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.tmodchk = ((ic[curr_ic].stat.rx_data[5] & 0x02) >> 1);
 8004db0:	7dbb      	ldrb	r3, [r7, #22]
 8004db2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004dc2:	1059      	asrs	r1, r3, #1
 8004dc4:	7dbb      	ldrb	r3, [r7, #22]
 8004dc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	b2d9      	uxtb	r1, r3
 8004dda:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004dde:	f361 1386 	bfi	r3, r1, #6, #1
 8004de2:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.thsd = ((ic[curr_ic].stat.rx_data[5] & 0x04) >> 2);
 8004de6:	7dbb      	ldrb	r3, [r7, #22]
 8004de8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004dec:	fb02 f303 	mul.w	r3, r2, r3
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4413      	add	r3, r2
 8004df4:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004df8:	1099      	asrs	r1, r3, #2
 8004dfa:	7dbb      	ldrb	r3, [r7, #22]
 8004dfc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	441a      	add	r2, r3
 8004e08:	460b      	mov	r3, r1
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004e14:	f361 1345 	bfi	r3, r1, #5, #1
 8004e18:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.sleep = ((ic[curr_ic].stat.rx_data[5] & 0x08) >> 3);
 8004e1c:	7dbb      	ldrb	r3, [r7, #22]
 8004e1e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004e2e:	10d9      	asrs	r1, r3, #3
 8004e30:	7dbb      	ldrb	r3, [r7, #22]
 8004e32:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	441a      	add	r2, r3
 8004e3e:	460b      	mov	r3, r1
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	b2d9      	uxtb	r1, r3
 8004e46:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004e4a:	f361 1304 	bfi	r3, r1, #4, #1
 8004e4e:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.spiflt  = ((ic[curr_ic].stat.rx_data[5] & 0x10) >> 4);
 8004e52:	7dbb      	ldrb	r3, [r7, #22]
 8004e54:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004e64:	1119      	asrs	r1, r3, #4
 8004e66:	7dbb      	ldrb	r3, [r7, #22]
 8004e68:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	441a      	add	r2, r3
 8004e74:	460b      	mov	r3, r1
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	b2d9      	uxtb	r1, r3
 8004e7c:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004e80:	f361 03c3 	bfi	r3, r1, #3, #1
 8004e84:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.comp = ((ic[curr_ic].stat.rx_data[5] & 0x20) >> 5);
 8004e88:	7dbb      	ldrb	r3, [r7, #22]
 8004e8a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4413      	add	r3, r2
 8004e96:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004e9a:	1159      	asrs	r1, r3, #5
 8004e9c:	7dbb      	ldrb	r3, [r7, #22]
 8004e9e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	441a      	add	r2, r3
 8004eaa:	460b      	mov	r3, r1
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	b2d9      	uxtb	r1, r3
 8004eb2:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004eb6:	f361 0382 	bfi	r3, r1, #2, #1
 8004eba:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.vdel = ((ic[curr_ic].stat.rx_data[5] & 0x40) >> 6);
 8004ebe:	7dbb      	ldrb	r3, [r7, #22]
 8004ec0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004ed0:	1199      	asrs	r1, r3, #6
 8004ed2:	7dbb      	ldrb	r3, [r7, #22]
 8004ed4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ed8:	fb02 f303 	mul.w	r3, r2, r3
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	441a      	add	r2, r3
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	b2d9      	uxtb	r1, r3
 8004ee8:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004eec:	f361 0341 	bfi	r3, r1, #1, #1
 8004ef0:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.vde = ((ic[curr_ic].stat.rx_data[5] & 0x80) >> 7);
 8004ef4:	7dbb      	ldrb	r3, [r7, #22]
 8004ef6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004f06:	09db      	lsrs	r3, r3, #7
 8004f08:	b2d9      	uxtb	r1, r3
 8004f0a:	7dbb      	ldrb	r3, [r7, #22]
 8004f0c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004f10:	fb02 f303 	mul.w	r3, r2, r3
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	441a      	add	r2, r3
 8004f18:	460b      	mov	r3, r1
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	b2d9      	uxtb	r1, r3
 8004f20:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004f24:	f361 0300 	bfi	r3, r1, #0, #1
 8004f28:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004f2c:	7dbb      	ldrb	r3, [r7, #22]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	75bb      	strb	r3, [r7, #22]
 8004f32:	7dba      	ldrb	r2, [r7, #22]
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	f4ff ae13 	bcc.w	8004b62 <adBms6830ParseStatusC+0x18>
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <adBms6830ParseStatusD>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusD(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	75bb      	strb	r3, [r7, #22]
 8004f5c:	e32b      	b.n	80055b6 <adBms6830ParseStatusD+0x670>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004f5e:	7dbb      	ldrb	r3, [r7, #22]
 8004f60:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	2208      	movs	r2, #8
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f00f fa99 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004f7e:	7dbb      	ldrb	r3, [r7, #22]
 8004f80:	3301      	adds	r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	75fb      	strb	r3, [r7, #23]
    /* uv, ov bits 1 to 4 status bits */
    ic[curr_ic].statd.c_uv[0] = (ic[curr_ic].stat.rx_data[0] & 0x01);
 8004f88:	7dbb      	ldrb	r3, [r7, #22]
 8004f8a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	f893 214f 	ldrb.w	r2, [r3, #335]	@ 0x14f
 8004f9a:	7dbb      	ldrb	r3, [r7, #22]
 8004f9c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f002 0201 	and.w	r2, r2, #1
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    ic[curr_ic].statd.c_ov[0] = ((ic[curr_ic].stat.rx_data[0] & 0x02) >> 1);
 8004fb2:	7dbb      	ldrb	r3, [r7, #22]
 8004fb4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004fc4:	105b      	asrs	r3, r3, #1
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	7dbb      	ldrb	r3, [r7, #22]
 8004fca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004fce:	fb01 f303 	mul.w	r3, r1, r3
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f002 0201 	and.w	r2, r2, #1
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    ic[curr_ic].statd.c_uv[1] = ((ic[curr_ic].stat.rx_data[0] & 0x04) >> 2);
 8004fe0:	7dbb      	ldrb	r3, [r7, #22]
 8004fe2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4413      	add	r3, r2
 8004fee:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004ff2:	109b      	asrs	r3, r3, #2
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	7dbb      	ldrb	r3, [r7, #22]
 8004ff8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	440b      	add	r3, r1
 8005004:	f002 0201 	and.w	r2, r2, #1
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    ic[curr_ic].statd.c_ov[1] = ((ic[curr_ic].stat.rx_data[0] & 0x08) >> 3);
 800500e:	7dbb      	ldrb	r3, [r7, #22]
 8005010:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	4413      	add	r3, r2
 800501c:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8005020:	10db      	asrs	r3, r3, #3
 8005022:	b2da      	uxtb	r2, r3
 8005024:	7dbb      	ldrb	r3, [r7, #22]
 8005026:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	440b      	add	r3, r1
 8005032:	f002 0201 	and.w	r2, r2, #1
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    ic[curr_ic].statd.c_uv[2] = ((ic[curr_ic].stat.rx_data[0] & 0x10) >> 4);
 800503c:	7dbb      	ldrb	r3, [r7, #22]
 800503e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4413      	add	r3, r2
 800504a:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 800504e:	111b      	asrs	r3, r3, #4
 8005050:	b2da      	uxtb	r2, r3
 8005052:	7dbb      	ldrb	r3, [r7, #22]
 8005054:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	440b      	add	r3, r1
 8005060:	f002 0201 	and.w	r2, r2, #1
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
    ic[curr_ic].statd.c_ov[2] = ((ic[curr_ic].stat.rx_data[0] & 0x20) >> 5);
 800506a:	7dbb      	ldrb	r3, [r7, #22]
 800506c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	4413      	add	r3, r2
 8005078:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 800507c:	115b      	asrs	r3, r3, #5
 800507e:	b2da      	uxtb	r2, r3
 8005080:	7dbb      	ldrb	r3, [r7, #22]
 8005082:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	440b      	add	r3, r1
 800508e:	f002 0201 	and.w	r2, r2, #1
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
    ic[curr_ic].statd.c_uv[3] = ((ic[curr_ic].stat.rx_data[0] & 0x40) >> 6);
 8005098:	7dbb      	ldrb	r3, [r7, #22]
 800509a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	4413      	add	r3, r2
 80050a6:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 80050aa:	119b      	asrs	r3, r3, #6
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
 80050b0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	440b      	add	r3, r1
 80050bc:	f002 0201 	and.w	r2, r2, #1
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
    ic[curr_ic].statd.c_ov[3] = ((ic[curr_ic].stat.rx_data[0] & 0x80) >> 7);
 80050c6:	7dbb      	ldrb	r3, [r7, #22]
 80050c8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4413      	add	r3, r2
 80050d4:	f893 214f 	ldrb.w	r2, [r3, #335]	@ 0x14f
 80050d8:	7dbb      	ldrb	r3, [r7, #22]
 80050da:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	440b      	add	r3, r1
 80050e6:	09d2      	lsrs	r2, r2, #7
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    /* uv, ov bits 5 to 8 status bits */
    ic[curr_ic].statd.c_uv[4] = (ic[curr_ic].stat.rx_data[1] & 0x01);
 80050ee:	7dbb      	ldrb	r3, [r7, #22]
 80050f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4413      	add	r3, r2
 80050fc:	f893 2150 	ldrb.w	r2, [r3, #336]	@ 0x150
 8005100:	7dbb      	ldrb	r3, [r7, #22]
 8005102:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	440b      	add	r3, r1
 800510e:	f002 0201 	and.w	r2, r2, #1
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    ic[curr_ic].statd.c_ov[4] = ((ic[curr_ic].stat.rx_data[1] & 0x02) >> 1);
 8005118:	7dbb      	ldrb	r3, [r7, #22]
 800511a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4413      	add	r3, r2
 8005126:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800512a:	105b      	asrs	r3, r3, #1
 800512c:	b2da      	uxtb	r2, r3
 800512e:	7dbb      	ldrb	r3, [r7, #22]
 8005130:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	440b      	add	r3, r1
 800513c:	f002 0201 	and.w	r2, r2, #1
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    ic[curr_ic].statd.c_uv[5] = ((ic[curr_ic].stat.rx_data[1] & 0x04) >> 2);
 8005146:	7dbb      	ldrb	r3, [r7, #22]
 8005148:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	4413      	add	r3, r2
 8005154:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8005158:	109b      	asrs	r3, r3, #2
 800515a:	b2da      	uxtb	r2, r3
 800515c:	7dbb      	ldrb	r3, [r7, #22]
 800515e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	440b      	add	r3, r1
 800516a:	f002 0201 	and.w	r2, r2, #1
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
    ic[curr_ic].statd.c_ov[5] = ((ic[curr_ic].stat.rx_data[1] & 0x08) >> 3);
 8005174:	7dbb      	ldrb	r3, [r7, #22]
 8005176:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4413      	add	r3, r2
 8005182:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8005186:	10db      	asrs	r3, r3, #3
 8005188:	b2da      	uxtb	r2, r3
 800518a:	7dbb      	ldrb	r3, [r7, #22]
 800518c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	440b      	add	r3, r1
 8005198:	f002 0201 	and.w	r2, r2, #1
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
    ic[curr_ic].statd.c_uv[6] = ((ic[curr_ic].stat.rx_data[1] & 0x10) >> 4);
 80051a2:	7dbb      	ldrb	r3, [r7, #22]
 80051a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	4413      	add	r3, r2
 80051b0:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80051b4:	111b      	asrs	r3, r3, #4
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	7dbb      	ldrb	r3, [r7, #22]
 80051ba:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	440b      	add	r3, r1
 80051c6:	f002 0201 	and.w	r2, r2, #1
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
    ic[curr_ic].statd.c_ov[6] = ((ic[curr_ic].stat.rx_data[1] & 0x20) >> 5);
 80051d0:	7dbb      	ldrb	r3, [r7, #22]
 80051d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80051e2:	115b      	asrs	r3, r3, #5
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	7dbb      	ldrb	r3, [r7, #22]
 80051e8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	440b      	add	r3, r1
 80051f4:	f002 0201 	and.w	r2, r2, #1
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    ic[curr_ic].statd.c_uv[7] = ((ic[curr_ic].stat.rx_data[1] & 0x40) >> 6);
 80051fe:	7dbb      	ldrb	r3, [r7, #22]
 8005200:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4413      	add	r3, r2
 800520c:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8005210:	119b      	asrs	r3, r3, #6
 8005212:	b2da      	uxtb	r2, r3
 8005214:	7dbb      	ldrb	r3, [r7, #22]
 8005216:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	440b      	add	r3, r1
 8005222:	f002 0201 	and.w	r2, r2, #1
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	f883 20f3 	strb.w	r2, [r3, #243]	@ 0xf3
    ic[curr_ic].statd.c_ov[7] = ((ic[curr_ic].stat.rx_data[1] & 0x80) >> 7);
 800522c:	7dbb      	ldrb	r3, [r7, #22]
 800522e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4413      	add	r3, r2
 800523a:	f893 2150 	ldrb.w	r2, [r3, #336]	@ 0x150
 800523e:	7dbb      	ldrb	r3, [r7, #22]
 8005240:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	440b      	add	r3, r1
 800524c:	09d2      	lsrs	r2, r2, #7
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
    /* uv, ov bits 9 to 12 status bits */
    ic[curr_ic].statd.c_uv[8] = (ic[curr_ic].stat.rx_data[2] & 0x01);
 8005254:	7dbb      	ldrb	r3, [r7, #22]
 8005256:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	f893 2151 	ldrb.w	r2, [r3, #337]	@ 0x151
 8005266:	7dbb      	ldrb	r3, [r7, #22]
 8005268:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	440b      	add	r3, r1
 8005274:	f002 0201 	and.w	r2, r2, #1
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
    ic[curr_ic].statd.c_ov[8] = ((ic[curr_ic].stat.rx_data[2] & 0x02) >> 1);
 800527e:	7dbb      	ldrb	r3, [r7, #22]
 8005280:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	4413      	add	r3, r2
 800528c:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8005290:	105b      	asrs	r3, r3, #1
 8005292:	b2da      	uxtb	r2, r3
 8005294:	7dbb      	ldrb	r3, [r7, #22]
 8005296:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800529a:	fb01 f303 	mul.w	r3, r1, r3
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	440b      	add	r3, r1
 80052a2:	f002 0201 	and.w	r2, r2, #1
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    ic[curr_ic].statd.c_uv[9] = ((ic[curr_ic].stat.rx_data[2] & 0x04) >> 2);
 80052ac:	7dbb      	ldrb	r3, [r7, #22]
 80052ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4413      	add	r3, r2
 80052ba:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 80052be:	109b      	asrs	r3, r3, #2
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	7dbb      	ldrb	r3, [r7, #22]
 80052c4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	440b      	add	r3, r1
 80052d0:	f002 0201 	and.w	r2, r2, #1
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	f883 20f5 	strb.w	r2, [r3, #245]	@ 0xf5
    ic[curr_ic].statd.c_ov[9] = ((ic[curr_ic].stat.rx_data[2] & 0x08) >> 3);
 80052da:	7dbb      	ldrb	r3, [r7, #22]
 80052dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4413      	add	r3, r2
 80052e8:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 80052ec:	10db      	asrs	r3, r3, #3
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	7dbb      	ldrb	r3, [r7, #22]
 80052f2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	440b      	add	r3, r1
 80052fe:	f002 0201 	and.w	r2, r2, #1
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
    ic[curr_ic].statd.c_uv[10] = ((ic[curr_ic].stat.rx_data[2] & 0x10) >> 4);
 8005308:	7dbb      	ldrb	r3, [r7, #22]
 800530a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 800531a:	111b      	asrs	r3, r3, #4
 800531c:	b2da      	uxtb	r2, r3
 800531e:	7dbb      	ldrb	r3, [r7, #22]
 8005320:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	440b      	add	r3, r1
 800532c:	f002 0201 	and.w	r2, r2, #1
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
    ic[curr_ic].statd.c_ov[10] = ((ic[curr_ic].stat.rx_data[2] & 0x20) >> 5);
 8005336:	7dbb      	ldrb	r3, [r7, #22]
 8005338:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	4413      	add	r3, r2
 8005344:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8005348:	115b      	asrs	r3, r3, #5
 800534a:	b2da      	uxtb	r2, r3
 800534c:	7dbb      	ldrb	r3, [r7, #22]
 800534e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	440b      	add	r3, r1
 800535a:	f002 0201 	and.w	r2, r2, #1
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    ic[curr_ic].statd.c_uv[11] = ((ic[curr_ic].stat.rx_data[2] & 0x40) >> 6);
 8005364:	7dbb      	ldrb	r3, [r7, #22]
 8005366:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8005376:	119b      	asrs	r3, r3, #6
 8005378:	b2da      	uxtb	r2, r3
 800537a:	7dbb      	ldrb	r3, [r7, #22]
 800537c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	440b      	add	r3, r1
 8005388:	f002 0201 	and.w	r2, r2, #1
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7
    ic[curr_ic].statd.c_ov[11] = ((ic[curr_ic].stat.rx_data[2] & 0x80) >> 7);
 8005392:	7dbb      	ldrb	r3, [r7, #22]
 8005394:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4413      	add	r3, r2
 80053a0:	f893 2151 	ldrb.w	r2, [r3, #337]	@ 0x151
 80053a4:	7dbb      	ldrb	r3, [r7, #22]
 80053a6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	440b      	add	r3, r1
 80053b2:	09d2      	lsrs	r2, r2, #7
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    /* uv, ov bits 13 to 16 status bits */
    ic[curr_ic].statd.c_uv[12] = (ic[curr_ic].stat.rx_data[3] & 0x01);
 80053ba:	7dbb      	ldrb	r3, [r7, #22]
 80053bc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4413      	add	r3, r2
 80053c8:	f893 2152 	ldrb.w	r2, [r3, #338]	@ 0x152
 80053cc:	7dbb      	ldrb	r3, [r7, #22]
 80053ce:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	440b      	add	r3, r1
 80053da:	f002 0201 	and.w	r2, r2, #1
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
    ic[curr_ic].statd.c_ov[12] = ((ic[curr_ic].stat.rx_data[3] & 0x02) >> 1);
 80053e4:	7dbb      	ldrb	r3, [r7, #22]
 80053e6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4413      	add	r3, r2
 80053f2:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80053f6:	105b      	asrs	r3, r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	7dbb      	ldrb	r3, [r7, #22]
 80053fc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	440b      	add	r3, r1
 8005408:	f002 0201 	and.w	r2, r2, #1
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
    ic[curr_ic].statd.c_uv[13] = ((ic[curr_ic].stat.rx_data[3] & 0x04) >> 2);
 8005412:	7dbb      	ldrb	r3, [r7, #22]
 8005414:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	4413      	add	r3, r2
 8005420:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8005424:	109b      	asrs	r3, r3, #2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	7dbb      	ldrb	r3, [r7, #22]
 800542a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800542e:	fb01 f303 	mul.w	r3, r1, r3
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	440b      	add	r3, r1
 8005436:	f002 0201 	and.w	r2, r2, #1
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
    ic[curr_ic].statd.c_ov[13] = ((ic[curr_ic].stat.rx_data[3] & 0x08) >> 3);
 8005440:	7dbb      	ldrb	r3, [r7, #22]
 8005442:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8005452:	10db      	asrs	r3, r3, #3
 8005454:	b2da      	uxtb	r2, r3
 8005456:	7dbb      	ldrb	r3, [r7, #22]
 8005458:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	440b      	add	r3, r1
 8005464:	f002 0201 	and.w	r2, r2, #1
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    ic[curr_ic].statd.c_uv[14] = ((ic[curr_ic].stat.rx_data[3] & 0x10) >> 4);
 800546e:	7dbb      	ldrb	r3, [r7, #22]
 8005470:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4413      	add	r3, r2
 800547c:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8005480:	111b      	asrs	r3, r3, #4
 8005482:	b2da      	uxtb	r2, r3
 8005484:	7dbb      	ldrb	r3, [r7, #22]
 8005486:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	440b      	add	r3, r1
 8005492:	f002 0201 	and.w	r2, r2, #1
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
    ic[curr_ic].statd.c_ov[14] = ((ic[curr_ic].stat.rx_data[3] & 0x20) >> 5);
 800549c:	7dbb      	ldrb	r3, [r7, #22]
 800549e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4413      	add	r3, r2
 80054aa:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80054ae:	115b      	asrs	r3, r3, #5
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	7dbb      	ldrb	r3, [r7, #22]
 80054b4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	440b      	add	r3, r1
 80054c0:	f002 0201 	and.w	r2, r2, #1
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
    ic[curr_ic].statd.c_uv[15] = ((ic[curr_ic].stat.rx_data[3] & 0x40) >> 6);
 80054ca:	7dbb      	ldrb	r3, [r7, #22]
 80054cc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	4413      	add	r3, r2
 80054d8:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80054dc:	119b      	asrs	r3, r3, #6
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	7dbb      	ldrb	r3, [r7, #22]
 80054e2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	440b      	add	r3, r1
 80054ee:	f002 0201 	and.w	r2, r2, #1
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
    ic[curr_ic].statd.c_ov[15] = ((ic[curr_ic].stat.rx_data[3] & 0x80) >> 7);
 80054f8:	7dbb      	ldrb	r3, [r7, #22]
 80054fa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	f893 2152 	ldrb.w	r2, [r3, #338]	@ 0x152
 800550a:	7dbb      	ldrb	r3, [r7, #22]
 800550c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	440b      	add	r3, r1
 8005518:	09d2      	lsrs	r2, r2, #7
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
    /* ct and cts */
    ic[curr_ic].statd.cts = (ic[curr_ic].stat.rx_data[4] & 0x03);
 8005520:	7dbb      	ldrb	r3, [r7, #22]
 8005522:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4413      	add	r3, r2
 800552e:	f893 1153 	ldrb.w	r1, [r3, #339]	@ 0x153
 8005532:	7dbb      	ldrb	r3, [r7, #22]
 8005534:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	441a      	add	r2, r3
 8005540:	460b      	mov	r3, r1
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	b2d9      	uxtb	r1, r3
 8005548:	f892 30fc 	ldrb.w	r3, [r2, #252]	@ 0xfc
 800554c:	f361 1387 	bfi	r3, r1, #6, #2
 8005550:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc
    ic[curr_ic].statd.ct = ((ic[curr_ic].stat.rx_data[4] & 0xFC) >> 2);
 8005554:	7dbb      	ldrb	r3, [r7, #22]
 8005556:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4413      	add	r3, r2
 8005562:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8005566:	089b      	lsrs	r3, r3, #2
 8005568:	b2d9      	uxtb	r1, r3
 800556a:	7dbb      	ldrb	r3, [r7, #22]
 800556c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	441a      	add	r2, r3
 8005578:	460b      	mov	r3, r1
 800557a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800557e:	b2d9      	uxtb	r1, r3
 8005580:	f892 30fc 	ldrb.w	r3, [r2, #252]	@ 0xfc
 8005584:	f361 0305 	bfi	r3, r1, #0, #6
 8005588:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc
    /* oc_cntr */
    ic[curr_ic].statd.oc_cntr = (ic[curr_ic].stat.rx_data[5] & 0xFF);
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	441a      	add	r2, r3
 800559a:	7dbb      	ldrb	r3, [r7, #22]
 800559c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	440b      	add	r3, r1
 80055a8:	f892 2154 	ldrb.w	r2, [r2, #340]	@ 0x154
 80055ac:	f883 20fd 	strb.w	r2, [r3, #253]	@ 0xfd
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80055b0:	7dbb      	ldrb	r3, [r7, #22]
 80055b2:	3301      	adds	r3, #1
 80055b4:	75bb      	strb	r3, [r7, #22]
 80055b6:	7dba      	ldrb	r2, [r7, #22]
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f4ff accf 	bcc.w	8004f5e <adBms6830ParseStatusD+0x18>
  }
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <adBms6830ParseStatusE>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusE(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b086      	sub	sp, #24
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	4603      	mov	r3, r0
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80055dc:	2300      	movs	r3, #0
 80055de:	75bb      	strb	r3, [r7, #22]
 80055e0:	e05e      	b.n	80056a0 <adBms6830ParseStatusE+0xd6>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80055e2:	7dbb      	ldrb	r3, [r7, #22]
 80055e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	2208      	movs	r2, #8
 80055fc:	4619      	mov	r1, r3
 80055fe:	f00e ff57 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005602:	7dbb      	ldrb	r3, [r7, #22]
 8005604:	3301      	adds	r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].state.gpi   = ((ic[curr_ic].stat.rx_data[4] + ((ic[curr_ic].stat.rx_data[5] & 0x03) << 8)));
 800560c:	7dbb      	ldrb	r3, [r7, #22]
 800560e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 800561e:	4619      	mov	r1, r3
 8005620:	7dbb      	ldrb	r3, [r7, #22]
 8005622:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	b29b      	uxth	r3, r3
 8005636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563a:	b29b      	uxth	r3, r3
 800563c:	440b      	add	r3, r1
 800563e:	b299      	uxth	r1, r3
 8005640:	7dbb      	ldrb	r3, [r7, #22]
 8005642:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	441a      	add	r2, r3
 800564e:	460b      	mov	r3, r1
 8005650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005654:	b299      	uxth	r1, r3
 8005656:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	@ 0xfe
 800565a:	f361 0309 	bfi	r3, r1, #0, #10
 800565e:	f8a2 30fe 	strh.w	r3, [r2, #254]	@ 0xfe
    ic[curr_ic].state.rev = ((ic[curr_ic].stat.rx_data[5] & 0xF0) >> 4);
 8005662:	7dbb      	ldrb	r3, [r7, #22]
 8005664:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	4413      	add	r3, r2
 8005670:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	b2d9      	uxtb	r1, r3
 8005678:	7dbb      	ldrb	r3, [r7, #22]
 800567a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	460b      	mov	r3, r1
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	b2d9      	uxtb	r1, r3
 800568e:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 8005692:	f361 0385 	bfi	r3, r1, #2, #4
 8005696:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800569a:	7dbb      	ldrb	r3, [r7, #22]
 800569c:	3301      	adds	r3, #1
 800569e:	75bb      	strb	r3, [r7, #22]
 80056a0:	7dba      	ldrb	r2, [r7, #22]
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d39c      	bcc.n	80055e2 <adBms6830ParseStatusE+0x18>
  }
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <adBms6830ParseStatus>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatus(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	4613      	mov	r3, r2
 80056c4:	73bb      	strb	r3, [r7, #14]
  uint8_t statc[RX_DATA], state[RX_DATA];
  switch (grp)
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d868      	bhi.n	800579e <adBms6830ParseStatus+0xea>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <adBms6830ParseStatus+0x20>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	08005733 	.word	0x08005733
 80056d8:	080056ed 	.word	0x080056ed
 80056dc:	080056fb 	.word	0x080056fb
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005717 	.word	0x08005717
 80056e8:	08005725 	.word	0x08005725
  {
    case A: /* Status Register group A */
      adBms6830ParseStatusA(tIC, &ic[0], &data[0]);
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff f908 	bl	8004908 <adBms6830ParseStatusA>
      break;
 80056f8:	e052      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case B: /* Status Register group B */
      adBms6830ParseStatusB(tIC, &ic[0], &data[0]);
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff f995 	bl	8004a30 <adBms6830ParseStatusB>
      break;
 8005706:	e04b      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case C: /* Status Register group C */
      adBms6830ParseStatusC(tIC, &ic[0], &data[0]);
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fa1b 	bl	8004b4a <adBms6830ParseStatusC>
      break;
 8005714:	e044      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case D: /* Status Register group D */
      adBms6830ParseStatusD(tIC, &ic[0], &data[0]);
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fc12 	bl	8004f46 <adBms6830ParseStatusD>
      break;
 8005722:	e03d      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case E: /* Status Register group E */
      adBms6830ParseStatusE(tIC, &ic[0], &data[0]);
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff ff4d 	bl	80055ca <adBms6830ParseStatusE>
      break;
 8005730:	e036      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case ALL_GRP: /* Status Register group ALL */
      /* Status A base address data[0] index */
      adBms6830ParseStatusA(tIC, &ic[0], &data[0]);
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff f8e5 	bl	8004908 <adBms6830ParseStatusA>
      /* Status B base address data[6] index */
      adBms6830ParseStatusB(tIC, &ic[0], &data[6]);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	1d9a      	adds	r2, r3, #6
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff f972 	bl	8004a30 <adBms6830ParseStatusB>
      /* Status C base address data[12] index */
      statc[0] = data[12];
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7b1b      	ldrb	r3, [r3, #12]
 8005750:	763b      	strb	r3, [r7, #24]
      statc[1] = data[13];
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7b5b      	ldrb	r3, [r3, #13]
 8005756:	767b      	strb	r3, [r7, #25]
      statc[4] = data[14];
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7b9b      	ldrb	r3, [r3, #14]
 800575c:	773b      	strb	r3, [r7, #28]
      statc[5] = data[15];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7bdb      	ldrb	r3, [r3, #15]
 8005762:	777b      	strb	r3, [r7, #29]
      adBms6830ParseStatusC(tIC, &ic[0], &statc[0]);
 8005764:	f107 0218 	add.w	r2, r7, #24
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff f9ec 	bl	8004b4a <adBms6830ParseStatusC>
      /* Status D base address data[16] index */
      adBms6830ParseStatusD(tIC, &ic[0], &data[16]);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f103 0210 	add.w	r2, r3, #16
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fbe2 	bl	8004f46 <adBms6830ParseStatusD>
      /* Status E base address data[22] index */
      state[4] = data[22];
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7d9b      	ldrb	r3, [r3, #22]
 8005786:	753b      	strb	r3, [r7, #20]
      state[5] = data[23];
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7ddb      	ldrb	r3, [r3, #23]
 800578c:	757b      	strb	r3, [r7, #21]
      adBms6830ParseStatusE(tIC, &ic[0], &state[0]);
 800578e:	f107 0210 	add.w	r2, r7, #16
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff ff17 	bl	80055ca <adBms6830ParseStatusE>
     break;
 800579c:	e000      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    default:
      break;
 800579e:	bf00      	nop
  }
}
 80057a0:	bf00      	nop
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <adBms6830ParseComm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseComm(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	75bb      	strb	r3, [r7, #22]
 80057be:	e0c8      	b.n	8005952 <adBms6830ParseComm+0x1aa>
  {
    memcpy(&ic[curr_ic].com.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80057c0:	7dbb      	ldrb	r3, [r7, #22]
 80057c2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4413      	add	r3, r2
 80057ce:	f203 105d 	addw	r0, r3, #349	@ 0x15d
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	2208      	movs	r2, #8
 80057da:	4619      	mov	r1, r3
 80057dc:	f00e fe68 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 80057e0:	7dbb      	ldrb	r3, [r7, #22]
 80057e2:	3301      	adds	r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].comm.icomm[0] = ((ic[curr_ic].com.rx_data[0] & 0xF0) >> 4);
 80057ea:	7dbb      	ldrb	r3, [r7, #22]
 80057ec:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	4413      	add	r3, r2
 80057f8:	f893 215d 	ldrb.w	r2, [r3, #349]	@ 0x15d
 80057fc:	7dbb      	ldrb	r3, [r7, #22]
 80057fe:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	440b      	add	r3, r1
 800580a:	0912      	lsrs	r2, r2, #4
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[curr_ic].comm.fcomm[0] = (ic[curr_ic].com.rx_data[0] & 0x0F);
 8005812:	7dbb      	ldrb	r3, [r7, #22]
 8005814:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4413      	add	r3, r2
 8005820:	f893 215d 	ldrb.w	r2, [r3, #349]	@ 0x15d
 8005824:	7dbb      	ldrb	r3, [r7, #22]
 8005826:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	440b      	add	r3, r1
 8005832:	f002 020f 	and.w	r2, r2, #15
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ic[curr_ic].comm.data[0] = (ic[curr_ic].com.rx_data[1]);
 800583c:	7dbb      	ldrb	r3, [r7, #22]
 800583e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005842:	fb02 f303 	mul.w	r3, r2, r3
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	441a      	add	r2, r3
 800584a:	7dbb      	ldrb	r3, [r7, #22]
 800584c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	440b      	add	r3, r1
 8005858:	f892 215e 	ldrb.w	r2, [r2, #350]	@ 0x15e
 800585c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[curr_ic].comm.icomm[1] = ((ic[curr_ic].com.rx_data[2] & 0xF0) >> 4);
 8005860:	7dbb      	ldrb	r3, [r7, #22]
 8005862:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	f893 215f 	ldrb.w	r2, [r3, #351]	@ 0x15f
 8005872:	7dbb      	ldrb	r3, [r7, #22]
 8005874:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	440b      	add	r3, r1
 8005880:	0912      	lsrs	r2, r2, #4
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[curr_ic].comm.data[1] = (ic[curr_ic].com.rx_data[3]);
 8005888:	7dbb      	ldrb	r3, [r7, #22]
 800588a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	441a      	add	r2, r3
 8005896:	7dbb      	ldrb	r3, [r7, #22]
 8005898:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	440b      	add	r3, r1
 80058a4:	f892 2160 	ldrb.w	r2, [r2, #352]	@ 0x160
 80058a8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    ic[curr_ic].comm.fcomm[1] = (ic[curr_ic].com.rx_data[2] & 0x0F);
 80058ac:	7dbb      	ldrb	r3, [r7, #22]
 80058ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	f893 215f 	ldrb.w	r2, [r3, #351]	@ 0x15f
 80058be:	7dbb      	ldrb	r3, [r7, #22]
 80058c0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	440b      	add	r3, r1
 80058cc:	f002 020f 	and.w	r2, r2, #15
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
    ic[curr_ic].comm.icomm[2] = ((ic[curr_ic].com.rx_data[4] & 0xF0) >> 4);
 80058d6:	7dbb      	ldrb	r3, [r7, #22]
 80058d8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	f893 2161 	ldrb.w	r2, [r3, #353]	@ 0x161
 80058e8:	7dbb      	ldrb	r3, [r7, #22]
 80058ea:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	440b      	add	r3, r1
 80058f6:	0912      	lsrs	r2, r2, #4
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[curr_ic].comm.data[2] = (ic[curr_ic].com.rx_data[5]);
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	441a      	add	r2, r3
 800590c:	7dbb      	ldrb	r3, [r7, #22]
 800590e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	440b      	add	r3, r1
 800591a:	f892 2162 	ldrb.w	r2, [r2, #354]	@ 0x162
 800591e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
    ic[curr_ic].comm.fcomm[2] = (ic[curr_ic].com.rx_data[4] & 0x0F);
 8005922:	7dbb      	ldrb	r3, [r7, #22]
 8005924:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	4413      	add	r3, r2
 8005930:	f893 2161 	ldrb.w	r2, [r3, #353]	@ 0x161
 8005934:	7dbb      	ldrb	r3, [r7, #22]
 8005936:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	440b      	add	r3, r1
 8005942:	f002 020f 	and.w	r2, r2, #15
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800594c:	7dbb      	ldrb	r3, [r7, #22]
 800594e:	3301      	adds	r3, #1
 8005950:	75bb      	strb	r3, [r7, #22]
 8005952:	7dba      	ldrb	r2, [r7, #22]
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	429a      	cmp	r2, r3
 8005958:	f4ff af32 	bcc.w	80057c0 <adBms6830ParseComm+0x18>
  }
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <adBms6830ParseSID>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseSID(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	4603      	mov	r3, r0
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005978:	2300      	movs	r3, #0
 800597a:	75bb      	strb	r3, [r7, #22]
 800597c:	e083      	b.n	8005a86 <adBms6830ParseSID+0x120>
  {
    memcpy(&ic[curr_ic].rsid.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 800597e:	7dbb      	ldrb	r3, [r7, #22]
 8005980:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005984:	fb02 f303 	mul.w	r3, r2, r3
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	4413      	add	r3, r2
 800598c:	f203 1087 	addw	r0, r3, #391	@ 0x187
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	2208      	movs	r2, #8
 8005998:	4619      	mov	r1, r3
 800599a:	f00e fd89 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 800599e:	7dbb      	ldrb	r3, [r7, #22]
 80059a0:	3301      	adds	r3, #1
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].sid.sid[0] = ic[curr_ic].rsid.rx_data[0];
 80059a8:	7dbb      	ldrb	r3, [r7, #22]
 80059aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	441a      	add	r2, r3
 80059b6:	7dbb      	ldrb	r3, [r7, #22]
 80059b8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	440b      	add	r3, r1
 80059c4:	f892 2187 	ldrb.w	r2, [r2, #391]	@ 0x187
 80059c8:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
    ic[curr_ic].sid.sid[1] = ic[curr_ic].rsid.rx_data[1];
 80059cc:	7dbb      	ldrb	r3, [r7, #22]
 80059ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	441a      	add	r2, r3
 80059da:	7dbb      	ldrb	r3, [r7, #22]
 80059dc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	440b      	add	r3, r1
 80059e8:	f892 2188 	ldrb.w	r2, [r2, #392]	@ 0x188
 80059ec:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    ic[curr_ic].sid.sid[2] = ic[curr_ic].rsid.rx_data[2];
 80059f0:	7dbb      	ldrb	r3, [r7, #22]
 80059f2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	441a      	add	r2, r3
 80059fe:	7dbb      	ldrb	r3, [r7, #22]
 8005a00:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f892 2189 	ldrb.w	r2, [r2, #393]	@ 0x189
 8005a10:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    ic[curr_ic].sid.sid[3] = ic[curr_ic].rsid.rx_data[3];
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	441a      	add	r2, r3
 8005a22:	7dbb      	ldrb	r3, [r7, #22]
 8005a24:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	440b      	add	r3, r1
 8005a30:	f892 218a 	ldrb.w	r2, [r2, #394]	@ 0x18a
 8005a34:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    ic[curr_ic].sid.sid[4] = ic[curr_ic].rsid.rx_data[4];
 8005a38:	7dbb      	ldrb	r3, [r7, #22]
 8005a3a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	441a      	add	r2, r3
 8005a46:	7dbb      	ldrb	r3, [r7, #22]
 8005a48:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	440b      	add	r3, r1
 8005a54:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 8005a58:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    ic[curr_ic].sid.sid[5] = ic[curr_ic].rsid.rx_data[5];
 8005a5c:	7dbb      	ldrb	r3, [r7, #22]
 8005a5e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	441a      	add	r2, r3
 8005a6a:	7dbb      	ldrb	r3, [r7, #22]
 8005a6c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	440b      	add	r3, r1
 8005a78:	f892 218c 	ldrb.w	r2, [r2, #396]	@ 0x18c
 8005a7c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005a80:	7dbb      	ldrb	r3, [r7, #22]
 8005a82:	3301      	adds	r3, #1
 8005a84:	75bb      	strb	r3, [r7, #22]
 8005a86:	7dba      	ldrb	r2, [r7, #22]
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f4ff af77 	bcc.w	800597e <adBms6830ParseSID+0x18>
  }
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <adBms6830ParsePwma>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwma(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005aac:	2300      	movs	r3, #0
 8005aae:	75bb      	strb	r3, [r7, #22]
 8005ab0:	e10d      	b.n	8005cce <adBms6830ParsePwma+0x234>
  {
    memcpy(&ic[curr_ic].pwma.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005ab2:	7dbb      	ldrb	r3, [r7, #22]
 8005ab4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f203 106b 	addw	r0, r3, #363	@ 0x16b
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	2208      	movs	r2, #8
 8005acc:	4619      	mov	r1, r3
 8005ace:	f00e fcef 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005ad2:	7dbb      	ldrb	r3, [r7, #22]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].PwmA.pwma[0] = (ic[curr_ic].pwma.rx_data[0] & 0x0F);
 8005adc:	7dbb      	ldrb	r3, [r7, #22]
 8005ade:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	440b      	add	r3, r1
 8005afc:	f002 020f 	and.w	r2, r2, #15
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    ic[curr_ic].PwmA.pwma[1] = ((ic[curr_ic].pwma.rx_data[0] & 0xF0) >> 4);
 8005b06:	7dbb      	ldrb	r3, [r7, #22]
 8005b08:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4413      	add	r3, r2
 8005b14:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8005b18:	7dbb      	ldrb	r3, [r7, #22]
 8005b1a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	440b      	add	r3, r1
 8005b26:	0912      	lsrs	r2, r2, #4
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
    ic[curr_ic].PwmA.pwma[2] = (ic[curr_ic].pwma.rx_data[1] & 0x0F);
 8005b2e:	7dbb      	ldrb	r3, [r7, #22]
 8005b30:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8005b40:	7dbb      	ldrb	r3, [r7, #22]
 8005b42:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	440b      	add	r3, r1
 8005b4e:	f002 020f 	and.w	r2, r2, #15
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
    ic[curr_ic].PwmA.pwma[3] = ((ic[curr_ic].pwma.rx_data[1] & 0xF0) >> 4);
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4413      	add	r3, r2
 8005b66:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8005b6a:	7dbb      	ldrb	r3, [r7, #22]
 8005b6c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	440b      	add	r3, r1
 8005b78:	0912      	lsrs	r2, r2, #4
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
    ic[curr_ic].PwmA.pwma[4] = (ic[curr_ic].pwma.rx_data[2] & 0x0F);
 8005b80:	7dbb      	ldrb	r3, [r7, #22]
 8005b82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f893 216d 	ldrb.w	r2, [r3, #365]	@ 0x16d
 8005b92:	7dbb      	ldrb	r3, [r7, #22]
 8005b94:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f002 020f 	and.w	r2, r2, #15
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
    ic[curr_ic].PwmA.pwma[5] = ((ic[curr_ic].pwma.rx_data[2] & 0xF0) >> 4);
 8005baa:	7dbb      	ldrb	r3, [r7, #22]
 8005bac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f893 216d 	ldrb.w	r2, [r3, #365]	@ 0x16d
 8005bbc:	7dbb      	ldrb	r3, [r7, #22]
 8005bbe:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	440b      	add	r3, r1
 8005bca:	0912      	lsrs	r2, r2, #4
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    ic[curr_ic].PwmA.pwma[6] = (ic[curr_ic].pwma.rx_data[3] & 0x0F);
 8005bd2:	7dbb      	ldrb	r3, [r7, #22]
 8005bd4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	4413      	add	r3, r2
 8005be0:	f893 216e 	ldrb.w	r2, [r3, #366]	@ 0x16e
 8005be4:	7dbb      	ldrb	r3, [r7, #22]
 8005be6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f002 020f 	and.w	r2, r2, #15
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    ic[curr_ic].PwmA.pwma[7] = ((ic[curr_ic].pwma.rx_data[3] & 0xF0) >> 4);
 8005bfc:	7dbb      	ldrb	r3, [r7, #22]
 8005bfe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f893 216e 	ldrb.w	r2, [r3, #366]	@ 0x16e
 8005c0e:	7dbb      	ldrb	r3, [r7, #22]
 8005c10:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c14:	fb01 f303 	mul.w	r3, r1, r3
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	440b      	add	r3, r1
 8005c1c:	0912      	lsrs	r2, r2, #4
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    ic[curr_ic].PwmA.pwma[8] = (ic[curr_ic].pwma.rx_data[4] & 0x0F);
 8005c24:	7dbb      	ldrb	r3, [r7, #22]
 8005c26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	f893 216f 	ldrb.w	r2, [r3, #367]	@ 0x16f
 8005c36:	7dbb      	ldrb	r3, [r7, #22]
 8005c38:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	440b      	add	r3, r1
 8005c44:	f002 020f 	and.w	r2, r2, #15
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
    ic[curr_ic].PwmA.pwma[9] = ((ic[curr_ic].pwma.rx_data[4] & 0xF0) >> 4);
 8005c4e:	7dbb      	ldrb	r3, [r7, #22]
 8005c50:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f893 216f 	ldrb.w	r2, [r3, #367]	@ 0x16f
 8005c60:	7dbb      	ldrb	r3, [r7, #22]
 8005c62:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	440b      	add	r3, r1
 8005c6e:	0912      	lsrs	r2, r2, #4
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    ic[curr_ic].PwmA.pwma[10] = (ic[curr_ic].pwma.rx_data[5] & 0x0F);
 8005c76:	7dbb      	ldrb	r3, [r7, #22]
 8005c78:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4413      	add	r3, r2
 8005c84:	f893 2170 	ldrb.w	r2, [r3, #368]	@ 0x170
 8005c88:	7dbb      	ldrb	r3, [r7, #22]
 8005c8a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	440b      	add	r3, r1
 8005c96:	f002 020f 	and.w	r2, r2, #15
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
    ic[curr_ic].PwmA.pwma[11] = ((ic[curr_ic].pwma.rx_data[5] & 0xF0) >> 4);
 8005ca0:	7dbb      	ldrb	r3, [r7, #22]
 8005ca2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	4413      	add	r3, r2
 8005cae:	f893 2170 	ldrb.w	r2, [r3, #368]	@ 0x170
 8005cb2:	7dbb      	ldrb	r3, [r7, #22]
 8005cb4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	440b      	add	r3, r1
 8005cc0:	0912      	lsrs	r2, r2, #4
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005cc8:	7dbb      	ldrb	r3, [r7, #22]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	75bb      	strb	r3, [r7, #22]
 8005cce:	7dba      	ldrb	r2, [r7, #22]
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	f4ff aeed 	bcc.w	8005ab2 <adBms6830ParsePwma+0x18>
  }
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <adBms6830ParsePwmb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwmb(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	4603      	mov	r3, r0
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75bb      	strb	r3, [r7, #22]
 8005cf8:	e069      	b.n	8005dce <adBms6830ParsePwmb+0xec>
  {
    memcpy(&ic[curr_ic].pwmb.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005cfa:	7dbb      	ldrb	r3, [r7, #22]
 8005cfc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d00:	fb02 f303 	mul.w	r3, r2, r3
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4413      	add	r3, r2
 8005d08:	f203 1079 	addw	r0, r3, #377	@ 0x179
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	2208      	movs	r2, #8
 8005d14:	4619      	mov	r1, r3
 8005d16:	f00e fbcb 	bl	80144b0 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005d1a:	7dbb      	ldrb	r3, [r7, #22]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].PwmB.pwmb[0] = (ic[curr_ic].pwmb.rx_data[0] & 0x0F);
 8005d24:	7dbb      	ldrb	r3, [r7, #22]
 8005d26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 8005d36:	7dbb      	ldrb	r3, [r7, #22]
 8005d38:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	440b      	add	r3, r1
 8005d44:	f002 020f 	and.w	r2, r2, #15
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    ic[curr_ic].PwmB.pwmb[1] = ((ic[curr_ic].pwmb.rx_data[0] & 0xF0) >> 4);
 8005d4e:	7dbb      	ldrb	r3, [r7, #22]
 8005d50:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 8005d60:	7dbb      	ldrb	r3, [r7, #22]
 8005d62:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	440b      	add	r3, r1
 8005d6e:	0912      	lsrs	r2, r2, #4
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
    ic[curr_ic].PwmB.pwmb[2] = (ic[curr_ic].pwmb.rx_data[1] & 0x0F);
 8005d76:	7dbb      	ldrb	r3, [r7, #22]
 8005d78:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4413      	add	r3, r2
 8005d84:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 8005d88:	7dbb      	ldrb	r3, [r7, #22]
 8005d8a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	440b      	add	r3, r1
 8005d96:	f002 020f 	and.w	r2, r2, #15
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
    ic[curr_ic].PwmB.pwmb[3] = ((ic[curr_ic].pwmb.rx_data[1] & 0xF0) >> 4);
 8005da0:	7dbb      	ldrb	r3, [r7, #22]
 8005da2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	4413      	add	r3, r2
 8005dae:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 8005db2:	7dbb      	ldrb	r3, [r7, #22]
 8005db4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	440b      	add	r3, r1
 8005dc0:	0912      	lsrs	r2, r2, #4
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005dc8:	7dbb      	ldrb	r3, [r7, #22]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	75bb      	strb	r3, [r7, #22]
 8005dce:	7dba      	ldrb	r2, [r7, #22]
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d391      	bcc.n	8005cfa <adBms6830ParsePwmb+0x18>
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <adBms6830ParsePwm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwm(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]
 8005dee:	4613      	mov	r3, r2
 8005df0:	73bb      	strb	r3, [r7, #14]
  switch (grp)
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d002      	beq.n	8005dfe <adBms6830ParsePwm+0x1e>
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d007      	beq.n	8005e0c <adBms6830ParsePwm+0x2c>
    case B:
      adBms6830ParsePwmb(tIC, &ic[0], &data[0]);
      break;

    default:
      break;
 8005dfc:	e00d      	b.n	8005e1a <adBms6830ParsePwm+0x3a>
      adBms6830ParsePwma(tIC, &ic[0], &data[0]);
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fe48 	bl	8005a9a <adBms6830ParsePwma>
      break;
 8005e0a:	e006      	b.n	8005e1a <adBms6830ParsePwm+0x3a>
      adBms6830ParsePwmb(tIC, &ic[0], &data[0]);
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff ff65 	bl	8005ce2 <adBms6830ParsePwmb>
      break;
 8005e18:	bf00      	nop
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <adBms6830CreateConfiga>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateConfiga(uint8_t tIC, cell_asic *ic)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4603      	mov	r3, r0
 8005e2a:	6039      	str	r1, [r7, #0]
 8005e2c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e0fa      	b.n	800602a <adBms6830CreateConfiga+0x208>
  {
    ic[curr_ic].configa.tx_data[0] = (((ic[curr_ic].tx_cfga.refon & 0x01) << 7) | (ic[curr_ic].tx_cfga.cth & 0x07));
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	4413      	add	r3, r2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	01db      	lsls	r3, r3, #7
 8005e4e:	b25a      	sxtb	r2, r3
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	440b      	add	r3, r1
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b259      	sxtb	r1, r3
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	4413      	add	r3, r2
 8005e80:	b2ca      	uxtb	r2, r1
 8005e82:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
    ic[curr_ic].configa.tx_data[1] = (ic[curr_ic].tx_cfga.flag_d & 0xFF);
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	441a      	add	r2, r3
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	440b      	add	r3, r1
 8005ea2:	7852      	ldrb	r2, [r2, #1]
 8005ea4:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    ic[curr_ic].configa.tx_data[2] = (((ic[curr_ic].tx_cfga.soakon & 0x01) << 7) | ((ic[curr_ic].tx_cfga.owrng & 0x01) << 6) | ((ic[curr_ic].tx_cfga.owa & 0x07) << 3));
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	789b      	ldrb	r3, [r3, #2]
 8005eb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	01db      	lsls	r3, r3, #7
 8005ec2:	b25a      	sxtb	r2, r3
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	440b      	add	r3, r1
 8005ed2:	789b      	ldrb	r3, [r3, #2]
 8005ed4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	b25b      	sxtb	r3, r3
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	b25b      	sxtb	r3, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	b25a      	sxtb	r2, r3
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	440b      	add	r3, r1
 8005ef8:	789b      	ldrb	r3, [r3, #2]
 8005efa:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f0a:	b25b      	sxtb	r3, r3
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	b259      	sxtb	r1, r3
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	b2ca      	uxtb	r2, r1
 8005f20:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    ic[curr_ic].configa.tx_data[3] = ((ic[curr_ic].tx_cfga.gpo & 0x00FF));
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	4413      	add	r3, r2
 8005f32:	885b      	ldrh	r3, [r3, #2]
 8005f34:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8005f38:	b299      	uxth	r1, r3
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	4413      	add	r3, r2
 8005f48:	b2ca      	uxtb	r2, r1
 8005f4a:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    ic[curr_ic].configa.tx_data[4] = ((ic[curr_ic].tx_cfga.gpo & 0x0300)>>8);
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f54:	fb02 f303 	mul.w	r3, r2, r3
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	121b      	asrs	r3, r3, #8
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	440b      	add	r3, r1
 8005f76:	f002 0203 	and.w	r2, r2, #3
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    ic[curr_ic].configa.tx_data[5] = (((ic[curr_ic].tx_cfga.snap & 0x01) << 5) | ((ic[curr_ic].tx_cfga.mute_st & 0x01) << 4) | ((ic[curr_ic].tx_cfga.comm_bk & 0x01) << 3) | (ic[curr_ic].tx_cfga.fc & 0x07));
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	78db      	ldrb	r3, [r3, #3]
 8005f90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	015b      	lsls	r3, r3, #5
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	b25a      	sxtb	r2, r3
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	440b      	add	r3, r1
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	b25b      	sxtb	r3, r3
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b25a      	sxtb	r2, r3
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	440b      	add	r3, r1
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	b25b      	sxtb	r3, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b25a      	sxtb	r2, r3
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	440b      	add	r3, r1
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006002:	b2db      	uxtb	r3, r3
 8006004:	b25b      	sxtb	r3, r3
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	b25b      	sxtb	r3, r3
 800600c:	4313      	orrs	r3, r2
 800600e:	b259      	sxtb	r1, r3
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	4413      	add	r3, r2
 800601e:	b2ca      	uxtb	r2, r1
 8006020:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	3301      	adds	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
 800602a:	7bfa      	ldrb	r2, [r7, #15]
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	429a      	cmp	r2, r3
 8006030:	f4ff af00 	bcc.w	8005e34 <adBms6830CreateConfiga+0x12>
  }
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <adBms6830CreateConfigb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateConfigb(uint8_t tIC, cell_asic *ic)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	6039      	str	r1, [r7, #0]
 800604c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	e0ac      	b.n	80061ae <adBms6830CreateConfigb+0x16c>
  {
    ic[curr_ic].configb.tx_data[0] = ((ic[curr_ic].tx_cfgb.vuv ));
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	4413      	add	r3, r2
 8006062:	8999      	ldrh	r1, [r3, #12]
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	4413      	add	r3, r2
 8006072:	b2ca      	uxtb	r2, r1
 8006074:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
    ic[curr_ic].configb.tx_data[1] = (((ic[curr_ic].tx_cfgb.vov & 0x000F) << 4) | ((ic[curr_ic].tx_cfgb.vuv ) >> 8));
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	4413      	add	r3, r2
 8006086:	89db      	ldrh	r3, [r3, #14]
 8006088:	b25b      	sxtb	r3, r3
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	b25a      	sxtb	r2, r3
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	440b      	add	r3, r1
 800609c:	899b      	ldrh	r3, [r3, #12]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b259      	sxtb	r1, r3
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4413      	add	r3, r2
 80060b6:	b2ca      	uxtb	r2, r1
 80060b8:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    ic[curr_ic].configb.tx_data[2] = ((ic[curr_ic].tx_cfgb.vov >>4)&0x0FF);
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	89db      	ldrh	r3, [r3, #14]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	b299      	uxth	r1, r3
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	4413      	add	r3, r2
 80060de:	b2ca      	uxtb	r2, r1
 80060e0:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
    ic[curr_ic].configb.tx_data[3] = (((ic[curr_ic].tx_cfgb.dtmen & 0x01) << 7) | ((ic[curr_ic].tx_cfgb.dtrng & 0x01) << 6) | ((ic[curr_ic].tx_cfgb.dcto & 0x3F) << 0));
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	4413      	add	r3, r2
 80060f2:	7c1b      	ldrb	r3, [r3, #16]
 80060f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	01db      	lsls	r3, r3, #7
 80060fe:	b25a      	sxtb	r2, r3
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	440b      	add	r3, r1
 800610e:	7c1b      	ldrb	r3, [r3, #16]
 8006110:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	b25b      	sxtb	r3, r3
 8006118:	019b      	lsls	r3, r3, #6
 800611a:	b25b      	sxtb	r3, r3
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	b25b      	sxtb	r3, r3
 8006122:	4313      	orrs	r3, r2
 8006124:	b25a      	sxtb	r2, r3
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	440b      	add	r3, r1
 8006134:	7c1b      	ldrb	r3, [r3, #16]
 8006136:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800613a:	b2db      	uxtb	r3, r3
 800613c:	b25b      	sxtb	r3, r3
 800613e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006142:	b25b      	sxtb	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b259      	sxtb	r1, r3
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4413      	add	r3, r2
 8006156:	b2ca      	uxtb	r2, r1
 8006158:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    ic[curr_ic].configb.tx_data[4] = ((ic[curr_ic].tx_cfgb.dcc & 0xFF));
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	4413      	add	r3, r2
 800616a:	8a59      	ldrh	r1, [r3, #18]
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4413      	add	r3, r2
 800617a:	b2ca      	uxtb	r2, r1
 800617c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    ic[curr_ic].configb.tx_data[5] = ((ic[curr_ic].tx_cfgb.dcc >>8 ));
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4413      	add	r3, r2
 800618e:	8a5b      	ldrh	r3, [r3, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	b299      	uxth	r1, r3
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	4413      	add	r3, r2
 80061a2:	b2ca      	uxtb	r2, r1
 80061a4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3301      	adds	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	f4ff af4e 	bcc.w	8006054 <adBms6830CreateConfigb+0x12>
  }
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <adBms6830CreateClrflagData>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateClrflagData(uint8_t tIC, cell_asic *ic)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	4603      	mov	r3, r0
 80061ce:	6039      	str	r1, [r7, #0]
 80061d0:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	73fb      	strb	r3, [r7, #15]
 80061d6:	e138      	b.n	800644a <adBms6830CreateClrflagData+0x284>
  {
    ic[curr_ic].clrflag.tx_data[0] = (ic[curr_ic].clflag.cl_csflt & 0x00FF);
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	8b99      	ldrh	r1, [r3, #28]
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	b2ca      	uxtb	r2, r1
 80061f8:	f883 213b 	strb.w	r2, [r3, #315]	@ 0x13b
    ic[curr_ic].clrflag.tx_data[1] = ((ic[curr_ic].clflag.cl_csflt & 0xFF00) >> 8);
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	4413      	add	r3, r2
 800620a:	8b9b      	ldrh	r3, [r3, #28]
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	b299      	uxth	r1, r3
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	4413      	add	r3, r2
 800621e:	b2ca      	uxtb	r2, r1
 8006220:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
    ic[curr_ic].clrflag.tx_data[2] = 0x00;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	4413      	add	r3, r2
 8006232:	2200      	movs	r2, #0
 8006234:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
    ic[curr_ic].clrflag.tx_data[3] = 0x00;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4413      	add	r3, r2
 800625a:	7f9b      	ldrb	r3, [r3, #30]
 800625c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	b25b      	sxtb	r3, r3
 8006264:	01db      	lsls	r3, r3, #7
 8006266:	b25a      	sxtb	r2, r3
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800626e:	fb01 f303 	mul.w	r3, r1, r3
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	440b      	add	r3, r1
 8006276:	7f9b      	ldrb	r3, [r3, #30]
 8006278:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800627c:	b2db      	uxtb	r3, r3
 800627e:	b25b      	sxtb	r3, r3
 8006280:	019b      	lsls	r3, r3, #6
 8006282:	b25b      	sxtb	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b25a      	sxtb	r2, r3
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	440b      	add	r3, r1
 8006296:	7f9b      	ldrb	r3, [r3, #30]
 8006298:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	b25b      	sxtb	r3, r3
 80062a0:	015b      	lsls	r3, r3, #5
 80062a2:	b25b      	sxtb	r3, r3
 80062a4:	4313      	orrs	r3, r2
 80062a6:	b25a      	sxtb	r2, r3
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	440b      	add	r3, r1
 80062b6:	7f9b      	ldrb	r3, [r3, #30]
 80062b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	b25a      	sxtb	r2, r3
                                      |(ic[curr_ic].clflag.cl_ced << 3)| (ic[curr_ic].clflag.cl_cmed << 2) | (ic[curr_ic].clflag.cl_sed << 1) | (ic[curr_ic].clflag.cl_smed));
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	440b      	add	r3, r1
 80062d6:	7f9b      	ldrb	r3, [r3, #30]
 80062d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b25a      	sxtb	r2, r3
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	440b      	add	r3, r1
 80062f6:	7f9b      	ldrb	r3, [r3, #30]
 80062f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	b25b      	sxtb	r3, r3
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	b25b      	sxtb	r3, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	b25a      	sxtb	r2, r3
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	440b      	add	r3, r1
 8006316:	7f9b      	ldrb	r3, [r3, #30]
 8006318:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	b25b      	sxtb	r3, r3
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	b25b      	sxtb	r3, r3
 8006324:	4313      	orrs	r3, r2
 8006326:	b25a      	sxtb	r2, r3
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	440b      	add	r3, r1
 8006336:	7f9b      	ldrb	r3, [r3, #30]
 8006338:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	b25b      	sxtb	r3, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	b259      	sxtb	r1, r3
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800634a:	fb02 f303 	mul.w	r3, r2, r3
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	4413      	add	r3, r2
                                      |(ic[curr_ic].clflag.cl_ced << 3)| (ic[curr_ic].clflag.cl_cmed << 2) | (ic[curr_ic].clflag.cl_sed << 1) | (ic[curr_ic].clflag.cl_smed));
 8006352:	b2ca      	uxtb	r2, r1
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 8006354:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	4413      	add	r3, r2
 8006366:	7fdb      	ldrb	r3, [r3, #31]
 8006368:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	b25b      	sxtb	r3, r3
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	b25a      	sxtb	r2, r3
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800637a:	fb01 f303 	mul.w	r3, r1, r3
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	440b      	add	r3, r1
 8006382:	7fdb      	ldrb	r3, [r3, #31]
 8006384:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	b25b      	sxtb	r3, r3
 800638c:	019b      	lsls	r3, r3, #6
 800638e:	b25b      	sxtb	r3, r3
 8006390:	4313      	orrs	r3, r2
 8006392:	b25a      	sxtb	r2, r3
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	440b      	add	r3, r1
 80063a2:	7fdb      	ldrb	r3, [r3, #31]
 80063a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	b25b      	sxtb	r3, r3
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b25a      	sxtb	r2, r3
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	440b      	add	r3, r1
 80063c2:	7fdb      	ldrb	r3, [r3, #31]
 80063c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	4313      	orrs	r3, r2
 80063d2:	b25a      	sxtb	r2, r3
                                      | (ic[curr_ic].clflag.cl_thsd << 2) | (ic[curr_ic].clflag.cl_tmode << 1) | (ic[curr_ic].clflag.cl_oscchk));
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	440b      	add	r3, r1
 80063e2:	7fdb      	ldrb	r3, [r3, #31]
 80063e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	4313      	orrs	r3, r2
 80063f2:	b25a      	sxtb	r2, r3
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	440b      	add	r3, r1
 8006402:	7fdb      	ldrb	r3, [r3, #31]
 8006404:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	b25b      	sxtb	r3, r3
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	b25b      	sxtb	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b25a      	sxtb	r2, r3
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	440b      	add	r3, r1
 8006422:	7fdb      	ldrb	r3, [r3, #31]
 8006424:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	b25b      	sxtb	r3, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	b259      	sxtb	r1, r3
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	4413      	add	r3, r2
                                      | (ic[curr_ic].clflag.cl_thsd << 2) | (ic[curr_ic].clflag.cl_tmode << 1) | (ic[curr_ic].clflag.cl_oscchk));
 800643e:	b2ca      	uxtb	r2, r1
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006440:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	3301      	adds	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
 800644a:	7bfa      	ldrb	r2, [r7, #15]
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	429a      	cmp	r2, r3
 8006450:	f4ff aec2 	bcc.w	80061d8 <adBms6830CreateClrflagData+0x12>
  }
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <adBms6830CreateComm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateComm(uint8_t tIC, cell_asic *ic)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	4603      	mov	r3, r0
 800646a:	6039      	str	r1, [r7, #0]
 800646c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
 8006472:	e0a7      	b.n	80065c4 <adBms6830CreateComm+0x162>
  {
    ic[curr_ic].com.tx_data[0] = ((ic[curr_ic].comm.icomm[0] & 0x0F)  << 4  | (ic[curr_ic].comm.fcomm[0]   & 0x0F));
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	4413      	add	r3, r2
 8006482:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8006486:	b25b      	sxtb	r3, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	b25a      	sxtb	r2, r3
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	440b      	add	r3, r1
 800649a:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b259      	sxtb	r1, r3
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	4413      	add	r3, r2
 80064b8:	b2ca      	uxtb	r2, r1
 80064ba:	f883 2157 	strb.w	r2, [r3, #343]	@ 0x157
    ic[curr_ic].com.tx_data[1] = ((ic[curr_ic].comm.data[0] ));
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80064c4:	fb02 f303 	mul.w	r3, r2, r3
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	441a      	add	r2, r3
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	440b      	add	r3, r1
 80064da:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80064de:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    ic[curr_ic].com.tx_data[2] = ((ic[curr_ic].comm.icomm[1] & 0x0F)  << 4 ) | (ic[curr_ic].comm.fcomm[1]   & 0x0F);
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80064e8:	fb02 f303 	mul.w	r3, r2, r3
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80064f4:	b25b      	sxtb	r3, r3
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	b25a      	sxtb	r2, r3
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	440b      	add	r3, r1
 8006508:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 800650c:	b25b      	sxtb	r3, r3
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	b25b      	sxtb	r3, r3
 8006514:	4313      	orrs	r3, r2
 8006516:	b259      	sxtb	r1, r3
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	4413      	add	r3, r2
 8006526:	b2ca      	uxtb	r2, r1
 8006528:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
    ic[curr_ic].com.tx_data[3] = ((ic[curr_ic].comm.data[1]));
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	441a      	add	r2, r3
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	440b      	add	r3, r1
 8006548:	f892 2107 	ldrb.w	r2, [r2, #263]	@ 0x107
 800654c:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
    ic[curr_ic].com.tx_data[4] = ((ic[curr_ic].comm.icomm[2] & 0x0F)  << 4  | (ic[curr_ic].comm.fcomm[2]   & 0x0F));
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4413      	add	r3, r2
 800655e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8006562:	b25b      	sxtb	r3, r3
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	b25a      	sxtb	r2, r3
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800656e:	fb01 f303 	mul.w	r3, r1, r3
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	440b      	add	r3, r1
 8006576:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800657a:	b25b      	sxtb	r3, r3
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	b25b      	sxtb	r3, r3
 8006582:	4313      	orrs	r3, r2
 8006584:	b259      	sxtb	r1, r3
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	4413      	add	r3, r2
 8006594:	b2ca      	uxtb	r2, r1
 8006596:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
    ic[curr_ic].com.tx_data[5] = ((ic[curr_ic].comm.data[2]));
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80065a0:	fb02 f303 	mul.w	r3, r2, r3
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	441a      	add	r2, r3
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	440b      	add	r3, r1
 80065b6:	f892 2108 	ldrb.w	r2, [r2, #264]	@ 0x108
 80065ba:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	3301      	adds	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
 80065c4:	7bfa      	ldrb	r2, [r7, #15]
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	f4ff af53 	bcc.w	8006474 <adBms6830CreateComm+0x12>
  }
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <adBms6830CreatePwma>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreatePwma(uint8_t tIC, cell_asic *ic)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	6039      	str	r1, [r7, #0]
 80065e6:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e0e0      	b.n	80067b0 <adBms6830CreatePwma+0x1d4>
  {
    ic[curr_ic].pwma.tx_data[0] = ((ic[curr_ic].PwmA.pwma[1] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[0] & 0x0F));
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8006600:	b25b      	sxtb	r3, r3
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	b25a      	sxtb	r2, r3
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	440b      	add	r3, r1
 8006614:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8006618:	b25b      	sxtb	r3, r3
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	b25b      	sxtb	r3, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	b259      	sxtb	r1, r3
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4413      	add	r3, r2
 8006632:	b2ca      	uxtb	r2, r1
 8006634:	f883 2165 	strb.w	r2, [r3, #357]	@ 0x165
    ic[curr_ic].pwma.tx_data[1] = ((ic[curr_ic].PwmA.pwma[3] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[2] & 0x0F));
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	4413      	add	r3, r2
 8006646:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800664a:	b25b      	sxtb	r3, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	b25a      	sxtb	r2, r3
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	440b      	add	r3, r1
 800665e:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8006662:	b25b      	sxtb	r3, r3
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	b25b      	sxtb	r3, r3
 800666a:	4313      	orrs	r3, r2
 800666c:	b259      	sxtb	r1, r3
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006674:	fb02 f303 	mul.w	r3, r2, r3
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4413      	add	r3, r2
 800667c:	b2ca      	uxtb	r2, r1
 800667e:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
    ic[curr_ic].pwma.tx_data[2] = ((ic[curr_ic].PwmA.pwma[5] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[4] & 0x0F));
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	4413      	add	r3, r2
 8006690:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8006694:	b25b      	sxtb	r3, r3
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	b25a      	sxtb	r2, r3
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	440b      	add	r3, r1
 80066a8:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	b25b      	sxtb	r3, r3
 80066b4:	4313      	orrs	r3, r2
 80066b6:	b259      	sxtb	r1, r3
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	4413      	add	r3, r2
 80066c6:	b2ca      	uxtb	r2, r1
 80066c8:	f883 2167 	strb.w	r2, [r3, #359]	@ 0x167
    ic[curr_ic].pwma.tx_data[3] = ((ic[curr_ic].PwmA.pwma[7] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[6] & 0x0F));
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4413      	add	r3, r2
 80066da:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80066de:	b25b      	sxtb	r3, r3
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	b25a      	sxtb	r2, r3
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	440b      	add	r3, r1
 80066f2:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b259      	sxtb	r1, r3
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006708:	fb02 f303 	mul.w	r3, r2, r3
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	4413      	add	r3, r2
 8006710:	b2ca      	uxtb	r2, r1
 8006712:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
    ic[curr_ic].pwma.tx_data[4] = ((ic[curr_ic].PwmA.pwma[9] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[8] & 0x0F));
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800671c:	fb02 f303 	mul.w	r3, r2, r3
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	4413      	add	r3, r2
 8006724:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8006728:	b25b      	sxtb	r3, r3
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	b25a      	sxtb	r2, r3
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006734:	fb01 f303 	mul.w	r3, r1, r3
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	440b      	add	r3, r1
 800673c:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8006740:	b25b      	sxtb	r3, r3
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	b25b      	sxtb	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b259      	sxtb	r1, r3
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	4413      	add	r3, r2
 800675a:	b2ca      	uxtb	r2, r1
 800675c:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    ic[curr_ic].pwma.tx_data[5] = ((ic[curr_ic].PwmA.pwma[11] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[10] & 0x0F));
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	4413      	add	r3, r2
 800676e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8006772:	b25b      	sxtb	r3, r3
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	b25a      	sxtb	r2, r3
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	440b      	add	r3, r1
 8006786:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b25b      	sxtb	r3, r3
 8006792:	4313      	orrs	r3, r2
 8006794:	b259      	sxtb	r1, r3
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	4413      	add	r3, r2
 80067a4:	b2ca      	uxtb	r2, r1
 80067a6:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	3301      	adds	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	7bfa      	ldrb	r2, [r7, #15]
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	f4ff af1a 	bcc.w	80065ee <adBms6830CreatePwma+0x12>
  }
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <adBms6830CreatePwmb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreatePwmb(uint8_t tIC, cell_asic *ic)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e04c      	b.n	8006874 <adBms6830CreatePwmb+0xac>
  {
    ic[curr_ic].pwmb.tx_data[0] = ((ic[curr_ic].PwmB.pwmb[1] & 0x0F) << 4 | (ic[curr_ic].PwmB.pwmb[0] & 0x0F));
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	4413      	add	r3, r2
 80067e8:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	b25a      	sxtb	r2, r3
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	440b      	add	r3, r1
 8006800:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8006804:	b25b      	sxtb	r3, r3
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	b25b      	sxtb	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b259      	sxtb	r1, r3
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	4413      	add	r3, r2
 800681e:	b2ca      	uxtb	r2, r1
 8006820:	f883 2173 	strb.w	r2, [r3, #371]	@ 0x173
    ic[curr_ic].pwmb.tx_data[1] = ((ic[curr_ic].PwmB.pwmb[3] & 0x0F) << 4 | (ic[curr_ic].PwmB.pwmb[2] & 0x0F));
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	4413      	add	r3, r2
 8006832:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8006836:	b25b      	sxtb	r3, r3
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	b25a      	sxtb	r2, r3
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	440b      	add	r3, r1
 800684a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800684e:	b25b      	sxtb	r3, r3
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	b25b      	sxtb	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b259      	sxtb	r1, r3
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006860:	fb02 f303 	mul.w	r3, r2, r3
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	4413      	add	r3, r2
 8006868:	b2ca      	uxtb	r2, r1
 800686a:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	3301      	adds	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	7bfa      	ldrb	r2, [r7, #15]
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3ae      	bcc.n	80067da <adBms6830CreatePwmb+0x12>
  }
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <adbms_main>:
uint16_t multiMask = 0;
uint16_t tick = 0;


void adbms_main(int command, FDCAN_HandleTypeDef *hfdcan,
		FDCAN_BMS_CONTEXT *ctx, TIM_HandleTypeDef *htimPWM) {
 800688c:	b5b0      	push	{r4, r5, r7, lr}
 800688e:	b08a      	sub	sp, #40	@ 0x28
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
	//     user_command = command;
	//     // printf("Received: %c\n", user_command);
	//     // printf("Enter cmd:%d\n", user_command);
	// #endif
	// run_command(user_command);
	if (accy_status == -1 || accy_status == 0) {
 800689a:	4b7e      	ldr	r3, [pc, #504]	@ (8006a94 <adbms_main+0x208>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a2:	d003      	beq.n	80068ac <adbms_main+0x20>
 80068a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006a94 <adbms_main+0x208>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <adbms_main+0x24>
		// If the accessory is not in charge or ready state, set the accumulator status
		user_adBms6830_getAccyStatus(); // Determine whether the accy is in charge or ready state
 80068ac:	f002 fb30 	bl	8008f10 <user_adBms6830_getAccyStatus>
	}

	readSegment += IC_CHUNK;
 80068b0:	4b79      	ldr	r3, [pc, #484]	@ (8006a98 <adbms_main+0x20c>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b77      	ldr	r3, [pc, #476]	@ (8006a98 <adbms_main+0x20c>)
 80068ba:	701a      	strb	r2, [r3, #0]
	if (readSegment >= TOTAL_IC) {
 80068bc:	4b76      	ldr	r3, [pc, #472]	@ (8006a98 <adbms_main+0x20c>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d902      	bls.n	80068ca <adbms_main+0x3e>
		readSegment = 0;
 80068c4:	4b74      	ldr	r3, [pc, #464]	@ (8006a98 <adbms_main+0x20c>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
	//	TEMP_IC[1] = IC[(readSegment*2)+1];

//	    populateIC(TEMP_IC, 2);
//	populateIC(&IC[0], TOTAL_IC);

	populateIC(&IC[readSegment], IC_CHUNK);
 80068ca:	4b73      	ldr	r3, [pc, #460]	@ (8006a98 <adbms_main+0x20c>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80068d4:	fb02 f303 	mul.w	r3, r2, r3
 80068d8:	4a70      	ldr	r2, [pc, #448]	@ (8006a9c <adbms_main+0x210>)
 80068da:	4413      	add	r3, r2
 80068dc:	2101      	movs	r1, #1
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 ffea 	bl	80088b8 <populateIC>

	if (accy_status == READY_POWER && !cell_fault && !temp_fault) {
 80068e4:	4b6e      	ldr	r3, [pc, #440]	@ (8006aa0 <adbms_main+0x214>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006a94 <adbms_main+0x208>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d144      	bne.n	800697c <adbms_main+0xf0>
 80068f2:	4b6c      	ldr	r3, [pc, #432]	@ (8006aa4 <adbms_main+0x218>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d140      	bne.n	800697c <adbms_main+0xf0>
 80068fa:	4b6b      	ldr	r3, [pc, #428]	@ (8006aa8 <adbms_main+0x21c>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d13c      	bne.n	800697c <adbms_main+0xf0>
		user_adBms6830_setFaults(); // Check for faults and set GPIO pins accordingly
 8006902:	f002 fa81 	bl	8008e08 <user_adBms6830_setFaults>
		getPackVoltage(TOTAL_IC, &IC[0]); // Get the pack voltage
 8006906:	4965      	ldr	r1, [pc, #404]	@ (8006a9c <adbms_main+0x210>)
 8006908:	200a      	movs	r0, #10
 800690a:	f002 fcb5 	bl	8009278 <getPackVoltage>
		// getCurrentSensorData();               // Get the current sensor data  ==> moved into populateIC
		updateSOC();  // Get the state of charge (SOC) based on the pack voltage
 800690e:	f002 fd27 	bl	8009360 <updateSOC>
		ccl = calcCCL();                      // get charge current limit
 8006912:	f003 fa55 	bl	8009dc0 <calcCCL>
 8006916:	eef0 7a40 	vmov.f32	s15, s0
 800691a:	4b64      	ldr	r3, [pc, #400]	@ (8006aac <adbms_main+0x220>)
 800691c:	edc3 7a00 	vstr	s15, [r3]
		dcl = calcDCL();                      // get discharge current limit
 8006920:	f003 f8b8 	bl	8009a94 <calcDCL>
 8006924:	eef0 7a40 	vmov.f32	s15, s0
 8006928:	4b61      	ldr	r3, [pc, #388]	@ (8006ab0 <adbms_main+0x224>)
 800692a:	edc3 7a00 	vstr	s15, [r3]
		fanPWMControl(highest_temp, htimPWM); // Control the fan based on the highest temperature
 800692e:	4b61      	ldr	r3, [pc, #388]	@ (8006ab4 <adbms_main+0x228>)
 8006930:	edd3 7a00 	vldr	s15, [r3]
 8006934:	6838      	ldr	r0, [r7, #0]
 8006936:	eeb0 0a67 	vmov.f32	s0, s15
 800693a:	f002 fe31 	bl	80095a0 <fanPWMControl>

		populate_CAN1(&ctx->msg_6b0, &IC[0], TOTAL_IC); // Populate CAN frames with data (TODO: check with justin)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	336c      	adds	r3, #108	@ 0x6c
 8006942:	220a      	movs	r2, #10
 8006944:	4955      	ldr	r1, [pc, #340]	@ (8006a9c <adbms_main+0x210>)
 8006946:	4618      	mov	r0, r3
 8006948:	f001 fa5a 	bl	8007e00 <populate_CAN1>
		populate_CAN2(&ctx->msg_6b1, &IC[0], TOTAL_IC);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3374      	adds	r3, #116	@ 0x74
 8006950:	220a      	movs	r2, #10
 8006952:	4952      	ldr	r1, [pc, #328]	@ (8006a9c <adbms_main+0x210>)
 8006954:	4618      	mov	r0, r3
 8006956:	f001 fb0b 	bl	8007f70 <populate_CAN2>
		populate_CAN3(&ctx->msg_6b2, &IC[0], TOTAL_IC);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	337c      	adds	r3, #124	@ 0x7c
 800695e:	220a      	movs	r2, #10
 8006960:	494e      	ldr	r1, [pc, #312]	@ (8006a9c <adbms_main+0x210>)
 8006962:	4618      	mov	r0, r3
 8006964:	f001 fb88 	bl	8008078 <populate_CAN3>
		uint32_t now = HAL_GetTick();
 8006968:	f004 fe54 	bl	800b614 <HAL_GetTick>
 800696c:	61f8      	str	r0, [r7, #28]
		FDCAN_BMS_Mailman(hfdcan, ctx, now, 0);
 800696e:	2300      	movs	r3, #0
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	f001 fd0b 	bl	8008390 <FDCAN_BMS_Mailman>
	if (accy_status == READY_POWER && !cell_fault && !temp_fault) {
 800697a:	e0f1      	b.n	8006b60 <adbms_main+0x2d4>
	} else if (accy_status == CHARGE_POWER && !cell_fault && !temp_fault) {
 800697c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ab8 <adbms_main+0x22c>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	4b44      	ldr	r3, [pc, #272]	@ (8006a94 <adbms_main+0x208>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d150      	bne.n	8006a2c <adbms_main+0x1a0>
 800698a:	4b46      	ldr	r3, [pc, #280]	@ (8006aa4 <adbms_main+0x218>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d14c      	bne.n	8006a2c <adbms_main+0x1a0>
 8006992:	4b45      	ldr	r3, [pc, #276]	@ (8006aa8 <adbms_main+0x21c>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d148      	bne.n	8006a2c <adbms_main+0x1a0>
		uint32_t timingshits = HAL_GetTick();
 800699a:	f004 fe3b 	bl	800b614 <HAL_GetTick>
 800699e:	61b8      	str	r0, [r7, #24]
		if (PRINT_ON) printf("time to read once: %.2f", HAL_GetTick() - timingshits);
 80069a0:	f004 fe38 	bl	800b614 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	4843      	ldr	r0, [pc, #268]	@ (8006abc <adbms_main+0x230>)
 80069ae:	f00d fcab 	bl	8014308 <iprintf>

		user_adBms6830_setFaults(); // Check for faults and set GPIO pins accordingly
 80069b2:	f002 fa29 	bl	8008e08 <user_adBms6830_setFaults>
		getPackVoltage(TOTAL_IC, &IC[0]); // Get the pack voltage
 80069b6:	4939      	ldr	r1, [pc, #228]	@ (8006a9c <adbms_main+0x210>)
 80069b8:	200a      	movs	r0, #10
 80069ba:	f002 fc5d 	bl	8009278 <getPackVoltage>
		// getCurrentSensorData();               // Get the current sensor data   ==> moved into populateIC
		updateSOC();  // Get the state of charge (SOC) based on the pack voltage
 80069be:	f002 fccf 	bl	8009360 <updateSOC>
		ccl = calcCCL();                      // get charge current limit
 80069c2:	f003 f9fd 	bl	8009dc0 <calcCCL>
 80069c6:	eef0 7a40 	vmov.f32	s15, s0
 80069ca:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <adbms_main+0x220>)
 80069cc:	edc3 7a00 	vstr	s15, [r3]
		dcl = calcDCL();                      // get discharge current limit
 80069d0:	f003 f860 	bl	8009a94 <calcDCL>
 80069d4:	eef0 7a40 	vmov.f32	s15, s0
 80069d8:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <adbms_main+0x224>)
 80069da:	edc3 7a00 	vstr	s15, [r3]
		//    fanPWMControl(highest_temp, htimPWM); // Control the fan based on the highest temperature

		populate_CAN1(&ctx->msg_6b0, &IC[0], TOTAL_IC); // Populate CAN frames with data (TODO: check with justin)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	336c      	adds	r3, #108	@ 0x6c
 80069e2:	220a      	movs	r2, #10
 80069e4:	492d      	ldr	r1, [pc, #180]	@ (8006a9c <adbms_main+0x210>)
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 fa0a 	bl	8007e00 <populate_CAN1>
		populate_CAN2(&ctx->msg_6b1, &IC[0], TOTAL_IC);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3374      	adds	r3, #116	@ 0x74
 80069f0:	220a      	movs	r2, #10
 80069f2:	492a      	ldr	r1, [pc, #168]	@ (8006a9c <adbms_main+0x210>)
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 fabb 	bl	8007f70 <populate_CAN2>
		populate_CAN3(&ctx->msg_6b2, &IC[0], TOTAL_IC);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	337c      	adds	r3, #124	@ 0x7c
 80069fe:	220a      	movs	r2, #10
 8006a00:	4926      	ldr	r1, [pc, #152]	@ (8006a9c <adbms_main+0x210>)
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fb38 	bl	8008078 <populate_CAN3>
		populate_charge_CAN(&ctx->CAN_CHGCONTEXT, &IC[0], TOTAL_IC);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3390      	adds	r3, #144	@ 0x90
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	4923      	ldr	r1, [pc, #140]	@ (8006a9c <adbms_main+0x210>)
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fb85 	bl	8008120 <populate_charge_CAN>
		uint32_t now = HAL_GetTick();
 8006a16:	f004 fdfd 	bl	800b614 <HAL_GetTick>
 8006a1a:	6178      	str	r0, [r7, #20]
		FDCAN_BMS_Mailman(hfdcan, ctx, now, is_charging);
 8006a1c:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <adbms_main+0x234>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	68b8      	ldr	r0, [r7, #8]
 8006a26:	f001 fcb3 	bl	8008390 <FDCAN_BMS_Mailman>
	} else if (accy_status == CHARGE_POWER && !cell_fault && !temp_fault) {
 8006a2a:	e099      	b.n	8006b60 <adbms_main+0x2d4>
	} else {
		if (PRINT_ON) printf("Fan Status: %.2f\n", fan_status);
 8006a2c:	4b25      	ldr	r3, [pc, #148]	@ (8006ac4 <adbms_main+0x238>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7f9 fd91 	bl	8000558 <__aeabi_f2d>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4823      	ldr	r0, [pc, #140]	@ (8006ac8 <adbms_main+0x23c>)
 8006a3c:	f00d fc64 	bl	8014308 <iprintf>
		// fanPWMControl(42.0f, htimPWM);
		ccl = calcCCL();                      // get charge current limit
 8006a40:	f003 f9be 	bl	8009dc0 <calcCCL>
 8006a44:	eef0 7a40 	vmov.f32	s15, s0
 8006a48:	4b18      	ldr	r3, [pc, #96]	@ (8006aac <adbms_main+0x220>)
 8006a4a:	edc3 7a00 	vstr	s15, [r3]
		dcl = calcDCL();
 8006a4e:	f003 f821 	bl	8009a94 <calcDCL>
 8006a52:	eef0 7a40 	vmov.f32	s15, s0
 8006a56:	4b16      	ldr	r3, [pc, #88]	@ (8006ab0 <adbms_main+0x224>)
 8006a58:	edc3 7a00 	vstr	s15, [r3]
		user_adBms6830_setFaults(); // Check for faults and set GPIO pins accordingly
 8006a5c:	f002 f9d4 	bl	8008e08 <user_adBms6830_setFaults>
		getPackVoltage(TOTAL_IC, &IC[0]); // Get the pack voltage
 8006a60:	490e      	ldr	r1, [pc, #56]	@ (8006a9c <adbms_main+0x210>)
 8006a62:	200a      	movs	r0, #10
 8006a64:	f002 fc08 	bl	8009278 <getPackVoltage>
		// getCurrentSensorData();           // Get the current sensor data   ==> moved into populateIC
		updateSOC(); // Get the state of charge (SOC) based on the pack voltage
 8006a68:	f002 fc7a 	bl	8009360 <updateSOC>

		if (!cell_fault && !temp_fault && balancing == 1) {
 8006a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa4 <adbms_main+0x218>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d12d      	bne.n	8006ad0 <adbms_main+0x244>
 8006a74:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <adbms_main+0x21c>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d129      	bne.n	8006ad0 <adbms_main+0x244>
 8006a7c:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <adbms_main+0x240>)
 8006a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d124      	bne.n	8006ad0 <adbms_main+0x244>
			// If there are no faults, balance the cells
			balanceCells(TOTAL_IC, IC, PWM_100_0_PCT); // TODO: Set the duty cycle for balancing
 8006a86:	220f      	movs	r2, #15
 8006a88:	4904      	ldr	r1, [pc, #16]	@ (8006a9c <adbms_main+0x210>)
 8006a8a:	200a      	movs	r0, #10
 8006a8c:	f000 fa00 	bl	8006e90 <balanceCells>
 8006a90:	e02a      	b.n	8006ae8 <adbms_main+0x25c>
 8006a92:	bf00      	nop
 8006a94:	20001c70 	.word	0x20001c70
 8006a98:	20001c65 	.word	0x20001c65
 8006a9c:	20000224 	.word	0x20000224
 8006aa0:	08018100 	.word	0x08018100
 8006aa4:	20001c6a 	.word	0x20001c6a
 8006aa8:	20001c6b 	.word	0x20001c6b
 8006aac:	20001c90 	.word	0x20001c90
 8006ab0:	20001c94 	.word	0x20001c94
 8006ab4:	20001c9c 	.word	0x20001c9c
 8006ab8:	08018101 	.word	0x08018101
 8006abc:	08016fd4 	.word	0x08016fd4
 8006ac0:	20001c8c 	.word	0x20001c8c
 8006ac4:	20001cac 	.word	0x20001cac
 8006ac8:	08016fec 	.word	0x08016fec
 8006acc:	20001c64 	.word	0x20001c64
		} else if (balancing == 1) {
 8006ad0:	4b60      	ldr	r3, [pc, #384]	@ (8006c54 <adbms_main+0x3c8>)
 8006ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d106      	bne.n	8006ae8 <adbms_main+0x25c>
			balancing = 0;               // Stop balancing if there are faults
 8006ada:	4b5e      	ldr	r3, [pc, #376]	@ (8006c54 <adbms_main+0x3c8>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
			stopBalancing(TOTAL_IC, IC); // Stop balancing if there are faults
 8006ae0:	495d      	ldr	r1, [pc, #372]	@ (8006c58 <adbms_main+0x3cc>)
 8006ae2:	200a      	movs	r0, #10
 8006ae4:	f000 fac2 	bl	800706c <stopBalancing>
		}

		if (PRINT_ON) printReadPwmDutyCycle(TOTAL_IC, IC, PWMA, ALL_GRP);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	220c      	movs	r2, #12
 8006aec:	495a      	ldr	r1, [pc, #360]	@ (8006c58 <adbms_main+0x3cc>)
 8006aee:	200a      	movs	r0, #10
 8006af0:	f000 fede 	bl	80078b0 <printReadPwmDutyCycle>
		if (PRINT_ON) printWritePwmDutyCycle(TOTAL_IC, IC, PWMA, ALL_GRP); // Print the PWM duty cycle for debugging
 8006af4:	2300      	movs	r3, #0
 8006af6:	220c      	movs	r2, #12
 8006af8:	4957      	ldr	r1, [pc, #348]	@ (8006c58 <adbms_main+0x3cc>)
 8006afa:	200a      	movs	r0, #10
 8006afc:	f000 fdbc 	bl	8007678 <printWritePwmDutyCycle>

		// printPwmRegisters(TOTAL_IC, IC); // Print the PWM registers for debugging

		fanPWMControl(42.0f, htimPWM); // Control the fan based on the highest temperature
 8006b00:	6838      	ldr	r0, [r7, #0]
 8006b02:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8006c5c <adbms_main+0x3d0>
 8006b06:	f002 fd4b 	bl	80095a0 <fanPWMControl>

		tick++;
 8006b0a:	4b55      	ldr	r3, [pc, #340]	@ (8006c60 <adbms_main+0x3d4>)
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	4b53      	ldr	r3, [pc, #332]	@ (8006c60 <adbms_main+0x3d4>)
 8006b14:	801a      	strh	r2, [r3, #0]

		populate_CAN1(&ctx->msg_6b0, &IC[0], TOTAL_IC); // Populate CAN frames with data (TODO: check with justin)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	336c      	adds	r3, #108	@ 0x6c
 8006b1a:	220a      	movs	r2, #10
 8006b1c:	494e      	ldr	r1, [pc, #312]	@ (8006c58 <adbms_main+0x3cc>)
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f96e 	bl	8007e00 <populate_CAN1>
		populate_CAN2(&ctx->msg_6b1, &IC[0], TOTAL_IC);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3374      	adds	r3, #116	@ 0x74
 8006b28:	220a      	movs	r2, #10
 8006b2a:	494b      	ldr	r1, [pc, #300]	@ (8006c58 <adbms_main+0x3cc>)
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 fa1f 	bl	8007f70 <populate_CAN2>
		populate_CAN3(&ctx->msg_6b2, &IC[0], TOTAL_IC);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	337c      	adds	r3, #124	@ 0x7c
 8006b36:	220a      	movs	r2, #10
 8006b38:	4947      	ldr	r1, [pc, #284]	@ (8006c58 <adbms_main+0x3cc>)
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 fa9c 	bl	8008078 <populate_CAN3>
		populate_charge_CAN(&ctx->CAN_CHGCONTEXT, &IC[0], TOTAL_IC);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3390      	adds	r3, #144	@ 0x90
 8006b44:	220a      	movs	r2, #10
 8006b46:	4944      	ldr	r1, [pc, #272]	@ (8006c58 <adbms_main+0x3cc>)
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fae9 	bl	8008120 <populate_charge_CAN>

		uint32_t now = HAL_GetTick();
 8006b4e:	f004 fd61 	bl	800b614 <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]
		FDCAN_BMS_Mailman(hfdcan, ctx, now, 1);
 8006b54:	2301      	movs	r3, #1
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	68b8      	ldr	r0, [r7, #8]
 8006b5c:	f001 fc18 	bl	8008390 <FDCAN_BMS_Mailman>
	}

	if (PRINT_ON) {
		printVoltages(TOTAL_IC, &IC[0], Cell);
 8006b60:	2200      	movs	r2, #0
 8006b62:	493d      	ldr	r1, [pc, #244]	@ (8006c58 <adbms_main+0x3cc>)
 8006b64:	200a      	movs	r0, #10
 8006b66:	f000 fb63 	bl	8007230 <printVoltages>

		printf("accy_status: %d, balancing: %d\n", accy_status, balancing);
 8006b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c64 <adbms_main+0x3d8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a39      	ldr	r2, [pc, #228]	@ (8006c54 <adbms_main+0x3c8>)
 8006b70:	f992 2000 	ldrsb.w	r2, [r2]
 8006b74:	4619      	mov	r1, r3
 8006b76:	483c      	ldr	r0, [pc, #240]	@ (8006c68 <adbms_main+0x3dc>)
 8006b78:	f00d fbc6 	bl	8014308 <iprintf>
		printf("Pack Voltage: %.2fV, SOC: %.2f\n",
				getPackVoltage(TOTAL_IC, &IC[0]), soc);
 8006b7c:	4936      	ldr	r1, [pc, #216]	@ (8006c58 <adbms_main+0x3cc>)
 8006b7e:	200a      	movs	r0, #10
 8006b80:	f002 fb7a 	bl	8009278 <getPackVoltage>
 8006b84:	ee10 3a10 	vmov	r3, s0
		printf("Pack Voltage: %.2fV, SOC: %.2f\n",
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7f9 fce5 	bl	8000558 <__aeabi_f2d>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	4b36      	ldr	r3, [pc, #216]	@ (8006c6c <adbms_main+0x3e0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7f9 fcde 	bl	8000558 <__aeabi_f2d>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	e9cd 2300 	strd	r2, r3, [sp]
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	4831      	ldr	r0, [pc, #196]	@ (8006c70 <adbms_main+0x3e4>)
 8006baa:	f00d fbad 	bl	8014308 <iprintf>
		printf("Lowest V: %.2fV, ", lowest_cell);
 8006bae:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <adbms_main+0x3e8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fcd0 	bl	8000558 <__aeabi_f2d>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	482e      	ldr	r0, [pc, #184]	@ (8006c78 <adbms_main+0x3ec>)
 8006bbe:	f00d fba3 	bl	8014308 <iprintf>
		printf("Highest V: %.2fV, ", highest_cell);
 8006bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8006c7c <adbms_main+0x3f0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7f9 fcc6 	bl	8000558 <__aeabi_f2d>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	482b      	ldr	r0, [pc, #172]	@ (8006c80 <adbms_main+0x3f4>)
 8006bd2:	f00d fb99 	bl	8014308 <iprintf>
		printf("Average V: %.2fV, ", avg_cell);
 8006bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c84 <adbms_main+0x3f8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7f9 fcbc 	bl	8000558 <__aeabi_f2d>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4828      	ldr	r0, [pc, #160]	@ (8006c88 <adbms_main+0x3fc>)
 8006be6:	f00d fb8f 	bl	8014308 <iprintf>
		printf("Target lowest V: %.2fV\n", target_lowest_cell);
 8006bea:	4b28      	ldr	r3, [pc, #160]	@ (8006c8c <adbms_main+0x400>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7f9 fcb2 	bl	8000558 <__aeabi_f2d>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4825      	ldr	r0, [pc, #148]	@ (8006c90 <adbms_main+0x404>)
 8006bfa:	f00d fb85 	bl	8014308 <iprintf>
		printf("Lowest temp: %.2fC, ID: %d", lowest_temp, lowest_temp_ID);
 8006bfe:	4b25      	ldr	r3, [pc, #148]	@ (8006c94 <adbms_main+0x408>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 fca8 	bl	8000558 <__aeabi_f2d>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4922      	ldr	r1, [pc, #136]	@ (8006c98 <adbms_main+0x40c>)
 8006c0e:	6809      	ldr	r1, [r1, #0]
 8006c10:	9100      	str	r1, [sp, #0]
 8006c12:	4822      	ldr	r0, [pc, #136]	@ (8006c9c <adbms_main+0x410>)
 8006c14:	f00d fb78 	bl	8014308 <iprintf>
		printf("Highest temp: %.2fC, ID: %d", highest_temp, highest_temp_ID);
 8006c18:	4b21      	ldr	r3, [pc, #132]	@ (8006ca0 <adbms_main+0x414>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7f9 fc9b 	bl	8000558 <__aeabi_f2d>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	491f      	ldr	r1, [pc, #124]	@ (8006ca4 <adbms_main+0x418>)
 8006c28:	6809      	ldr	r1, [r1, #0]
 8006c2a:	9100      	str	r1, [sp, #0]
 8006c2c:	481e      	ldr	r0, [pc, #120]	@ (8006ca8 <adbms_main+0x41c>)
 8006c2e:	f00d fb6b 	bl	8014308 <iprintf>
		printf("Average temp: %.2fC\n\n", avg_temp);
 8006c32:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <adbms_main+0x420>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7f9 fc8e 	bl	8000558 <__aeabi_f2d>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	481b      	ldr	r0, [pc, #108]	@ (8006cb0 <adbms_main+0x424>)
 8006c42:	f00d fb61 	bl	8014308 <iprintf>
		print_fault_summary(); // Print the fault summary
 8006c46:	f001 fd8b 	bl	8008760 <print_fault_summary>
	//    // Transmit via mailman
	//    uint32_t now = HAL_GetTick();
	//    FDCAN_BMS_Mailman(hfdcan, ctx, now);

	//    getCurrentSensorData();
}
 8006c4a:	bf00      	nop
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bdb0      	pop	{r4, r5, r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20001c64 	.word	0x20001c64
 8006c58:	20000224 	.word	0x20000224
 8006c5c:	42280000 	.word	0x42280000
 8006c60:	20001c68 	.word	0x20001c68
 8006c64:	20001c70 	.word	0x20001c70
 8006c68:	08017000 	.word	0x08017000
 8006c6c:	20001c78 	.word	0x20001c78
 8006c70:	08017020 	.word	0x08017020
 8006c74:	20001c7c 	.word	0x20001c7c
 8006c78:	08017040 	.word	0x08017040
 8006c7c:	20001c80 	.word	0x20001c80
 8006c80:	08017054 	.word	0x08017054
 8006c84:	20001c84 	.word	0x20001c84
 8006c88:	08017068 	.word	0x08017068
 8006c8c:	2000003c 	.word	0x2000003c
 8006c90:	0801707c 	.word	0x0801707c
 8006c94:	20001c98 	.word	0x20001c98
 8006c98:	20001ca0 	.word	0x20001ca0
 8006c9c:	08017094 	.word	0x08017094
 8006ca0:	20001c9c 	.word	0x20001c9c
 8006ca4:	20001ca4 	.word	0x20001ca4
 8006ca8:	080170b0 	.word	0x080170b0
 8006cac:	20001ca8 	.word	0x20001ca8
 8006cb0:	080170cc 	.word	0x080170cc

08006cb4 <adBms6830_start_adc_cell_voltage_measurment>:
/**
 *******************************************************************************
 * @brief Start ADC Cell Voltage Measurement
 *******************************************************************************
 */
void adBms6830_start_adc_cell_voltage_measurment(uint8_t tIC) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	4603      	mov	r3, r0
 8006cbc:	71fb      	strb	r3, [r7, #7]
	adBmsWakeupIc(tIC);
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fa97 	bl	80071f4 <adBmsWakeupIc>
	adBms6830_Adcv(RD_ON, CONTINUOUS, DCP_OFF, RSTF_OFF, OW_OFF_ALL_CH);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2101      	movs	r1, #1
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f7fb fb21 	bl	8002318 <adBms6830_Adcv>
#ifdef MBED
	// pc.printf("Cell conversion completed\n");
#else
	// printf("Cell conversion completed\n");
#endif
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <adBms6830_read_cell_voltages>:
/**
 *******************************************************************************
 * @brief Read Cell Voltages
 *******************************************************************************
 */
void adBms6830_read_cell_voltages(uint8_t tIC, cell_asic *ic) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	6039      	str	r1, [r7, #0]
 8006cea:	71fb      	strb	r3, [r7, #7]
	adBmsWakeupIc(tIC);
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fa80 	bl	80071f4 <adBmsWakeupIc>
	adBms6830_Adcv(RD_ON, CONTINUOUS, DCP_OFF, RSTF_OFF, OW_OFF_ALL_CH);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f7fb fb0a 	bl	8002318 <adBms6830_Adcv>
	adBms6830_Snap();
 8006d04:	f7fb fb3b 	bl	800237e <adBms6830_Snap>
	adBmsReadData(tIC, &ic[0], RDCVA, Cell, A);
 8006d08:	79f8      	ldrb	r0, [r7, #7]
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4a18      	ldr	r2, [pc, #96]	@ (8006d74 <adBms6830_read_cell_voltages+0x94>)
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	f7fa fb5c 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVB, Cell, B);
 8006d18:	79f8      	ldrb	r0, [r7, #7]
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4a15      	ldr	r2, [pc, #84]	@ (8006d78 <adBms6830_read_cell_voltages+0x98>)
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	f7fa fb54 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVC, Cell, C);
 8006d28:	79f8      	ldrb	r0, [r7, #7]
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4a12      	ldr	r2, [pc, #72]	@ (8006d7c <adBms6830_read_cell_voltages+0x9c>)
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	f7fa fb4c 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVD, Cell, D);
 8006d38:	79f8      	ldrb	r0, [r7, #7]
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4a0f      	ldr	r2, [pc, #60]	@ (8006d80 <adBms6830_read_cell_voltages+0xa0>)
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	f7fa fb44 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVE, Cell, E);
 8006d48:	79f8      	ldrb	r0, [r7, #7]
 8006d4a:	2305      	movs	r3, #5
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4a0c      	ldr	r2, [pc, #48]	@ (8006d84 <adBms6830_read_cell_voltages+0xa4>)
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	f7fa fb3c 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVF, Cell, F);
 8006d58:	79f8      	ldrb	r0, [r7, #7]
 8006d5a:	2306      	movs	r3, #6
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4a09      	ldr	r2, [pc, #36]	@ (8006d88 <adBms6830_read_cell_voltages+0xa8>)
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	f7fa fb34 	bl	80013d0 <adBmsReadData>
	adBms6830_Unsnap();
 8006d68:	f7fb fb18 	bl	800239c <adBms6830_Unsnap>

}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000008 	.word	0x20000008
 8006d78:	2000000c 	.word	0x2000000c
 8006d7c:	20000010 	.word	0x20000010
 8006d80:	20000014 	.word	0x20000014
 8006d84:	20000018 	.word	0x20000018
 8006d88:	2000001c 	.word	0x2000001c

08006d8c <adBms6830_start_aux_voltage_measurment>:
/**
 *******************************************************************************
 * @brief Start AUX, VMV, V+ Voltages Measurement
 *******************************************************************************
 */
void adBms6830_start_aux_voltage_measurment(uint8_t tIC, cell_asic *ic) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	4603      	mov	r3, r0
 8006d94:	6039      	str	r1, [r7, #0]
 8006d96:	71fb      	strb	r3, [r7, #7]
	for (uint8_t cic = 0; cic < tIC; cic++) {
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
 8006d9c:	e01a      	b.n	8006dd4 <adBms6830_start_aux_voltage_measurment+0x48>
		/* Init config A */
		ic[cic].tx_cfga.refon = PWR_UP;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	441a      	add	r2, r3
 8006dac:	7813      	ldrb	r3, [r2, #0]
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	7013      	strb	r3, [r2, #0]
		ic[cic].tx_cfga.gpo = 0X3FF; /* All GPIO pull down off */
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	8853      	ldrh	r3, [r2, #2]
 8006dc4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006dc8:	f361 134e 	bfi	r3, r1, #5, #10
 8006dcc:	8053      	strh	r3, [r2, #2]
	for (uint8_t cic = 0; cic < tIC; cic++) {
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d3e0      	bcc.n	8006d9e <adBms6830_start_aux_voltage_measurment+0x12>
	}
	adBmsWakeupIc(tIC);
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fa08 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRCFGA, Config, A);
 8006de4:	79f8      	ldrb	r0, [r7, #7]
 8006de6:	2301      	movs	r3, #1
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2308      	movs	r3, #8
 8006dec:	4a06      	ldr	r2, [pc, #24]	@ (8006e08 <adBms6830_start_aux_voltage_measurment+0x7c>)
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	f7fb f8ea 	bl	8001fc8 <adBmsWriteData>
	adBms6830_Adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 8006df4:	2200      	movs	r2, #0
 8006df6:	2100      	movs	r1, #0
 8006df8:	2000      	movs	r0, #0
 8006dfa:	f7fb fade 	bl	80023ba <adBms6830_Adax>
#ifdef MBED
	// pc.printf("Aux voltage conversion completed\n");
#else
	// printf("Aux voltage conversion completed\n");
#endif
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000000 	.word	0x20000000

08006e0c <adBms6830_read_aux_voltages>:
/**
 *******************************************************************************
 * @brief Read AUX, VMV, V+ Voltages
 *******************************************************************************
 */
void adBms6830_read_aux_voltages(uint8_t tIC, cell_asic *ic) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	71fb      	strb	r3, [r7, #7]
	adBmsWakeupIc(tIC);
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f9ea 	bl	80071f4 <adBmsWakeupIc>
	adBms6830_Adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7fb fac8 	bl	80023ba <adBms6830_Adax>
	adBmsReadData(tIC, &ic[0], RDAUXA, Aux, A);
 8006e2a:	79f8      	ldrb	r0, [r7, #7]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2301      	movs	r3, #1
 8006e32:	4a13      	ldr	r2, [pc, #76]	@ (8006e80 <adBms6830_read_aux_voltages+0x74>)
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	f7fa facb 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDAUXB, Aux, B);
 8006e3a:	79f8      	ldrb	r0, [r7, #7]
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2301      	movs	r3, #1
 8006e42:	4a10      	ldr	r2, [pc, #64]	@ (8006e84 <adBms6830_read_aux_voltages+0x78>)
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	f7fa fac3 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDAUXC, Aux, C);
 8006e4a:	79f8      	ldrb	r0, [r7, #7]
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2301      	movs	r3, #1
 8006e52:	4a0d      	ldr	r2, [pc, #52]	@ (8006e88 <adBms6830_read_aux_voltages+0x7c>)
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	f7fa fabb 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDAUXD, Aux, D);
 8006e5a:	79f8      	ldrb	r0, [r7, #7]
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	2301      	movs	r3, #1
 8006e62:	4a0a      	ldr	r2, [pc, #40]	@ (8006e8c <adBms6830_read_aux_voltages+0x80>)
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	f7fa fab3 	bl	80013d0 <adBmsReadData>
	printVoltages(tIC, &ic[0], Aux);
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 f9dd 	bl	8007230 <printVoltages>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000020 	.word	0x20000020
 8006e84:	20000024 	.word	0x20000024
 8006e88:	20000028 	.word	0x20000028
 8006e8c:	2000002c 	.word	0x2000002c

08006e90 <balanceCells>:
#else
	// printf("Fcell Registers Cleared\n\n");
#endif
}

void balanceCells(uint8_t tIC, cell_asic *ic, PWM_DUTY duty_cycle) {
 8006e90:	b5b0      	push	{r4, r5, r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	71bb      	strb	r3, [r7, #6]
	// Reset after max duration to prevent overheating
	if (tick > 200) {
 8006ea0:	4b69      	ldr	r3, [pc, #420]	@ (8007048 <balanceCells+0x1b8>)
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ea6:	d90c      	bls.n	8006ec2 <balanceCells+0x32>
		stopBalancing(tIC, ic);
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f8dd 	bl	800706c <stopBalancing>
		tick = 0;
 8006eb2:	4b65      	ldr	r3, [pc, #404]	@ (8007048 <balanceCells+0x1b8>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	801a      	strh	r2, [r3, #0]
		// Consider updating target voltage after each cycle
		target_lowest_cell = lowest_cell;
 8006eb8:	4b64      	ldr	r3, [pc, #400]	@ (800704c <balanceCells+0x1bc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a64      	ldr	r2, [pc, #400]	@ (8007050 <balanceCells+0x1c0>)
 8006ebe:	6013      	str	r3, [r2, #0]
		return;
 8006ec0:	e0b9      	b.n	8007036 <balanceCells+0x1a6>
	}

	// Initialize target when first called
	if (target_lowest_cell == -1) {
 8006ec2:	4b63      	ldr	r3, [pc, #396]	@ (8007050 <balanceCells+0x1c0>)
 8006ec4:	edd3 7a00 	vldr	s15, [r3]
 8006ec8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006ecc:	eef4 7a47 	vcmp.f32	s15, s14
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	d103      	bne.n	8006ede <balanceCells+0x4e>
		target_lowest_cell = lowest_cell;
 8006ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800704c <balanceCells+0x1bc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a5d      	ldr	r2, [pc, #372]	@ (8007050 <balanceCells+0x1c0>)
 8006edc:	6013      	str	r3, [r2, #0]
	}

	// Only update balancing configuration periodically
	if (tick == 10) {
 8006ede:	4b5a      	ldr	r3, [pc, #360]	@ (8007048 <balanceCells+0x1b8>)
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	2b0a      	cmp	r3, #10
 8006ee4:	d17c      	bne.n	8006fe0 <balanceCells+0x150>
		// Clear balance mask for new calculation
		multiMask = 0;
 8006ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8007054 <balanceCells+0x1c4>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	801a      	strh	r2, [r3, #0]

		for (uint8_t dev = 0; dev < tIC; ++dev) {
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	e072      	b.n	8006fd8 <balanceCells+0x148>
			// Start with all balance switches off
			ic[dev].tx_cfgb.dcc = 0;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	825a      	strh	r2, [r3, #18]

			for (uint8_t ch = 0; ch < cell_count; ++ch) {
 8006f04:	2300      	movs	r3, #0
 8006f06:	73bb      	strb	r3, [r7, #14]
 8006f08:	e050      	b.n	8006fac <balanceCells+0x11c>
				float v = getVoltage(ic[dev].cell.c_codes[ch]);
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	4413      	add	r3, r2
 8006f18:	7bba      	ldrb	r2, [r7, #14]
 8006f1a:	3210      	adds	r2, #16
 8006f1c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 ff49 	bl	8007db8 <getVoltage>
 8006f26:	ed87 0a02 	vstr	s0, [r7, #8]

				// Improved logic: Balance cells above target with a small hysteresis
				if (v > (target_lowest_cell + 0.01)) { // 10mV hysteresis
 8006f2a:	68b8      	ldr	r0, [r7, #8]
 8006f2c:	f7f9 fb14 	bl	8000558 <__aeabi_f2d>
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	4b46      	ldr	r3, [pc, #280]	@ (8007050 <balanceCells+0x1c0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7f9 fb0d 	bl	8000558 <__aeabi_f2d>
 8006f3e:	a340      	add	r3, pc, #256	@ (adr r3, 8007040 <balanceCells+0x1b0>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f7f9 f9aa 	bl	800029c <__adddf3>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fdea 	bl	8000b28 <__aeabi_dcmpgt>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d019      	beq.n	8006f8e <balanceCells+0xfe>
													   // Set this cell for balancing
					multiMask |= (1 << ch);
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	b21a      	sxth	r2, r3
 8006f64:	4b3b      	ldr	r3, [pc, #236]	@ (8007054 <balanceCells+0x1c4>)
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b21b      	sxth	r3, r3
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	b21b      	sxth	r3, r3
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	4b38      	ldr	r3, [pc, #224]	@ (8007054 <balanceCells+0x1c4>)
 8006f72:	801a      	strh	r2, [r3, #0]
					// Configure PWM duty cycle
					ic[dev].PwmA.pwma[ch] = duty_cycle;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	441a      	add	r2, r3
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	4413      	add	r3, r2
 8006f86:	79ba      	ldrb	r2, [r7, #6]
 8006f88:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
 8006f8c:	e00b      	b.n	8006fa6 <balanceCells+0x116>
				} else {
					// Ensure PWM is off for cells we don't balance
					ic[dev].PwmA.pwma[ch] = PWM_0_0_PCT;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
			for (uint8_t ch = 0; ch < cell_count; ++ch) {
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	73bb      	strb	r3, [r7, #14]
 8006fac:	4b2a      	ldr	r3, [pc, #168]	@ (8007058 <balanceCells+0x1c8>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	7bba      	ldrb	r2, [r7, #14]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3a9      	bcc.n	8006f0a <balanceCells+0x7a>
				}
			}

			// Apply the mask directly (cleaner than the previous approach)
			ic[dev].tx_cfgb.dcc = ConfigB_DccBits(multiMask, DCC_BIT_SET);
 8006fb6:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <balanceCells+0x1c4>)
 8006fb8:	8818      	ldrh	r0, [r3, #0]
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006fc0:	fb02 f303 	mul.w	r3, r2, r3
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	18d4      	adds	r4, r2, r3
 8006fc8:	2101      	movs	r1, #1
 8006fca:	f7fb fa22 	bl	8002412 <ConfigB_DccBits>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	8263      	strh	r3, [r4, #18]
		for (uint8_t dev = 0; dev < tIC; ++dev) {
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	7bfa      	ldrb	r2, [r7, #15]
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d388      	bcc.n	8006ef2 <balanceCells+0x62>
		}
	}

	// Send configuration to the hardware - this should happen every time
	// to ensure the balancing continues even if we don't update the mask
	adBmsWakeupIc(tIC);
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f906 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM1, Pwm, A); /* cells 1-8 */
 8006fe8:	79f8      	ldrb	r0, [r7, #7]
 8006fea:	2301      	movs	r3, #1
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	2304      	movs	r3, #4
 8006ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800705c <balanceCells+0x1cc>)
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	f7fa ffe8 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f8fa 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM2, Pwm, B); /* cells 9-16 */
 8007000:	79f8      	ldrb	r0, [r7, #7]
 8007002:	2302      	movs	r3, #2
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	2304      	movs	r3, #4
 8007008:	4a15      	ldr	r2, [pc, #84]	@ (8007060 <balanceCells+0x1d0>)
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	f7fa ffdc 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 f8ee 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRCFGB, Config, B); /* push DCC */
 8007018:	79f8      	ldrb	r0, [r7, #7]
 800701a:	2302      	movs	r3, #2
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2308      	movs	r3, #8
 8007020:	4a10      	ldr	r2, [pc, #64]	@ (8007064 <balanceCells+0x1d4>)
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	f7fa ffd0 	bl	8001fc8 <adBmsWriteData>

	// Enable S-pin control
	adBmsWakeupIc(tIC);
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f8e2 	bl	80071f4 <adBmsWakeupIc>
	spiSendCmd(UNMUTE);
 8007030:	480d      	ldr	r0, [pc, #52]	@ (8007068 <balanceCells+0x1d8>)
 8007032:	f7fa f89d 	bl	8001170 <spiSendCmd>
}
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bdb0      	pop	{r4, r5, r7, pc}
 800703c:	f3af 8000 	nop.w
 8007040:	47ae147b 	.word	0x47ae147b
 8007044:	3f847ae1 	.word	0x3f847ae1
 8007048:	20001c68 	.word	0x20001c68
 800704c:	20001c7c 	.word	0x20001c7c
 8007050:	2000003c 	.word	0x2000003c
 8007054:	20001c66 	.word	0x20001c66
 8007058:	20000044 	.word	0x20000044
 800705c:	20000030 	.word	0x20000030
 8007060:	20000034 	.word	0x20000034
 8007064:	20000004 	.word	0x20000004
 8007068:	20000038 	.word	0x20000038

0800706c <stopBalancing>:

void stopBalancing(uint8_t tIC, cell_asic *ic) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af02      	add	r7, sp, #8
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
	// Clear all balance control
	multiMask = 0;
 8007078:	4b2d      	ldr	r3, [pc, #180]	@ (8007130 <stopBalancing+0xc4>)
 800707a:	2200      	movs	r2, #0
 800707c:	801a      	strh	r2, [r3, #0]

	for (uint8_t dev = 0; dev < tIC; ++dev) {
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
 8007082:	e022      	b.n	80070ca <stopBalancing+0x5e>
		// Clear all DCC bits for all cells
		ic[dev].tx_cfgb.dcc = 0;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800708a:	fb02 f303 	mul.w	r3, r2, r3
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	4413      	add	r3, r2
 8007092:	2200      	movs	r2, #0
 8007094:	825a      	strh	r2, [r3, #18]

		// Also ensure all PWM settings are zero
		for (uint8_t ch = 0; ch < cell_count; ++ch) {
 8007096:	2300      	movs	r3, #0
 8007098:	73bb      	strb	r3, [r7, #14]
 800709a:	e00e      	b.n	80070ba <stopBalancing+0x4e>
			ic[dev].PwmA.pwma[ch] = PWM_0_0_PCT;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	441a      	add	r2, r3
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	4413      	add	r3, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
		for (uint8_t ch = 0; ch < cell_count; ++ch) {
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	3301      	adds	r3, #1
 80070b8:	73bb      	strb	r3, [r7, #14]
 80070ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007134 <stopBalancing+0xc8>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	7bba      	ldrb	r2, [r7, #14]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d3eb      	bcc.n	800709c <stopBalancing+0x30>
	for (uint8_t dev = 0; dev < tIC; ++dev) {
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	3301      	adds	r3, #1
 80070c8:	73fb      	strb	r3, [r7, #15]
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d3d8      	bcc.n	8007084 <stopBalancing+0x18>
		}
	}

	// Update hardware registers
	adBmsWakeupIc(tIC);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f88d 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM1, Pwm, A);
 80070da:	79f8      	ldrb	r0, [r7, #7]
 80070dc:	2301      	movs	r3, #1
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2304      	movs	r3, #4
 80070e2:	4a15      	ldr	r2, [pc, #84]	@ (8007138 <stopBalancing+0xcc>)
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	f7fa ff6f 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f881 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM2, Pwm, B);
 80070f2:	79f8      	ldrb	r0, [r7, #7]
 80070f4:	2302      	movs	r3, #2
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2304      	movs	r3, #4
 80070fa:	4a10      	ldr	r2, [pc, #64]	@ (800713c <stopBalancing+0xd0>)
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	f7fa ff63 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	4618      	mov	r0, r3
 8007106:	f000 f875 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRCFGB, Config, B);
 800710a:	79f8      	ldrb	r0, [r7, #7]
 800710c:	2302      	movs	r3, #2
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	2308      	movs	r3, #8
 8007112:	4a0b      	ldr	r2, [pc, #44]	@ (8007140 <stopBalancing+0xd4>)
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	f7fa ff57 	bl	8001fc8 <adBmsWriteData>

	// Ensure S-pins are operational
	adBmsWakeupIc(tIC);
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f869 	bl	80071f4 <adBmsWakeupIc>
	spiSendCmd(UNMUTE);
 8007122:	4808      	ldr	r0, [pc, #32]	@ (8007144 <stopBalancing+0xd8>)
 8007124:	f7fa f824 	bl	8001170 <spiSendCmd>
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20001c66 	.word	0x20001c66
 8007134:	20000044 	.word	0x20000044
 8007138:	20000030 	.word	0x20000030
 800713c:	20000034 	.word	0x20000034
 8007140:	20000004 	.word	0x20000004
 8007144:	20000038 	.word	0x20000038

08007148 <Delay_ms>:
 * @return None
 *
 *******************************************************************************
*/
void Delay_ms(uint32_t delay)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f004 fa6b 	bl	800b62c <HAL_Delay>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <adBmsCsLow>:
 * @return None
 *
 *******************************************************************************
*/
void adBmsCsLow()
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8007164:	2200      	movs	r2, #0
 8007166:	2140      	movs	r1, #64	@ 0x40
 8007168:	4802      	ldr	r0, [pc, #8]	@ (8007174 <adBmsCsLow+0x14>)
 800716a:	f007 f809 	bl	800e180 <HAL_GPIO_WritePin>
}
 800716e:	bf00      	nop
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	48000400 	.word	0x48000400

08007178 <adBmsCsHigh>:
 * @return None
 *
 *******************************************************************************
*/
void adBmsCsHigh()
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 800717c:	2201      	movs	r2, #1
 800717e:	2140      	movs	r1, #64	@ 0x40
 8007180:	4802      	ldr	r0, [pc, #8]	@ (800718c <adBmsCsHigh+0x14>)
 8007182:	f006 fffd 	bl	800e180 <HAL_GPIO_WritePin>
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	48000400 	.word	0x48000400

08007190 <spiWriteBytes>:
void spiWriteBytes
( 
uint16_t size,                     /*Option: Number of bytes to be written on the SPI port*/
uint8_t *tx_Data                       /*Array of bytes to be written on the SPI port*/
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Transmit(hspi, tx_Data, size, SPI_TIME_OUT); /* SPI1 , data, size, timeout */ 
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <spiWriteBytes+0x24>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	f008 fb2c 	bl	800f804 <HAL_SPI_Transmit>
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000040 	.word	0x20000040

080071b8 <spiWriteReadBytes>:
(
uint8_t *tx_data,                   /*array of data to be written on SPI port*/
uint8_t *rx_data,                   /*Input: array that will store the data read by the SPI port*/
uint16_t size                           /*Option: number of bytes*/
)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Transmit(hspi, tx_data, 4, SPI_TIME_OUT);
 80071c6:	4b0a      	ldr	r3, [pc, #40]	@ (80071f0 <spiWriteReadBytes+0x38>)
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071ce:	2204      	movs	r2, #4
 80071d0:	68f9      	ldr	r1, [r7, #12]
 80071d2:	f008 fb17 	bl	800f804 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, rx_data, size, SPI_TIME_OUT);
 80071d6:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <spiWriteReadBytes+0x38>)
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	f008 fc85 	bl	800faf0 <HAL_SPI_Receive>
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000040 	.word	0x20000040

080071f4 <adBmsWakeupIc>:
 * @return None
 *
 *******************************************************************************
*/
void adBmsWakeupIc(uint8_t total_ic)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	71fb      	strb	r3, [r7, #7]
  for (uint8_t ic = 0; ic < total_ic; ic++)
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
 8007202:	e00c      	b.n	800721e <adBmsWakeupIc+0x2a>
  {
    adBmsCsLow();
 8007204:	f7ff ffac 	bl	8007160 <adBmsCsLow>
    Delay_ms(WAKEUP_DELAY);
 8007208:	2001      	movs	r0, #1
 800720a:	f7ff ff9d 	bl	8007148 <Delay_ms>
    adBmsCsHigh();
 800720e:	f7ff ffb3 	bl	8007178 <adBmsCsHigh>
    Delay_ms(WAKEUP_DELAY);
 8007212:	2001      	movs	r0, #1
 8007214:	f7ff ff98 	bl	8007148 <Delay_ms>
  for (uint8_t ic = 0; ic < total_ic; ic++)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	3301      	adds	r3, #1
 800721c:	73fb      	strb	r3, [r7, #15]
 800721e:	7bfa      	ldrb	r2, [r7, #15]
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	429a      	cmp	r2, r3
 8007224:	d3ee      	bcc.n	8007204 <adBmsWakeupIc+0x10>
  }
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <printVoltages>:
 * @return None
 *
 *******************************************************************************
*/
void printVoltages(uint8_t tIC, cell_asic *IC, TYPE type)
{
 8007230:	b5b0      	push	{r4, r5, r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	6039      	str	r1, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	4613      	mov	r3, r2
 800723e:	71bb      	strb	r3, [r7, #6]
	if (PRINT_ON) {
  float voltage;
  int16_t temp;
  uint8_t channel;
  if((type == Cell) || (type == AvgCell) || (type == F_volt) || (type == S_volt))
 8007240:	79bb      	ldrb	r3, [r7, #6]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <printVoltages+0x28>
 8007246:	79bb      	ldrb	r3, [r7, #6]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d005      	beq.n	8007258 <printVoltages+0x28>
 800724c:	79bb      	ldrb	r3, [r7, #6]
 800724e:	2b07      	cmp	r3, #7
 8007250:	d002      	beq.n	8007258 <printVoltages+0x28>
 8007252:	79bb      	ldrb	r3, [r7, #6]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d102      	bne.n	800725e <printVoltages+0x2e>
  {
    channel = CELL;
 8007258:	2310      	movs	r3, #16
 800725a:	777b      	strb	r3, [r7, #29]
 800725c:	e00a      	b.n	8007274 <printVoltages+0x44>
  }
  else if (type == Aux){ channel = AUX;}
 800725e:	79bb      	ldrb	r3, [r7, #6]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d102      	bne.n	800726a <printVoltages+0x3a>
 8007264:	230c      	movs	r3, #12
 8007266:	777b      	strb	r3, [r7, #29]
 8007268:	e004      	b.n	8007274 <printVoltages+0x44>
  else if (type == RAux){channel = RAUX;}
 800726a:	79bb      	ldrb	r3, [r7, #6]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d101      	bne.n	8007274 <printVoltages+0x44>
 8007270:	230a      	movs	r3, #10
 8007272:	777b      	strb	r3, [r7, #29]
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007274:	2300      	movs	r3, #0
 8007276:	773b      	strb	r3, [r7, #28]
 8007278:	e1d7      	b.n	800762a <printVoltages+0x3fa>
  {
    printf("IC%d:",(ic+1));
 800727a:	7f3b      	ldrb	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	4619      	mov	r1, r3
 8007280:	4893      	ldr	r0, [pc, #588]	@ (80074d0 <printVoltages+0x2a0>)
 8007282:	f00d f841 	bl	8014308 <iprintf>
    for(uint8_t index = 0; index < channel; index++)
 8007286:	2300      	movs	r3, #0
 8007288:	76fb      	strb	r3, [r7, #27]
 800728a:	e1c3      	b.n	8007614 <printVoltages+0x3e4>
    {
      if(type == Cell){ temp = IC[ic].cell.c_codes[index]; }
 800728c:	79bb      	ldrb	r3, [r7, #6]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <printVoltages+0x7c>
 8007292:	7f3b      	ldrb	r3, [r7, #28]
 8007294:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	4413      	add	r3, r2
 80072a0:	7efa      	ldrb	r2, [r7, #27]
 80072a2:	3210      	adds	r2, #16
 80072a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072a8:	83fb      	strh	r3, [r7, #30]
 80072aa:	e04e      	b.n	800734a <printVoltages+0x11a>
      else if(type == AvgCell){ temp = IC[ic].acell.ac_codes[index]; }
 80072ac:	79bb      	ldrb	r3, [r7, #6]
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d10c      	bne.n	80072cc <printVoltages+0x9c>
 80072b2:	7f3b      	ldrb	r3, [r7, #28]
 80072b4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80072b8:	fb02 f303 	mul.w	r3, r2, r3
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	4413      	add	r3, r2
 80072c0:	7efa      	ldrb	r2, [r7, #27]
 80072c2:	3220      	adds	r2, #32
 80072c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072c8:	83fb      	strh	r3, [r7, #30]
 80072ca:	e03e      	b.n	800734a <printVoltages+0x11a>
      else if(type == F_volt){ temp = IC[ic].fcell.fc_codes[index]; }
 80072cc:	79bb      	ldrb	r3, [r7, #6]
 80072ce:	2b07      	cmp	r3, #7
 80072d0:	d10c      	bne.n	80072ec <printVoltages+0xbc>
 80072d2:	7f3b      	ldrb	r3, [r7, #28]
 80072d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	4413      	add	r3, r2
 80072e0:	7efa      	ldrb	r2, [r7, #27]
 80072e2:	3240      	adds	r2, #64	@ 0x40
 80072e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072e8:	83fb      	strh	r3, [r7, #30]
 80072ea:	e02e      	b.n	800734a <printVoltages+0x11a>
      else if(type == S_volt){ temp = IC[ic].scell.sc_codes[index]; }
 80072ec:	79bb      	ldrb	r3, [r7, #6]
 80072ee:	2b06      	cmp	r3, #6
 80072f0:	d10c      	bne.n	800730c <printVoltages+0xdc>
 80072f2:	7f3b      	ldrb	r3, [r7, #28]
 80072f4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	4413      	add	r3, r2
 8007300:	7efa      	ldrb	r2, [r7, #27]
 8007302:	3230      	adds	r2, #48	@ 0x30
 8007304:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007308:	83fb      	strh	r3, [r7, #30]
 800730a:	e01e      	b.n	800734a <printVoltages+0x11a>
      else if(type == Aux){ temp = IC[ic].aux.a_codes[index]; }
 800730c:	79bb      	ldrb	r3, [r7, #6]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10c      	bne.n	800732c <printVoltages+0xfc>
 8007312:	7f3b      	ldrb	r3, [r7, #28]
 8007314:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007318:	fb02 f303 	mul.w	r3, r2, r3
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	4413      	add	r3, r2
 8007320:	7efa      	ldrb	r2, [r7, #27]
 8007322:	3250      	adds	r2, #80	@ 0x50
 8007324:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007328:	83fb      	strh	r3, [r7, #30]
 800732a:	e00e      	b.n	800734a <printVoltages+0x11a>
      else if(type == RAux){ temp = IC[ic].raux.ra_codes[index]; }
 800732c:	79bb      	ldrb	r3, [r7, #6]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d10b      	bne.n	800734a <printVoltages+0x11a>
 8007332:	7f3b      	ldrb	r3, [r7, #28]
 8007334:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	4413      	add	r3, r2
 8007340:	7efa      	ldrb	r2, [r7, #27]
 8007342:	325c      	adds	r2, #92	@ 0x5c
 8007344:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007348:	83fb      	strh	r3, [r7, #30]
      voltage = getVoltage(temp);
 800734a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd32 	bl	8007db8 <getVoltage>
 8007354:	ed87 0a05 	vstr	s0, [r7, #20]

      if(type == Cell)
 8007358:	79bb      	ldrb	r3, [r7, #6]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d12b      	bne.n	80073b6 <printVoltages+0x186>
      {
    	printf("C%d=%fV, ",(index+1), voltage);
 800735e:	7efb      	ldrb	r3, [r7, #27]
 8007360:	1c5c      	adds	r4, r3, #1
 8007362:	6978      	ldr	r0, [r7, #20]
 8007364:	f7f9 f8f8 	bl	8000558 <__aeabi_f2d>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4621      	mov	r1, r4
 800736e:	4859      	ldr	r0, [pc, #356]	@ (80074d4 <printVoltages+0x2a4>)
 8007370:	f00c ffca 	bl	8014308 <iprintf>
//    	printf("%d", ((int) voltage * 100)/100);
//    	printf(".%d", ((int) (voltage * 1000) - ((int) voltage * 1000)));
//    	printf("V, ");

        if(index == (channel-1))
 8007374:	7efa      	ldrb	r2, [r7, #27]
 8007376:	7f7b      	ldrb	r3, [r7, #29]
 8007378:	3b01      	subs	r3, #1
 800737a:	429a      	cmp	r2, r3
 800737c:	f040 8147 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007380:	7f3b      	ldrb	r3, [r7, #28]
 8007382:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007386:	fb02 f303 	mul.w	r3, r2, r3
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4413      	add	r3, r2
 800738e:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007392:	4619      	mov	r1, r3
 8007394:	4850      	ldr	r0, [pc, #320]	@ (80074d8 <printVoltages+0x2a8>)
 8007396:	f00c ffb7 	bl	8014308 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.cell_pec);
 800739a:	7f3b      	ldrb	r3, [r7, #28]
 800739c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	4413      	add	r3, r2
 80073a8:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 80073ac:	4619      	mov	r1, r3
 80073ae:	484b      	ldr	r0, [pc, #300]	@ (80074dc <printVoltages+0x2ac>)
 80073b0:	f00c ffaa 	bl	8014308 <iprintf>
 80073b4:	e12b      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else if(type == AvgCell)
 80073b6:	79bb      	ldrb	r3, [r7, #6]
 80073b8:	2b05      	cmp	r3, #5
 80073ba:	d12b      	bne.n	8007414 <printVoltages+0x1e4>
      {
        printf("AC%d=%fV,",(index+1), voltage);
 80073bc:	7efb      	ldrb	r3, [r7, #27]
 80073be:	1c5c      	adds	r4, r3, #1
 80073c0:	6978      	ldr	r0, [r7, #20]
 80073c2:	f7f9 f8c9 	bl	8000558 <__aeabi_f2d>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4621      	mov	r1, r4
 80073cc:	4844      	ldr	r0, [pc, #272]	@ (80074e0 <printVoltages+0x2b0>)
 80073ce:	f00c ff9b 	bl	8014308 <iprintf>
        if(index == (channel-1))
 80073d2:	7efa      	ldrb	r2, [r7, #27]
 80073d4:	7f7b      	ldrb	r3, [r7, #29]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	f040 8118 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 80073de:	7f3b      	ldrb	r3, [r7, #28]
 80073e0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80073e4:	fb02 f303 	mul.w	r3, r2, r3
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	4413      	add	r3, r2
 80073ec:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 80073f0:	4619      	mov	r1, r3
 80073f2:	4839      	ldr	r0, [pc, #228]	@ (80074d8 <printVoltages+0x2a8>)
 80073f4:	f00c ff88 	bl	8014308 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.acell_pec);
 80073f8:	7f3b      	ldrb	r3, [r7, #28]
 80073fa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80073fe:	fb02 f303 	mul.w	r3, r2, r3
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4413      	add	r3, r2
 8007406:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 800740a:	4619      	mov	r1, r3
 800740c:	4833      	ldr	r0, [pc, #204]	@ (80074dc <printVoltages+0x2ac>)
 800740e:	f00c ff7b 	bl	8014308 <iprintf>
 8007412:	e0fc      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else if(type == F_volt)
 8007414:	79bb      	ldrb	r3, [r7, #6]
 8007416:	2b07      	cmp	r3, #7
 8007418:	d12b      	bne.n	8007472 <printVoltages+0x242>
      {
        printf("FC%d=%fV,",(index+1), voltage);
 800741a:	7efb      	ldrb	r3, [r7, #27]
 800741c:	1c5c      	adds	r4, r3, #1
 800741e:	6978      	ldr	r0, [r7, #20]
 8007420:	f7f9 f89a 	bl	8000558 <__aeabi_f2d>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4621      	mov	r1, r4
 800742a:	482e      	ldr	r0, [pc, #184]	@ (80074e4 <printVoltages+0x2b4>)
 800742c:	f00c ff6c 	bl	8014308 <iprintf>
        if(index == (channel-1))
 8007430:	7efa      	ldrb	r2, [r7, #27]
 8007432:	7f7b      	ldrb	r3, [r7, #29]
 8007434:	3b01      	subs	r3, #1
 8007436:	429a      	cmp	r2, r3
 8007438:	f040 80e9 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 800743c:	7f3b      	ldrb	r3, [r7, #28]
 800743e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007442:	fb02 f303 	mul.w	r3, r2, r3
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	4413      	add	r3, r2
 800744a:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 800744e:	4619      	mov	r1, r3
 8007450:	4821      	ldr	r0, [pc, #132]	@ (80074d8 <printVoltages+0x2a8>)
 8007452:	f00c ff59 	bl	8014308 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.fcell_pec);
 8007456:	7f3b      	ldrb	r3, [r7, #28]
 8007458:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	4413      	add	r3, r2
 8007464:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8007468:	4619      	mov	r1, r3
 800746a:	481c      	ldr	r0, [pc, #112]	@ (80074dc <printVoltages+0x2ac>)
 800746c:	f00c ff4c 	bl	8014308 <iprintf>
 8007470:	e0cd      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else if(type == S_volt)
 8007472:	79bb      	ldrb	r3, [r7, #6]
 8007474:	2b06      	cmp	r3, #6
 8007476:	d139      	bne.n	80074ec <printVoltages+0x2bc>
      {
        printf("S%d=%fV,",(index+1), voltage);
 8007478:	7efb      	ldrb	r3, [r7, #27]
 800747a:	1c5c      	adds	r4, r3, #1
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	f7f9 f86b 	bl	8000558 <__aeabi_f2d>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4621      	mov	r1, r4
 8007488:	4817      	ldr	r0, [pc, #92]	@ (80074e8 <printVoltages+0x2b8>)
 800748a:	f00c ff3d 	bl	8014308 <iprintf>
        if(index == (channel-1))
 800748e:	7efa      	ldrb	r2, [r7, #27]
 8007490:	7f7b      	ldrb	r3, [r7, #29]
 8007492:	3b01      	subs	r3, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	f040 80ba 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 800749a:	7f3b      	ldrb	r3, [r7, #28]
 800749c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80074a0:	fb02 f303 	mul.w	r3, r2, r3
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 80074ac:	4619      	mov	r1, r3
 80074ae:	480a      	ldr	r0, [pc, #40]	@ (80074d8 <printVoltages+0x2a8>)
 80074b0:	f00c ff2a 	bl	8014308 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.scell_pec);
 80074b4:	7f3b      	ldrb	r3, [r7, #28]
 80074b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	4413      	add	r3, r2
 80074c2:	f893 3193 	ldrb.w	r3, [r3, #403]	@ 0x193
 80074c6:	4619      	mov	r1, r3
 80074c8:	4804      	ldr	r0, [pc, #16]	@ (80074dc <printVoltages+0x2ac>)
 80074ca:	f00c ff1d 	bl	8014308 <iprintf>
 80074ce:	e09e      	b.n	800760e <printVoltages+0x3de>
 80074d0:	080172f0 	.word	0x080172f0
 80074d4:	080172f8 	.word	0x080172f8
 80074d8:	08017274 	.word	0x08017274
 80074dc:	08017304 	.word	0x08017304
 80074e0:	08017310 	.word	0x08017310
 80074e4:	0801731c 	.word	0x0801731c
 80074e8:	08017328 	.word	0x08017328
        }
      }
      else if(type == Aux)
 80074ec:	79bb      	ldrb	r3, [r7, #6]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d15c      	bne.n	80075ac <printVoltages+0x37c>
      {
        if(index <= 9)
 80074f2:	7efb      	ldrb	r3, [r7, #27]
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	f200 808a 	bhi.w	800760e <printVoltages+0x3de>
        {
        	float V = voltage;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	613b      	str	r3, [r7, #16]
        	float temperature = -225.6985 * (V * V * V) + 1310.5937 * (V * V) + -2594.7697 * V + 1767.8260;
 80074fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8007502:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007506:	edd7 7a04 	vldr	s15, [r7, #16]
 800750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750e:	ee17 0a90 	vmov	r0, s15
 8007512:	f7f9 f821 	bl	8000558 <__aeabi_f2d>
 8007516:	a350      	add	r3, pc, #320	@ (adr r3, 8007658 <printVoltages+0x428>)
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f7f9 f874 	bl	8000608 <__aeabi_dmul>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4614      	mov	r4, r2
 8007526:	461d      	mov	r5, r3
 8007528:	edd7 7a04 	vldr	s15, [r7, #16]
 800752c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007530:	ee17 0a90 	vmov	r0, s15
 8007534:	f7f9 f810 	bl	8000558 <__aeabi_f2d>
 8007538:	a349      	add	r3, pc, #292	@ (adr r3, 8007660 <printVoltages+0x430>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f863 	bl	8000608 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f8 fea7 	bl	800029c <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4614      	mov	r4, r2
 8007554:	461d      	mov	r5, r3
 8007556:	6938      	ldr	r0, [r7, #16]
 8007558:	f7f8 fffe 	bl	8000558 <__aeabi_f2d>
 800755c:	a342      	add	r3, pc, #264	@ (adr r3, 8007668 <printVoltages+0x438>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f9 f851 	bl	8000608 <__aeabi_dmul>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f8 fe95 	bl	800029c <__adddf3>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	a33d      	add	r3, pc, #244	@ (adr r3, 8007670 <printVoltages+0x440>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f8 fe8c 	bl	800029c <__adddf3>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	f7f9 fb34 	bl	8000bf8 <__aeabi_d2f>
 8007590:	4603      	mov	r3, r0
 8007592:	60fb      	str	r3, [r7, #12]
        	printf("AUX%d=%fC, ",(index+1), temperature);
 8007594:	7efb      	ldrb	r3, [r7, #27]
 8007596:	1c5c      	adds	r4, r3, #1
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7f8 ffdd 	bl	8000558 <__aeabi_f2d>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4621      	mov	r1, r4
 80075a4:	4826      	ldr	r0, [pc, #152]	@ (8007640 <printVoltages+0x410>)
 80075a6:	f00c feaf 	bl	8014308 <iprintf>
 80075aa:	e030      	b.n	800760e <printVoltages+0x3de>
			// printf("%d", ((int) temp * 100)/100);
			// printf(".%d", ((int) (temp * 1000) - ((int) temp * 1000)));
			// printf("C, ");
      //   }
      }
      else if(type == RAux)
 80075ac:	79bb      	ldrb	r3, [r7, #6]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d12a      	bne.n	8007608 <printVoltages+0x3d8>
      {
        printf("RAUX%d=%fV,",(index+1), voltage);
 80075b2:	7efb      	ldrb	r3, [r7, #27]
 80075b4:	1c5c      	adds	r4, r3, #1
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f7f8 ffce 	bl	8000558 <__aeabi_f2d>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4621      	mov	r1, r4
 80075c2:	4820      	ldr	r0, [pc, #128]	@ (8007644 <printVoltages+0x414>)
 80075c4:	f00c fea0 	bl	8014308 <iprintf>
        if(index == (channel-1))
 80075c8:	7efa      	ldrb	r2, [r7, #27]
 80075ca:	7f7b      	ldrb	r3, [r7, #29]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d11d      	bne.n	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 80075d2:	7f3b      	ldrb	r3, [r7, #28]
 80075d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	4413      	add	r3, r2
 80075e0:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 80075e4:	4619      	mov	r1, r3
 80075e6:	4818      	ldr	r0, [pc, #96]	@ (8007648 <printVoltages+0x418>)
 80075e8:	f00c fe8e 	bl	8014308 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.raux_pec);
 80075ec:	7f3b      	ldrb	r3, [r7, #28]
 80075ee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4413      	add	r3, r2
 80075fa:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80075fe:	4619      	mov	r1, r3
 8007600:	4812      	ldr	r0, [pc, #72]	@ (800764c <printVoltages+0x41c>)
 8007602:	f00c fe81 	bl	8014308 <iprintf>
 8007606:	e002      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else{ printf("Wrong Register Group Select\n"); }
 8007608:	4811      	ldr	r0, [pc, #68]	@ (8007650 <printVoltages+0x420>)
 800760a:	f00c feed 	bl	80143e8 <puts>
    for(uint8_t index = 0; index < channel; index++)
 800760e:	7efb      	ldrb	r3, [r7, #27]
 8007610:	3301      	adds	r3, #1
 8007612:	76fb      	strb	r3, [r7, #27]
 8007614:	7efa      	ldrb	r2, [r7, #27]
 8007616:	7f7b      	ldrb	r3, [r7, #29]
 8007618:	429a      	cmp	r2, r3
 800761a:	f4ff ae37 	bcc.w	800728c <printVoltages+0x5c>
    }
    printf("\n\n");
 800761e:	480d      	ldr	r0, [pc, #52]	@ (8007654 <printVoltages+0x424>)
 8007620:	f00c fee2 	bl	80143e8 <puts>
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007624:	7f3b      	ldrb	r3, [r7, #28]
 8007626:	3301      	adds	r3, #1
 8007628:	773b      	strb	r3, [r7, #28]
 800762a:	7f3a      	ldrb	r2, [r7, #28]
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	429a      	cmp	r2, r3
 8007630:	f4ff ae23 	bcc.w	800727a <printVoltages+0x4a>
  }
	}

}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bdb0      	pop	{r4, r5, r7, pc}
 800763e:	bf00      	nop
 8007640:	08017334 	.word	0x08017334
 8007644:	08017340 	.word	0x08017340
 8007648:	08017274 	.word	0x08017274
 800764c:	08017304 	.word	0x08017304
 8007650:	0801711c 	.word	0x0801711c
 8007654:	0801734c 	.word	0x0801734c
 8007658:	1cac0831 	.word	0x1cac0831
 800765c:	c06c365a 	.word	0xc06c365a
 8007660:	f2e48e8a 	.word	0xf2e48e8a
 8007664:	40947a5f 	.word	0x40947a5f
 8007668:	161e4f76 	.word	0x161e4f76
 800766c:	c0a4458a 	.word	0xc0a4458a
 8007670:	d2f1a9fc 	.word	0xd2f1a9fc
 8007674:	409b9f4d 	.word	0x409b9f4d

08007678 <printWritePwmDutyCycle>:
* @return None
*
*******************************************************************************
*/
void printWritePwmDutyCycle(uint8_t tIC, cell_asic *IC, TYPE type, GRP grp)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6039      	str	r1, [r7, #0]
 8007680:	4611      	mov	r1, r2
 8007682:	461a      	mov	r2, r3
 8007684:	4603      	mov	r3, r0
 8007686:	71fb      	strb	r3, [r7, #7]
 8007688:	460b      	mov	r3, r1
 800768a:	71bb      	strb	r3, [r7, #6]
 800768c:	4613      	mov	r3, r2
 800768e:	717b      	strb	r3, [r7, #5]
	if (PRINT_ON) {
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e0f3      	b.n	800787e <printWritePwmDutyCycle+0x206>
  {
    printf("IC%d:\n",(ic+1));
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	3301      	adds	r3, #1
 800769a:	4619      	mov	r1, r3
 800769c:	487d      	ldr	r0, [pc, #500]	@ (8007894 <printWritePwmDutyCycle+0x21c>)
 800769e:	f00c fe33 	bl	8014308 <iprintf>
    if(grp == A)
 80076a2:	797b      	ldrb	r3, [r7, #5]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d151      	bne.n	800774c <printWritePwmDutyCycle+0xd4>
    {
      printf("Write Pwma Duty Cycle:\n");
 80076a8:	487b      	ldr	r0, [pc, #492]	@ (8007898 <printWritePwmDutyCycle+0x220>)
 80076aa:	f00c fe9d 	bl	80143e8 <puts>
      printf("0x%X, ", IC[ic].pwma.tx_data[0]);
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	4413      	add	r3, r2
 80076bc:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 80076c0:	4619      	mov	r1, r3
 80076c2:	4876      	ldr	r0, [pc, #472]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80076c4:	f00c fe20 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[1]);
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80076ce:	fb02 f303 	mul.w	r3, r2, r3
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 80076da:	4619      	mov	r1, r3
 80076dc:	486f      	ldr	r0, [pc, #444]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80076de:	f00c fe13 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[2]);
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	4413      	add	r3, r2
 80076f0:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80076f4:	4619      	mov	r1, r3
 80076f6:	4869      	ldr	r0, [pc, #420]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80076f8:	f00c fe06 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[3]);
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	4413      	add	r3, r2
 800770a:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 800770e:	4619      	mov	r1, r3
 8007710:	4862      	ldr	r0, [pc, #392]	@ (800789c <printWritePwmDutyCycle+0x224>)
 8007712:	f00c fdf9 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[4]);
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	4413      	add	r3, r2
 8007724:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8007728:	4619      	mov	r1, r3
 800772a:	485c      	ldr	r0, [pc, #368]	@ (800789c <printWritePwmDutyCycle+0x224>)
 800772c:	f00c fdec 	bl	8014308 <iprintf>
      printf("0x%X\n\n", IC[ic].pwma.tx_data[5]);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	4413      	add	r3, r2
 800773e:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8007742:	4619      	mov	r1, r3
 8007744:	4856      	ldr	r0, [pc, #344]	@ (80078a0 <printWritePwmDutyCycle+0x228>)
 8007746:	f00c fddf 	bl	8014308 <iprintf>
 800774a:	e095      	b.n	8007878 <printWritePwmDutyCycle+0x200>
    }
    else if(grp == B)
 800774c:	797b      	ldrb	r3, [r7, #5]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d11d      	bne.n	800778e <printWritePwmDutyCycle+0x116>
    {
      printf("Write Pwmb Duty Cycle:\n");
 8007752:	4854      	ldr	r0, [pc, #336]	@ (80078a4 <printWritePwmDutyCycle+0x22c>)
 8007754:	f00c fe48 	bl	80143e8 <puts>
      printf("0x%X, ", IC[ic].pwmb.tx_data[0]);
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	4413      	add	r3, r2
 8007766:	f893 3173 	ldrb.w	r3, [r3, #371]	@ 0x173
 800776a:	4619      	mov	r1, r3
 800776c:	484b      	ldr	r0, [pc, #300]	@ (800789c <printWritePwmDutyCycle+0x224>)
 800776e:	f00c fdcb 	bl	8014308 <iprintf>
      printf("0x%X\n\n", IC[ic].pwmb.tx_data[1]);
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	4413      	add	r3, r2
 8007780:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8007784:	4619      	mov	r1, r3
 8007786:	4846      	ldr	r0, [pc, #280]	@ (80078a0 <printWritePwmDutyCycle+0x228>)
 8007788:	f00c fdbe 	bl	8014308 <iprintf>
 800778c:	e074      	b.n	8007878 <printWritePwmDutyCycle+0x200>
    }
    else if(grp == ALL_GRP)
 800778e:	797b      	ldrb	r3, [r7, #5]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d16e      	bne.n	8007872 <printWritePwmDutyCycle+0x1fa>
    {
      printf("Write Pwma Duty Cycle:\n");
 8007794:	4840      	ldr	r0, [pc, #256]	@ (8007898 <printWritePwmDutyCycle+0x220>)
 8007796:	f00c fe27 	bl	80143e8 <puts>
      printf("0x%X, ", IC[ic].pwma.tx_data[0]);
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077a0:	fb02 f303 	mul.w	r3, r2, r3
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	4413      	add	r3, r2
 80077a8:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 80077ac:	4619      	mov	r1, r3
 80077ae:	483b      	ldr	r0, [pc, #236]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077b0:	f00c fdaa 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[1]);
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 80077c6:	4619      	mov	r1, r3
 80077c8:	4834      	ldr	r0, [pc, #208]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077ca:	f00c fd9d 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[2]);
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	4413      	add	r3, r2
 80077dc:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80077e0:	4619      	mov	r1, r3
 80077e2:	482e      	ldr	r0, [pc, #184]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077e4:	f00c fd90 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[3]);
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	4413      	add	r3, r2
 80077f6:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 80077fa:	4619      	mov	r1, r3
 80077fc:	4827      	ldr	r0, [pc, #156]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077fe:	f00c fd83 	bl	8014308 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[4]);
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007808:	fb02 f303 	mul.w	r3, r2, r3
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	4413      	add	r3, r2
 8007810:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8007814:	4619      	mov	r1, r3
 8007816:	4821      	ldr	r0, [pc, #132]	@ (800789c <printWritePwmDutyCycle+0x224>)
 8007818:	f00c fd76 	bl	8014308 <iprintf>
      printf("0x%X\n", IC[ic].pwma.tx_data[5]);
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4413      	add	r3, r2
 800782a:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 800782e:	4619      	mov	r1, r3
 8007830:	481d      	ldr	r0, [pc, #116]	@ (80078a8 <printWritePwmDutyCycle+0x230>)
 8007832:	f00c fd69 	bl	8014308 <iprintf>

      printf("Write Pwmb Duty Cycle:\n");
 8007836:	481b      	ldr	r0, [pc, #108]	@ (80078a4 <printWritePwmDutyCycle+0x22c>)
 8007838:	f00c fdd6 	bl	80143e8 <puts>
      printf("0x%X, ", IC[ic].pwmb.tx_data[0]);
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4413      	add	r3, r2
 800784a:	f893 3173 	ldrb.w	r3, [r3, #371]	@ 0x173
 800784e:	4619      	mov	r1, r3
 8007850:	4812      	ldr	r0, [pc, #72]	@ (800789c <printWritePwmDutyCycle+0x224>)
 8007852:	f00c fd59 	bl	8014308 <iprintf>
      printf("0x%X\n\n", IC[ic].pwmb.tx_data[1]);
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4413      	add	r3, r2
 8007864:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8007868:	4619      	mov	r1, r3
 800786a:	480d      	ldr	r0, [pc, #52]	@ (80078a0 <printWritePwmDutyCycle+0x228>)
 800786c:	f00c fd4c 	bl	8014308 <iprintf>
 8007870:	e002      	b.n	8007878 <printWritePwmDutyCycle+0x200>
    }
    else{ printf("Wrong Register Group Select\n"); }
 8007872:	480e      	ldr	r0, [pc, #56]	@ (80078ac <printWritePwmDutyCycle+0x234>)
 8007874:	f00c fdb8 	bl	80143e8 <puts>
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	3301      	adds	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
 800787e:	7bfa      	ldrb	r2, [r7, #15]
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	429a      	cmp	r2, r3
 8007884:	f4ff af07 	bcc.w	8007696 <printWritePwmDutyCycle+0x1e>
  }
	}
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	080170e4 	.word	0x080170e4
 8007898:	08017758 	.word	0x08017758
 800789c:	080170fc 	.word	0x080170fc
 80078a0:	08017104 	.word	0x08017104
 80078a4:	08017770 	.word	0x08017770
 80078a8:	08017788 	.word	0x08017788
 80078ac:	0801711c 	.word	0x0801711c

080078b0 <printReadPwmDutyCycle>:
* @return None
*
*******************************************************************************
*/
void printReadPwmDutyCycle(uint8_t tIC, cell_asic *IC, TYPE type, GRP grp)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6039      	str	r1, [r7, #0]
 80078b8:	4611      	mov	r1, r2
 80078ba:	461a      	mov	r2, r3
 80078bc:	4603      	mov	r3, r0
 80078be:	71fb      	strb	r3, [r7, #7]
 80078c0:	460b      	mov	r3, r1
 80078c2:	71bb      	strb	r3, [r7, #6]
 80078c4:	4613      	mov	r3, r2
 80078c6:	717b      	strb	r3, [r7, #5]
	if (PRINT_ON) {
  for(uint8_t ic = 0; ic < tIC; ic++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
 80078cc:	e23d      	b.n	8007d4a <printReadPwmDutyCycle+0x49a>
  {
    printf("IC%d:\n",(ic+1));
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4619      	mov	r1, r3
 80078d4:	488a      	ldr	r0, [pc, #552]	@ (8007b00 <printReadPwmDutyCycle+0x250>)
 80078d6:	f00c fd17 	bl	8014308 <iprintf>
    if(grp == A)
 80078da:	797b      	ldrb	r3, [r7, #5]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	f040 80ba 	bne.w	8007a56 <printReadPwmDutyCycle+0x1a6>
    {
      printf("Read PWMA Duty Cycle:\n");
 80078e2:	4888      	ldr	r0, [pc, #544]	@ (8007b04 <printReadPwmDutyCycle+0x254>)
 80078e4:	f00c fd80 	bl	80143e8 <puts>
      printf("PWM1:0x%X, ", IC[ic].PwmA.pwma[0]);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4413      	add	r3, r2
 80078f6:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 80078fa:	4619      	mov	r1, r3
 80078fc:	4882      	ldr	r0, [pc, #520]	@ (8007b08 <printReadPwmDutyCycle+0x258>)
 80078fe:	f00c fd03 	bl	8014308 <iprintf>
      printf("PWM2:0x%X, ", IC[ic].PwmA.pwma[1]);
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	4413      	add	r3, r2
 8007910:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8007914:	4619      	mov	r1, r3
 8007916:	487d      	ldr	r0, [pc, #500]	@ (8007b0c <printReadPwmDutyCycle+0x25c>)
 8007918:	f00c fcf6 	bl	8014308 <iprintf>
      printf("PWM3:0x%X, ", IC[ic].PwmA.pwma[2]);
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007922:	fb02 f303 	mul.w	r3, r2, r3
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4413      	add	r3, r2
 800792a:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800792e:	4619      	mov	r1, r3
 8007930:	4877      	ldr	r0, [pc, #476]	@ (8007b10 <printReadPwmDutyCycle+0x260>)
 8007932:	f00c fce9 	bl	8014308 <iprintf>
      printf("PWM4:0x%X, ", IC[ic].PwmA.pwma[3]);
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800793c:	fb02 f303 	mul.w	r3, r2, r3
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	4413      	add	r3, r2
 8007944:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8007948:	4619      	mov	r1, r3
 800794a:	4872      	ldr	r0, [pc, #456]	@ (8007b14 <printReadPwmDutyCycle+0x264>)
 800794c:	f00c fcdc 	bl	8014308 <iprintf>
      printf("PWM5:0x%X, ", IC[ic].PwmA.pwma[4]);
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007956:	fb02 f303 	mul.w	r3, r2, r3
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4413      	add	r3, r2
 800795e:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8007962:	4619      	mov	r1, r3
 8007964:	486c      	ldr	r0, [pc, #432]	@ (8007b18 <printReadPwmDutyCycle+0x268>)
 8007966:	f00c fccf 	bl	8014308 <iprintf>
      printf("PWM6:0x%X, ", IC[ic].PwmA.pwma[5]);
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	4413      	add	r3, r2
 8007978:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800797c:	4619      	mov	r1, r3
 800797e:	4867      	ldr	r0, [pc, #412]	@ (8007b1c <printReadPwmDutyCycle+0x26c>)
 8007980:	f00c fcc2 	bl	8014308 <iprintf>
      printf("PWM7:0x%X, ", IC[ic].PwmA.pwma[6]);
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4413      	add	r3, r2
 8007992:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8007996:	4619      	mov	r1, r3
 8007998:	4861      	ldr	r0, [pc, #388]	@ (8007b20 <printReadPwmDutyCycle+0x270>)
 800799a:	f00c fcb5 	bl	8014308 <iprintf>
      printf("PWM8:0x%X, ", IC[ic].PwmA.pwma[7]);
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079a4:	fb02 f303 	mul.w	r3, r2, r3
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	4413      	add	r3, r2
 80079ac:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80079b0:	4619      	mov	r1, r3
 80079b2:	485c      	ldr	r0, [pc, #368]	@ (8007b24 <printReadPwmDutyCycle+0x274>)
 80079b4:	f00c fca8 	bl	8014308 <iprintf>
      printf("PWM9:0x%X, ", IC[ic].PwmA.pwma[8]);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80079ca:	4619      	mov	r1, r3
 80079cc:	4856      	ldr	r0, [pc, #344]	@ (8007b28 <printReadPwmDutyCycle+0x278>)
 80079ce:	f00c fc9b 	bl	8014308 <iprintf>
      printf("PWM10:0x%X, ", IC[ic].PwmA.pwma[9]);
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 80079e4:	4619      	mov	r1, r3
 80079e6:	4851      	ldr	r0, [pc, #324]	@ (8007b2c <printReadPwmDutyCycle+0x27c>)
 80079e8:	f00c fc8e 	bl	8014308 <iprintf>
      printf("PWM11:0x%X, ", IC[ic].PwmA.pwma[10]);
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4413      	add	r3, r2
 80079fa:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 80079fe:	4619      	mov	r1, r3
 8007a00:	484b      	ldr	r0, [pc, #300]	@ (8007b30 <printReadPwmDutyCycle+0x280>)
 8007a02:	f00c fc81 	bl	8014308 <iprintf>
      printf("PWM12:0x%X, ", IC[ic].PwmA.pwma[11]);
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a0c:	fb02 f303 	mul.w	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	4413      	add	r3, r2
 8007a14:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4846      	ldr	r0, [pc, #280]	@ (8007b34 <printReadPwmDutyCycle+0x284>)
 8007a1c:	f00c fc74 	bl	8014308 <iprintf>
      printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007a32:	4619      	mov	r1, r3
 8007a34:	4840      	ldr	r0, [pc, #256]	@ (8007b38 <printReadPwmDutyCycle+0x288>)
 8007a36:	f00c fc67 	bl	8014308 <iprintf>
      printf("PECError:%d\n\n",IC[ic].cccrc.pwm_pec);
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	4413      	add	r3, r2
 8007a48:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	483b      	ldr	r0, [pc, #236]	@ (8007b3c <printReadPwmDutyCycle+0x28c>)
 8007a50:	f00c fc5a 	bl	8014308 <iprintf>
 8007a54:	e176      	b.n	8007d44 <printReadPwmDutyCycle+0x494>
    }
    else if(grp == B)
 8007a56:	797b      	ldrb	r3, [r7, #5]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d17b      	bne.n	8007b54 <printReadPwmDutyCycle+0x2a4>
    {
      printf("Read PWMB Duty Cycle:\n");
 8007a5c:	4838      	ldr	r0, [pc, #224]	@ (8007b40 <printReadPwmDutyCycle+0x290>)
 8007a5e:	f00c fcc3 	bl	80143e8 <puts>
      printf("PWM13:0x%X, ", IC[ic].PwmB.pwmb[0]);
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8007a74:	4619      	mov	r1, r3
 8007a76:	4833      	ldr	r0, [pc, #204]	@ (8007b44 <printReadPwmDutyCycle+0x294>)
 8007a78:	f00c fc46 	bl	8014308 <iprintf>
      printf("PWM14:0x%X, ", IC[ic].PwmB.pwmb[1]);
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 8007a8e:	4619      	mov	r1, r3
 8007a90:	482d      	ldr	r0, [pc, #180]	@ (8007b48 <printReadPwmDutyCycle+0x298>)
 8007a92:	f00c fc39 	bl	8014308 <iprintf>
      printf("PWM15:0x%X, ", IC[ic].PwmB.pwmb[2]);
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a9c:	fb02 f303 	mul.w	r3, r2, r3
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4828      	ldr	r0, [pc, #160]	@ (8007b4c <printReadPwmDutyCycle+0x29c>)
 8007aac:	f00c fc2c 	bl	8014308 <iprintf>
      printf("PWM16:0x%X, ", IC[ic].PwmB.pwmb[3]);
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4822      	ldr	r0, [pc, #136]	@ (8007b50 <printReadPwmDutyCycle+0x2a0>)
 8007ac6:	f00c fc1f 	bl	8014308 <iprintf>
      printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007ad0:	fb02 f303 	mul.w	r3, r2, r3
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007adc:	4619      	mov	r1, r3
 8007ade:	4816      	ldr	r0, [pc, #88]	@ (8007b38 <printReadPwmDutyCycle+0x288>)
 8007ae0:	f00c fc12 	bl	8014308 <iprintf>
      printf("PECError:%d\n\n",IC[ic].cccrc.pwm_pec);
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4413      	add	r3, r2
 8007af2:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 8007af6:	4619      	mov	r1, r3
 8007af8:	4810      	ldr	r0, [pc, #64]	@ (8007b3c <printReadPwmDutyCycle+0x28c>)
 8007afa:	f00c fc05 	bl	8014308 <iprintf>
 8007afe:	e121      	b.n	8007d44 <printReadPwmDutyCycle+0x494>
 8007b00:	080170e4 	.word	0x080170e4
 8007b04:	08017790 	.word	0x08017790
 8007b08:	080177a8 	.word	0x080177a8
 8007b0c:	080177b4 	.word	0x080177b4
 8007b10:	080177c0 	.word	0x080177c0
 8007b14:	080177cc 	.word	0x080177cc
 8007b18:	080177d8 	.word	0x080177d8
 8007b1c:	080177e4 	.word	0x080177e4
 8007b20:	080177f0 	.word	0x080177f0
 8007b24:	080177fc 	.word	0x080177fc
 8007b28:	08017808 	.word	0x08017808
 8007b2c:	08017814 	.word	0x08017814
 8007b30:	08017824 	.word	0x08017824
 8007b34:	08017834 	.word	0x08017834
 8007b38:	08017274 	.word	0x08017274
 8007b3c:	08017280 	.word	0x08017280
 8007b40:	08017844 	.word	0x08017844
 8007b44:	0801785c 	.word	0x0801785c
 8007b48:	0801786c 	.word	0x0801786c
 8007b4c:	0801787c 	.word	0x0801787c
 8007b50:	0801788c 	.word	0x0801788c
    }
    else if(grp == ALL_GRP)
 8007b54:	797b      	ldrb	r3, [r7, #5]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f040 80f1 	bne.w	8007d3e <printReadPwmDutyCycle+0x48e>
    {
      printf("Read PWMA Duty Cycle:\n");
 8007b5c:	4880      	ldr	r0, [pc, #512]	@ (8007d60 <printReadPwmDutyCycle+0x4b0>)
 8007b5e:	f00c fc43 	bl	80143e8 <puts>
      printf("PWM1:0x%X, ", IC[ic].PwmA.pwma[0]);
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8007b74:	4619      	mov	r1, r3
 8007b76:	487b      	ldr	r0, [pc, #492]	@ (8007d64 <printReadPwmDutyCycle+0x4b4>)
 8007b78:	f00c fbc6 	bl	8014308 <iprintf>
      printf("PWM2:0x%X, ", IC[ic].PwmA.pwma[1]);
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007b82:	fb02 f303 	mul.w	r3, r2, r3
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4875      	ldr	r0, [pc, #468]	@ (8007d68 <printReadPwmDutyCycle+0x4b8>)
 8007b92:	f00c fbb9 	bl	8014308 <iprintf>
      printf("PWM3:0x%X, ", IC[ic].PwmA.pwma[2]);
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007b9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4870      	ldr	r0, [pc, #448]	@ (8007d6c <printReadPwmDutyCycle+0x4bc>)
 8007bac:	f00c fbac 	bl	8014308 <iprintf>
      printf("PWM4:0x%X, ", IC[ic].PwmA.pwma[3]);
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007bb6:	fb02 f303 	mul.w	r3, r2, r3
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	486a      	ldr	r0, [pc, #424]	@ (8007d70 <printReadPwmDutyCycle+0x4c0>)
 8007bc6:	f00c fb9f 	bl	8014308 <iprintf>
      printf("PWM5:0x%X, ", IC[ic].PwmA.pwma[4]);
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4865      	ldr	r0, [pc, #404]	@ (8007d74 <printReadPwmDutyCycle+0x4c4>)
 8007be0:	f00c fb92 	bl	8014308 <iprintf>
      printf("PWM6:0x%X, ", IC[ic].PwmA.pwma[5]);
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	485f      	ldr	r0, [pc, #380]	@ (8007d78 <printReadPwmDutyCycle+0x4c8>)
 8007bfa:	f00c fb85 	bl	8014308 <iprintf>
      printf("PWM7:0x%X, ", IC[ic].PwmA.pwma[6]);
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c04:	fb02 f303 	mul.w	r3, r2, r3
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8007c10:	4619      	mov	r1, r3
 8007c12:	485a      	ldr	r0, [pc, #360]	@ (8007d7c <printReadPwmDutyCycle+0x4cc>)
 8007c14:	f00c fb78 	bl	8014308 <iprintf>
      printf("PWM8:0x%X, ", IC[ic].PwmA.pwma[7]);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	4413      	add	r3, r2
 8007c26:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4854      	ldr	r0, [pc, #336]	@ (8007d80 <printReadPwmDutyCycle+0x4d0>)
 8007c2e:	f00c fb6b 	bl	8014308 <iprintf>
      printf("PWM9:0x%X, ", IC[ic].PwmA.pwma[8]);
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8007c44:	4619      	mov	r1, r3
 8007c46:	484f      	ldr	r0, [pc, #316]	@ (8007d84 <printReadPwmDutyCycle+0x4d4>)
 8007c48:	f00c fb5e 	bl	8014308 <iprintf>
      printf("PWM10:0x%X, ", IC[ic].PwmA.pwma[9]);
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4849      	ldr	r0, [pc, #292]	@ (8007d88 <printReadPwmDutyCycle+0x4d8>)
 8007c62:	f00c fb51 	bl	8014308 <iprintf>
      printf("PWM11:0x%X, ", IC[ic].PwmA.pwma[10]);
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	4413      	add	r3, r2
 8007c74:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4844      	ldr	r0, [pc, #272]	@ (8007d8c <printReadPwmDutyCycle+0x4dc>)
 8007c7c:	f00c fb44 	bl	8014308 <iprintf>
      printf("PWM12:0x%X\n", IC[ic].PwmA.pwma[11]);
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8007c92:	4619      	mov	r1, r3
 8007c94:	483e      	ldr	r0, [pc, #248]	@ (8007d90 <printReadPwmDutyCycle+0x4e0>)
 8007c96:	f00c fb37 	bl	8014308 <iprintf>

      printf("Read PWMB Duty Cycle:\n");
 8007c9a:	483e      	ldr	r0, [pc, #248]	@ (8007d94 <printReadPwmDutyCycle+0x4e4>)
 8007c9c:	f00c fba4 	bl	80143e8 <puts>
      printf("PWM13:0x%X, ", IC[ic].PwmB.pwmb[0]);
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4413      	add	r3, r2
 8007cae:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4838      	ldr	r0, [pc, #224]	@ (8007d98 <printReadPwmDutyCycle+0x4e8>)
 8007cb6:	f00c fb27 	bl	8014308 <iprintf>
      printf("PWM14:0x%X, ", IC[ic].PwmB.pwmb[1]);
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4833      	ldr	r0, [pc, #204]	@ (8007d9c <printReadPwmDutyCycle+0x4ec>)
 8007cd0:	f00c fb1a 	bl	8014308 <iprintf>
      printf("PWM15:0x%X, ", IC[ic].PwmB.pwmb[2]);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	482d      	ldr	r0, [pc, #180]	@ (8007da0 <printReadPwmDutyCycle+0x4f0>)
 8007cea:	f00c fb0d 	bl	8014308 <iprintf>
      printf("PWM16:0x%X, ", IC[ic].PwmB.pwmb[3]);
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007cf4:	fb02 f303 	mul.w	r3, r2, r3
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8007d00:	4619      	mov	r1, r3
 8007d02:	4828      	ldr	r0, [pc, #160]	@ (8007da4 <printReadPwmDutyCycle+0x4f4>)
 8007d04:	f00c fb00 	bl	8014308 <iprintf>
      printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4413      	add	r3, r2
 8007d16:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4822      	ldr	r0, [pc, #136]	@ (8007da8 <printReadPwmDutyCycle+0x4f8>)
 8007d1e:	f00c faf3 	bl	8014308 <iprintf>
      printf("PECError:%d\n\n",IC[ic].cccrc.pwm_pec);
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007d28:	fb02 f303 	mul.w	r3, r2, r3
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 8007d34:	4619      	mov	r1, r3
 8007d36:	481d      	ldr	r0, [pc, #116]	@ (8007dac <printReadPwmDutyCycle+0x4fc>)
 8007d38:	f00c fae6 	bl	8014308 <iprintf>
 8007d3c:	e002      	b.n	8007d44 <printReadPwmDutyCycle+0x494>
    }
    else{ printf("Wrong Register Type Select\n"); }
 8007d3e:	481c      	ldr	r0, [pc, #112]	@ (8007db0 <printReadPwmDutyCycle+0x500>)
 8007d40:	f00c fb52 	bl	80143e8 <puts>
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	3301      	adds	r3, #1
 8007d48:	73fb      	strb	r3, [r7, #15]
 8007d4a:	7bfa      	ldrb	r2, [r7, #15]
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f4ff adbd 	bcc.w	80078ce <printReadPwmDutyCycle+0x1e>
  }
	}
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	08017790 	.word	0x08017790
 8007d64:	080177a8 	.word	0x080177a8
 8007d68:	080177b4 	.word	0x080177b4
 8007d6c:	080177c0 	.word	0x080177c0
 8007d70:	080177cc 	.word	0x080177cc
 8007d74:	080177d8 	.word	0x080177d8
 8007d78:	080177e4 	.word	0x080177e4
 8007d7c:	080177f0 	.word	0x080177f0
 8007d80:	080177fc 	.word	0x080177fc
 8007d84:	08017808 	.word	0x08017808
 8007d88:	08017814 	.word	0x08017814
 8007d8c:	08017824 	.word	0x08017824
 8007d90:	0801789c 	.word	0x0801789c
 8007d94:	08017844 	.word	0x08017844
 8007d98:	0801785c 	.word	0x0801785c
 8007d9c:	0801786c 	.word	0x0801786c
 8007da0:	0801787c 	.word	0x0801787c
 8007da4:	0801788c 	.word	0x0801788c
 8007da8:	08017274 	.word	0x08017274
 8007dac:	08017280 	.word	0x08017280
 8007db0:	0801773c 	.word	0x0801773c
 8007db4:	00000000 	.word	0x00000000

08007db8 <getVoltage>:
 * @return voltage(float)
 *
 *******************************************************************************
*/
float getVoltage(int data)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
//	printf("%d", data);
    float voltage_float; //voltage in Volts
    voltage_float = ((data + 10000) * 0.000150);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8007dc6:	3310      	adds	r3, #16
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7f8 fbb3 	bl	8000534 <__aeabi_i2d>
 8007dce:	a30a      	add	r3, pc, #40	@ (adr r3, 8007df8 <getVoltage+0x40>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fc18 	bl	8000608 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	f7f8 ff0a 	bl	8000bf8 <__aeabi_d2f>
 8007de4:	4603      	mov	r3, r0
 8007de6:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	ee07 3a90 	vmov	s15, r3
}
 8007dee:	eeb0 0a67 	vmov.f32	s0, s15
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	30553261 	.word	0x30553261
 8007dfc:	3f23a92a 	.word	0x3f23a92a

08007e00 <populate_CAN1>:
#include "adbms_can_helper.h"
#include "custom_functions.h"
#include "serialPrintResult.h"

void populate_CAN1(CAN1_DATAFRAME *frame, cell_asic *ICs, int totalIC) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
    // --- PACK CURRENT ---
    frame->data.pack_current = (int16_t)(current * 10.0f); // current is extern, *0.1 A for CAN
 8007e0c:	4b51      	ldr	r3, [pc, #324]	@ (8007f54 <populate_CAN1+0x154>)
 8007e0e:	edd3 7a00 	vldr	s15, [r3]
 8007e12:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e1e:	ee17 3a90 	vmov	r3, s15
 8007e22:	b21a      	sxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	801a      	strh	r2, [r3, #0]

    // --- PACK VOLTAGE ---
    float pack_voltage_sum = 0.0f;
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]
    //     for (int j = 0; j < NUM_CELLS_PER_IC; j++) {
    //         float cell_voltage = getVoltage(ICs[i].cell.c_codes[j]);
    //         pack_voltage_sum += cell_voltage;
    //     }
    // }
    pack_voltage_sum = getPackVoltage(totalIC, ICs);
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fa21 	bl	8009278 <getPackVoltage>
 8007e36:	ed87 0a05 	vstr	s0, [r7, #20]
    frame->data.pack_voltage = (uint16_t)(pack_voltage_sum * 10.0f); // *0.1 V for CAN
 8007e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e3e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4a:	ee17 3a90 	vmov	r3, s15
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	805a      	strh	r2, [r3, #2]

    // --- STATE OF CHARGE (SOC) ---
    // soc = (pack_voltage_sum - 280.0f) / (420.0f - 280.0f); // scale 280V–420V

    frame->data.pack_soc = (uint8_t)(soc); // *0.5% for 0–100% (0–200 steps)
 8007e54:	4b40      	ldr	r3, [pc, #256]	@ (8007f58 <populate_CAN1+0x158>)
 8007e56:	edd3 7a00 	vldr	s15, [r3]
 8007e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5e:	edc7 7a00 	vstr	s15, [r7]
 8007e62:	783b      	ldrb	r3, [r7, #0]
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	711a      	strb	r2, [r3, #4]

    // --- RELAY + SYSTEM STATUS FLAGS ---
    frame->data.discharge_relay = 1; // TODO: replace with actual GPIO read if needed
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	7993      	ldrb	r3, [r2, #6]
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	7193      	strb	r3, [r2, #6]
    frame->data.charge_relay    = 1;
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	7993      	ldrb	r3, [r2, #6]
 8007e78:	f043 0302 	orr.w	r3, r3, #2
 8007e7c:	7193      	strb	r3, [r2, #6]
    frame->data.charger_safety  = 0; // Optional safety flag
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	7993      	ldrb	r3, [r2, #6]
 8007e82:	f023 0304 	bic.w	r3, r3, #4
 8007e86:	7193      	strb	r3, [r2, #6]

    // --- Fault Indicator (MIL light) ---
    frame->data.mil_state = (cell_fault || temp_fault) ? 1 : 0;
 8007e88:	4b34      	ldr	r3, [pc, #208]	@ (8007f5c <populate_CAN1+0x15c>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <populate_CAN1+0x98>
 8007e90:	4b33      	ldr	r3, [pc, #204]	@ (8007f60 <populate_CAN1+0x160>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <populate_CAN1+0x9c>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <populate_CAN1+0x9e>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	b2d9      	uxtb	r1, r3
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	7993      	ldrb	r3, [r2, #6]
 8007ea8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007eac:	7193      	strb	r3, [r2, #6]

    // --- Charging Status ---
    frame->data.charging_on = (accy_status == CHARGE_POWER) ? 1 : 0;
 8007eae:	4b2d      	ldr	r3, [pc, #180]	@ (8007f64 <populate_CAN1+0x164>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8007f68 <populate_CAN1+0x168>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2d9      	uxtb	r1, r3
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	7993      	ldrb	r3, [r2, #6]
 8007ec6:	f361 13c7 	bfi	r3, r1, #7, #1
 8007eca:	7193      	strb	r3, [r2, #6]
    frame->data.is_ready    = (accy_status == READY_POWER) ? 1 : 0;
 8007ecc:	4b27      	ldr	r3, [pc, #156]	@ (8007f6c <populate_CAN1+0x16c>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4b25      	ldr	r3, [pc, #148]	@ (8007f68 <populate_CAN1+0x168>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	bf0c      	ite	eq
 8007eda:	2301      	moveq	r3, #1
 8007edc:	2300      	movne	r3, #0
 8007ede:	b2d9      	uxtb	r1, r3
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	7993      	ldrb	r3, [r2, #6]
 8007ee4:	f361 1386 	bfi	r3, r1, #6, #1
 8007ee8:	7193      	strb	r3, [r2, #6]
    frame->data.always_on   = 1;
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	7993      	ldrb	r3, [r2, #6]
 8007eee:	f043 0320 	orr.w	r3, r3, #32
 8007ef2:	7193      	strb	r3, [r2, #6]

    // --- MPx/MPEnable Flags (dummy/stub logic) ---
    frame->data.mp_enable   = 1;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	7953      	ldrb	r3, [r2, #5]
 8007ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007efc:	7153      	strb	r3, [r2, #5]
    frame->data.mpo1_state  = 0;
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	7953      	ldrb	r3, [r2, #5]
 8007f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f06:	7153      	strb	r3, [r2, #5]
    frame->data.mpo2_state  = 1;
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	7953      	ldrb	r3, [r2, #5]
 8007f0c:	f043 0308 	orr.w	r3, r3, #8
 8007f10:	7153      	strb	r3, [r2, #5]
    frame->data.mpo3_state  = 0;
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	7953      	ldrb	r3, [r2, #5]
 8007f16:	f023 0310 	bic.w	r3, r3, #16
 8007f1a:	7153      	strb	r3, [r2, #5]
    frame->data.mpo4_state  = 1;
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	7953      	ldrb	r3, [r2, #5]
 8007f20:	f043 0320 	orr.w	r3, r3, #32
 8007f24:	7153      	strb	r3, [r2, #5]
    frame->data.mpi1_state  = 0;
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	7993      	ldrb	r3, [r2, #6]
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	7193      	strb	r3, [r2, #6]
    frame->data.mpi2_state  = 1;
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	7953      	ldrb	r3, [r2, #5]
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	7153      	strb	r3, [r2, #5]
    frame->data.mpi3_state  = 0;
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	7953      	ldrb	r3, [r2, #5]
 8007f3e:	f023 0302 	bic.w	r3, r3, #2
 8007f42:	7153      	strb	r3, [r2, #5]

    // --- Checksum (optional, unused for now) ---
    frame->data.checksum = 0;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	71da      	strb	r2, [r3, #7]
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20001c74 	.word	0x20001c74
 8007f58:	20001c78 	.word	0x20001c78
 8007f5c:	20001c6a 	.word	0x20001c6a
 8007f60:	20001c6b 	.word	0x20001c6b
 8007f64:	08018101 	.word	0x08018101
 8007f68:	20001c70 	.word	0x20001c70
 8007f6c:	08018100 	.word	0x08018100

08007f70 <populate_CAN2>:


void populate_CAN2(CAN2_DATAFRAME *frame, cell_asic *ICs, int totalIC) {
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
    // --- Current Limits ---
    frame->data.pack_dcl = dcl;
 8007f7c:	4b37      	ldr	r3, [pc, #220]	@ (800805c <populate_CAN2+0xec>)
 8007f7e:	edd3 7a00 	vldr	s15, [r3]
 8007f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f86:	ee17 3a90 	vmov	r3, s15
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	801a      	strh	r2, [r3, #0]
    frame->data.pack_ccl = ccl;
 8007f90:	4b33      	ldr	r3, [pc, #204]	@ (8008060 <populate_CAN2+0xf0>)
 8007f92:	edd3 7a00 	vldr	s15, [r3]
 8007f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f9a:	edc7 7a00 	vstr	s15, [r7]
 8007f9e:	783b      	ldrb	r3, [r7, #0]
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	709a      	strb	r2, [r3, #2]
    // }

    // Clamp to int8 range
    // if (max_temp > 127) max_temp = 127;
    // if (min_temp < -128) min_temp = -128;
    if (highest_temp > 127) lowest_temp = 127;
 8007fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8008064 <populate_CAN2+0xf4>)
 8007fa8:	edd3 7a00 	vldr	s15, [r3]
 8007fac:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8008068 <populate_CAN2+0xf8>
 8007fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb8:	dd02      	ble.n	8007fc0 <populate_CAN2+0x50>
 8007fba:	4b2c      	ldr	r3, [pc, #176]	@ (800806c <populate_CAN2+0xfc>)
 8007fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8008070 <populate_CAN2+0x100>)
 8007fbe:	601a      	str	r2, [r3, #0]
    if (highest_temp < -128) highest_temp = -128;
 8007fc0:	4b28      	ldr	r3, [pc, #160]	@ (8008064 <populate_CAN2+0xf4>)
 8007fc2:	edd3 7a00 	vldr	s15, [r3]
 8007fc6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008074 <populate_CAN2+0x104>
 8007fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd2:	d503      	bpl.n	8007fdc <populate_CAN2+0x6c>
 8007fd4:	4b23      	ldr	r3, [pc, #140]	@ (8008064 <populate_CAN2+0xf4>)
 8007fd6:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8007fda:	601a      	str	r2, [r3, #0]
    if (lowest_temp > 127) lowest_temp = 127;
 8007fdc:	4b23      	ldr	r3, [pc, #140]	@ (800806c <populate_CAN2+0xfc>)
 8007fde:	edd3 7a00 	vldr	s15, [r3]
 8007fe2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008068 <populate_CAN2+0xf8>
 8007fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fee:	dd02      	ble.n	8007ff6 <populate_CAN2+0x86>
 8007ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800806c <populate_CAN2+0xfc>)
 8007ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8008070 <populate_CAN2+0x100>)
 8007ff4:	601a      	str	r2, [r3, #0]
    if (lowest_temp < -128) lowest_temp = -128;
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <populate_CAN2+0xfc>)
 8007ff8:	edd3 7a00 	vldr	s15, [r3]
 8007ffc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008074 <populate_CAN2+0x104>
 8008000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008008:	d503      	bpl.n	8008012 <populate_CAN2+0xa2>
 800800a:	4b18      	ldr	r3, [pc, #96]	@ (800806c <populate_CAN2+0xfc>)
 800800c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8008010:	601a      	str	r2, [r3, #0]

    frame->data.pack_high_temp = (int8_t)highest_temp;
 8008012:	4b14      	ldr	r3, [pc, #80]	@ (8008064 <populate_CAN2+0xf4>)
 8008014:	edd3 7a00 	vldr	s15, [r3]
 8008018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800801c:	edc7 7a00 	vstr	s15, [r7]
 8008020:	783b      	ldrb	r3, [r7, #0]
 8008022:	b25a      	sxtb	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	711a      	strb	r2, [r3, #4]
    frame->data.pack_low_temp = (int8_t)lowest_temp;
 8008028:	4b10      	ldr	r3, [pc, #64]	@ (800806c <populate_CAN2+0xfc>)
 800802a:	edd3 7a00 	vldr	s15, [r3]
 800802e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008032:	edc7 7a00 	vstr	s15, [r7]
 8008036:	783b      	ldrb	r3, [r7, #0]
 8008038:	b25a      	sxtb	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	715a      	strb	r2, [r3, #5]

    // --- Padding / Checksum ---
    frame->data.reserved0 = 0;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	70da      	strb	r2, [r3, #3]
    frame->data.reserved1 = 0;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	719a      	strb	r2, [r3, #6]
    frame->data.checksum = 0; // optional
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	71da      	strb	r2, [r3, #7]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	20001c94 	.word	0x20001c94
 8008060:	20001c90 	.word	0x20001c90
 8008064:	20001c9c 	.word	0x20001c9c
 8008068:	42fe0000 	.word	0x42fe0000
 800806c:	20001c98 	.word	0x20001c98
 8008070:	42fe0000 	.word	0x42fe0000
 8008074:	c3000000 	.word	0xc3000000

08008078 <populate_CAN3>:

void populate_CAN3(CAN3_DATAFRAME *frame, cell_asic *ICs, int totalIC) {
 8008078:	b480      	push	{r7}
 800807a:	b089      	sub	sp, #36	@ 0x24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
    float min_voltage = 1e6f;  // large initial value for comparison
 8008084:	4b20      	ldr	r3, [pc, #128]	@ (8008108 <populate_CAN3+0x90>)
 8008086:	61fb      	str	r3, [r7, #28]
    float max_voltage = -1e6f; // small initial value for comparison
 8008088:	4b20      	ldr	r3, [pc, #128]	@ (800810c <populate_CAN3+0x94>)
 800808a:	61bb      	str	r3, [r7, #24]
    //         if (voltage < min_voltage) min_voltage = voltage;
    //         if (voltage > max_voltage) max_voltage = voltage;
    //     }
    // }

    min_voltage = lowest_cell;
 800808c:	4b20      	ldr	r3, [pc, #128]	@ (8008110 <populate_CAN3+0x98>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	61fb      	str	r3, [r7, #28]
    max_voltage = highest_cell;
 8008092:	4b20      	ldr	r3, [pc, #128]	@ (8008114 <populate_CAN3+0x9c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	61bb      	str	r3, [r7, #24]

    // Fallback if no valid cells were processed
    if (cell_count == 0) {
 8008098:	4b1f      	ldr	r3, [pc, #124]	@ (8008118 <populate_CAN3+0xa0>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <populate_CAN3+0x34>
        min_voltage = 0.0f;
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
        max_voltage = 0.0f;
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	61bb      	str	r3, [r7, #24]
    }

    // Convert to 0.0001 V units for CAN message
    uint16_t min_mv = (uint16_t)(min_voltage * 10000.0f);
 80080ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80080b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800811c <populate_CAN3+0xa4>
 80080b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080bc:	ee17 3a90 	vmov	r3, s15
 80080c0:	82fb      	strh	r3, [r7, #22]
    uint16_t max_mv = (uint16_t)(max_voltage * 10000.0f);
 80080c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80080c6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800811c <populate_CAN3+0xa4>
 80080ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d2:	ee17 3a90 	vmov	r3, s15
 80080d6:	82bb      	strh	r3, [r7, #20]

    frame->data.low_cell_voltage  = min_mv;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8afa      	ldrh	r2, [r7, #22]
 80080dc:	801a      	strh	r2, [r3, #0]
    frame->data.high_cell_voltage = max_mv;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8aba      	ldrh	r2, [r7, #20]
 80080e2:	805a      	strh	r2, [r3, #2]

    frame->data.reserved0 = 0;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	711a      	strb	r2, [r3, #4]
    frame->data.reserved1 = 0;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	715a      	strb	r2, [r3, #5]
    frame->data.reserved2 = 0;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	719a      	strb	r2, [r3, #6]
    frame->data.checksum  = 0;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	71da      	strb	r2, [r3, #7]
}
 80080fc:	bf00      	nop
 80080fe:	3724      	adds	r7, #36	@ 0x24
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	49742400 	.word	0x49742400
 800810c:	c9742400 	.word	0xc9742400
 8008110:	20001c7c 	.word	0x20001c7c
 8008114:	20001c80 	.word	0x20001c80
 8008118:	20000044 	.word	0x20000044
 800811c:	461c4000 	.word	0x461c4000

08008120 <populate_charge_CAN>:

void populate_charge_CAN(FDCAN_CHARGER_CONTEXT *CHARGER_CONTEXT, cell_asic *ICs, int totalIC) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
	//set pack current data
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.pack_voltage = (int16_t)(getPackVoltage(totalIC, ICs) * 10.0f); // current is extern, *0.1 A for CAN
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f8a2 	bl	8009278 <getPackVoltage>
 8008134:	eef0 7a40 	vmov.f32	s15, s0
 8008138:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800813c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008144:	ee17 3a90 	vmov	r3, s15
 8008148:	b21b      	sxth	r3, r3
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.pack_ccl = (int16_t)(calcCCL() * 10.0f); // current is extern, *0.1 A for CAN
 8008152:	f001 fe35 	bl	8009dc0 <calcCCL>
 8008156:	eef0 7a40 	vmov.f32	s15, s0
 800815a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800815e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008166:	ee17 3a90 	vmov	r3, s15
 800816a:	b21a      	sxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	//todo: dont forget charge_enable
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.charge_enable = !is_charging;
 8008172:	4b4e      	ldr	r3, [pc, #312]	@ (80082ac <populate_charge_CAN+0x18c>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf0c      	ite	eq
 800817a:	2301      	moveq	r3, #1
 800817c:	2300      	movne	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	461a      	mov	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
//	CHARGER_CONTEXT->chgmsg_1806e7f4.data.charge_enable = !HAL_GPIO_ReadPin(SDC_IN_GPIO_Port,SDC_IN_Pin);
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.reserved0 = 0;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.reserved1= 0;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.reserved2 = 0;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97


	CHARGER_CONTEXT->chgmsg_1806e5f4.data.high_cell_voltage = (int16_t)(highest_cell * 10.0f); // current is extern, *0.1 A for CAN
 80081a0:	4b43      	ldr	r3, [pc, #268]	@ (80082b0 <populate_charge_CAN+0x190>)
 80081a2:	edd3 7a00 	vldr	s15, [r3]
 80081a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80081aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081b2:	ee17 3a90 	vmov	r3, s15
 80081b6:	b21b      	sxth	r3, r3
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.pack_ccl = (int16_t)(calcCCL() * 10.0f); // current is extern, *0.1 A for CAN
 80081c0:	f001 fdfe 	bl	8009dc0 <calcCCL>
 80081c4:	eef0 7a40 	vmov.f32	s15, s0
 80081c8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80081cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081d4:	ee17 3a90 	vmov	r3, s15
 80081d8:	b21b      	sxth	r3, r3
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved0 = 0;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved1 = 0;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved2 = 0;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved3 = 0;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 209f 	strb.w	r2, [r3, #159]	@ 0x9f


	CHARGER_CONTEXT->chgmsg_1806e9f4.data.high_cell_voltage = (int16_t)(highest_cell * 10.0f); // current is extern, *0.1 A for CAN
 8008202:	4b2b      	ldr	r3, [pc, #172]	@ (80082b0 <populate_charge_CAN+0x190>)
 8008204:	edd3 7a00 	vldr	s15, [r3]
 8008208:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800820c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008214:	ee17 3a90 	vmov	r3, s15
 8008218:	b21b      	sxth	r3, r3
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.pack_ccl = (int16_t)(calcCCL() * 10.0f); // current is extern, *0.1 A for CAN
 8008222:	f001 fdcd 	bl	8009dc0 <calcCCL>
 8008226:	eef0 7a40 	vmov.f32	s15, s0
 800822a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800822e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008236:	ee17 3a90 	vmov	r3, s15
 800823a:	b21b      	sxth	r3, r3
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved0 = 0;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved1 = 0;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved2 = 0;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved3 = 0;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7



	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved0 = 0;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved1 = 0;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved2 = 0;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved3 = 0;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved4 = 0;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved5 = 0;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved6 = 0;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved7 = 0;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20001c8c 	.word	0x20001c8c
 80082b0:	20001c80 	.word	0x20001c80

080082b4 <CANTransmitMinion>:
#include "can.h"
#include "custom_functions.h"

HAL_StatusTypeDef CANTransmitMinion(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
	int attempts = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	613b      	str	r3, [r7, #16]

	while (attempts < FDCAN_RETRY_LIMIT && status != HAL_OK) {
 80082c8:	e009      	b.n	80082de <CANTransmitMinion+0x2a>
		status = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, header, dataArray);
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f005 f909 	bl	800d4e6 <HAL_FDCAN_AddMessageToTxFifoQ>
 80082d4:	4603      	mov	r3, r0
 80082d6:	75fb      	strb	r3, [r7, #23]
		attempts++;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	3301      	adds	r3, #1
 80082dc:	613b      	str	r3, [r7, #16]
	while (attempts < FDCAN_RETRY_LIMIT && status != HAL_OK) {
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	dc02      	bgt.n	80082ea <CANTransmitMinion+0x36>
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1ef      	bne.n	80082ca <CANTransmitMinion+0x16>
	}

	return status;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <init_FDCAN_header>:

void init_FDCAN_header(FDCAN_TxHeaderTypeDef *hdr, uint32_t id) {
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	hdr->Identifier = id;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	601a      	str	r2, [r3, #0]
	hdr->IdType = FDCAN_STANDARD_ID;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	605a      	str	r2, [r3, #4]
	hdr->TxFrameType = FDCAN_DATA_FRAME;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	609a      	str	r2, [r3, #8]
	hdr->DataLength = FDCAN_DLC_BYTES_8;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2208      	movs	r2, #8
 8008314:	60da      	str	r2, [r3, #12]
	hdr->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	611a      	str	r2, [r3, #16]
	hdr->BitRateSwitch = FDCAN_BRS_OFF;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	615a      	str	r2, [r3, #20]
	hdr->FDFormat = FDCAN_CLASSIC_CAN;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
	hdr->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	61da      	str	r2, [r3, #28]
	hdr->MessageMarker = 0;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	621a      	str	r2, [r3, #32]
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <init_FDCAN_header_EXTENDED>:

void init_FDCAN_header_EXTENDED(FDCAN_TxHeaderTypeDef *hdr, uint32_t id) {
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
	hdr->Identifier = id;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	601a      	str	r2, [r3, #0]
	hdr->IdType = FDCAN_EXTENDED_ID;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008356:	605a      	str	r2, [r3, #4]
	hdr->TxFrameType = FDCAN_DATA_FRAME;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	609a      	str	r2, [r3, #8]
	hdr->DataLength = FDCAN_DLC_BYTES_8;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2208      	movs	r2, #8
 8008362:	60da      	str	r2, [r3, #12]
	hdr->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	611a      	str	r2, [r3, #16]
	hdr->BitRateSwitch = FDCAN_BRS_OFF;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	615a      	str	r2, [r3, #20]
	hdr->FDFormat = FDCAN_CLASSIC_CAN;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	619a      	str	r2, [r3, #24]
	hdr->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	61da      	str	r2, [r3, #28]
	hdr->MessageMarker = 0;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	621a      	str	r2, [r3, #32]
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <FDCAN_BMS_Mailman>:

/**
 * is charging is 1 if ur tryna charge ts accy, 0 otherwise
 *
 */
void FDCAN_BMS_Mailman(FDCAN_HandleTypeDef *hfdcan, FDCAN_BMS_CONTEXT *ctx, uint32_t now_ms, uint8_t isCharging) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	70fb      	strb	r3, [r7, #3]
	// Message 0x6B0: current, voltage, SoC, flags
	if (now_ms - ctx->last_tx_time_6b0 >= MSG_6B0_PERIOD_MS) {
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	2b07      	cmp	r3, #7
 80083aa:	d911      	bls.n	80083d0 <FDCAN_BMS_Mailman+0x40>
		ctx->header_6b0.Identifier = FDCAN_MSG_ID_6B0;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f44f 62d6 	mov.w	r2, #1712	@ 0x6b0
 80083b2:	601a      	str	r2, [r3, #0]
		ctx->header_6b0.DataLength = 8;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2208      	movs	r2, #8
 80083b8:	60da      	str	r2, [r3, #12]
		CANTransmitMinion(hfdcan, &ctx->header_6b0, ctx->msg_6b0.array);
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	336c      	adds	r3, #108	@ 0x6c
 80083c0:	461a      	mov	r2, r3
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff ff76 	bl	80082b4 <CANTransmitMinion>
		ctx->last_tx_time_6b0 = now_ms;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}

	// Message 0x6B1: DCL, CCL, temps
	if (now_ms - ctx->last_tx_time_6b1 >= MSG_6B1_PERIOD_MS) {
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b67      	cmp	r3, #103	@ 0x67
 80083dc:	d910      	bls.n	8008400 <FDCAN_BMS_Mailman+0x70>
		ctx->header_6b1.Identifier = FDCAN_MSG_ID_6B1;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f240 62b1 	movw	r2, #1713	@ 0x6b1
 80083e4:	625a      	str	r2, [r3, #36]	@ 0x24
		CANTransmitMinion(hfdcan, &ctx->header_6b1, ctx->msg_6b1.array);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	3374      	adds	r3, #116	@ 0x74
 80083f0:	461a      	mov	r2, r3
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff ff5e 	bl	80082b4 <CANTransmitMinion>
		ctx->last_tx_time_6b1 = now_ms;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	}

	// Message 0x6B2: high/low cell voltages
	if (now_ms - ctx->last_tx_time_6b2 >= MSG_6B2_PERIOD_MS) {
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b07      	cmp	r3, #7
 800840c:	d910      	bls.n	8008430 <FDCAN_BMS_Mailman+0xa0>
		ctx->header_6b2.Identifier = FDCAN_MSG_ID_6B2;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f240 62b2 	movw	r2, #1714	@ 0x6b2
 8008414:	649a      	str	r2, [r3, #72]	@ 0x48
		CANTransmitMinion(hfdcan, &ctx->header_6b2, ctx->msg_6b2.array);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	337c      	adds	r3, #124	@ 0x7c
 8008420:	461a      	mov	r2, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff ff46 	bl	80082b4 <CANTransmitMinion>
		ctx->last_tx_time_6b2 = now_ms;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	}

	if (isCharging) {
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8088 	beq.w	8008548 <FDCAN_BMS_Mailman+0x1b8>
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 8008438:	bf00      	nop
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f7      	bne.n	800843a <FDCAN_BMS_Mailman+0xaa>
				{
				    // TX FIFO queue is full, wait
				}
		// Message 0x6B0: current, voltage, SoC, flags
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_1806e7f4 >= MSG_CHARGER_PERIOD_MS) {
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b63      	cmp	r3, #99	@ 0x63
 8008456:	d911      	bls.n	800847c <FDCAN_BMS_Mailman+0xec>
			ctx->CAN_CHGCONTEXT.header_1806E7F4.Identifier = 0x1806e7f4;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4a3d      	ldr	r2, [pc, #244]	@ (8008550 <FDCAN_BMS_Mailman+0x1c0>)
 800845c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_1806E7F4, ctx->CAN_CHGCONTEXT.chgmsg_1806e7f4.array);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800846c:	461a      	mov	r2, r3
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f7ff ff20 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_1806e7f4 = now_ms;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		}
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 800847c:	bf00      	nop
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008486:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f7      	bne.n	800847e <FDCAN_BMS_Mailman+0xee>
						{
						    // TX FIFO queue is full, wait
						}
		// Message 0x6B1: DCL, CCL, temps
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_1806e5f4 >= MSG_CHARGER_PERIOD_MS) {
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b63      	cmp	r3, #99	@ 0x63
 800849a:	d911      	bls.n	80084c0 <FDCAN_BMS_Mailman+0x130>
			ctx->CAN_CHGCONTEXT.header_1806E5F4.Identifier = 0x1806e5f4;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4a2d      	ldr	r2, [pc, #180]	@ (8008554 <FDCAN_BMS_Mailman+0x1c4>)
 80084a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_1806E5F4, ctx->CAN_CHGCONTEXT.chgmsg_1806e5f4.array);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f103 01b4 	add.w	r1, r3, #180	@ 0xb4
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80084b0:	461a      	mov	r2, r3
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff fefe 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_1806e5f4 = now_ms;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
		}
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 80084c0:	bf00      	nop
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80084ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f7      	bne.n	80084c2 <FDCAN_BMS_Mailman+0x132>
						{
						    // TX FIFO queue is full, wait
						}
		// Message 0x6B2: high/low cell voltages
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_1806e9f4 >= MSG_CHARGER_PERIOD_MS) {
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b63      	cmp	r3, #99	@ 0x63
 80084de:	d911      	bls.n	8008504 <FDCAN_BMS_Mailman+0x174>
			ctx->CAN_CHGCONTEXT.header_1806E9F4.Identifier = 0x1806e9f4;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008558 <FDCAN_BMS_Mailman+0x1c8>)
 80084e4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_1806E9F4, ctx->CAN_CHGCONTEXT.chgmsg_1806e9f4.array);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80084f4:	461a      	mov	r2, r3
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fedc 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_1806e9f4 = now_ms;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
		}
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 8008504:	bf00      	nop
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800850e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1f7      	bne.n	8008506 <FDCAN_BMS_Mailman+0x176>
						{
						    // TX FIFO queue is full, wait
						}
		// Message 0x6B2: high/low cell voltages
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_18ff50e5 >= MSG_CHARGER_PERIOD_MS) {
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b63      	cmp	r3, #99	@ 0x63
 8008522:	d911      	bls.n	8008548 <FDCAN_BMS_Mailman+0x1b8>
			ctx->CAN_CHGCONTEXT.header_18FF50E5.Identifier = 0x18ff50e5;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4a0d      	ldr	r2, [pc, #52]	@ (800855c <FDCAN_BMS_Mailman+0x1cc>)
 8008528:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_18FF50E5, ctx->CAN_CHGCONTEXT.chgmsg_18ff50e5.array);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f103 01fc 	add.w	r1, r3, #252	@ 0xfc
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008538:	461a      	mov	r2, r3
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff feba 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_18ff50e5 = now_ms;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
		}

	}
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	1806e7f4 	.word	0x1806e7f4
 8008554:	1806e5f4 	.word	0x1806e5f4
 8008558:	1806e9f4 	.word	0x1806e9f4
 800855c:	18ff50e5 	.word	0x18ff50e5

08008560 <add_fault>:
 * @param fault_type Type of fault (UV, OV, TEMP)
 * @param fault_value Value that caused the fault
 * @return index of the fault entry in the array
 */
int add_fault(uint8_t ic_num, uint8_t cell_num, uint8_t fault_type,
		float fault_value) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	ed87 0a00 	vstr	s0, [r7]
 800856c:	71fb      	strb	r3, [r7, #7]
 800856e:	460b      	mov	r3, r1
 8008570:	71bb      	strb	r3, [r7, #6]
 8008572:	4613      	mov	r3, r2
 8008574:	717b      	strb	r3, [r7, #5]
	uint16_t cell_id = ic_num * 10 + cell_num;
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	b29b      	uxth	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	4413      	add	r3, r2
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	79bb      	ldrb	r3, [r7, #6]
 8008586:	b29b      	uxth	r3, r3
 8008588:	4413      	add	r3, r2
 800858a:	81fb      	strh	r3, [r7, #14]

	// First check if this fault already exists
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e024      	b.n	80085dc <add_fault+0x7c>
		if (fault_log[i].active && fault_log[i].cell_id == cell_id
 8008592:	4a3e      	ldr	r2, [pc, #248]	@ (800868c <add_fault+0x12c>)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	4413      	add	r3, r2
 800859a:	330c      	adds	r3, #12
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d019      	beq.n	80085d6 <add_fault+0x76>
 80085a2:	4a3a      	ldr	r2, [pc, #232]	@ (800868c <add_fault+0x12c>)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	89fa      	ldrh	r2, [r7, #14]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d111      	bne.n	80085d6 <add_fault+0x76>
				&& fault_log[i].fault_type == fault_type) {
 80085b2:	4a36      	ldr	r2, [pc, #216]	@ (800868c <add_fault+0x12c>)
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	4413      	add	r3, r2
 80085ba:	3302      	adds	r3, #2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	797a      	ldrb	r2, [r7, #5]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d108      	bne.n	80085d6 <add_fault+0x76>
			// Update existing fault entry
			fault_log[i].fault_value = fault_value;
 80085c4:	4a31      	ldr	r2, [pc, #196]	@ (800868c <add_fault+0x12c>)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	011b      	lsls	r3, r3, #4
 80085ca:	4413      	add	r3, r2
 80085cc:	3304      	adds	r3, #4
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	601a      	str	r2, [r3, #0]
			return i;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	e056      	b.n	8008684 <add_fault+0x124>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	3301      	adds	r3, #1
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b13      	cmp	r3, #19
 80085e0:	ddd7      	ble.n	8008592 <add_fault+0x32>
		}
	}

	// Find an empty slot for a new fault
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 80085e2:	2300      	movs	r3, #0
 80085e4:	613b      	str	r3, [r7, #16]
 80085e6:	e045      	b.n	8008674 <add_fault+0x114>
		if (!fault_log[i].active) {
 80085e8:	4a28      	ldr	r2, [pc, #160]	@ (800868c <add_fault+0x12c>)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	4413      	add	r3, r2
 80085f0:	330c      	adds	r3, #12
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f083 0301 	eor.w	r3, r3, #1
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d037      	beq.n	800866e <add_fault+0x10e>
			fault_log[i].cell_id = cell_id;
 80085fe:	4a23      	ldr	r2, [pc, #140]	@ (800868c <add_fault+0x12c>)
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	4413      	add	r3, r2
 8008606:	89fa      	ldrh	r2, [r7, #14]
 8008608:	801a      	strh	r2, [r3, #0]
			fault_log[i].fault_type = fault_type;
 800860a:	4a20      	ldr	r2, [pc, #128]	@ (800868c <add_fault+0x12c>)
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	4413      	add	r3, r2
 8008612:	3302      	adds	r3, #2
 8008614:	797a      	ldrb	r2, [r7, #5]
 8008616:	701a      	strb	r2, [r3, #0]
			fault_log[i].fault_value = fault_value;
 8008618:	4a1c      	ldr	r2, [pc, #112]	@ (800868c <add_fault+0x12c>)
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	4413      	add	r3, r2
 8008620:	3304      	adds	r3, #4
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	601a      	str	r2, [r3, #0]
			fault_log[i].timestamp = HAL_GetTick();
 8008626:	f002 fff5 	bl	800b614 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	4917      	ldr	r1, [pc, #92]	@ (800868c <add_fault+0x12c>)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	440b      	add	r3, r1
 8008634:	3308      	adds	r3, #8
 8008636:	601a      	str	r2, [r3, #0]
			fault_log[i].active = true;
 8008638:	4a14      	ldr	r2, [pc, #80]	@ (800868c <add_fault+0x12c>)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	4413      	add	r3, r2
 8008640:	330c      	adds	r3, #12
 8008642:	2201      	movs	r2, #1
 8008644:	701a      	strb	r2, [r3, #0]
			num_active_faults++;
 8008646:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <add_fault+0x130>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	3301      	adds	r3, #1
 800864c:	b2da      	uxtb	r2, r3
 800864e:	4b10      	ldr	r3, [pc, #64]	@ (8008690 <add_fault+0x130>)
 8008650:	701a      	strb	r2, [r3, #0]

			// Print info about the new fault
			if (PRINT_ON) printf("New fault: IC%d Cell%d Type:%d Value:", ic_num + 1,
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	1c59      	adds	r1, r3, #1
 8008656:	79bb      	ldrb	r3, [r7, #6]
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	797b      	ldrb	r3, [r7, #5]
 800865c:	480d      	ldr	r0, [pc, #52]	@ (8008694 <add_fault+0x134>)
 800865e:	f00b fe53 	bl	8014308 <iprintf>
					cell_num + 1, fault_type);
			if (PRINT_ON) printFloat(fault_value);
 8008662:	ed97 0a00 	vldr	s0, [r7]
 8008666:	f000 fdc3 	bl	80091f0 <printFloat>

			return i;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	e00a      	b.n	8008684 <add_fault+0x124>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3301      	adds	r3, #1
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2b13      	cmp	r3, #19
 8008678:	ddb6      	ble.n	80085e8 <add_fault+0x88>
		}
	}

	// If we get here, the fault log is full - just return -1
	if (PRINT_ON) printf("Fault log full! Cannot record new faults\n");
 800867a:	4807      	ldr	r0, [pc, #28]	@ (8008698 <add_fault+0x138>)
 800867c:	f00b feb4 	bl	80143e8 <puts>
	return -1;
 8008680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20001cc0 	.word	0x20001cc0
 8008690:	20001e00 	.word	0x20001e00
 8008694:	08017d78 	.word	0x08017d78
 8008698:	08017da0 	.word	0x08017da0

0800869c <clear_fault>:
 *
 * @param ic_num IC number (0-based)
 * @param cell_num Cell number (0-based)
 * @param fault_type Type of fault (UV, OV, TEMP)
 */
void clear_fault(uint8_t ic_num, uint8_t cell_num, uint8_t fault_type) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
 80086a6:	460b      	mov	r3, r1
 80086a8:	71bb      	strb	r3, [r7, #6]
 80086aa:	4613      	mov	r3, r2
 80086ac:	717b      	strb	r3, [r7, #5]
	uint16_t cell_id = ic_num * 10 + cell_num;
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	0092      	lsls	r2, r2, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	79bb      	ldrb	r3, [r7, #6]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4413      	add	r3, r2
 80086c2:	817b      	strh	r3, [r7, #10]

	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e03d      	b.n	8008746 <clear_fault+0xaa>
		if (fault_log[i].active && fault_log[i].cell_id == cell_id
 80086ca:	4a22      	ldr	r2, [pc, #136]	@ (8008754 <clear_fault+0xb8>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	4413      	add	r3, r2
 80086d2:	330c      	adds	r3, #12
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d032      	beq.n	8008740 <clear_fault+0xa4>
 80086da:	4a1e      	ldr	r2, [pc, #120]	@ (8008754 <clear_fault+0xb8>)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	897a      	ldrh	r2, [r7, #10]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d12a      	bne.n	8008740 <clear_fault+0xa4>
				&& fault_log[i].fault_type == fault_type) {
 80086ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008754 <clear_fault+0xb8>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	4413      	add	r3, r2
 80086f2:	3302      	adds	r3, #2
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	797a      	ldrb	r2, [r7, #5]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d121      	bne.n	8008740 <clear_fault+0xa4>

			if (PRINT_ON) printf("Cleared fault: IC%d Cell%d Type:%d Value:", ic_num + 1,
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	1c59      	adds	r1, r3, #1
 8008700:	79bb      	ldrb	r3, [r7, #6]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	797b      	ldrb	r3, [r7, #5]
 8008706:	3301      	adds	r3, #1
 8008708:	4813      	ldr	r0, [pc, #76]	@ (8008758 <clear_fault+0xbc>)
 800870a:	f00b fdfd 	bl	8014308 <iprintf>
					cell_num + 1, fault_type + 1);
			if (PRINT_ON) printFloat(fault_log[i].fault_value);
 800870e:	4a11      	ldr	r2, [pc, #68]	@ (8008754 <clear_fault+0xb8>)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	4413      	add	r3, r2
 8008716:	3304      	adds	r3, #4
 8008718:	edd3 7a00 	vldr	s15, [r3]
 800871c:	eeb0 0a67 	vmov.f32	s0, s15
 8008720:	f000 fd66 	bl	80091f0 <printFloat>

			fault_log[i].active = false;
 8008724:	4a0b      	ldr	r2, [pc, #44]	@ (8008754 <clear_fault+0xb8>)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	4413      	add	r3, r2
 800872c:	330c      	adds	r3, #12
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
			num_active_faults--;
 8008732:	4b0a      	ldr	r3, [pc, #40]	@ (800875c <clear_fault+0xc0>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	3b01      	subs	r3, #1
 8008738:	b2da      	uxtb	r2, r3
 800873a:	4b08      	ldr	r3, [pc, #32]	@ (800875c <clear_fault+0xc0>)
 800873c:	701a      	strb	r2, [r3, #0]
			return;
 800873e:	e005      	b.n	800874c <clear_fault+0xb0>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b13      	cmp	r3, #19
 800874a:	ddbe      	ble.n	80086ca <clear_fault+0x2e>
		}
	}
}
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20001cc0 	.word	0x20001cc0
 8008758:	08017dcc 	.word	0x08017dcc
 800875c:	20001e00 	.word	0x20001e00

08008760 <print_fault_summary>:
 * This function prints all active faults in a compact format showing:
 * - Cell ID (IC# * 10 + Cell#)
 * - Value that caused the fault
 * - Type of fault (V for voltage, T for temperature)
 */
void print_fault_summary(void) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
	if (PRINT_ON) {
	if (num_active_faults == 0) {
 8008766:	4b4a      	ldr	r3, [pc, #296]	@ (8008890 <print_fault_summary+0x130>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <print_fault_summary+0x16>
		printf("No active faults\n");
 800876e:	4849      	ldr	r0, [pc, #292]	@ (8008894 <print_fault_summary+0x134>)
 8008770:	f00b fe3a 	bl	80143e8 <puts>
		return;
 8008774:	e089      	b.n	800888a <print_fault_summary+0x12a>
	}

	printf("Faulted cells:\n");
 8008776:	4848      	ldr	r0, [pc, #288]	@ (8008898 <print_fault_summary+0x138>)
 8008778:	f00b fe36 	bl	80143e8 <puts>

	int count = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 8008780:	2300      	movs	r3, #0
 8008782:	60bb      	str	r3, [r7, #8]
 8008784:	e076      	b.n	8008874 <print_fault_summary+0x114>
		if (fault_log[i].active) {
 8008786:	4a45      	ldr	r2, [pc, #276]	@ (800889c <print_fault_summary+0x13c>)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	4413      	add	r3, r2
 800878e:	330c      	adds	r3, #12
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d06b      	beq.n	800886e <print_fault_summary+0x10e>
			uint8_t ic_num = fault_log[i].cell_id / 10;
 8008796:	4a41      	ldr	r2, [pc, #260]	@ (800889c <print_fault_summary+0x13c>)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	4a3f      	ldr	r2, [pc, #252]	@ (80088a0 <print_fault_summary+0x140>)
 80087a2:	fba2 2303 	umull	r2, r3, r2, r3
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	71fb      	strb	r3, [r7, #7]
			uint8_t cell_num = fault_log[i].cell_id % 10;
 80087ac:	4a3b      	ldr	r2, [pc, #236]	@ (800889c <print_fault_summary+0x13c>)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	4413      	add	r3, r2
 80087b4:	881a      	ldrh	r2, [r3, #0]
 80087b6:	4b3a      	ldr	r3, [pc, #232]	@ (80088a0 <print_fault_summary+0x140>)
 80087b8:	fba3 1302 	umull	r1, r3, r3, r2
 80087bc:	08d9      	lsrs	r1, r3, #3
 80087be:	460b      	mov	r3, r1
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	71bb      	strb	r3, [r7, #6]

			// Print cell information
			printf("IC%d Cell%d: ", ic_num + 1, cell_num + 1);
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	1c59      	adds	r1, r3, #1
 80087d0:	79bb      	ldrb	r3, [r7, #6]
 80087d2:	3301      	adds	r3, #1
 80087d4:	461a      	mov	r2, r3
 80087d6:	4833      	ldr	r0, [pc, #204]	@ (80088a4 <print_fault_summary+0x144>)
 80087d8:	f00b fd96 	bl	8014308 <iprintf>

			// Print fault value with appropriate units
			switch (fault_log[i].fault_type) {
 80087dc:	4a2f      	ldr	r2, [pc, #188]	@ (800889c <print_fault_summary+0x13c>)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	4413      	add	r3, r2
 80087e4:	3302      	adds	r3, #2
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	dc02      	bgt.n	80087f2 <print_fault_summary+0x92>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dc03      	bgt.n	80087f8 <print_fault_summary+0x98>
 80087f0:	e020      	b.n	8008834 <print_fault_summary+0xd4>
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d00f      	beq.n	8008816 <print_fault_summary+0xb6>
 80087f6:	e01d      	b.n	8008834 <print_fault_summary+0xd4>
			case FAULT_TYPE_UV:
			case FAULT_TYPE_OV:
				printf("%.2fV", fault_log[i].fault_value);
 80087f8:	4a28      	ldr	r2, [pc, #160]	@ (800889c <print_fault_summary+0x13c>)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	4413      	add	r3, r2
 8008800:	3304      	adds	r3, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4618      	mov	r0, r3
 8008806:	f7f7 fea7 	bl	8000558 <__aeabi_f2d>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4826      	ldr	r0, [pc, #152]	@ (80088a8 <print_fault_summary+0x148>)
 8008810:	f00b fd7a 	bl	8014308 <iprintf>
				break;
 8008814:	e01c      	b.n	8008850 <print_fault_summary+0xf0>
			case FAULT_TYPE_TEMP:
				printf("%.1fC", fault_log[i].fault_value);
 8008816:	4a21      	ldr	r2, [pc, #132]	@ (800889c <print_fault_summary+0x13c>)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	4413      	add	r3, r2
 800881e:	3304      	adds	r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4618      	mov	r0, r3
 8008824:	f7f7 fe98 	bl	8000558 <__aeabi_f2d>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	481f      	ldr	r0, [pc, #124]	@ (80088ac <print_fault_summary+0x14c>)
 800882e:	f00b fd6b 	bl	8014308 <iprintf>
				break;
 8008832:	e00d      	b.n	8008850 <print_fault_summary+0xf0>
			default:
				printf("%.2f?", fault_log[i].fault_value);
 8008834:	4a19      	ldr	r2, [pc, #100]	@ (800889c <print_fault_summary+0x13c>)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	4413      	add	r3, r2
 800883c:	3304      	adds	r3, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f7f7 fe89 	bl	8000558 <__aeabi_f2d>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4819      	ldr	r0, [pc, #100]	@ (80088b0 <print_fault_summary+0x150>)
 800884c:	f00b fd5c 	bl	8014308 <iprintf>
			}

			// Add separator or newline
			count++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]
			if (count % 4 == 0) { // Four entries per line
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d103      	bne.n	8008868 <print_fault_summary+0x108>
				printf("\n");
 8008860:	200a      	movs	r0, #10
 8008862:	f00b fd63 	bl	801432c <putchar>
 8008866:	e002      	b.n	800886e <print_fault_summary+0x10e>
			} else {
				printf("; ");
 8008868:	4812      	ldr	r0, [pc, #72]	@ (80088b4 <print_fault_summary+0x154>)
 800886a:	f00b fd4d 	bl	8014308 <iprintf>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	3301      	adds	r3, #1
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b13      	cmp	r3, #19
 8008878:	dd85      	ble.n	8008786 <print_fault_summary+0x26>
			}
		}
	}

	// Ensure we end with a newline
	if (count % 4 != 0) {
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <print_fault_summary+0x12a>
		printf("\n");
 8008884:	200a      	movs	r0, #10
 8008886:	f00b fd51 	bl	801432c <putchar>
	}
	}
}
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20001e00 	.word	0x20001e00
 8008894:	08017df8 	.word	0x08017df8
 8008898:	08017e0c 	.word	0x08017e0c
 800889c:	20001cc0 	.word	0x20001cc0
 80088a0:	cccccccd 	.word	0xcccccccd
 80088a4:	08017e1c 	.word	0x08017e1c
 80088a8:	08017e2c 	.word	0x08017e2c
 80088ac:	08017e34 	.word	0x08017e34
 80088b0:	08017e3c 	.word	0x08017e3c
 80088b4:	08017e44 	.word	0x08017e44

080088b8 <populateIC>:

void populateIC(cell_asic *IC, uint8_t tIC) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
	uint32_t timingshits = HAL_GetTick();
 80088c4:	f002 fea6 	bl	800b614 <HAL_GetTick>
 80088c8:	6178      	str	r0, [r7, #20]
	adBms6830_start_adc_cell_voltage_measurment(tIC);
 80088ca:	78fb      	ldrb	r3, [r7, #3]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe f9f1 	bl	8006cb4 <adBms6830_start_adc_cell_voltage_measurment>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 80088d2:	f002 fe9f 	bl	800b614 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	4619      	mov	r1, r3
 80088de:	4839      	ldr	r0, [pc, #228]	@ (80089c4 <populateIC+0x10c>)
 80088e0:	f00b fd12 	bl	8014308 <iprintf>

	Delay_ms(8); // ADCs are updated at their conversion rate is 8ms
 80088e4:	2008      	movs	r0, #8
 80088e6:	f7fe fc2f 	bl	8007148 <Delay_ms>
	timingshits = HAL_GetTick();
 80088ea:	f002 fe93 	bl	800b614 <HAL_GetTick>
 80088ee:	6178      	str	r0, [r7, #20]
	adBms6830_read_cell_voltages(tIC, &IC[0]);
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe f9f3 	bl	8006ce0 <adBms6830_read_cell_voltages>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 80088fa:	f002 fe8b 	bl	800b614 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	4619      	mov	r1, r3
 8008906:	482f      	ldr	r0, [pc, #188]	@ (80089c4 <populateIC+0x10c>)
 8008908:	f00b fcfe 	bl	8014308 <iprintf>

	int c_fault = user_adBms6830_cellFault(tIC, &IC[0]);
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f85f 	bl	80089d4 <user_adBms6830_cellFault>
 8008916:	6138      	str	r0, [r7, #16]
	if (c_fault != 0) {
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <populateIC+0x6e>
		cell_fault = c_fault;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	4b29      	ldr	r3, [pc, #164]	@ (80089c8 <populateIC+0x110>)
 8008924:	701a      	strb	r2, [r3, #0]
	}
	Delay_ms(8);
 8008926:	2008      	movs	r0, #8
 8008928:	f7fe fc0e 	bl	8007148 <Delay_ms>
	timingshits = HAL_GetTick();
 800892c:	f002 fe72 	bl	800b614 <HAL_GetTick>
 8008930:	6178      	str	r0, [r7, #20]
	adBms6830_start_aux_voltage_measurment(tIC, &IC[0]);
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fa28 	bl	8006d8c <adBms6830_start_aux_voltage_measurment>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 800893c:	f002 fe6a 	bl	800b614 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	4619      	mov	r1, r3
 8008948:	481e      	ldr	r0, [pc, #120]	@ (80089c4 <populateIC+0x10c>)
 800894a:	f00b fcdd 	bl	8014308 <iprintf>

	Delay_ms(8); // ADCs are updated at their conversion rate is 8ms
 800894e:	2008      	movs	r0, #8
 8008950:	f7fe fbfa 	bl	8007148 <Delay_ms>
	timingshits = HAL_GetTick();
 8008954:	f002 fe5e 	bl	800b614 <HAL_GetTick>
 8008958:	6178      	str	r0, [r7, #20]

	adBms6830_read_aux_voltages(tIC, &IC[0]);
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fa54 	bl	8006e0c <adBms6830_read_aux_voltages>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 8008964:	f002 fe56 	bl	800b614 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	4619      	mov	r1, r3
 8008970:	4814      	ldr	r0, [pc, #80]	@ (80089c4 <populateIC+0x10c>)
 8008972:	f00b fcc9 	bl	8014308 <iprintf>

	int t_fault = user_adBms6830_tempFault(tIC, &IC[0]);
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f908 	bl	8008b90 <user_adBms6830_tempFault>
 8008980:	60f8      	str	r0, [r7, #12]
	if (t_fault == 1) {
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d102      	bne.n	800898e <populateIC+0xd6>
		temp_fault = CELL_TEMP_FAULT;
 8008988:	2203      	movs	r2, #3
 800898a:	4b10      	ldr	r3, [pc, #64]	@ (80089cc <populateIC+0x114>)
 800898c:	701a      	strb	r2, [r3, #0]
	}

	timingshits = HAL_GetTick();
 800898e:	f002 fe41 	bl	800b614 <HAL_GetTick>
 8008992:	6178      	str	r0, [r7, #20]
	// Current sensor data + fault
	uint8_t current_fault = getCurrentSensorData();
 8008994:	f000 faf4 	bl	8008f80 <getCurrentSensorData>
 8008998:	4603      	mov	r3, r0
 800899a:	72fb      	strb	r3, [r7, #11]
	if (current_fault != 0) {
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <populateIC+0xf0>
		current_sensor_fault = CURRENT_SENSOR_FAULT;
 80089a2:	2204      	movs	r2, #4
 80089a4:	4b0a      	ldr	r3, [pc, #40]	@ (80089d0 <populateIC+0x118>)
 80089a6:	701a      	strb	r2, [r3, #0]
		// printf("Current sensor fault detected\n");
	}
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 80089a8:	f002 fe34 	bl	800b614 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	4619      	mov	r1, r3
 80089b4:	4803      	ldr	r0, [pc, #12]	@ (80089c4 <populateIC+0x10c>)
 80089b6:	f00b fca7 	bl	8014308 <iprintf>
}
 80089ba:	bf00      	nop
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	08017e48 	.word	0x08017e48
 80089c8:	20001c6a 	.word	0x20001c6a
 80089cc:	20001c6b 	.word	0x20001c6b
 80089d0:	20001c6c 	.word	0x20001c6c

080089d4 <user_adBms6830_cellFault>:

int user_adBms6830_cellFault(uint8_t tIC, cell_asic *IC) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
	int16_t temp;
	float voltage;
	float adjusted_voltage;

	lowest_cell = 100.0; // Initialize to a high value
 80089e4:	4b60      	ldr	r3, [pc, #384]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 80089e6:	4a61      	ldr	r2, [pc, #388]	@ (8008b6c <user_adBms6830_cellFault+0x198>)
 80089e8:	601a      	str	r2, [r3, #0]
	highest_cell = 0.0;  // Initialize to a low value
 80089ea:	4b61      	ldr	r3, [pc, #388]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

	for (uint8_t ic = 0; ic < tIC; ic++) {
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
 80089f6:	e0a2      	b.n	8008b3e <user_adBms6830_cellFault+0x16a>
		for (uint8_t index = 0; index < cell_count; index++) {
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]
 80089fc:	e096      	b.n	8008b2c <user_adBms6830_cellFault+0x158>
			temp = IC[ic].cell.c_codes[index];
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	7bba      	ldrb	r2, [r7, #14]
 8008a0e:	3210      	adds	r2, #16
 8008a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a14:	81bb      	strh	r3, [r7, #12]
			voltage = getVoltage(temp);
 8008a16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff f9cc 	bl	8007db8 <getVoltage>
 8008a20:	ed87 0a02 	vstr	s0, [r7, #8]

			// Adjust voltage based on current if current sensor is not faulted
			if (current_sensor_fault == 0) {
 8008a24:	4b53      	ldr	r3, [pc, #332]	@ (8008b74 <user_adBms6830_cellFault+0x1a0>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d12c      	bne.n	8008a86 <user_adBms6830_cellFault+0xb2>
				if (accy_status == READY_POWER) {
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4b51      	ldr	r3, [pc, #324]	@ (8008b78 <user_adBms6830_cellFault+0x1a4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d10e      	bne.n	8008a56 <user_adBms6830_cellFault+0x82>
					// When discharging, actual cell voltage is higher than measured
					adjusted_voltage = voltage + (current * cell_resistance);
 8008a38:	4b50      	ldr	r3, [pc, #320]	@ (8008b7c <user_adBms6830_cellFault+0x1a8>)
 8008a3a:	ed93 7a00 	vldr	s14, [r3]
 8008a3e:	4b50      	ldr	r3, [pc, #320]	@ (8008b80 <user_adBms6830_cellFault+0x1ac>)
 8008a40:	edd3 7a00 	vldr	s15, [r3]
 8008a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8008a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a50:	edc7 7a04 	vstr	s15, [r7, #16]
 8008a54:	e019      	b.n	8008a8a <user_adBms6830_cellFault+0xb6>
				} else if (accy_status == CHARGE_POWER) {
 8008a56:	2302      	movs	r3, #2
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b47      	ldr	r3, [pc, #284]	@ (8008b78 <user_adBms6830_cellFault+0x1a4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d10e      	bne.n	8008a80 <user_adBms6830_cellFault+0xac>
					// When charging, actual cell voltage is lower than measured
					adjusted_voltage = voltage - (current * cell_resistance);
 8008a62:	4b46      	ldr	r3, [pc, #280]	@ (8008b7c <user_adBms6830_cellFault+0x1a8>)
 8008a64:	ed93 7a00 	vldr	s14, [r3]
 8008a68:	4b45      	ldr	r3, [pc, #276]	@ (8008b80 <user_adBms6830_cellFault+0x1ac>)
 8008a6a:	edd3 7a00 	vldr	s15, [r3]
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	ed97 7a02 	vldr	s14, [r7, #8]
 8008a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a7a:	edc7 7a04 	vstr	s15, [r7, #16]
 8008a7e:	e004      	b.n	8008a8a <user_adBms6830_cellFault+0xb6>
				} else {
					adjusted_voltage = voltage; // No adjustment needed
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	e001      	b.n	8008a8a <user_adBms6830_cellFault+0xb6>
				}
			} else {
				adjusted_voltage = voltage; // No adjustment if current sensor is faulted
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	613b      	str	r3, [r7, #16]
			}

			if (adjusted_voltage < lowest_cell) {
 8008a8a:	4b37      	ldr	r3, [pc, #220]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 8008a8c:	edd3 7a00 	vldr	s15, [r3]
 8008a90:	ed97 7a04 	vldr	s14, [r7, #16]
 8008a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9c:	d502      	bpl.n	8008aa4 <user_adBms6830_cellFault+0xd0>
				lowest_cell = adjusted_voltage;
 8008a9e:	4a32      	ldr	r2, [pc, #200]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6013      	str	r3, [r2, #0]
			}
			if (adjusted_voltage > highest_cell) {
 8008aa4:	4b32      	ldr	r3, [pc, #200]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 8008aa6:	edd3 7a00 	vldr	s15, [r3]
 8008aaa:	ed97 7a04 	vldr	s14, [r7, #16]
 8008aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab6:	dd02      	ble.n	8008abe <user_adBms6830_cellFault+0xea>
				highest_cell = adjusted_voltage;
 8008ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6013      	str	r3, [r2, #0]
			}

			// Check for under-voltage faults using adjusted voltage
			if (adjusted_voltage < UV_THRESHOLD) {
 8008abe:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8008ac2:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ace:	d50a      	bpl.n	8008ae6 <user_adBms6830_cellFault+0x112>
				error = CELL_UV_FAULT;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
				add_fault(ic, index, FAULT_TYPE_UV, adjusted_voltage);
 8008ad4:	7bb9      	ldrb	r1, [r7, #14]
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	ed97 0a04 	vldr	s0, [r7, #16]
 8008adc:	2201      	movs	r2, #1
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff fd3e 	bl	8008560 <add_fault>
 8008ae4:	e005      	b.n	8008af2 <user_adBms6830_cellFault+0x11e>
			} else {
				// Clear the UV fault if it exists
				clear_fault(ic, index, FAULT_TYPE_UV);
 8008ae6:	7bb9      	ldrb	r1, [r7, #14]
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2201      	movs	r2, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff fdd5 	bl	800869c <clear_fault>
			}

			// Check for over-voltage faults using adjusted voltage
			if (adjusted_voltage > OV_THRESHOLD) {
 8008af2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8008b84 <user_adBms6830_cellFault+0x1b0>
 8008af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8008afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b02:	dd0a      	ble.n	8008b1a <user_adBms6830_cellFault+0x146>
				error = CELL_OV_FAULT;
 8008b04:	2302      	movs	r3, #2
 8008b06:	617b      	str	r3, [r7, #20]
				add_fault(ic, index, FAULT_TYPE_OV, adjusted_voltage);
 8008b08:	7bb9      	ldrb	r1, [r7, #14]
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	ed97 0a04 	vldr	s0, [r7, #16]
 8008b10:	2202      	movs	r2, #2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff fd24 	bl	8008560 <add_fault>
 8008b18:	e005      	b.n	8008b26 <user_adBms6830_cellFault+0x152>
			} else {
				// Clear the OV fault if it exists
				clear_fault(ic, index, FAULT_TYPE_OV);
 8008b1a:	7bb9      	ldrb	r1, [r7, #14]
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff fdbb 	bl	800869c <clear_fault>
		for (uint8_t index = 0; index < cell_count; index++) {
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	73bb      	strb	r3, [r7, #14]
 8008b2c:	4b16      	ldr	r3, [pc, #88]	@ (8008b88 <user_adBms6830_cellFault+0x1b4>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	7bba      	ldrb	r2, [r7, #14]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	f4ff af63 	bcc.w	80089fe <user_adBms6830_cellFault+0x2a>
	for (uint8_t ic = 0; ic < tIC; ic++) {
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	73fb      	strb	r3, [r7, #15]
 8008b3e:	7bfa      	ldrb	r2, [r7, #15]
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	f4ff af58 	bcc.w	80089f8 <user_adBms6830_cellFault+0x24>
			}
		}
	}

	delta_cell = highest_cell - lowest_cell;
 8008b48:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 8008b4a:	ed93 7a00 	vldr	s14, [r3]
 8008b4e:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 8008b50:	edd3 7a00 	vldr	s15, [r3]
 8008b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b58:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <user_adBms6830_cellFault+0x1b8>)
 8008b5a:	edc3 7a00 	vstr	s15, [r3]
	return error;
 8008b5e:	697b      	ldr	r3, [r7, #20]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20001c7c 	.word	0x20001c7c
 8008b6c:	42c80000 	.word	0x42c80000
 8008b70:	20001c80 	.word	0x20001c80
 8008b74:	20001c6c 	.word	0x20001c6c
 8008b78:	20001c70 	.word	0x20001c70
 8008b7c:	20001c74 	.word	0x20001c74
 8008b80:	20000048 	.word	0x20000048
 8008b84:	40866666 	.word	0x40866666
 8008b88:	20000044 	.word	0x20000044
 8008b8c:	20001c88 	.word	0x20001c88

08008b90 <user_adBms6830_tempFault>:

int user_adBms6830_tempFault(uint8_t tIC, cell_asic *IC) {
 8008b90:	b5b0      	push	{r4, r5, r7, lr}
 8008b92:	b08a      	sub	sp, #40	@ 0x28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t temp;
	float temperature;
	float V;

	lowest_temp = 1000.0; // Initialize to a high value
 8008ba0:	4b91      	ldr	r3, [pc, #580]	@ (8008de8 <user_adBms6830_tempFault+0x258>)
 8008ba2:	4a92      	ldr	r2, [pc, #584]	@ (8008dec <user_adBms6830_tempFault+0x25c>)
 8008ba4:	601a      	str	r2, [r3, #0]
	highest_temp = 0.0;   // Initialize to a low value
 8008ba6:	4b92      	ldr	r3, [pc, #584]	@ (8008df0 <user_adBms6830_tempFault+0x260>)
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
	float temp_sum = 0.0;
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	61bb      	str	r3, [r7, #24]
	int faulted_cell_count = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	623b      	str	r3, [r7, #32]

	for (uint8_t ic = 0; ic < tIC; ic++) {
 8008bb8:	2300      	movs	r3, #0
 8008bba:	77fb      	strb	r3, [r7, #31]
 8008bbc:	e0e4      	b.n	8008d88 <user_adBms6830_tempFault+0x1f8>
		for (uint8_t index = 0; index < cell_count; index++) {
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	77bb      	strb	r3, [r7, #30]
 8008bc2:	e0d8      	b.n	8008d76 <user_adBms6830_tempFault+0x1e6>
			if (ic * 10 + index + 1 == 55) {
 8008bc4:	7ffa      	ldrb	r2, [r7, #31]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	461a      	mov	r2, r3
 8008bd0:	7fbb      	ldrb	r3, [r7, #30]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	2b36      	cmp	r3, #54	@ 0x36
 8008bd6:	f000 80ca 	beq.w	8008d6e <user_adBms6830_tempFault+0x1de>
				continue;
			}

			temp = IC[ic].aux.a_codes[index];
 8008bda:	7ffb      	ldrb	r3, [r7, #31]
 8008bdc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8008be0:	fb02 f303 	mul.w	r3, r2, r3
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	4413      	add	r3, r2
 8008be8:	7fba      	ldrb	r2, [r7, #30]
 8008bea:	3250      	adds	r2, #80	@ 0x50
 8008bec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008bf0:	82fb      	strh	r3, [r7, #22]
			V = getVoltage(temp);
 8008bf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff f8de 	bl	8007db8 <getVoltage>
 8008bfc:	ed87 0a04 	vstr	s0, [r7, #16]
			temperature = -225.6985 * (V * V * V) + 1310.5937 * (V * V)
 8008c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c10:	ee17 0a90 	vmov	r0, s15
 8008c14:	f7f7 fca0 	bl	8000558 <__aeabi_f2d>
 8008c18:	a36b      	add	r3, pc, #428	@ (adr r3, 8008dc8 <user_adBms6830_tempFault+0x238>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fcf3 	bl	8000608 <__aeabi_dmul>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4614      	mov	r4, r2
 8008c28:	461d      	mov	r5, r3
 8008c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c32:	ee17 0a90 	vmov	r0, s15
 8008c36:	f7f7 fc8f 	bl	8000558 <__aeabi_f2d>
 8008c3a:	a365      	add	r3, pc, #404	@ (adr r3, 8008dd0 <user_adBms6830_tempFault+0x240>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fce2 	bl	8000608 <__aeabi_dmul>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 fb26 	bl	800029c <__adddf3>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	461d      	mov	r5, r3
																+ -2594.7697 * V + 1767.8260;
 8008c58:	6938      	ldr	r0, [r7, #16]
 8008c5a:	f7f7 fc7d 	bl	8000558 <__aeabi_f2d>
 8008c5e:	a35e      	add	r3, pc, #376	@ (adr r3, 8008dd8 <user_adBms6830_tempFault+0x248>)
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f7f7 fcd0 	bl	8000608 <__aeabi_dmul>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f7f7 fb14 	bl	800029c <__adddf3>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	a358      	add	r3, pc, #352	@ (adr r3, 8008de0 <user_adBms6830_tempFault+0x250>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fb0b 	bl	800029c <__adddf3>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
			temperature = -225.6985 * (V * V * V) + 1310.5937 * (V * V)
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f7f7 ffb3 	bl	8000bf8 <__aeabi_d2f>
 8008c92:	4603      	mov	r3, r0
 8008c94:	60fb      	str	r3, [r7, #12]

			// Check for temperature faults
			if (temperature > TEMP_LIMIT || temperature < LOWER_TEMP_LIMIT) {
 8008c96:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8008df4 <user_adBms6830_tempFault+0x264>
 8008c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	dc08      	bgt.n	8008cba <user_adBms6830_tempFault+0x12a>
 8008ca8:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8008cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb8:	d510      	bpl.n	8008cdc <user_adBms6830_tempFault+0x14c>
				faulted_cell_count++;
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	623b      	str	r3, [r7, #32]
				if (faulted_cell_count > MAX_ALLOWED_TEMP_FAULTS) {
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	2b0a      	cmp	r3, #10
 8008cc4:	dd54      	ble.n	8008d70 <user_adBms6830_tempFault+0x1e0>
					error = 1;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
					add_fault(ic, index, FAULT_TYPE_TEMP, temperature);
 8008cca:	7fb9      	ldrb	r1, [r7, #30]
 8008ccc:	7ffb      	ldrb	r3, [r7, #31]
 8008cce:	ed97 0a03 	vldr	s0, [r7, #12]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff fc43 	bl	8008560 <add_fault>
				if (faulted_cell_count > MAX_ALLOWED_TEMP_FAULTS) {
 8008cda:	e049      	b.n	8008d70 <user_adBms6830_tempFault+0x1e0>
				}
			} else {


				if (temperature < lowest_temp) {
 8008cdc:	4b42      	ldr	r3, [pc, #264]	@ (8008de8 <user_adBms6830_tempFault+0x258>)
 8008cde:	edd3 7a00 	vldr	s15, [r3]
 8008ce2:	ed97 7a03 	vldr	s14, [r7, #12]
 8008ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cee:	d511      	bpl.n	8008d14 <user_adBms6830_tempFault+0x184>
					lowest_temp_ID = ic * 10 + index + 1;
 8008cf0:	7ffa      	ldrb	r2, [r7, #31]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	7fbb      	ldrb	r3, [r7, #30]
 8008cfe:	4413      	add	r3, r2
 8008d00:	3301      	adds	r3, #1
 8008d02:	4a3d      	ldr	r2, [pc, #244]	@ (8008df8 <user_adBms6830_tempFault+0x268>)
 8008d04:	6013      	str	r3, [r2, #0]
					if (lowest_temp_ID != 11)
 8008d06:	4b3c      	ldr	r3, [pc, #240]	@ (8008df8 <user_adBms6830_tempFault+0x268>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b0b      	cmp	r3, #11
 8008d0c:	d002      	beq.n	8008d14 <user_adBms6830_tempFault+0x184>
						lowest_temp = temperature;
 8008d0e:	4a36      	ldr	r2, [pc, #216]	@ (8008de8 <user_adBms6830_tempFault+0x258>)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6013      	str	r3, [r2, #0]
				}
				if (temperature > highest_temp) {
 8008d14:	4b36      	ldr	r3, [pc, #216]	@ (8008df0 <user_adBms6830_tempFault+0x260>)
 8008d16:	edd3 7a00 	vldr	s15, [r3]
 8008d1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d26:	dd11      	ble.n	8008d4c <user_adBms6830_tempFault+0x1bc>
					highest_temp_ID = ic * 10 + index + 1;
 8008d28:	7ffa      	ldrb	r2, [r7, #31]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	461a      	mov	r2, r3
 8008d34:	7fbb      	ldrb	r3, [r7, #30]
 8008d36:	4413      	add	r3, r2
 8008d38:	3301      	adds	r3, #1
 8008d3a:	4a30      	ldr	r2, [pc, #192]	@ (8008dfc <user_adBms6830_tempFault+0x26c>)
 8008d3c:	6013      	str	r3, [r2, #0]
					if (highest_temp_ID != 45)
 8008d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8008dfc <user_adBms6830_tempFault+0x26c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d44:	d002      	beq.n	8008d4c <user_adBms6830_tempFault+0x1bc>
						highest_temp = temperature;
 8008d46:	4a2a      	ldr	r2, [pc, #168]	@ (8008df0 <user_adBms6830_tempFault+0x260>)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6013      	str	r3, [r2, #0]
				}

				avg_temp += temperature;
 8008d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008d4e:	ed93 7a00 	vldr	s14, [r3]
 8008d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5a:	4b29      	ldr	r3, [pc, #164]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008d5c:	edc3 7a00 	vstr	s15, [r3]


				// Clear the temperature fault if it exists
				clear_fault(ic, index, FAULT_TYPE_TEMP);
 8008d60:	7fb9      	ldrb	r1, [r7, #30]
 8008d62:	7ffb      	ldrb	r3, [r7, #31]
 8008d64:	2203      	movs	r2, #3
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff fc98 	bl	800869c <clear_fault>
 8008d6c:	e000      	b.n	8008d70 <user_adBms6830_tempFault+0x1e0>
				continue;
 8008d6e:	bf00      	nop
		for (uint8_t index = 0; index < cell_count; index++) {
 8008d70:	7fbb      	ldrb	r3, [r7, #30]
 8008d72:	3301      	adds	r3, #1
 8008d74:	77bb      	strb	r3, [r7, #30]
 8008d76:	4b23      	ldr	r3, [pc, #140]	@ (8008e04 <user_adBms6830_tempFault+0x274>)
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	7fba      	ldrb	r2, [r7, #30]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	f4ff af21 	bcc.w	8008bc4 <user_adBms6830_tempFault+0x34>
	for (uint8_t ic = 0; ic < tIC; ic++) {
 8008d82:	7ffb      	ldrb	r3, [r7, #31]
 8008d84:	3301      	adds	r3, #1
 8008d86:	77fb      	strb	r3, [r7, #31]
 8008d88:	7ffa      	ldrb	r2, [r7, #31]
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	f4ff af16 	bcc.w	8008bbe <user_adBms6830_tempFault+0x2e>
			}
		}
	}

	avg_temp /= (tIC * cell_count) - faulted_cell_count;
 8008d92:	4b1b      	ldr	r3, [pc, #108]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008d94:	edd3 6a00 	vldr	s13, [r3]
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008e04 <user_adBms6830_tempFault+0x274>)
 8008d9c:	7812      	ldrb	r2, [r2, #0]
 8008d9e:	fb03 f202 	mul.w	r2, r3, r2
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db2:	4b13      	ldr	r3, [pc, #76]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008db4:	edc3 7a00 	vstr	s15, [r3]
	return error;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3728      	adds	r7, #40	@ 0x28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	f3af 8000 	nop.w
 8008dc8:	1cac0831 	.word	0x1cac0831
 8008dcc:	c06c365a 	.word	0xc06c365a
 8008dd0:	f2e48e8a 	.word	0xf2e48e8a
 8008dd4:	40947a5f 	.word	0x40947a5f
 8008dd8:	161e4f76 	.word	0x161e4f76
 8008ddc:	c0a4458a 	.word	0xc0a4458a
 8008de0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008de4:	409b9f4d 	.word	0x409b9f4d
 8008de8:	20001c98 	.word	0x20001c98
 8008dec:	447a0000 	.word	0x447a0000
 8008df0:	20001c9c 	.word	0x20001c9c
 8008df4:	42700000 	.word	0x42700000
 8008df8:	20001ca0 	.word	0x20001ca0
 8008dfc:	20001ca4 	.word	0x20001ca4
 8008e00:	20001ca8 	.word	0x20001ca8
 8008e04:	20000044 	.word	0x20000044

08008e08 <user_adBms6830_setFaults>:

void user_adBms6830_setFaults(void) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
	if (cell_fault == CELL_UV_FAULT || cell_fault == CELL_OV_FAULT) {
 8008e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8008ef8 <user_adBms6830_setFaults+0xf0>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2201      	movs	r2, #1
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d004      	beq.n	8008e20 <user_adBms6830_setFaults+0x18>
 8008e16:	4b38      	ldr	r3, [pc, #224]	@ (8008ef8 <user_adBms6830_setFaults+0xf0>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d119      	bne.n	8008e54 <user_adBms6830_setFaults+0x4c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8008e20:	2201      	movs	r2, #1
 8008e22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e26:	4835      	ldr	r0, [pc, #212]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008e28:	f005 f9aa 	bl	800e180 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2108      	movs	r1, #8
 8008e30:	4833      	ldr	r0, [pc, #204]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e32:	f005 f9a5 	bl	800e180 <HAL_GPIO_WritePin>

		if (accy_status == CHARGE_POWER) {
 8008e36:	2302      	movs	r3, #2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b32      	ldr	r3, [pc, #200]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d121      	bne.n	8008e86 <user_adBms6830_setFaults+0x7e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008e42:	2200      	movs	r2, #0
 8008e44:	2104      	movs	r1, #4
 8008e46:	482e      	ldr	r0, [pc, #184]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e48:	f005 f99a 	bl	800e180 <HAL_GPIO_WritePin>
			is_charging = 0;
 8008e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	701a      	strb	r2, [r3, #0]
		if (accy_status == CHARGE_POWER) {
 8008e52:	e018      	b.n	8008e86 <user_adBms6830_setFaults+0x7e>
		}
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8008e54:	2200      	movs	r2, #0
 8008e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e5a:	4828      	ldr	r0, [pc, #160]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008e5c:	f005 f990 	bl	800e180 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008e60:	2201      	movs	r2, #1
 8008e62:	2108      	movs	r1, #8
 8008e64:	4826      	ldr	r0, [pc, #152]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e66:	f005 f98b 	bl	800e180 <HAL_GPIO_WritePin>
		if (accy_status == CHARGE_POWER) {
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4b25      	ldr	r3, [pc, #148]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d107      	bne.n	8008e86 <user_adBms6830_setFaults+0x7e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008e76:	2201      	movs	r2, #1
 8008e78:	2104      	movs	r1, #4
 8008e7a:	4821      	ldr	r0, [pc, #132]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e7c:	f005 f980 	bl	800e180 <HAL_GPIO_WritePin>
			is_charging = 1;
 8008e80:	4b21      	ldr	r3, [pc, #132]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (temp_fault == CELL_TEMP_FAULT) {
 8008e86:	4b21      	ldr	r3, [pc, #132]	@ (8008f0c <user_adBms6830_setFaults+0x104>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d118      	bne.n	8008ec2 <user_adBms6830_setFaults+0xba>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8008e90:	2201      	movs	r2, #1
 8008e92:	2102      	movs	r1, #2
 8008e94:	4819      	ldr	r0, [pc, #100]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008e96:	f005 f973 	bl	800e180 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2108      	movs	r1, #8
 8008e9e:	4818      	ldr	r0, [pc, #96]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008ea0:	f005 f96e 	bl	800e180 <HAL_GPIO_WritePin>

		if (accy_status == CHARGE_POWER) {
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	4b16      	ldr	r3, [pc, #88]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d120      	bne.n	8008ef2 <user_adBms6830_setFaults+0xea>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	4812      	ldr	r0, [pc, #72]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008eb6:	f005 f963 	bl	800e180 <HAL_GPIO_WritePin>
			is_charging = 0;
 8008eba:	4b13      	ldr	r3, [pc, #76]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
		if (accy_status == CHARGE_POWER) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
			is_charging = 1;
		}
	}
}
 8008ec0:	e017      	b.n	8008ef2 <user_adBms6830_setFaults+0xea>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2102      	movs	r1, #2
 8008ec6:	480d      	ldr	r0, [pc, #52]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008ec8:	f005 f95a 	bl	800e180 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008ecc:	2201      	movs	r2, #1
 8008ece:	2108      	movs	r1, #8
 8008ed0:	480b      	ldr	r0, [pc, #44]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008ed2:	f005 f955 	bl	800e180 <HAL_GPIO_WritePin>
		if (accy_status == CHARGE_POWER) {
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4b0a      	ldr	r3, [pc, #40]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d107      	bne.n	8008ef2 <user_adBms6830_setFaults+0xea>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	2104      	movs	r1, #4
 8008ee6:	4806      	ldr	r0, [pc, #24]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008ee8:	f005 f94a 	bl	800e180 <HAL_GPIO_WritePin>
			is_charging = 1;
 8008eec:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20001c6a 	.word	0x20001c6a
 8008efc:	48000400 	.word	0x48000400
 8008f00:	48000800 	.word	0x48000800
 8008f04:	20001c70 	.word	0x20001c70
 8008f08:	20001c8c 	.word	0x20001c8c
 8008f0c:	20001c6b 	.word	0x20001c6b

08008f10 <user_adBms6830_getAccyStatus>:

void user_adBms6830_getAccyStatus(void) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
	GPIO_PinState charge_power = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8008f16:	2120      	movs	r1, #32
 8008f18:	4816      	ldr	r0, [pc, #88]	@ (8008f74 <user_adBms6830_getAccyStatus+0x64>)
 8008f1a:	f005 f919 	bl	800e150 <HAL_GPIO_ReadPin>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState ready_power = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8008f22:	2140      	movs	r1, #64	@ 0x40
 8008f24:	4813      	ldr	r0, [pc, #76]	@ (8008f74 <user_adBms6830_getAccyStatus+0x64>)
 8008f26:	f005 f913 	bl	800e150 <HAL_GPIO_ReadPin>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71bb      	strb	r3, [r7, #6]

	if (charge_power == GPIO_PIN_SET && ready_power == GPIO_PIN_SET) {
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d107      	bne.n	8008f44 <user_adBms6830_getAccyStatus+0x34>
 8008f34:	79bb      	ldrb	r3, [r7, #6]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d104      	bne.n	8008f44 <user_adBms6830_getAccyStatus+0x34>
		accy_status = -1;
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f40:	601a      	str	r2, [r3, #0]
	} else if (ready_power == GPIO_PIN_SET) {
		accy_status = READY_POWER;
	} else {
		accy_status = 0;
	}
}
 8008f42:	e012      	b.n	8008f6a <user_adBms6830_getAccyStatus+0x5a>
	} else if (charge_power == GPIO_PIN_SET) {
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d104      	bne.n	8008f54 <user_adBms6830_getAccyStatus+0x44>
		accy_status = CHARGE_POWER;
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f50:	601a      	str	r2, [r3, #0]
}
 8008f52:	e00a      	b.n	8008f6a <user_adBms6830_getAccyStatus+0x5a>
	} else if (ready_power == GPIO_PIN_SET) {
 8008f54:	79bb      	ldrb	r3, [r7, #6]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d104      	bne.n	8008f64 <user_adBms6830_getAccyStatus+0x54>
		accy_status = READY_POWER;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4b06      	ldr	r3, [pc, #24]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f60:	601a      	str	r2, [r3, #0]
}
 8008f62:	e002      	b.n	8008f6a <user_adBms6830_getAccyStatus+0x5a>
		accy_status = 0;
 8008f64:	4b04      	ldr	r3, [pc, #16]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	48000800 	.word	0x48000800
 8008f78:	20001c70 	.word	0x20001c70
 8008f7c:	00000000 	.word	0x00000000

08008f80 <getCurrentSensorData>:
 * @brief Get current sensor data with hysteresis to prevent jumps between ranges
 *
 * This function reads from two ADCs that measure current at different ranges,
 * then applies hysteresis logic to smoothly transition between ranges.
 */
uint8_t getCurrentSensorData(void) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
	int adc1Value = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
	int adc2Value = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61bb      	str	r3, [r7, #24]
	static int current_range = 0;                 // 0: low range, 1: high range
	static const float LOW_TO_HIGH_THRESHOLD = 29.0; // Threshold to switch from low to high
	static const float HIGH_TO_LOW_THRESHOLD = 24.0; // Threshold to switch from high to low

// Start ADC conversions
	HAL_ADC_Start(&hadc1);
 8008f8e:	4872      	ldr	r0, [pc, #456]	@ (8009158 <getCurrentSensorData+0x1d8>)
 8008f90:	f002 ff56 	bl	800be40 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8008f94:	4871      	ldr	r0, [pc, #452]	@ (800915c <getCurrentSensorData+0x1dc>)
 8008f96:	f002 ff53 	bl	800be40 <HAL_ADC_Start>

// Get ADC values with timeout
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8008f9a:	210a      	movs	r1, #10
 8008f9c:	486e      	ldr	r0, [pc, #440]	@ (8009158 <getCurrentSensorData+0x1d8>)
 8008f9e:	f003 f833 	bl	800c008 <HAL_ADC_PollForConversion>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <getCurrentSensorData+0x32>
		adc1Value = HAL_ADC_GetValue(&hadc1);
 8008fa8:	486b      	ldr	r0, [pc, #428]	@ (8009158 <getCurrentSensorData+0x1d8>)
 8008faa:	f003 f933 	bl	800c214 <HAL_ADC_GetValue>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	61fb      	str	r3, [r7, #28]
	}

	if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 8008fb2:	210a      	movs	r1, #10
 8008fb4:	4869      	ldr	r0, [pc, #420]	@ (800915c <getCurrentSensorData+0x1dc>)
 8008fb6:	f003 f827 	bl	800c008 <HAL_ADC_PollForConversion>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d104      	bne.n	8008fca <getCurrentSensorData+0x4a>
		adc2Value = HAL_ADC_GetValue(&hadc2);
 8008fc0:	4866      	ldr	r0, [pc, #408]	@ (800915c <getCurrentSensorData+0x1dc>)
 8008fc2:	f003 f927 	bl	800c214 <HAL_ADC_GetValue>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	61bb      	str	r3, [r7, #24]
	}

// Convert ADC values to voltages
	float v1 = getCurrentVoltage(adc1Value);
 8008fca:	69f8      	ldr	r0, [r7, #28]
 8008fcc:	f000 f8dc 	bl	8009188 <getCurrentVoltage>
 8008fd0:	ed87 0a05 	vstr	s0, [r7, #20]
	float v2 = getCurrentVoltage(adc2Value);
 8008fd4:	69b8      	ldr	r0, [r7, #24]
 8008fd6:	f000 f8d7 	bl	8009188 <getCurrentVoltage>
 8008fda:	ed87 0a04 	vstr	s0, [r7, #16]

// Calculate current from both ranges
	float current_high = 159.6343 * v2 - 401.4685;
 8008fde:	6938      	ldr	r0, [r7, #16]
 8008fe0:	f7f7 faba 	bl	8000558 <__aeabi_f2d>
 8008fe4:	a354      	add	r3, pc, #336	@ (adr r3, 8009138 <getCurrentSensorData+0x1b8>)
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f7f7 fb0d 	bl	8000608 <__aeabi_dmul>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	a352      	add	r3, pc, #328	@ (adr r3, 8009140 <getCurrentSensorData+0x1c0>)
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f7f7 f94c 	bl	8000298 <__aeabi_dsub>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4610      	mov	r0, r2
 8009006:	4619      	mov	r1, r3
 8009008:	f7f7 fdf6 	bl	8000bf8 <__aeabi_d2f>
 800900c:	4603      	mov	r3, r0
 800900e:	60fb      	str	r3, [r7, #12]
	float current_low = 13.2615 * v1 - 34.3672;
 8009010:	6978      	ldr	r0, [r7, #20]
 8009012:	f7f7 faa1 	bl	8000558 <__aeabi_f2d>
 8009016:	a34c      	add	r3, pc, #304	@ (adr r3, 8009148 <getCurrentSensorData+0x1c8>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 faf4 	bl	8000608 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	a349      	add	r3, pc, #292	@ (adr r3, 8009150 <getCurrentSensorData+0x1d0>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f933 	bl	8000298 <__aeabi_dsub>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4610      	mov	r0, r2
 8009038:	4619      	mov	r1, r3
 800903a:	f7f7 fddd 	bl	8000bf8 <__aeabi_d2f>
 800903e:	4603      	mov	r3, r0
 8009040:	60bb      	str	r3, [r7, #8]

	if (fabs(current_high) > 400.0) {
 8009042:	edd7 7a03 	vldr	s15, [r7, #12]
 8009046:	eef0 7ae7 	vabs.f32	s15, s15
 800904a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009160 <getCurrentSensorData+0x1e0>
 800904e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009056:	dd01      	ble.n	800905c <getCurrentSensorData+0xdc>
		return CURRENT_SENSOR_FAULT; // High current sensor out of range
 8009058:	2304      	movs	r3, #4
 800905a:	e068      	b.n	800912e <getCurrentSensorData+0x1ae>
	}

// Apply hysteresis logic to determine range
	float abs_low = fabs(current_low);
 800905c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009060:	eef0 7ae7 	vabs.f32	s15, s15
 8009064:	edc7 7a01 	vstr	s15, [r7, #4]

	if (current_range == 0 && abs_low > LOW_TO_HIGH_THRESHOLD) {
 8009068:	4b3e      	ldr	r3, [pc, #248]	@ (8009164 <getCurrentSensorData+0x1e4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10d      	bne.n	800908c <getCurrentSensorData+0x10c>
 8009070:	4b3d      	ldr	r3, [pc, #244]	@ (8009168 <getCurrentSensorData+0x1e8>)
 8009072:	edd3 7a00 	vldr	s15, [r3]
 8009076:	ed97 7a01 	vldr	s14, [r7, #4]
 800907a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	dd03      	ble.n	800908c <getCurrentSensorData+0x10c>
		// Switch from low range to high range when current exceeds threshold
		current_range = 1;
 8009084:	4b37      	ldr	r3, [pc, #220]	@ (8009164 <getCurrentSensorData+0x1e4>)
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e010      	b.n	80090ae <getCurrentSensorData+0x12e>
	} else if (current_range == 1 && abs_low < HIGH_TO_LOW_THRESHOLD) {
 800908c:	4b35      	ldr	r3, [pc, #212]	@ (8009164 <getCurrentSensorData+0x1e4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d10c      	bne.n	80090ae <getCurrentSensorData+0x12e>
 8009094:	4b35      	ldr	r3, [pc, #212]	@ (800916c <getCurrentSensorData+0x1ec>)
 8009096:	edd3 7a00 	vldr	s15, [r3]
 800909a:	ed97 7a01 	vldr	s14, [r7, #4]
 800909e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d502      	bpl.n	80090ae <getCurrentSensorData+0x12e>
		// Switch from high range to low range when current drops below threshold
		current_range = 0;
 80090a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009164 <getCurrentSensorData+0x1e4>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]
	}

// Select current value based on range with appropriate sign
	if (current_range == 0) {
 80090ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009164 <getCurrentSensorData+0x1e4>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d111      	bne.n	80090da <getCurrentSensorData+0x15a>
		// Use low range value
		if (accy_status == CHARGE_POWER) {
 80090b6:	2302      	movs	r3, #2
 80090b8:	461a      	mov	r2, r3
 80090ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009170 <getCurrentSensorData+0x1f0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d107      	bne.n	80090d2 <getCurrentSensorData+0x152>
			current = -current_low;
 80090c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80090c6:	eef1 7a67 	vneg.f32	s15, s15
 80090ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090cc:	edc3 7a00 	vstr	s15, [r3]
 80090d0:	e014      	b.n	80090fc <getCurrentSensorData+0x17c>
		} else {
			current = current_low;
 80090d2:	4a28      	ldr	r2, [pc, #160]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	e010      	b.n	80090fc <getCurrentSensorData+0x17c>
		}
	} else {
		// Use high range value
		if (accy_status == CHARGE_POWER) {
 80090da:	2302      	movs	r3, #2
 80090dc:	461a      	mov	r2, r3
 80090de:	4b24      	ldr	r3, [pc, #144]	@ (8009170 <getCurrentSensorData+0x1f0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d107      	bne.n	80090f6 <getCurrentSensorData+0x176>
			current = -current_high;
 80090e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80090ea:	eef1 7a67 	vneg.f32	s15, s15
 80090ee:	4b21      	ldr	r3, [pc, #132]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090f0:	edc3 7a00 	vstr	s15, [r3]
 80090f4:	e002      	b.n	80090fc <getCurrentSensorData+0x17c>
		} else {
			current = current_high;
 80090f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6013      	str	r3, [r2, #0]
		}
	}
	if (PRINT_ON) {
	printf("Current Sensor Low Current: ");
 80090fc:	481e      	ldr	r0, [pc, #120]	@ (8009178 <getCurrentSensorData+0x1f8>)
 80090fe:	f00b f903 	bl	8014308 <iprintf>
	printFloat(current_low);
 8009102:	ed97 0a02 	vldr	s0, [r7, #8]
 8009106:	f000 f873 	bl	80091f0 <printFloat>
	printf("Current Sensor High Current: ");
 800910a:	481c      	ldr	r0, [pc, #112]	@ (800917c <getCurrentSensorData+0x1fc>)
 800910c:	f00b f8fc 	bl	8014308 <iprintf>
	printFloat(current_high);
 8009110:	ed97 0a03 	vldr	s0, [r7, #12]
 8009114:	f000 f86c 	bl	80091f0 <printFloat>
	printf("Selected Current: ");
 8009118:	4819      	ldr	r0, [pc, #100]	@ (8009180 <getCurrentSensorData+0x200>)
 800911a:	f00b f8f5 	bl	8014308 <iprintf>
	printFloat(current);
 800911e:	4b15      	ldr	r3, [pc, #84]	@ (8009174 <getCurrentSensorData+0x1f4>)
 8009120:	edd3 7a00 	vldr	s15, [r3]
 8009124:	eeb0 0a67 	vmov.f32	s0, s15
 8009128:	f000 f862 	bl	80091f0 <printFloat>
	}

	return 0; // Return 0 to indicate success
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3720      	adds	r7, #32
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	2f837b4a 	.word	0x2f837b4a
 800913c:	4063f44c 	.word	0x4063f44c
 8009140:	f9db22d1 	.word	0xf9db22d1
 8009144:	4079177e 	.word	0x4079177e
 8009148:	53f7ced9 	.word	0x53f7ced9
 800914c:	402a85e3 	.word	0x402a85e3
 8009150:	68db8bac 	.word	0x68db8bac
 8009154:	40412f00 	.word	0x40412f00
 8009158:	20001e14 	.word	0x20001e14
 800915c:	20001e80 	.word	0x20001e80
 8009160:	43c80000 	.word	0x43c80000
 8009164:	20001e04 	.word	0x20001e04
 8009168:	08018104 	.word	0x08018104
 800916c:	08018108 	.word	0x08018108
 8009170:	20001c70 	.word	0x20001c70
 8009174:	20001c74 	.word	0x20001c74
 8009178:	08017e60 	.word	0x08017e60
 800917c:	08017e80 	.word	0x08017e80
 8009180:	08017ea0 	.word	0x08017ea0
 8009184:	00000000 	.word	0x00000000

08009188 <getCurrentVoltage>:

float getCurrentVoltage(int value) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	return 0.001444863364 * (float) value + 0.110218620256712;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800919a:	ee17 0a90 	vmov	r0, s15
 800919e:	f7f7 f9db 	bl	8000558 <__aeabi_f2d>
 80091a2:	a30f      	add	r3, pc, #60	@ (adr r3, 80091e0 <getCurrentVoltage+0x58>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 fa2e 	bl	8000608 <__aeabi_dmul>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4610      	mov	r0, r2
 80091b2:	4619      	mov	r1, r3
 80091b4:	a30c      	add	r3, pc, #48	@ (adr r3, 80091e8 <getCurrentVoltage+0x60>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f86f 	bl	800029c <__adddf3>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4610      	mov	r0, r2
 80091c4:	4619      	mov	r1, r3
 80091c6:	f7f7 fd17 	bl	8000bf8 <__aeabi_d2f>
 80091ca:	4603      	mov	r3, r0
 80091cc:	ee07 3a90 	vmov	s15, r3
}
 80091d0:	eeb0 0a67 	vmov.f32	s0, s15
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	f3af 8000 	nop.w
 80091e0:	3950feba 	.word	0x3950feba
 80091e4:	3f57ac32 	.word	0x3f57ac32
 80091e8:	9969aea6 	.word	0x9969aea6
 80091ec:	3fbc3749 	.word	0x3fbc3749

080091f0 <printFloat>:

void printFloat(float num) {
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	ed87 0a01 	vstr	s0, [r7, #4]
	int intPart = (int) num;
 80091fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80091fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009202:	ee17 3a90 	vmov	r3, s15
 8009206:	60fb      	str	r3, [r7, #12]
	int fracPart = (int) (fabs(num - intPart) * 10000 + 0.5f);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009212:	ed97 7a01 	vldr	s14, [r7, #4]
 8009216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800921a:	eef0 7ae7 	vabs.f32	s15, s15
 800921e:	ee17 0a90 	vmov	r0, s15
 8009222:	f7f7 f999 	bl	8000558 <__aeabi_f2d>
 8009226:	a312      	add	r3, pc, #72	@ (adr r3, 8009270 <printFloat+0x80>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f7 f9ec 	bl	8000608 <__aeabi_dmul>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4610      	mov	r0, r2
 8009236:	4619      	mov	r1, r3
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	4b0a      	ldr	r3, [pc, #40]	@ (8009268 <printFloat+0x78>)
 800923e:	f7f7 f82d 	bl	800029c <__adddf3>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	f7f7 fc8d 	bl	8000b68 <__aeabi_d2iz>
 800924e:	4603      	mov	r3, r0
 8009250:	60bb      	str	r3, [r7, #8]
	printf("%d.%04d\n", intPart, fracPart);
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	68f9      	ldr	r1, [r7, #12]
 8009256:	4805      	ldr	r0, [pc, #20]	@ (800926c <printFloat+0x7c>)
 8009258:	f00b f856 	bl	8014308 <iprintf>
}
 800925c:	bf00      	nop
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	f3af 8000 	nop.w
 8009268:	3fe00000 	.word	0x3fe00000
 800926c:	08017eb4 	.word	0x08017eb4
 8009270:	00000000 	.word	0x00000000
 8009274:	40c38800 	.word	0x40c38800

08009278 <getPackVoltage>:

// Function to get pack voltage and update lowest, highest, and average cell voltages
float getPackVoltage(int totalIC, cell_asic *ICs) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	float pack_voltage_sum = 0.0f;
 8009282:	f04f 0300 	mov.w	r3, #0
 8009286:	617b      	str	r3, [r7, #20]
	lowest_cell = 100.0f; // Initialize to a high value
 8009288:	4b31      	ldr	r3, [pc, #196]	@ (8009350 <getPackVoltage+0xd8>)
 800928a:	4a32      	ldr	r2, [pc, #200]	@ (8009354 <getPackVoltage+0xdc>)
 800928c:	601a      	str	r2, [r3, #0]
	highest_cell = 0.0f;  // Initialize to a low value
 800928e:	4b32      	ldr	r3, [pc, #200]	@ (8009358 <getPackVoltage+0xe0>)
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < totalIC; i++) {
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	e03d      	b.n	8009318 <getPackVoltage+0xa0>
		for (int j = 0; j < NUM_CELLS_PER_IC; j++) {
 800929c:	2300      	movs	r3, #0
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e034      	b.n	800930c <getPackVoltage+0x94>
			float cell_voltage = getVoltage(ICs[i].cell.c_codes[j]);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	4413      	add	r3, r2
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	3210      	adds	r2, #16
 80092b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe fd7d 	bl	8007db8 <getVoltage>
 80092be:	ed87 0a02 	vstr	s0, [r7, #8]
			pack_voltage_sum += cell_voltage;
 80092c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80092c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80092ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ce:	edc7 7a05 	vstr	s15, [r7, #20]
			if (cell_voltage < lowest_cell) {
 80092d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009350 <getPackVoltage+0xd8>)
 80092d4:	edd3 7a00 	vldr	s15, [r3]
 80092d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80092dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e4:	d502      	bpl.n	80092ec <getPackVoltage+0x74>
				lowest_cell = cell_voltage;
 80092e6:	4a1a      	ldr	r2, [pc, #104]	@ (8009350 <getPackVoltage+0xd8>)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6013      	str	r3, [r2, #0]
			}
			if (cell_voltage > highest_cell) {
 80092ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009358 <getPackVoltage+0xe0>)
 80092ee:	edd3 7a00 	vldr	s15, [r3]
 80092f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80092f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fe:	dd02      	ble.n	8009306 <getPackVoltage+0x8e>
				highest_cell = cell_voltage;
 8009300:	4a15      	ldr	r2, [pc, #84]	@ (8009358 <getPackVoltage+0xe0>)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < NUM_CELLS_PER_IC; j++) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b09      	cmp	r3, #9
 8009310:	ddc7      	ble.n	80092a2 <getPackVoltage+0x2a>
	for (int i = 0; i < totalIC; i++) {
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3301      	adds	r3, #1
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	dbbd      	blt.n	800929c <getPackVoltage+0x24>
			}
		}
	}
	avg_cell = pack_voltage_sum / (totalIC * NUM_CELLS_PER_IC);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009332:	edd7 6a05 	vldr	s13, [r7, #20]
 8009336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800933a:	4b08      	ldr	r3, [pc, #32]	@ (800935c <getPackVoltage+0xe4>)
 800933c:	edc3 7a00 	vstr	s15, [r3]

	return pack_voltage_sum;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
}
 8009346:	eeb0 0a67 	vmov.f32	s0, s15
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20001c7c 	.word	0x20001c7c
 8009354:	42c80000 	.word	0x42c80000
 8009358:	20001c80 	.word	0x20001c80
 800935c:	20001c84 	.word	0x20001c84

08009360 <updateSOC>:

#define SOC_READ_TIMEOUT 30000 // wait time before it takes a SOC read based off settled voltage, in ms
uint32_t lastNonZeroCurrentTime = 0;
uint8_t waitingForSOCReinit = 0;

float updateSOC() {
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
	if (cell_fault != 0) {
 8009366:	4b7d      	ldr	r3, [pc, #500]	@ (800955c <updateSOC+0x1fc>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d006      	beq.n	800937c <updateSOC+0x1c>
		soc = 0.0f;
 800936e:	4b7c      	ldr	r3, [pc, #496]	@ (8009560 <updateSOC+0x200>)
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
		return soc;
 8009376:	4b7a      	ldr	r3, [pc, #488]	@ (8009560 <updateSOC+0x200>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	e0e8      	b.n	800954e <updateSOC+0x1ee>
	}


	soc = voltagetoSOC(avg_cell);
 800937c:	4b79      	ldr	r3, [pc, #484]	@ (8009564 <updateSOC+0x204>)
 800937e:	edd3 7a00 	vldr	s15, [r3]
 8009382:	eeb0 0a67 	vmov.f32	s0, s15
 8009386:	f000 fa63 	bl	8009850 <voltagetoSOC>
 800938a:	eef0 7a40 	vmov.f32	s15, s0
 800938e:	4b74      	ldr	r3, [pc, #464]	@ (8009560 <updateSOC+0x200>)
 8009390:	edc3 7a00 	vstr	s15, [r3]
	if (soc > 50) {
 8009394:	4b72      	ldr	r3, [pc, #456]	@ (8009560 <updateSOC+0x200>)
 8009396:	edd3 7a00 	vldr	s15, [r3]
 800939a:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8009568 <updateSOC+0x208>
 800939e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a6:	dd0c      	ble.n	80093c2 <updateSOC+0x62>
		soc = voltagetoSOC(highest_cell);
 80093a8:	4b70      	ldr	r3, [pc, #448]	@ (800956c <updateSOC+0x20c>)
 80093aa:	edd3 7a00 	vldr	s15, [r3]
 80093ae:	eeb0 0a67 	vmov.f32	s0, s15
 80093b2:	f000 fa4d 	bl	8009850 <voltagetoSOC>
 80093b6:	eef0 7a40 	vmov.f32	s15, s0
 80093ba:	4b69      	ldr	r3, [pc, #420]	@ (8009560 <updateSOC+0x200>)
 80093bc:	edc3 7a00 	vstr	s15, [r3]
 80093c0:	e015      	b.n	80093ee <updateSOC+0x8e>
	} else if (soc < 50) {
 80093c2:	4b67      	ldr	r3, [pc, #412]	@ (8009560 <updateSOC+0x200>)
 80093c4:	edd3 7a00 	vldr	s15, [r3]
 80093c8:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8009568 <updateSOC+0x208>
 80093cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d4:	d50b      	bpl.n	80093ee <updateSOC+0x8e>
		soc = voltagetoSOC(lowest_cell);
 80093d6:	4b66      	ldr	r3, [pc, #408]	@ (8009570 <updateSOC+0x210>)
 80093d8:	edd3 7a00 	vldr	s15, [r3]
 80093dc:	eeb0 0a67 	vmov.f32	s0, s15
 80093e0:	f000 fa36 	bl	8009850 <voltagetoSOC>
 80093e4:	eef0 7a40 	vmov.f32	s15, s0
 80093e8:	4b5d      	ldr	r3, [pc, #372]	@ (8009560 <updateSOC+0x200>)
 80093ea:	edc3 7a00 	vstr	s15, [r3]
	}

	uint32_t current_time = HAL_GetTick();
 80093ee:	f002 f911 	bl	800b614 <HAL_GetTick>
 80093f2:	60f8      	str	r0, [r7, #12]

	if (fabs(current) < REST_CURRENT_THRESHOLD) {
 80093f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009574 <updateSOC+0x214>)
 80093f6:	edd3 7a00 	vldr	s15, [r3]
 80093fa:	eef0 7ae7 	vabs.f32	s15, s15
 80093fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940a:	d50d      	bpl.n	8009428 <updateSOC+0xc8>
		if (!is_resting) {
 800940c:	4b5a      	ldr	r3, [pc, #360]	@ (8009578 <updateSOC+0x218>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	f083 0301 	eor.w	r3, r3, #1
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d009      	beq.n	800942e <updateSOC+0xce>
			is_resting = true;
 800941a:	4b57      	ldr	r3, [pc, #348]	@ (8009578 <updateSOC+0x218>)
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
			rest_start_time = current_time;
 8009420:	4a56      	ldr	r2, [pc, #344]	@ (800957c <updateSOC+0x21c>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	e002      	b.n	800942e <updateSOC+0xce>
		}
	} else {
		is_resting = false;
 8009428:	4b53      	ldr	r3, [pc, #332]	@ (8009578 <updateSOC+0x218>)
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
	}

	if (is_resting && (current_time - rest_start_time > REST_DURATION_MS)) {
 800942e:	4b52      	ldr	r3, [pc, #328]	@ (8009578 <updateSOC+0x218>)
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d01e      	beq.n	8009474 <updateSOC+0x114>
 8009436:	4b51      	ldr	r3, [pc, #324]	@ (800957c <updateSOC+0x21c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	4a50      	ldr	r2, [pc, #320]	@ (8009580 <updateSOC+0x220>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d917      	bls.n	8009474 <updateSOC+0x114>
		soc = voltagetoSOC(avg_cell);
 8009444:	4b47      	ldr	r3, [pc, #284]	@ (8009564 <updateSOC+0x204>)
 8009446:	edd3 7a00 	vldr	s15, [r3]
 800944a:	eeb0 0a67 	vmov.f32	s0, s15
 800944e:	f000 f9ff 	bl	8009850 <voltagetoSOC>
 8009452:	eef0 7a40 	vmov.f32	s15, s0
 8009456:	4b42      	ldr	r3, [pc, #264]	@ (8009560 <updateSOC+0x200>)
 8009458:	edc3 7a00 	vstr	s15, [r3]

		// reset the coloumb counter
		coulombs = 0.0f;
 800945c:	4b49      	ldr	r3, [pc, #292]	@ (8009584 <updateSOC+0x224>)
 800945e:	f04f 0200 	mov.w	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
		initial_soc = soc;
 8009464:	4b3e      	ldr	r3, [pc, #248]	@ (8009560 <updateSOC+0x200>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a47      	ldr	r2, [pc, #284]	@ (8009588 <updateSOC+0x228>)
 800946a:	6013      	str	r3, [r2, #0]

		rest_start_time = current_time;
 800946c:	4a43      	ldr	r2, [pc, #268]	@ (800957c <updateSOC+0x21c>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	e051      	b.n	8009518 <updateSOC+0x1b8>
	}

	// coloumb counting
	else {
		if (initial_soc < 0.0f) {
 8009474:	4b44      	ldr	r3, [pc, #272]	@ (8009588 <updateSOC+0x228>)
 8009476:	edd3 7a00 	vldr	s15, [r3]
 800947a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009482:	d512      	bpl.n	80094aa <updateSOC+0x14a>
			initial_soc = voltagetoSOC(avg_cell);
 8009484:	4b37      	ldr	r3, [pc, #220]	@ (8009564 <updateSOC+0x204>)
 8009486:	edd3 7a00 	vldr	s15, [r3]
 800948a:	eeb0 0a67 	vmov.f32	s0, s15
 800948e:	f000 f9df 	bl	8009850 <voltagetoSOC>
 8009492:	eef0 7a40 	vmov.f32	s15, s0
 8009496:	4b3c      	ldr	r3, [pc, #240]	@ (8009588 <updateSOC+0x228>)
 8009498:	edc3 7a00 	vstr	s15, [r3]
			soc = initial_soc;
 800949c:	4b3a      	ldr	r3, [pc, #232]	@ (8009588 <updateSOC+0x228>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a2f      	ldr	r2, [pc, #188]	@ (8009560 <updateSOC+0x200>)
 80094a2:	6013      	str	r3, [r2, #0]
			last_time = current_time;
 80094a4:	4a39      	ldr	r2, [pc, #228]	@ (800958c <updateSOC+0x22c>)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6013      	str	r3, [r2, #0]
		}

		float delta_t_sec = (current_time - last_time) / 1000.0f;
 80094aa:	4b38      	ldr	r3, [pc, #224]	@ (800958c <updateSOC+0x22c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094ba:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8009590 <updateSOC+0x230>
 80094be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094c2:	edc7 7a02 	vstr	s15, [r7, #8]
		last_time = current_time;
 80094c6:	4a31      	ldr	r2, [pc, #196]	@ (800958c <updateSOC+0x22c>)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6013      	str	r3, [r2, #0]


		coulombs += current * delta_t_sec;
 80094cc:	4b29      	ldr	r3, [pc, #164]	@ (8009574 <updateSOC+0x214>)
 80094ce:	ed93 7a00 	vldr	s14, [r3]
 80094d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80094d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094da:	4b2a      	ldr	r3, [pc, #168]	@ (8009584 <updateSOC+0x224>)
 80094dc:	edd3 7a00 	vldr	s15, [r3]
 80094e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e4:	4b27      	ldr	r3, [pc, #156]	@ (8009584 <updateSOC+0x224>)
 80094e6:	edc3 7a00 	vstr	s15, [r3]

		float soc_change_percent = (coulombs / BATTERY_CAPACITY_COULOMBS) * 100.0f;
 80094ea:	4b26      	ldr	r3, [pc, #152]	@ (8009584 <updateSOC+0x224>)
 80094ec:	ed93 7a00 	vldr	s14, [r3]
 80094f0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8009594 <updateSOC+0x234>
 80094f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094f8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8009598 <updateSOC+0x238>
 80094fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009500:	edc7 7a01 	vstr	s15, [r7, #4]
		soc = initial_soc - soc_change_percent;
 8009504:	4b20      	ldr	r3, [pc, #128]	@ (8009588 <updateSOC+0x228>)
 8009506:	ed93 7a00 	vldr	s14, [r3]
 800950a:	edd7 7a01 	vldr	s15, [r7, #4]
 800950e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009512:	4b13      	ldr	r3, [pc, #76]	@ (8009560 <updateSOC+0x200>)
 8009514:	edc3 7a00 	vstr	s15, [r3]
	}

	if (soc > 100.0f) {
 8009518:	4b11      	ldr	r3, [pc, #68]	@ (8009560 <updateSOC+0x200>)
 800951a:	edd3 7a00 	vldr	s15, [r3]
 800951e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8009598 <updateSOC+0x238>
 8009522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952a:	dd02      	ble.n	8009532 <updateSOC+0x1d2>
		soc = 100.0f;
 800952c:	4b0c      	ldr	r3, [pc, #48]	@ (8009560 <updateSOC+0x200>)
 800952e:	4a1b      	ldr	r2, [pc, #108]	@ (800959c <updateSOC+0x23c>)
 8009530:	601a      	str	r2, [r3, #0]
	}
	if (soc < 0.0f) {
 8009532:	4b0b      	ldr	r3, [pc, #44]	@ (8009560 <updateSOC+0x200>)
 8009534:	edd3 7a00 	vldr	s15, [r3]
 8009538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009540:	d503      	bpl.n	800954a <updateSOC+0x1ea>
		soc = 0.0f;
 8009542:	4b07      	ldr	r3, [pc, #28]	@ (8009560 <updateSOC+0x200>)
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
//    last_time = current_time;
//
//    // Coulomb counting to track SOC
//    coulombs += current * delta_t_sec;
//    soc = initial_soc - 100 * (coulombs / 64800000.0f); // 64800000 is the amount of total coulombs in 18000 Ah (in percentage)
	return soc;
 800954a:	4b05      	ldr	r3, [pc, #20]	@ (8009560 <updateSOC+0x200>)
 800954c:	681b      	ldr	r3, [r3, #0]
}
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eeb0 0a67 	vmov.f32	s0, s15
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20001c6a 	.word	0x20001c6a
 8009560:	20001c78 	.word	0x20001c78
 8009564:	20001c84 	.word	0x20001c84
 8009568:	42480000 	.word	0x42480000
 800956c:	20001c80 	.word	0x20001c80
 8009570:	20001c7c 	.word	0x20001c7c
 8009574:	20001c74 	.word	0x20001c74
 8009578:	20001cbc 	.word	0x20001cbc
 800957c:	20001cb8 	.word	0x20001cb8
 8009580:	0002bf20 	.word	0x0002bf20
 8009584:	20001cb0 	.word	0x20001cb0
 8009588:	2000004c 	.word	0x2000004c
 800958c:	20001cb4 	.word	0x20001cb4
 8009590:	447a0000 	.word	0x447a0000
 8009594:	477d2000 	.word	0x477d2000
 8009598:	42c80000 	.word	0x42c80000
 800959c:	42c80000 	.word	0x42c80000

080095a0 <fanPWMControl>:
 * an open-drain pin where LOWER PWM values result in HIGHER fan speeds.
 *
 * @param max_temp Current maximum cell temperature in Celsius
 * @param htimPWM Timer handle for PWM output
 */
void fanPWMControl(float max_temp, TIM_HandleTypeDef *htimPWM) {
 80095a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095a4:	b090      	sub	sp, #64	@ 0x40
 80095a6:	af08      	add	r7, sp, #32
 80095a8:	ed87 0a01 	vstr	s0, [r7, #4]
 80095ac:	6038      	str	r0, [r7, #0]
	static const float MIN_TEMP = 25.0f;    // Start fans at this temperature
	static const float TARGET_TEMP = 40.0f; // Target temperature
	static const float MAX_TEMP = 55.0f;    // Maximum allowed temperature

// Get current time for delta calculation
	uint32_t current_time = HAL_GetTick();
 80095ae:	f002 f831 	bl	800b614 <HAL_GetTick>
 80095b2:	6178      	str	r0, [r7, #20]
	float delta_time =
			(prev_time == 0) ? 1.0f : (current_time - prev_time) / 1000.0f; // In seconds
 80095b4:	4b94      	ldr	r3, [pc, #592]	@ (8009808 <fanPWMControl+0x268>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00c      	beq.n	80095d6 <fanPWMControl+0x36>
 80095bc:	4b92      	ldr	r3, [pc, #584]	@ (8009808 <fanPWMControl+0x268>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095cc:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800980c <fanPWMControl+0x26c>
 80095d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095d4:	e001      	b.n	80095da <fanPWMControl+0x3a>
 80095d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
	float delta_time =
 80095da:	edc7 7a07 	vstr	s15, [r7, #28]
	prev_time = current_time;
 80095de:	4a8a      	ldr	r2, [pc, #552]	@ (8009808 <fanPWMControl+0x268>)
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	6013      	str	r3, [r2, #0]

// Prevent integral windup by limiting delta time
	if (delta_time > 5.0f)
 80095e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80095e8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80095ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f4:	dd02      	ble.n	80095fc <fanPWMControl+0x5c>
		delta_time = 1.0f;
 80095f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80095fa:	61fb      	str	r3, [r7, #28]

// If temperature is below minimum threshold, turn off fans
	if (max_temp < MIN_TEMP) {
 80095fc:	4b84      	ldr	r3, [pc, #528]	@ (8009810 <fanPWMControl+0x270>)
 80095fe:	edd3 7a00 	vldr	s15, [r3]
 8009602:	ed97 7a01 	vldr	s14, [r7, #4]
 8009606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960e:	d511      	bpl.n	8009634 <fanPWMControl+0x94>
		__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_4, htimPWM->Init.Period); // Full OFF (max value in open drain)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	68d2      	ldr	r2, [r2, #12]
 8009618:	641a      	str	r2, [r3, #64]	@ 0x40
		fan_status = 0.0f;
 800961a:	4b7e      	ldr	r3, [pc, #504]	@ (8009814 <fanPWMControl+0x274>)
 800961c:	f04f 0200 	mov.w	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
		integral = 0.0f; // Reset integral term
 8009622:	4b7d      	ldr	r3, [pc, #500]	@ (8009818 <fanPWMControl+0x278>)
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
		prev_error = 0.0f;
 800962a:	4b7c      	ldr	r3, [pc, #496]	@ (800981c <fanPWMControl+0x27c>)
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
		return;
 8009632:	e0e5      	b.n	8009800 <fanPWMControl+0x260>
	}

// Calculate error (positive error means we're above target temp)
	float error = max_temp - TARGET_TEMP;
 8009634:	4b7a      	ldr	r3, [pc, #488]	@ (8009820 <fanPWMControl+0x280>)
 8009636:	edd3 7a00 	vldr	s15, [r3]
 800963a:	ed97 7a01 	vldr	s14, [r7, #4]
 800963e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009642:	edc7 7a04 	vstr	s15, [r7, #16]

// Compute integral with anti-windup
	integral += error * delta_time;
 8009646:	ed97 7a04 	vldr	s14, [r7, #16]
 800964a:	edd7 7a07 	vldr	s15, [r7, #28]
 800964e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009652:	4b71      	ldr	r3, [pc, #452]	@ (8009818 <fanPWMControl+0x278>)
 8009654:	edd3 7a00 	vldr	s15, [r3]
 8009658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800965c:	4b6e      	ldr	r3, [pc, #440]	@ (8009818 <fanPWMControl+0x278>)
 800965e:	edc3 7a00 	vstr	s15, [r3]

// Limit integral to prevent excessive buildup
	if (integral > 100.0f)
 8009662:	4b6d      	ldr	r3, [pc, #436]	@ (8009818 <fanPWMControl+0x278>)
 8009664:	edd3 7a00 	vldr	s15, [r3]
 8009668:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8009824 <fanPWMControl+0x284>
 800966c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009674:	dd02      	ble.n	800967c <fanPWMControl+0xdc>
		integral = 100.0f;
 8009676:	4b68      	ldr	r3, [pc, #416]	@ (8009818 <fanPWMControl+0x278>)
 8009678:	4a6b      	ldr	r2, [pc, #428]	@ (8009828 <fanPWMControl+0x288>)
 800967a:	601a      	str	r2, [r3, #0]
	if (integral < -100.0f)
 800967c:	4b66      	ldr	r3, [pc, #408]	@ (8009818 <fanPWMControl+0x278>)
 800967e:	edd3 7a00 	vldr	s15, [r3]
 8009682:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800982c <fanPWMControl+0x28c>
 8009686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800968a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968e:	d502      	bpl.n	8009696 <fanPWMControl+0xf6>
		integral = -100.0f;
 8009690:	4b61      	ldr	r3, [pc, #388]	@ (8009818 <fanPWMControl+0x278>)
 8009692:	4a67      	ldr	r2, [pc, #412]	@ (8009830 <fanPWMControl+0x290>)
 8009694:	601a      	str	r2, [r3, #0]

// If we're below target, slowly reduce integral
	if (error < 0 && integral > 0) {
 8009696:	edd7 7a04 	vldr	s15, [r7, #16]
 800969a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800969e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a2:	d511      	bpl.n	80096c8 <fanPWMControl+0x128>
 80096a4:	4b5c      	ldr	r3, [pc, #368]	@ (8009818 <fanPWMControl+0x278>)
 80096a6:	edd3 7a00 	vldr	s15, [r3]
 80096aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	dd09      	ble.n	80096c8 <fanPWMControl+0x128>
		integral *= 0.95f; // Decay integral when under target temp
 80096b4:	4b58      	ldr	r3, [pc, #352]	@ (8009818 <fanPWMControl+0x278>)
 80096b6:	edd3 7a00 	vldr	s15, [r3]
 80096ba:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8009834 <fanPWMControl+0x294>
 80096be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096c2:	4b55      	ldr	r3, [pc, #340]	@ (8009818 <fanPWMControl+0x278>)
 80096c4:	edc3 7a00 	vstr	s15, [r3]
	}

// Compute derivative
	float derivative =
			(delta_time > 0.0f) ? (error - prev_error) / delta_time : 0.0f;
 80096c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80096cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d4:	dd0b      	ble.n	80096ee <fanPWMControl+0x14e>
 80096d6:	4b51      	ldr	r3, [pc, #324]	@ (800981c <fanPWMControl+0x27c>)
 80096d8:	edd3 7a00 	vldr	s15, [r3]
 80096dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80096e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80096e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80096e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ec:	e001      	b.n	80096f2 <fanPWMControl+0x152>
 80096ee:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8009838 <fanPWMControl+0x298>
	float derivative =
 80096f2:	edc7 7a03 	vstr	s15, [r7, #12]
	prev_error = error;
 80096f6:	4a49      	ldr	r2, [pc, #292]	@ (800981c <fanPWMControl+0x27c>)
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6013      	str	r3, [r2, #0]

// Calculate PID output (0.0 = no fan, 1.0 = max fan)
	float pid_output = Kp * error + Ki * integral + Kd * derivative;
 80096fc:	4b4f      	ldr	r3, [pc, #316]	@ (800983c <fanPWMControl+0x29c>)
 80096fe:	ed93 7a00 	vldr	s14, [r3]
 8009702:	edd7 7a04 	vldr	s15, [r7, #16]
 8009706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800970a:	4b4d      	ldr	r3, [pc, #308]	@ (8009840 <fanPWMControl+0x2a0>)
 800970c:	edd3 6a00 	vldr	s13, [r3]
 8009710:	4b41      	ldr	r3, [pc, #260]	@ (8009818 <fanPWMControl+0x278>)
 8009712:	edd3 7a00 	vldr	s15, [r3]
 8009716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800971a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800971e:	4b49      	ldr	r3, [pc, #292]	@ (8009844 <fanPWMControl+0x2a4>)
 8009720:	edd3 6a00 	vldr	s13, [r3]
 8009724:	edd7 7a03 	vldr	s15, [r7, #12]
 8009728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800972c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009730:	edc7 7a06 	vstr	s15, [r7, #24]

// Emergency override for high temperatures
	if (max_temp >= MAX_TEMP) {
 8009734:	4b44      	ldr	r3, [pc, #272]	@ (8009848 <fanPWMControl+0x2a8>)
 8009736:	edd3 7a00 	vldr	s15, [r3]
 800973a:	ed97 7a01 	vldr	s14, [r7, #4]
 800973e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	db02      	blt.n	800974e <fanPWMControl+0x1ae>
		pid_output = 1.0f; // Maximum fan speed
 8009748:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800974c:	61bb      	str	r3, [r7, #24]
	}

// Limit output range between 0.0 and 1.0
	if (pid_output < 0.0f)
 800974e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975a:	d502      	bpl.n	8009762 <fanPWMControl+0x1c2>
		pid_output = 0.0f;
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	61bb      	str	r3, [r7, #24]
	if (pid_output > 1.0f)
 8009762:	edd7 7a06 	vldr	s15, [r7, #24]
 8009766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800976a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	dd02      	ble.n	800977a <fanPWMControl+0x1da>
		pid_output = 1.0f;
 8009774:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009778:	61bb      	str	r3, [r7, #24]

// Calculate PWM value - NOTE: Value is inverted (1.0 = no fans, 0.0 = max fans)
// Scale between 0 and Init.Period in inverted fashion
	uint32_t pwm_value = (uint32_t) (htimPWM->Init.Period * (1.0f - pid_output));
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800978a:	edd7 7a06 	vldr	s15, [r7, #24]
 800978e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800979a:	ee17 3a90 	vmov	r3, s15
 800979e:	60bb      	str	r3, [r7, #8]

// Update PWM output
	__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_4, pwm_value);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	641a      	str	r2, [r3, #64]	@ 0x40

// Store current fan status (as percentage of max speed)
	fan_status = pid_output * 100.0f;
 80097a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80097ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009824 <fanPWMControl+0x284>
 80097b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097b4:	4b17      	ldr	r3, [pc, #92]	@ (8009814 <fanPWMControl+0x274>)
 80097b6:	edc3 7a00 	vstr	s15, [r3]

// Debug output
	if (PRINT_ON) printf("Temp: %.1f°C, Error: %.1f, PID: %.2f, Fan: %.0f%%, PWM: %lu\r\n",
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7f6 fecc 	bl	8000558 <__aeabi_f2d>
 80097c0:	4682      	mov	sl, r0
 80097c2:	468b      	mov	fp, r1
 80097c4:	6938      	ldr	r0, [r7, #16]
 80097c6:	f7f6 fec7 	bl	8000558 <__aeabi_f2d>
 80097ca:	4604      	mov	r4, r0
 80097cc:	460d      	mov	r5, r1
 80097ce:	69b8      	ldr	r0, [r7, #24]
 80097d0:	f7f6 fec2 	bl	8000558 <__aeabi_f2d>
 80097d4:	4680      	mov	r8, r0
 80097d6:	4689      	mov	r9, r1
 80097d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <fanPWMControl+0x274>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7f6 febb 	bl	8000558 <__aeabi_f2d>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	68b9      	ldr	r1, [r7, #8]
 80097e8:	9106      	str	r1, [sp, #24]
 80097ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80097f2:	e9cd 4500 	strd	r4, r5, [sp]
 80097f6:	4652      	mov	r2, sl
 80097f8:	465b      	mov	r3, fp
 80097fa:	4814      	ldr	r0, [pc, #80]	@ (800984c <fanPWMControl+0x2ac>)
 80097fc:	f00a fd84 	bl	8014308 <iprintf>
			max_temp, error, pid_output, fan_status, pwm_value);
}
 8009800:	3720      	adds	r7, #32
 8009802:	46bd      	mov	sp, r7
 8009804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009808:	20001e08 	.word	0x20001e08
 800980c:	447a0000 	.word	0x447a0000
 8009810:	0801810c 	.word	0x0801810c
 8009814:	20001cac 	.word	0x20001cac
 8009818:	20001e0c 	.word	0x20001e0c
 800981c:	20001e10 	.word	0x20001e10
 8009820:	08018110 	.word	0x08018110
 8009824:	42c80000 	.word	0x42c80000
 8009828:	42c80000 	.word	0x42c80000
 800982c:	c2c80000 	.word	0xc2c80000
 8009830:	c2c80000 	.word	0xc2c80000
 8009834:	3f733333 	.word	0x3f733333
 8009838:	00000000 	.word	0x00000000
 800983c:	08018114 	.word	0x08018114
 8009840:	08018118 	.word	0x08018118
 8009844:	0801811c 	.word	0x0801811c
 8009848:	08018120 	.word	0x08018120
 800984c:	08017ec0 	.word	0x08017ec0

08009850 <voltagetoSOC>:

float voltagetoSOC(float voltage) {
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	ed87 0a01 	vstr	s0, [r7, #4]
	if (voltage <= 2.5f)
 800985a:	edd7 7a01 	vldr	s15, [r7, #4]
 800985e:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8009862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986a:	d802      	bhi.n	8009872 <voltagetoSOC+0x22>
		return 0.0f;
 800986c:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8009a3c <voltagetoSOC+0x1ec>
 8009870:	e0dd      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 3.15f)
 8009872:	edd7 7a01 	vldr	s15, [r7, #4]
 8009876:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8009a40 <voltagetoSOC+0x1f0>
 800987a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800987e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009882:	d50e      	bpl.n	80098a2 <voltagetoSOC+0x52>
		return (voltage - 2.5f) * (12.0f - 0.0f) / (3.15f - 2.5f);
 8009884:	edd7 7a01 	vldr	s15, [r7, #4]
 8009888:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800988c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009890:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8009894:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009898:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8009a44 <voltagetoSOC+0x1f4>
 800989c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098a0:	e0c5      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 3.41f)
 80098a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80098a6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009a48 <voltagetoSOC+0x1f8>
 80098aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b2:	d512      	bpl.n	80098da <voltagetoSOC+0x8a>
		return 12.0f + (voltage - 3.15f) * (25.0f - 12.0f) / (3.41f - 3.15f);
 80098b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80098b8:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8009a40 <voltagetoSOC+0x1f0>
 80098bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098c0:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 80098c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80098c8:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8009a4c <voltagetoSOC+0x1fc>
 80098cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098d0:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80098d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098d8:	e0a9      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 3.53f)
 80098da:	edd7 7a01 	vldr	s15, [r7, #4]
 80098de:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8009a50 <voltagetoSOC+0x200>
 80098e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	d512      	bpl.n	8009912 <voltagetoSOC+0xc2>
		return 25.0f + (voltage - 3.41f) * (37.0f - 25.0f) / (3.53f - 3.41f);
 80098ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80098f0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8009a48 <voltagetoSOC+0x1f8>
 80098f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098f8:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80098fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009900:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8009a54 <voltagetoSOC+0x204>
 8009904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009908:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800990c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009910:	e08d      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 3.66f)
 8009912:	edd7 7a01 	vldr	s15, [r7, #4]
 8009916:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8009a58 <voltagetoSOC+0x208>
 800991a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800991e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009922:	d512      	bpl.n	800994a <voltagetoSOC+0xfa>
		return 37.0f + (voltage - 3.53f) * (50.0f - 37.0f) / (3.66f - 3.53f);
 8009924:	edd7 7a01 	vldr	s15, [r7, #4]
 8009928:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009a50 <voltagetoSOC+0x200>
 800992c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009930:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8009934:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009938:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009a5c <voltagetoSOC+0x20c>
 800993c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009940:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8009a60 <voltagetoSOC+0x210>
 8009944:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009948:	e071      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 3.77f)
 800994a:	edd7 7a01 	vldr	s15, [r7, #4]
 800994e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009a64 <voltagetoSOC+0x214>
 8009952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995a:	d512      	bpl.n	8009982 <voltagetoSOC+0x132>
		return 50.0f + (voltage - 3.66f) * (62.0f - 50.0f) / (3.77f - 3.66f);
 800995c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009960:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8009a58 <voltagetoSOC+0x208>
 8009964:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009968:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 800996c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009970:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a68 <voltagetoSOC+0x218>
 8009974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009978:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8009a6c <voltagetoSOC+0x21c>
 800997c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009980:	e055      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 3.88f)
 8009982:	edd7 7a01 	vldr	s15, [r7, #4]
 8009986:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009a70 <voltagetoSOC+0x220>
 800998a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800998e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009992:	d512      	bpl.n	80099ba <voltagetoSOC+0x16a>
		return 62.0f + (voltage - 3.77f) * (75.0f - 62.0f) / (3.88f - 3.77f);
 8009994:	edd7 7a01 	vldr	s15, [r7, #4]
 8009998:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8009a64 <voltagetoSOC+0x214>
 800999c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099a0:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 80099a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80099a8:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8009a74 <voltagetoSOC+0x224>
 80099ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099b0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009a78 <voltagetoSOC+0x228>
 80099b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099b8:	e039      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 3.98f)
 80099ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80099be:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009a7c <voltagetoSOC+0x22c>
 80099c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ca:	d512      	bpl.n	80099f2 <voltagetoSOC+0x1a2>
		return 75.0f + (voltage - 3.88f) * (87.0f - 75.0f) / (3.98f - 3.88f);
 80099cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80099d0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8009a70 <voltagetoSOC+0x220>
 80099d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099d8:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80099dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80099e0:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009a80 <voltagetoSOC+0x230>
 80099e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099e8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009a84 <voltagetoSOC+0x234>
 80099ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099f0:	e01d      	b.n	8009a2e <voltagetoSOC+0x1de>
	else if (voltage < 4.10f)
 80099f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80099f6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8009a88 <voltagetoSOC+0x238>
 80099fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a02:	d512      	bpl.n	8009a2a <voltagetoSOC+0x1da>
		return 87.0f + (voltage - 3.98f) * (100.0f - 87.0f) / (4.10f - 3.98f);
 8009a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a08:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8009a7c <voltagetoSOC+0x22c>
 8009a0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a10:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8009a14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009a18:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009a54 <voltagetoSOC+0x204>
 8009a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a20:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8009a8c <voltagetoSOC+0x23c>
 8009a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a28:	e001      	b.n	8009a2e <voltagetoSOC+0x1de>
	else
		return 100.0f;
 8009a2a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009a90 <voltagetoSOC+0x240>
}
 8009a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	00000000 	.word	0x00000000
 8009a40:	4049999a 	.word	0x4049999a
 8009a44:	3f266668 	.word	0x3f266668
 8009a48:	405a3d71 	.word	0x405a3d71
 8009a4c:	3e851eb8 	.word	0x3e851eb8
 8009a50:	4061eb85 	.word	0x4061eb85
 8009a54:	3df5c280 	.word	0x3df5c280
 8009a58:	406a3d71 	.word	0x406a3d71
 8009a5c:	3e051ec0 	.word	0x3e051ec0
 8009a60:	42140000 	.word	0x42140000
 8009a64:	407147ae 	.word	0x407147ae
 8009a68:	3de147a0 	.word	0x3de147a0
 8009a6c:	42480000 	.word	0x42480000
 8009a70:	407851ec 	.word	0x407851ec
 8009a74:	3de147c0 	.word	0x3de147c0
 8009a78:	42780000 	.word	0x42780000
 8009a7c:	407eb852 	.word	0x407eb852
 8009a80:	3dccccc0 	.word	0x3dccccc0
 8009a84:	42960000 	.word	0x42960000
 8009a88:	40833333 	.word	0x40833333
 8009a8c:	42ae0000 	.word	0x42ae0000
 8009a90:	42c80000 	.word	0x42c80000

08009a94 <calcDCL>:
		return 4.10f;
}


// todo: make stuff like this like, normal and not stupid (make a map of constants instead of whatever the shit this is
float calcDCL() {
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0
	if (highest_temp <= 0.0f)
 8009a98:	4bbb      	ldr	r3, [pc, #748]	@ (8009d88 <calcDCL+0x2f4>)
 8009a9a:	edd3 7a00 	vldr	s15, [r3]
 8009a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa6:	d802      	bhi.n	8009aae <calcDCL+0x1a>
		return 0.0f;
 8009aa8:	eddf 7ab8 	vldr	s15, [pc, #736]	@ 8009d8c <calcDCL+0x2f8>
 8009aac:	e165      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 5.0f)
 8009aae:	4bb6      	ldr	r3, [pc, #728]	@ (8009d88 <calcDCL+0x2f4>)
 8009ab0:	edd3 7a00 	vldr	s15, [r3]
 8009ab4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac0:	d50f      	bpl.n	8009ae2 <calcDCL+0x4e>
		return 0.0f + (highest_temp - 0.0f) * (40.0f - 0.0f) / (5.0f - 0.0f);
 8009ac2:	4bb1      	ldr	r3, [pc, #708]	@ (8009d88 <calcDCL+0x2f4>)
 8009ac4:	edd3 7a00 	vldr	s15, [r3]
 8009ac8:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009d90 <calcDCL+0x2fc>
 8009acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009ad0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ad8:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 8009d8c <calcDCL+0x2f8>
 8009adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ae0:	e14b      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 10.0f)
 8009ae2:	4ba9      	ldr	r3, [pc, #676]	@ (8009d88 <calcDCL+0x2f4>)
 8009ae4:	edd3 7a00 	vldr	s15, [r3]
 8009ae8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af4:	d513      	bpl.n	8009b1e <calcDCL+0x8a>
		return 40.0f + (highest_temp - 5.0f) * (100.0f - 40.0f) / (10.0f - 5.0f);
 8009af6:	4ba4      	ldr	r3, [pc, #656]	@ (8009d88 <calcDCL+0x2f4>)
 8009af8:	edd3 7a00 	vldr	s15, [r3]
 8009afc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009b00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b04:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8009d94 <calcDCL+0x300>
 8009b08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b0c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b14:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8009d90 <calcDCL+0x2fc>
 8009b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b1c:	e12d      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 15.0f)
 8009b1e:	4b9a      	ldr	r3, [pc, #616]	@ (8009d88 <calcDCL+0x2f4>)
 8009b20:	edd3 7a00 	vldr	s15, [r3]
 8009b24:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b30:	d513      	bpl.n	8009b5a <calcDCL+0xc6>
		return 100.0f
				+ (highest_temp - 10.0f) * (180.0f - 100.0f) / (15.0f - 10.0f);
 8009b32:	4b95      	ldr	r3, [pc, #596]	@ (8009d88 <calcDCL+0x2f4>)
 8009b34:	edd3 7a00 	vldr	s15, [r3]
 8009b38:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b40:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8009d98 <calcDCL+0x304>
 8009b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b48:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b50:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8009d9c <calcDCL+0x308>
 8009b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b58:	e10f      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 20.0f)
 8009b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8009d88 <calcDCL+0x2f4>)
 8009b5c:	edd3 7a00 	vldr	s15, [r3]
 8009b60:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6c:	d513      	bpl.n	8009b96 <calcDCL+0x102>
		return 180.0f
				+ (highest_temp - 15.0f) * (180.0f - 180.0f) / (20.0f - 15.0f);
 8009b6e:	4b86      	ldr	r3, [pc, #536]	@ (8009d88 <calcDCL+0x2f4>)
 8009b70:	edd3 7a00 	vldr	s15, [r3]
 8009b74:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b7c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8009d8c <calcDCL+0x2f8>
 8009b80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009b84:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b8c:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8009da0 <calcDCL+0x30c>
 8009b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b94:	e0f1      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 25.0f)
 8009b96:	4b7c      	ldr	r3, [pc, #496]	@ (8009d88 <calcDCL+0x2f4>)
 8009b98:	edd3 7a00 	vldr	s15, [r3]
 8009b9c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8009ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba8:	d513      	bpl.n	8009bd2 <calcDCL+0x13e>
		return 180.0f
				+ (highest_temp - 20.0f) * (180.0f - 180.0f) / (25.0f - 20.0f);
 8009baa:	4b77      	ldr	r3, [pc, #476]	@ (8009d88 <calcDCL+0x2f4>)
 8009bac:	edd3 7a00 	vldr	s15, [r3]
 8009bb0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bb8:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8009d8c <calcDCL+0x2f8>
 8009bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009bc0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bc8:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8009da0 <calcDCL+0x30c>
 8009bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bd0:	e0d3      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 30.0f)
 8009bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8009d88 <calcDCL+0x2f4>)
 8009bd4:	edd3 7a00 	vldr	s15, [r3]
 8009bd8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be4:	d513      	bpl.n	8009c0e <calcDCL+0x17a>
		return 180.0f
				+ (highest_temp - 25.0f) * (180.0f - 180.0f) / (30.0f - 25.0f);
 8009be6:	4b68      	ldr	r3, [pc, #416]	@ (8009d88 <calcDCL+0x2f4>)
 8009be8:	edd3 7a00 	vldr	s15, [r3]
 8009bec:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8009bf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bf4:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8009d8c <calcDCL+0x2f8>
 8009bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009bfc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c04:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8009da0 <calcDCL+0x30c>
 8009c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c0c:	e0b5      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 35.0f)
 8009c0e:	4b5e      	ldr	r3, [pc, #376]	@ (8009d88 <calcDCL+0x2f4>)
 8009c10:	edd3 7a00 	vldr	s15, [r3]
 8009c14:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8009da4 <calcDCL+0x310>
 8009c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c20:	d513      	bpl.n	8009c4a <calcDCL+0x1b6>
		return 180.0f
				+ (highest_temp - 30.0f) * (180.0f - 180.0f) / (35.0f - 30.0f);
 8009c22:	4b59      	ldr	r3, [pc, #356]	@ (8009d88 <calcDCL+0x2f4>)
 8009c24:	edd3 7a00 	vldr	s15, [r3]
 8009c28:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009c2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c30:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8009d8c <calcDCL+0x2f8>
 8009c34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009c38:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c40:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8009da0 <calcDCL+0x30c>
 8009c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c48:	e097      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 40.0f)
 8009c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8009d88 <calcDCL+0x2f4>)
 8009c4c:	edd3 7a00 	vldr	s15, [r3]
 8009c50:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8009d90 <calcDCL+0x2fc>
 8009c54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5c:	d513      	bpl.n	8009c86 <calcDCL+0x1f2>
		return 180.0f
				+ (highest_temp - 35.0f) * (180.0f - 180.0f) / (40.0f - 35.0f);
 8009c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8009d88 <calcDCL+0x2f4>)
 8009c60:	edd3 7a00 	vldr	s15, [r3]
 8009c64:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8009da4 <calcDCL+0x310>
 8009c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c6c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8009d8c <calcDCL+0x2f8>
 8009c70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009c74:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c7c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8009da0 <calcDCL+0x30c>
 8009c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c84:	e079      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 45.0f)
 8009c86:	4b40      	ldr	r3, [pc, #256]	@ (8009d88 <calcDCL+0x2f4>)
 8009c88:	edd3 7a00 	vldr	s15, [r3]
 8009c8c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8009da8 <calcDCL+0x314>
 8009c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	d513      	bpl.n	8009cc2 <calcDCL+0x22e>
		return 180.0f
				+ (highest_temp - 40.0f) * (180.0f - 180.0f) / (45.0f - 40.0f);
 8009c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d88 <calcDCL+0x2f4>)
 8009c9c:	edd3 7a00 	vldr	s15, [r3]
 8009ca0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009d90 <calcDCL+0x2fc>
 8009ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ca8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009d8c <calcDCL+0x2f8>
 8009cac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009cb0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cb8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8009da0 <calcDCL+0x30c>
 8009cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cc0:	e05b      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 50.0f)
 8009cc2:	4b31      	ldr	r3, [pc, #196]	@ (8009d88 <calcDCL+0x2f4>)
 8009cc4:	edd3 7a00 	vldr	s15, [r3]
 8009cc8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009dac <calcDCL+0x318>
 8009ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd4:	d513      	bpl.n	8009cfe <calcDCL+0x26a>
		return 180.0f
				+ (highest_temp - 45.0f) * (70.0f - 180.0f) / (50.0f - 45.0f);
 8009cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009d88 <calcDCL+0x2f4>)
 8009cd8:	edd3 7a00 	vldr	s15, [r3]
 8009cdc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8009da8 <calcDCL+0x314>
 8009ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ce4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8009db0 <calcDCL+0x31c>
 8009ce8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009cec:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cf4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009da0 <calcDCL+0x30c>
 8009cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cfc:	e03d      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 55.0f)
 8009cfe:	4b22      	ldr	r3, [pc, #136]	@ (8009d88 <calcDCL+0x2f4>)
 8009d00:	edd3 7a00 	vldr	s15, [r3]
 8009d04:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009db4 <calcDCL+0x320>
 8009d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d10:	d513      	bpl.n	8009d3a <calcDCL+0x2a6>
		return 70.0f
				+ (highest_temp - 50.0f) * (10.0f - 70.0f) / (55.00f - 50.0f);
 8009d12:	4b1d      	ldr	r3, [pc, #116]	@ (8009d88 <calcDCL+0x2f4>)
 8009d14:	edd3 7a00 	vldr	s15, [r3]
 8009d18:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8009dac <calcDCL+0x318>
 8009d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d20:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8009db8 <calcDCL+0x324>
 8009d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009d28:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d30:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009dbc <calcDCL+0x328>
 8009d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d38:	e01f      	b.n	8009d7a <calcDCL+0x2e6>
	else if (highest_temp < 60.0f)
 8009d3a:	4b13      	ldr	r3, [pc, #76]	@ (8009d88 <calcDCL+0x2f4>)
 8009d3c:	edd3 7a00 	vldr	s15, [r3]
 8009d40:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009d94 <calcDCL+0x300>
 8009d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4c:	d513      	bpl.n	8009d76 <calcDCL+0x2e2>
		return 10.0f + (highest_temp - 55.0f) * (0.0f - 10.0f) / (60.0f - 55.0f);
 8009d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009d88 <calcDCL+0x2f4>)
 8009d50:	edd3 7a00 	vldr	s15, [r3]
 8009d54:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8009db4 <calcDCL+0x320>
 8009d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d5c:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8009d60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009d64:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d6c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009d70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d74:	e001      	b.n	8009d7a <calcDCL+0x2e6>

	else
		return 0.0f;
 8009d76:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8009d8c <calcDCL+0x2f8>
}
 8009d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	20001c9c 	.word	0x20001c9c
 8009d8c:	00000000 	.word	0x00000000
 8009d90:	42200000 	.word	0x42200000
 8009d94:	42700000 	.word	0x42700000
 8009d98:	42a00000 	.word	0x42a00000
 8009d9c:	42c80000 	.word	0x42c80000
 8009da0:	43340000 	.word	0x43340000
 8009da4:	420c0000 	.word	0x420c0000
 8009da8:	42340000 	.word	0x42340000
 8009dac:	42480000 	.word	0x42480000
 8009db0:	c2dc0000 	.word	0xc2dc0000
 8009db4:	425c0000 	.word	0x425c0000
 8009db8:	c2700000 	.word	0xc2700000
 8009dbc:	428c0000 	.word	0x428c0000

08009dc0 <calcCCL>:

float calcCCL() {
 8009dc0:	b480      	push	{r7}
 8009dc2:	af00      	add	r7, sp, #0
	if (highest_temp <= 0.0f)
 8009dc4:	4bbb      	ldr	r3, [pc, #748]	@ (800a0b4 <calcCCL+0x2f4>)
 8009dc6:	edd3 7a00 	vldr	s15, [r3]
 8009dca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd2:	d802      	bhi.n	8009dda <calcCCL+0x1a>
		return 0.0f;
 8009dd4:	eddf 7ab8 	vldr	s15, [pc, #736]	@ 800a0b8 <calcCCL+0x2f8>
 8009dd8:	e165      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 5.0f)
 8009dda:	4bb6      	ldr	r3, [pc, #728]	@ (800a0b4 <calcCCL+0x2f4>)
 8009ddc:	edd3 7a00 	vldr	s15, [r3]
 8009de0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dec:	d50f      	bpl.n	8009e0e <calcCCL+0x4e>
		return 0.0f + (highest_temp - 0.0f) * (0.0f - 0.0f) / (5.0f - 0.0f);
 8009dee:	4bb1      	ldr	r3, [pc, #708]	@ (800a0b4 <calcCCL+0x2f4>)
 8009df0:	edd3 7a00 	vldr	s15, [r3]
 8009df4:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800a0b8 <calcCCL+0x2f8>
 8009df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009dfc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e04:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 800a0b8 <calcCCL+0x2f8>
 8009e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e0c:	e14b      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 10.0f)
 8009e0e:	4ba9      	ldr	r3, [pc, #676]	@ (800a0b4 <calcCCL+0x2f4>)
 8009e10:	edd3 7a00 	vldr	s15, [r3]
 8009e14:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e20:	d513      	bpl.n	8009e4a <calcCCL+0x8a>
		return 0.0f + (highest_temp - 5.0f) * (10.0f - 0.0f) / (10.0f - 5.0f);
 8009e22:	4ba4      	ldr	r3, [pc, #656]	@ (800a0b4 <calcCCL+0x2f4>)
 8009e24:	edd3 7a00 	vldr	s15, [r3]
 8009e28:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e30:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009e34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009e38:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009e3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e40:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 800a0b8 <calcCCL+0x2f8>
 8009e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e48:	e12d      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 15.0f)
 8009e4a:	4b9a      	ldr	r3, [pc, #616]	@ (800a0b4 <calcCCL+0x2f4>)
 8009e4c:	edd3 7a00 	vldr	s15, [r3]
 8009e50:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5c:	d513      	bpl.n	8009e86 <calcCCL+0xc6>
		return 10.0f
				+ (highest_temp - 10.0f) * (20.0f - 10.0f) / (15.0f - 10.0f);
 8009e5e:	4b95      	ldr	r3, [pc, #596]	@ (800a0b4 <calcCCL+0x2f4>)
 8009e60:	edd3 7a00 	vldr	s15, [r3]
 8009e64:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009e68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e6c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009e70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009e74:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e7c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e84:	e10f      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 20.0f)
 8009e86:	4b8b      	ldr	r3, [pc, #556]	@ (800a0b4 <calcCCL+0x2f4>)
 8009e88:	edd3 7a00 	vldr	s15, [r3]
 8009e8c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e98:	d513      	bpl.n	8009ec2 <calcCCL+0x102>
		return 20.0f
				+ (highest_temp - 15.0f) * (30.0f - 20.0f) / (20.0f - 15.0f);
 8009e9a:	4b86      	ldr	r3, [pc, #536]	@ (800a0b4 <calcCCL+0x2f4>)
 8009e9c:	edd3 7a00 	vldr	s15, [r3]
 8009ea0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009ea4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ea8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009eac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009eb0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009eb8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ec0:	e0f1      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 25.0f)
 8009ec2:	4b7c      	ldr	r3, [pc, #496]	@ (800a0b4 <calcCCL+0x2f4>)
 8009ec4:	edd3 7a00 	vldr	s15, [r3]
 8009ec8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8009ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed4:	d513      	bpl.n	8009efe <calcCCL+0x13e>
		return 30.0f
				+ (highest_temp - 20.0f) * (30.0f - 30.0f) / (25.0f - 20.0f);
 8009ed6:	4b77      	ldr	r3, [pc, #476]	@ (800a0b4 <calcCCL+0x2f4>)
 8009ed8:	edd3 7a00 	vldr	s15, [r3]
 8009edc:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ee4:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800a0b8 <calcCCL+0x2f8>
 8009ee8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009eec:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ef4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009efc:	e0d3      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 30.0f)
 8009efe:	4b6d      	ldr	r3, [pc, #436]	@ (800a0b4 <calcCCL+0x2f4>)
 8009f00:	edd3 7a00 	vldr	s15, [r3]
 8009f04:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009f08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f10:	d513      	bpl.n	8009f3a <calcCCL+0x17a>
		return 30.0f
				+ (highest_temp - 25.0f) * (30.0f - 30.0f) / (30.0f - 25.0f);
 8009f12:	4b68      	ldr	r3, [pc, #416]	@ (800a0b4 <calcCCL+0x2f4>)
 8009f14:	edd3 7a00 	vldr	s15, [r3]
 8009f18:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8009f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f20:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800a0b8 <calcCCL+0x2f8>
 8009f24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009f28:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f30:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f38:	e0b5      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 35.0f)
 8009f3a:	4b5e      	ldr	r3, [pc, #376]	@ (800a0b4 <calcCCL+0x2f4>)
 8009f3c:	edd3 7a00 	vldr	s15, [r3]
 8009f40:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800a0bc <calcCCL+0x2fc>
 8009f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4c:	d513      	bpl.n	8009f76 <calcCCL+0x1b6>
		return 30.0f
				+ (highest_temp - 30.0f) * (30.0f - 30.0f) / (35.0f - 30.0f);
 8009f4e:	4b59      	ldr	r3, [pc, #356]	@ (800a0b4 <calcCCL+0x2f4>)
 8009f50:	edd3 7a00 	vldr	s15, [r3]
 8009f54:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009f58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f5c:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800a0b8 <calcCCL+0x2f8>
 8009f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009f64:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f6c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009f70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f74:	e097      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 40.0f)
 8009f76:	4b4f      	ldr	r3, [pc, #316]	@ (800a0b4 <calcCCL+0x2f4>)
 8009f78:	edd3 7a00 	vldr	s15, [r3]
 8009f7c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800a0c0 <calcCCL+0x300>
 8009f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f88:	d513      	bpl.n	8009fb2 <calcCCL+0x1f2>
		return 30.0f
				+ (highest_temp - 35.0f) * (20.0f - 30.0f) / (40.0f - 35.0f);
 8009f8a:	4b4a      	ldr	r3, [pc, #296]	@ (800a0b4 <calcCCL+0x2f4>)
 8009f8c:	edd3 7a00 	vldr	s15, [r3]
 8009f90:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800a0bc <calcCCL+0x2fc>
 8009f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f98:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8009f9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009fa0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fa8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fb0:	e079      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 45.0f)
 8009fb2:	4b40      	ldr	r3, [pc, #256]	@ (800a0b4 <calcCCL+0x2f4>)
 8009fb4:	edd3 7a00 	vldr	s15, [r3]
 8009fb8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800a0c4 <calcCCL+0x304>
 8009fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc4:	d513      	bpl.n	8009fee <calcCCL+0x22e>
		return 20.0f
				+ (highest_temp - 40.0f) * (10.0f - 20.0f) / (45.0f - 40.0f);
 8009fc6:	4b3b      	ldr	r3, [pc, #236]	@ (800a0b4 <calcCCL+0x2f4>)
 8009fc8:	edd3 7a00 	vldr	s15, [r3]
 8009fcc:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800a0c0 <calcCCL+0x300>
 8009fd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fd4:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8009fd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009fdc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8009fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fe4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fec:	e05b      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 50.0f)
 8009fee:	4b31      	ldr	r3, [pc, #196]	@ (800a0b4 <calcCCL+0x2f4>)
 8009ff0:	edd3 7a00 	vldr	s15, [r3]
 8009ff4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a0c8 <calcCCL+0x308>
 8009ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a000:	d513      	bpl.n	800a02a <calcCCL+0x26a>
		return 10.0f + (highest_temp - 45.0f) * (5.0f - 10.0f) / (50.0f - 45.0f);
 800a002:	4b2c      	ldr	r3, [pc, #176]	@ (800a0b4 <calcCCL+0x2f4>)
 800a004:	edd3 7a00 	vldr	s15, [r3]
 800a008:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800a0c4 <calcCCL+0x304>
 800a00c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a010:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800a014:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a018:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800a01c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a020:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a024:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a028:	e03d      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 55.0f)
 800a02a:	4b22      	ldr	r3, [pc, #136]	@ (800a0b4 <calcCCL+0x2f4>)
 800a02c:	edd3 7a00 	vldr	s15, [r3]
 800a030:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800a0cc <calcCCL+0x30c>
 800a034:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03c:	d513      	bpl.n	800a066 <calcCCL+0x2a6>
		return 5.0f + (highest_temp - 50.0f) * (0.0f - 5.0f) / (55.00f - 50.0f);
 800a03e:	4b1d      	ldr	r3, [pc, #116]	@ (800a0b4 <calcCCL+0x2f4>)
 800a040:	edd3 7a00 	vldr	s15, [r3]
 800a044:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800a0c8 <calcCCL+0x308>
 800a048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a04c:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 800a050:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a054:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800a058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a05c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800a060:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a064:	e01f      	b.n	800a0a6 <calcCCL+0x2e6>
	else if (highest_temp < 60.0f)
 800a066:	4b13      	ldr	r3, [pc, #76]	@ (800a0b4 <calcCCL+0x2f4>)
 800a068:	edd3 7a00 	vldr	s15, [r3]
 800a06c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a0d0 <calcCCL+0x310>
 800a070:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a078:	d513      	bpl.n	800a0a2 <calcCCL+0x2e2>
		return 0.0f + (highest_temp - 55.0f) * (0.0f - 0.0f) / (60.0f - 55.0f);
 800a07a:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b4 <calcCCL+0x2f4>)
 800a07c:	edd3 7a00 	vldr	s15, [r3]
 800a080:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800a0cc <calcCCL+0x30c>
 800a084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a088:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800a0b8 <calcCCL+0x2f8>
 800a08c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a090:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800a094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a098:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800a0b8 <calcCCL+0x2f8>
 800a09c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0a0:	e001      	b.n	800a0a6 <calcCCL+0x2e6>

	else
		return 0.0f;
 800a0a2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800a0b8 <calcCCL+0x2f8>
}
 800a0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	20001c9c 	.word	0x20001c9c
 800a0b8:	00000000 	.word	0x00000000
 800a0bc:	420c0000 	.word	0x420c0000
 800a0c0:	42200000 	.word	0x42200000
 800a0c4:	42340000 	.word	0x42340000
 800a0c8:	42480000 	.word	0x42480000
 800a0cc:	425c0000 	.word	0x425c0000
 800a0d0:	42700000 	.word	0x42700000

0800a0d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a0d8:	f001 fa37 	bl	800b54a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a0dc:	f000 f8ac 	bl	800a238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a0e0:	f000 fca8 	bl	800aa34 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a0e4:	f000 f8f6 	bl	800a2d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800a0e8:	f000 fa20 	bl	800a52c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800a0ec:	f000 fa5e 	bl	800a5ac <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800a0f0:	f000 fad2 	bl	800a698 <MX_SPI1_Init>
  MX_FDCAN2_Init();
 800a0f4:	f000 f9cc 	bl	800a490 <MX_FDCAN2_Init>
  MX_ADC2_Init();
 800a0f8:	f000 f964 	bl	800a3c4 <MX_ADC2_Init>
  MX_RTC_Init();
 800a0fc:	f000 faa0 	bl	800a640 <MX_RTC_Init>
  MX_TIM2_Init();
 800a100:	f000 fb9c 	bl	800a83c <MX_TIM2_Init>
  MX_TIM8_Init();
 800a104:	f000 fc42 	bl	800a98c <MX_TIM8_Init>
  MX_TIM1_Init();
 800a108:	f000 fb04 	bl	800a714 <MX_TIM1_Init>
  MX_TIM3_Init();
 800a10c:	f000 fbe4 	bl	800a8d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	user_adBms6830_getAccyStatus();
 800a110:	f7fe fefe 	bl	8008f10 <user_adBms6830_getAccyStatus>
	//  // Set duty cycle (e.g., 50%)
	//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 196600);	// full on is 196600
	//  Delay_ms(5000);
	//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 196570);	// full on is 196600

	init_FDCAN_header(&FDCAN_BMS_CONTEXT_INSTANCE.header_6b0, FDCAN_MSG_ID_6B0);
 800a114:	f44f 61d6 	mov.w	r1, #1712	@ 0x6b0
 800a118:	4837      	ldr	r0, [pc, #220]	@ (800a1f8 <main+0x124>)
 800a11a:	f7fe f8eb 	bl	80082f4 <init_FDCAN_header>
			init_FDCAN_header(&FDCAN_BMS_CONTEXT_INSTANCE.header_6b1, FDCAN_MSG_ID_6B1);
 800a11e:	f240 61b1 	movw	r1, #1713	@ 0x6b1
 800a122:	4836      	ldr	r0, [pc, #216]	@ (800a1fc <main+0x128>)
 800a124:	f7fe f8e6 	bl	80082f4 <init_FDCAN_header>
			init_FDCAN_header(&FDCAN_BMS_CONTEXT_INSTANCE.header_6b2, FDCAN_MSG_ID_6B2);
 800a128:	f240 61b2 	movw	r1, #1714	@ 0x6b2
 800a12c:	4834      	ldr	r0, [pc, #208]	@ (800a200 <main+0x12c>)
 800a12e:	f7fe f8e1 	bl	80082f4 <init_FDCAN_header>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_1806E7F4, 0x1806E7F4);
 800a132:	4934      	ldr	r1, [pc, #208]	@ (800a204 <main+0x130>)
 800a134:	4834      	ldr	r0, [pc, #208]	@ (800a208 <main+0x134>)
 800a136:	f7fe f903 	bl	8008340 <init_FDCAN_header_EXTENDED>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_1806E5F4, 0x1806E5F4);
 800a13a:	4934      	ldr	r1, [pc, #208]	@ (800a20c <main+0x138>)
 800a13c:	4834      	ldr	r0, [pc, #208]	@ (800a210 <main+0x13c>)
 800a13e:	f7fe f8ff 	bl	8008340 <init_FDCAN_header_EXTENDED>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_1806E9F4, 0x1806E9F4);
 800a142:	4934      	ldr	r1, [pc, #208]	@ (800a214 <main+0x140>)
 800a144:	4834      	ldr	r0, [pc, #208]	@ (800a218 <main+0x144>)
 800a146:	f7fe f8fb 	bl	8008340 <init_FDCAN_header_EXTENDED>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_18FF50E5, 0x18FF50E5);
 800a14a:	4934      	ldr	r1, [pc, #208]	@ (800a21c <main+0x148>)
 800a14c:	4834      	ldr	r0, [pc, #208]	@ (800a220 <main+0x14c>)
 800a14e:	f7fe f8f7 	bl	8008340 <init_FDCAN_header_EXTENDED>

	if (accy_status == CHARGE_POWER) {
 800a152:	4b34      	ldr	r3, [pc, #208]	@ (800a224 <main+0x150>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	4b33      	ldr	r3, [pc, #204]	@ (800a228 <main+0x154>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d143      	bne.n	800a1e8 <main+0x114>
		HAL_FDCAN_DeInit(&hfdcan2);
 800a160:	4832      	ldr	r0, [pc, #200]	@ (800a22c <main+0x158>)
 800a162:	f003 f905 	bl	800d370 <HAL_FDCAN_DeInit>

		hfdcan2.Instance = FDCAN2;
 800a166:	4b31      	ldr	r3, [pc, #196]	@ (800a22c <main+0x158>)
 800a168:	4a31      	ldr	r2, [pc, #196]	@ (800a230 <main+0x15c>)
 800a16a:	601a      	str	r2, [r3, #0]
		hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800a16c:	4b2f      	ldr	r3, [pc, #188]	@ (800a22c <main+0x158>)
 800a16e:	2200      	movs	r2, #0
 800a170:	605a      	str	r2, [r3, #4]
		hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800a172:	4b2e      	ldr	r3, [pc, #184]	@ (800a22c <main+0x158>)
 800a174:	2200      	movs	r2, #0
 800a176:	609a      	str	r2, [r3, #8]
		hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800a178:	4b2c      	ldr	r3, [pc, #176]	@ (800a22c <main+0x158>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	60da      	str	r2, [r3, #12]
		hfdcan2.Init.AutoRetransmission = DISABLE;
 800a17e:	4b2b      	ldr	r3, [pc, #172]	@ (800a22c <main+0x158>)
 800a180:	2200      	movs	r2, #0
 800a182:	741a      	strb	r2, [r3, #16]
		hfdcan2.Init.TransmitPause = DISABLE;
 800a184:	4b29      	ldr	r3, [pc, #164]	@ (800a22c <main+0x158>)
 800a186:	2200      	movs	r2, #0
 800a188:	745a      	strb	r2, [r3, #17]
		hfdcan2.Init.ProtocolException = DISABLE;
 800a18a:	4b28      	ldr	r3, [pc, #160]	@ (800a22c <main+0x158>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	749a      	strb	r2, [r3, #18]
		hfdcan2.Init.NominalPrescaler = 40;
 800a190:	4b26      	ldr	r3, [pc, #152]	@ (800a22c <main+0x158>)
 800a192:	2228      	movs	r2, #40	@ 0x28
 800a194:	615a      	str	r2, [r3, #20]
		hfdcan2.Init.NominalSyncJumpWidth = 1;
 800a196:	4b25      	ldr	r3, [pc, #148]	@ (800a22c <main+0x158>)
 800a198:	2201      	movs	r2, #1
 800a19a:	619a      	str	r2, [r3, #24]
		hfdcan2.Init.NominalTimeSeg1 = 14;
 800a19c:	4b23      	ldr	r3, [pc, #140]	@ (800a22c <main+0x158>)
 800a19e:	220e      	movs	r2, #14
 800a1a0:	61da      	str	r2, [r3, #28]
		hfdcan2.Init.NominalTimeSeg2 = 2;
 800a1a2:	4b22      	ldr	r3, [pc, #136]	@ (800a22c <main+0x158>)
 800a1a4:	2202      	movs	r2, #2
 800a1a6:	621a      	str	r2, [r3, #32]
		hfdcan2.Init.DataPrescaler = 1;
 800a1a8:	4b20      	ldr	r3, [pc, #128]	@ (800a22c <main+0x158>)
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	625a      	str	r2, [r3, #36]	@ 0x24
		hfdcan2.Init.DataSyncJumpWidth = 1;
 800a1ae:	4b1f      	ldr	r3, [pc, #124]	@ (800a22c <main+0x158>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	629a      	str	r2, [r3, #40]	@ 0x28
		hfdcan2.Init.DataTimeSeg1 = 1;
 800a1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a22c <main+0x158>)
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	62da      	str	r2, [r3, #44]	@ 0x2c
		hfdcan2.Init.DataTimeSeg2 = 1;
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	@ (800a22c <main+0x158>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	631a      	str	r2, [r3, #48]	@ 0x30
		hfdcan2.Init.StdFiltersNbr = 1;
 800a1c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a22c <main+0x158>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	635a      	str	r2, [r3, #52]	@ 0x34
		hfdcan2.Init.ExtFiltersNbr = 0;
 800a1c6:	4b19      	ldr	r3, [pc, #100]	@ (800a22c <main+0x158>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	639a      	str	r2, [r3, #56]	@ 0x38
		hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800a1cc:	4b17      	ldr	r3, [pc, #92]	@ (800a22c <main+0x158>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_FDCAN_Init(&hfdcan2);
 800a1d2:	4816      	ldr	r0, [pc, #88]	@ (800a22c <main+0x158>)
 800a1d4:	f002 ff72 	bl	800d0bc <HAL_FDCAN_Init>
//		{
//			Error_Handler();
//		}

		/* Start the FDCAN module */
         		if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800a1d8:	4814      	ldr	r0, [pc, #80]	@ (800a22c <main+0x158>)
 800a1da:	f003 f8ec 	bl	800d3b6 <HAL_FDCAN_Start>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <main+0x114>
		{
			Error_Handler();
 800a1e4:	f000 fd2e 	bl	800ac44 <Error_Handler>
//		};
//
//		uint8_t data[8] = {0xDE, 0xAD, 0xBE, 0xEF, 0xAA, 0xBB, 0xCC, 0xDD};
//
//		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data);
		adbms_main(16, &hfdcan2, &FDCAN_BMS_CONTEXT_INSTANCE, &htim3);
 800a1e8:	4b12      	ldr	r3, [pc, #72]	@ (800a234 <main+0x160>)
 800a1ea:	4a03      	ldr	r2, [pc, #12]	@ (800a1f8 <main+0x124>)
 800a1ec:	490f      	ldr	r1, [pc, #60]	@ (800a22c <main+0x158>)
 800a1ee:	2010      	movs	r0, #16
 800a1f0:	f7fc fb4c 	bl	800688c <adbms_main>
 800a1f4:	e7f8      	b.n	800a1e8 <main+0x114>
 800a1f6:	bf00      	nop
 800a1f8:	20002218 	.word	0x20002218
 800a1fc:	2000223c 	.word	0x2000223c
 800a200:	20002260 	.word	0x20002260
 800a204:	1806e7f4 	.word	0x1806e7f4
 800a208:	200022a8 	.word	0x200022a8
 800a20c:	1806e5f4 	.word	0x1806e5f4
 800a210:	200022cc 	.word	0x200022cc
 800a214:	1806e9f4 	.word	0x1806e9f4
 800a218:	200022f0 	.word	0x200022f0
 800a21c:	18ff50e5 	.word	0x18ff50e5
 800a220:	20002314 	.word	0x20002314
 800a224:	08018101 	.word	0x08018101
 800a228:	20001c70 	.word	0x20001c70
 800a22c:	20001eec 	.word	0x20001eec
 800a230:	40006800 	.word	0x40006800
 800a234:	2000215c 	.word	0x2000215c

0800a238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b094      	sub	sp, #80	@ 0x50
 800a23c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a23e:	f107 0318 	add.w	r3, r7, #24
 800a242:	2238      	movs	r2, #56	@ 0x38
 800a244:	2100      	movs	r1, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f00a f8d6 	bl	80143f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a24c:	1d3b      	adds	r3, r7, #4
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	605a      	str	r2, [r3, #4]
 800a254:	609a      	str	r2, [r3, #8]
 800a256:	60da      	str	r2, [r3, #12]
 800a258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a25a:	2000      	movs	r0, #0
 800a25c:	f004 f8da 	bl	800e414 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800a260:	230a      	movs	r3, #10
 800a262:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a268:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a26a:	2340      	movs	r3, #64	@ 0x40
 800a26c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a26e:	2301      	movs	r3, #1
 800a270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a272:	2302      	movs	r3, #2
 800a274:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a276:	2302      	movs	r3, #2
 800a278:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a27a:	2304      	movs	r3, #4
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800a27e:	2355      	movs	r3, #85	@ 0x55
 800a280:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a282:	2302      	movs	r3, #2
 800a284:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a286:	2302      	movs	r3, #2
 800a288:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a28a:	2302      	movs	r3, #2
 800a28c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a28e:	f107 0318 	add.w	r3, r7, #24
 800a292:	4618      	mov	r0, r3
 800a294:	f004 f972 	bl	800e57c <HAL_RCC_OscConfig>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800a29e:	f000 fcd1 	bl	800ac44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a2a2:	230f      	movs	r3, #15
 800a2a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a2b6:	1d3b      	adds	r3, r7, #4
 800a2b8:	2104      	movs	r1, #4
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f004 fc70 	bl	800eba0 <HAL_RCC_ClockConfig>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 800a2c6:	f000 fcbd 	bl	800ac44 <Error_Handler>
  }
}
 800a2ca:	bf00      	nop
 800a2cc:	3750      	adds	r7, #80	@ 0x50
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08c      	sub	sp, #48	@ 0x30
 800a2d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800a2da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	605a      	str	r2, [r3, #4]
 800a2e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a2e6:	1d3b      	adds	r3, r7, #4
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f00a f883 	bl	80143f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800a2f2:	4b32      	ldr	r3, [pc, #200]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a2f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a2f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a2fa:	4b30      	ldr	r3, [pc, #192]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a2fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a302:	4b2e      	ldr	r3, [pc, #184]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a304:	2200      	movs	r2, #0
 800a306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a308:	4b2c      	ldr	r3, [pc, #176]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800a30e:	4b2b      	ldr	r3, [pc, #172]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a310:	2200      	movs	r2, #0
 800a312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a314:	4b29      	ldr	r3, [pc, #164]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a316:	2200      	movs	r2, #0
 800a318:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a31a:	4b28      	ldr	r3, [pc, #160]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a31c:	2204      	movs	r2, #4
 800a31e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a320:	4b26      	ldr	r3, [pc, #152]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a322:	2200      	movs	r2, #0
 800a324:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a326:	4b25      	ldr	r3, [pc, #148]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a328:	2200      	movs	r2, #0
 800a32a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800a32c:	4b23      	ldr	r3, [pc, #140]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a32e:	2201      	movs	r2, #1
 800a330:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a332:	4b22      	ldr	r3, [pc, #136]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a33a:	4b20      	ldr	r3, [pc, #128]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a340:	4b1e      	ldr	r3, [pc, #120]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a342:	2200      	movs	r2, #0
 800a344:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a346:	4b1d      	ldr	r3, [pc, #116]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a34e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a350:	2200      	movs	r2, #0
 800a352:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800a354:	4b19      	ldr	r3, [pc, #100]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a35c:	4817      	ldr	r0, [pc, #92]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a35e:	f001 fbb3 	bl	800bac8 <HAL_ADC_Init>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800a368:	f000 fc6c 	bl	800ac44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800a36c:	2300      	movs	r3, #0
 800a36e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a374:	4619      	mov	r1, r3
 800a376:	4811      	ldr	r0, [pc, #68]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a378:	f002 fc56 	bl	800cc28 <HAL_ADCEx_MultiModeConfigChannel>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800a382:	f000 fc5f 	bl	800ac44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a386:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c0 <MX_ADC1_Init+0xec>)
 800a388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a38a:	2306      	movs	r3, #6
 800a38c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a392:	237f      	movs	r3, #127	@ 0x7f
 800a394:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a396:	2304      	movs	r3, #4
 800a398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a39e:	1d3b      	adds	r3, r7, #4
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4806      	ldr	r0, [pc, #24]	@ (800a3bc <MX_ADC1_Init+0xe8>)
 800a3a4:	f001 ff44 	bl	800c230 <HAL_ADC_ConfigChannel>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800a3ae:	f000 fc49 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a3b2:	bf00      	nop
 800a3b4:	3730      	adds	r7, #48	@ 0x30
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20001e14 	.word	0x20001e14
 800a3c0:	08600004 	.word	0x08600004

0800a3c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f00a f811 	bl	80143f8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800a3d6:	4b2b      	ldr	r3, [pc, #172]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a3d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a488 <MX_ADC2_Init+0xc4>)
 800a3da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a3dc:	4b29      	ldr	r3, [pc, #164]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a3de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a3e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a3e4:	4b27      	ldr	r3, [pc, #156]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a3ea:	4b26      	ldr	r3, [pc, #152]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800a3f0:	4b24      	ldr	r3, [pc, #144]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a3f6:	4b23      	ldr	r3, [pc, #140]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a3fc:	4b21      	ldr	r3, [pc, #132]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a3fe:	2204      	movs	r2, #4
 800a400:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800a402:	4b20      	ldr	r3, [pc, #128]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a404:	2200      	movs	r2, #0
 800a406:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800a408:	4b1e      	ldr	r3, [pc, #120]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800a40e:	4b1d      	ldr	r3, [pc, #116]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a410:	2201      	movs	r2, #1
 800a412:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a414:	4b1b      	ldr	r3, [pc, #108]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a41c:	4b19      	ldr	r3, [pc, #100]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a41e:	2200      	movs	r2, #0
 800a420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a422:	4b18      	ldr	r3, [pc, #96]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a424:	2200      	movs	r2, #0
 800a426:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800a428:	4b16      	ldr	r3, [pc, #88]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a430:	4b14      	ldr	r3, [pc, #80]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a432:	2200      	movs	r2, #0
 800a434:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800a436:	4b13      	ldr	r3, [pc, #76]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a43e:	4811      	ldr	r0, [pc, #68]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a440:	f001 fb42 	bl	800bac8 <HAL_ADC_Init>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800a44a:	f000 fbfb 	bl	800ac44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800a44e:	4b0f      	ldr	r3, [pc, #60]	@ (800a48c <MX_ADC2_Init+0xc8>)
 800a450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a452:	2306      	movs	r3, #6
 800a454:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a45a:	237f      	movs	r3, #127	@ 0x7f
 800a45c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a45e:	2304      	movs	r3, #4
 800a460:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a466:	463b      	mov	r3, r7
 800a468:	4619      	mov	r1, r3
 800a46a:	4806      	ldr	r0, [pc, #24]	@ (800a484 <MX_ADC2_Init+0xc0>)
 800a46c:	f001 fee0 	bl	800c230 <HAL_ADC_ConfigChannel>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800a476:	f000 fbe5 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a47a:	bf00      	nop
 800a47c:	3720      	adds	r7, #32
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20001e80 	.word	0x20001e80
 800a488:	50000100 	.word	0x50000100
 800a48c:	47520000 	.word	0x47520000

0800a490 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800a494:	4b23      	ldr	r3, [pc, #140]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a496:	4a24      	ldr	r2, [pc, #144]	@ (800a528 <MX_FDCAN2_Init+0x98>)
 800a498:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800a49a:	4b22      	ldr	r3, [pc, #136]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800a4a0:	4b20      	ldr	r3, [pc, #128]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800a4a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800a4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800a4b2:	4b1c      	ldr	r3, [pc, #112]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800a4b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 20;
 800a4be:	4b19      	ldr	r3, [pc, #100]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4c0:	2214      	movs	r2, #20
 800a4c2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800a4c4:	4b17      	ldr	r3, [pc, #92]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 800a4ca:	4b16      	ldr	r3, [pc, #88]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4cc:	220e      	movs	r2, #14
 800a4ce:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800a4d0:	4b14      	ldr	r3, [pc, #80]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800a4d6:	4b13      	ldr	r3, [pc, #76]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800a4dc:	4b11      	ldr	r3, [pc, #68]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800a4e2:	4b10      	ldr	r3, [pc, #64]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800a4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 800a4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800a4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800a500:	4808      	ldr	r0, [pc, #32]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a502:	f002 fddb 	bl	800d0bc <HAL_FDCAN_Init>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 800a50c:	f000 fb9a 	bl	800ac44 <Error_Handler>
//	{
//		Error_Handler();
//	}

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800a510:	4804      	ldr	r0, [pc, #16]	@ (800a524 <MX_FDCAN2_Init+0x94>)
 800a512:	f002 ff50 	bl	800d3b6 <HAL_FDCAN_Start>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <MX_FDCAN2_Init+0x90>
	{
		Error_Handler();
 800a51c:	f000 fb92 	bl	800ac44 <Error_Handler>
//	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
//	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	TxHeader.MessageMarker = 0;
  /* USER CODE END FDCAN2_Init 2 */

}
 800a520:	bf00      	nop
 800a522:	bd80      	pop	{r7, pc}
 800a524:	20001eec 	.word	0x20001eec
 800a528:	40006800 	.word	0x40006800

0800a52c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a530:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a532:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a4 <MX_I2C1_Init+0x78>)
 800a534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800a536:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a538:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a8 <MX_I2C1_Init+0x7c>)
 800a53a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a53c:	4b18      	ldr	r3, [pc, #96]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a53e:	2200      	movs	r2, #0
 800a540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a542:	4b17      	ldr	r3, [pc, #92]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a544:	2201      	movs	r2, #1
 800a546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a548:	4b15      	ldr	r3, [pc, #84]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a54e:	4b14      	ldr	r3, [pc, #80]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a550:	2200      	movs	r2, #0
 800a552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a554:	4b12      	ldr	r3, [pc, #72]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a556:	2200      	movs	r2, #0
 800a558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a55a:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a560:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a562:	2200      	movs	r2, #0
 800a564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a566:	480e      	ldr	r0, [pc, #56]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a568:	f003 fe22 	bl	800e1b0 <HAL_I2C_Init>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a572:	f000 fb67 	bl	800ac44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a576:	2100      	movs	r1, #0
 800a578:	4809      	ldr	r0, [pc, #36]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a57a:	f003 feb4 	bl	800e2e6 <HAL_I2CEx_ConfigAnalogFilter>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a584:	f000 fb5e 	bl	800ac44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a588:	2100      	movs	r1, #0
 800a58a:	4805      	ldr	r0, [pc, #20]	@ (800a5a0 <MX_I2C1_Init+0x74>)
 800a58c:	f003 fef6 	bl	800e37c <HAL_I2CEx_ConfigDigitalFilter>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a596:	f000 fb55 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a59a:	bf00      	nop
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20001f50 	.word	0x20001f50
 800a5a4:	40005400 	.word	0x40005400
 800a5a8:	40b285c2 	.word	0x40b285c2

0800a5ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800a5b0:	4b21      	ldr	r3, [pc, #132]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5b2:	4a22      	ldr	r2, [pc, #136]	@ (800a63c <MX_LPUART1_UART_Init+0x90>)
 800a5b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800a5b6:	4b20      	ldr	r3, [pc, #128]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a5bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a5be:	4b1e      	ldr	r3, [pc, #120]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a5c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a5ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a5d0:	4b19      	ldr	r3, [pc, #100]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5d2:	220c      	movs	r2, #12
 800a5d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5d6:	4b18      	ldr	r3, [pc, #96]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a5dc:	4b16      	ldr	r3, [pc, #88]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a5e2:	4b15      	ldr	r3, [pc, #84]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a5e8:	4b13      	ldr	r3, [pc, #76]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a5ee:	4812      	ldr	r0, [pc, #72]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a5f0:	f007 f80e 	bl	8011610 <HAL_UART_Init>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800a5fa:	f000 fb23 	bl	800ac44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a5fe:	2100      	movs	r1, #0
 800a600:	480d      	ldr	r0, [pc, #52]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a602:	f007 feff 	bl	8012404 <HAL_UARTEx_SetTxFifoThreshold>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800a60c:	f000 fb1a 	bl	800ac44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a610:	2100      	movs	r1, #0
 800a612:	4809      	ldr	r0, [pc, #36]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a614:	f007 ff34 	bl	8012480 <HAL_UARTEx_SetRxFifoThreshold>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800a61e:	f000 fb11 	bl	800ac44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800a622:	4805      	ldr	r0, [pc, #20]	@ (800a638 <MX_LPUART1_UART_Init+0x8c>)
 800a624:	f007 feb5 	bl	8012392 <HAL_UARTEx_DisableFifoMode>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800a62e:	f000 fb09 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a632:	bf00      	nop
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20001fa4 	.word	0x20001fa4
 800a63c:	40008000 	.word	0x40008000

0800a640 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a644:	4b12      	ldr	r3, [pc, #72]	@ (800a690 <MX_RTC_Init+0x50>)
 800a646:	4a13      	ldr	r2, [pc, #76]	@ (800a694 <MX_RTC_Init+0x54>)
 800a648:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a64a:	4b11      	ldr	r3, [pc, #68]	@ (800a690 <MX_RTC_Init+0x50>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a650:	4b0f      	ldr	r3, [pc, #60]	@ (800a690 <MX_RTC_Init+0x50>)
 800a652:	227f      	movs	r2, #127	@ 0x7f
 800a654:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a656:	4b0e      	ldr	r3, [pc, #56]	@ (800a690 <MX_RTC_Init+0x50>)
 800a658:	22ff      	movs	r2, #255	@ 0xff
 800a65a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a65c:	4b0c      	ldr	r3, [pc, #48]	@ (800a690 <MX_RTC_Init+0x50>)
 800a65e:	2200      	movs	r2, #0
 800a660:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a662:	4b0b      	ldr	r3, [pc, #44]	@ (800a690 <MX_RTC_Init+0x50>)
 800a664:	2200      	movs	r2, #0
 800a666:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a668:	4b09      	ldr	r3, [pc, #36]	@ (800a690 <MX_RTC_Init+0x50>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a66e:	4b08      	ldr	r3, [pc, #32]	@ (800a690 <MX_RTC_Init+0x50>)
 800a670:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a674:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a676:	4b06      	ldr	r3, [pc, #24]	@ (800a690 <MX_RTC_Init+0x50>)
 800a678:	2200      	movs	r2, #0
 800a67a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a67c:	4804      	ldr	r0, [pc, #16]	@ (800a690 <MX_RTC_Init+0x50>)
 800a67e:	f004 fef9 	bl	800f474 <HAL_RTC_Init>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800a688:	f000 fadc 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a68c:	bf00      	nop
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	20002038 	.word	0x20002038
 800a694:	40002800 	.word	0x40002800

0800a698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a69c:	4b1b      	ldr	r3, [pc, #108]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a69e:	4a1c      	ldr	r2, [pc, #112]	@ (800a710 <MX_SPI1_Init+0x78>)
 800a6a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a6a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a6a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a6aa:	4b18      	ldr	r3, [pc, #96]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a6b0:	4b16      	ldr	r3, [pc, #88]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800a6b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6b8:	4b14      	ldr	r3, [pc, #80]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a6be:	4b13      	ldr	r3, [pc, #76]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a6c4:	4b11      	ldr	r3, [pc, #68]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800a6cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6ce:	2230      	movs	r2, #48	@ 0x30
 800a6d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a6d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a6d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6de:	4b0b      	ldr	r3, [pc, #44]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a6e4:	4b09      	ldr	r3, [pc, #36]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6e6:	2207      	movs	r2, #7
 800a6e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a6ea:	4b08      	ldr	r3, [pc, #32]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a6f0:	4b06      	ldr	r3, [pc, #24]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a6f6:	4805      	ldr	r0, [pc, #20]	@ (800a70c <MX_SPI1_Init+0x74>)
 800a6f8:	f004 ffd9 	bl	800f6ae <HAL_SPI_Init>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a702:	f000 fa9f 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a706:	bf00      	nop
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20002060 	.word	0x20002060
 800a710:	40013000 	.word	0x40013000

0800a714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b098      	sub	sp, #96	@ 0x60
 800a718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a71a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	605a      	str	r2, [r3, #4]
 800a724:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a726:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	605a      	str	r2, [r3, #4]
 800a730:	609a      	str	r2, [r3, #8]
 800a732:	60da      	str	r2, [r3, #12]
 800a734:	611a      	str	r2, [r3, #16]
 800a736:	615a      	str	r2, [r3, #20]
 800a738:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a73a:	1d3b      	adds	r3, r7, #4
 800a73c:	2234      	movs	r2, #52	@ 0x34
 800a73e:	2100      	movs	r1, #0
 800a740:	4618      	mov	r0, r3
 800a742:	f009 fe59 	bl	80143f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a746:	4b3b      	ldr	r3, [pc, #236]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a748:	4a3b      	ldr	r2, [pc, #236]	@ (800a838 <MX_TIM1_Init+0x124>)
 800a74a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a74c:	4b39      	ldr	r3, [pc, #228]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a74e:	2200      	movs	r2, #0
 800a750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a752:	4b38      	ldr	r3, [pc, #224]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a754:	2200      	movs	r2, #0
 800a756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 800a758:	4b36      	ldr	r3, [pc, #216]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a75a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800a75e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a760:	4b34      	ldr	r3, [pc, #208]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a762:	2200      	movs	r2, #0
 800a764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a766:	4b33      	ldr	r3, [pc, #204]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a768:	2200      	movs	r2, #0
 800a76a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a76c:	4b31      	ldr	r3, [pc, #196]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a76e:	2200      	movs	r2, #0
 800a770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a772:	4830      	ldr	r0, [pc, #192]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a774:	f005 ff27 	bl	80105c6 <HAL_TIM_PWM_Init>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800a77e:	f000 fa61 	bl	800ac44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a782:	2300      	movs	r3, #0
 800a784:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a786:	2300      	movs	r3, #0
 800a788:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a78a:	2300      	movs	r3, #0
 800a78c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a78e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a792:	4619      	mov	r1, r3
 800a794:	4827      	ldr	r0, [pc, #156]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a796:	f006 fe11 	bl	80113bc <HAL_TIMEx_MasterConfigSynchronization>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a7a0:	f000 fa50 	bl	800ac44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a7a4:	2360      	movs	r3, #96	@ 0x60
 800a7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a7c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	481a      	ldr	r0, [pc, #104]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a7ca:	f005 ff53 	bl	8010674 <HAL_TIM_PWM_ConfigChannel>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800a7d4:	f000 fa36 	bl	800ac44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a7ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a7f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a7fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a802:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a808:	2300      	movs	r3, #0
 800a80a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a810:	1d3b      	adds	r3, r7, #4
 800a812:	4619      	mov	r1, r3
 800a814:	4807      	ldr	r0, [pc, #28]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a816:	f006 fe67 	bl	80114e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800a820:	f000 fa10 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a824:	4803      	ldr	r0, [pc, #12]	@ (800a834 <MX_TIM1_Init+0x120>)
 800a826:	f000 fcf7 	bl	800b218 <HAL_TIM_MspPostInit>

}
 800a82a:	bf00      	nop
 800a82c:	3760      	adds	r7, #96	@ 0x60
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200020c4 	.word	0x200020c4
 800a838:	40012c00 	.word	0x40012c00

0800a83c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a842:	f107 0310 	add.w	r3, r7, #16
 800a846:	2200      	movs	r2, #0
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	605a      	str	r2, [r3, #4]
 800a84c:	609a      	str	r2, [r3, #8]
 800a84e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a850:	1d3b      	adds	r3, r7, #4
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	605a      	str	r2, [r3, #4]
 800a858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a85a:	4b1e      	ldr	r3, [pc, #120]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a85c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a860:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800a862:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a864:	22a9      	movs	r2, #169	@ 0xa9
 800a866:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a868:	4b1a      	ldr	r3, [pc, #104]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800a86e:	4b19      	ldr	r3, [pc, #100]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a870:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a874:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a876:	4b17      	ldr	r3, [pc, #92]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a878:	2200      	movs	r2, #0
 800a87a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a87c:	4b15      	ldr	r3, [pc, #84]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a87e:	2200      	movs	r2, #0
 800a880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a882:	4814      	ldr	r0, [pc, #80]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a884:	f005 fe48 	bl	8010518 <HAL_TIM_Base_Init>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a88e:	f000 f9d9 	bl	800ac44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a896:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a898:	f107 0310 	add.w	r3, r7, #16
 800a89c:	4619      	mov	r1, r3
 800a89e:	480d      	ldr	r0, [pc, #52]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a8a0:	f005 fffc 	bl	801089c <HAL_TIM_ConfigClockSource>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a8aa:	f000 f9cb 	bl	800ac44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a8b6:	1d3b      	adds	r3, r7, #4
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4806      	ldr	r0, [pc, #24]	@ (800a8d4 <MX_TIM2_Init+0x98>)
 800a8bc:	f006 fd7e 	bl	80113bc <HAL_TIMEx_MasterConfigSynchronization>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a8c6:	f000 f9bd 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a8ca:	bf00      	nop
 800a8cc:	3720      	adds	r7, #32
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20002110 	.word	0x20002110

0800a8d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	@ 0x28
 800a8dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8de:	f107 031c 	add.w	r3, r7, #28
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	605a      	str	r2, [r3, #4]
 800a8e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	609a      	str	r2, [r3, #8]
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	611a      	str	r2, [r3, #16]
 800a8f8:	615a      	str	r2, [r3, #20]
 800a8fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a8fc:	4b21      	ldr	r3, [pc, #132]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a8fe:	4a22      	ldr	r2, [pc, #136]	@ (800a988 <MX_TIM3_Init+0xb0>)
 800a900:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a902:	4b20      	ldr	r3, [pc, #128]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a904:	2200      	movs	r2, #0
 800a906:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a908:	4b1e      	ldr	r3, [pc, #120]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6554;
 800a90e:	4b1d      	ldr	r3, [pc, #116]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a910:	f641 129a 	movw	r2, #6554	@ 0x199a
 800a914:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a916:	4b1b      	ldr	r3, [pc, #108]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a918:	2200      	movs	r2, #0
 800a91a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a91c:	4b19      	ldr	r3, [pc, #100]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a91e:	2200      	movs	r2, #0
 800a920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a922:	4818      	ldr	r0, [pc, #96]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a924:	f005 fe4f 	bl	80105c6 <HAL_TIM_PWM_Init>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800a92e:	f000 f989 	bl	800ac44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a936:	2300      	movs	r3, #0
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a93a:	f107 031c 	add.w	r3, r7, #28
 800a93e:	4619      	mov	r1, r3
 800a940:	4810      	ldr	r0, [pc, #64]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a942:	f006 fd3b 	bl	80113bc <HAL_TIMEx_MasterConfigSynchronization>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800a94c:	f000 f97a 	bl	800ac44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a950:	2360      	movs	r3, #96	@ 0x60
 800a952:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a958:	2300      	movs	r3, #0
 800a95a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a960:	463b      	mov	r3, r7
 800a962:	220c      	movs	r2, #12
 800a964:	4619      	mov	r1, r3
 800a966:	4807      	ldr	r0, [pc, #28]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a968:	f005 fe84 	bl	8010674 <HAL_TIM_PWM_ConfigChannel>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800a972:	f000 f967 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a976:	4803      	ldr	r0, [pc, #12]	@ (800a984 <MX_TIM3_Init+0xac>)
 800a978:	f000 fc4e 	bl	800b218 <HAL_TIM_MspPostInit>

}
 800a97c:	bf00      	nop
 800a97e:	3728      	adds	r7, #40	@ 0x28
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	2000215c 	.word	0x2000215c
 800a988:	40000400 	.word	0x40000400

0800a98c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a992:	f107 0310 	add.w	r3, r7, #16
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	605a      	str	r2, [r3, #4]
 800a99c:	609a      	str	r2, [r3, #8]
 800a99e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9a0:	1d3b      	adds	r3, r7, #4
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	605a      	str	r2, [r3, #4]
 800a9a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a9aa:	4b20      	ldr	r3, [pc, #128]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9ac:	4a20      	ldr	r2, [pc, #128]	@ (800aa30 <MX_TIM8_Init+0xa4>)
 800a9ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9b6:	4b1d      	ldr	r3, [pc, #116]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a9bc:	4b1b      	ldr	r3, [pc, #108]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9c4:	4b19      	ldr	r3, [pc, #100]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a9ca:	4b18      	ldr	r3, [pc, #96]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9d0:	4b16      	ldr	r3, [pc, #88]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a9d6:	4815      	ldr	r0, [pc, #84]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9d8:	f005 fd9e 	bl	8010518 <HAL_TIM_Base_Init>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800a9e2:	f000 f92f 	bl	800ac44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a9e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a9ec:	f107 0310 	add.w	r3, r7, #16
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	480e      	ldr	r0, [pc, #56]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800a9f4:	f005 ff52 	bl	801089c <HAL_TIM_ConfigClockSource>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800a9fe:	f000 f921 	bl	800ac44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa02:	2300      	movs	r3, #0
 800aa04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800aa0e:	1d3b      	adds	r3, r7, #4
 800aa10:	4619      	mov	r1, r3
 800aa12:	4806      	ldr	r0, [pc, #24]	@ (800aa2c <MX_TIM8_Init+0xa0>)
 800aa14:	f006 fcd2 	bl	80113bc <HAL_TIMEx_MasterConfigSynchronization>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800aa1e:	f000 f911 	bl	800ac44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800aa22:	bf00      	nop
 800aa24:	3720      	adds	r7, #32
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200021a8 	.word	0x200021a8
 800aa30:	40013400 	.word	0x40013400

0800aa34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08a      	sub	sp, #40	@ 0x28
 800aa38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa3a:	f107 0314 	add.w	r3, r7, #20
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	605a      	str	r2, [r3, #4]
 800aa44:	609a      	str	r2, [r3, #8]
 800aa46:	60da      	str	r2, [r3, #12]
 800aa48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa4a:	4b4e      	ldr	r3, [pc, #312]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4e:	4a4d      	ldr	r2, [pc, #308]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa50:	f043 0304 	orr.w	r3, r3, #4
 800aa54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa56:	4b4b      	ldr	r3, [pc, #300]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	613b      	str	r3, [r7, #16]
 800aa60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800aa62:	4b48      	ldr	r3, [pc, #288]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa66:	4a47      	ldr	r2, [pc, #284]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa68:	f043 0320 	orr.w	r3, r3, #32
 800aa6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa6e:	4b45      	ldr	r3, [pc, #276]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa72:	f003 0320 	and.w	r3, r3, #32
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa7a:	4b42      	ldr	r3, [pc, #264]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7e:	4a41      	ldr	r2, [pc, #260]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa86:	4b3f      	ldr	r3, [pc, #252]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	60bb      	str	r3, [r7, #8]
 800aa90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa92:	4b3c      	ldr	r3, [pc, #240]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa96:	4a3b      	ldr	r2, [pc, #236]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aa98:	f043 0302 	orr.w	r3, r3, #2
 800aa9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa9e:	4b39      	ldr	r3, [pc, #228]	@ (800ab84 <MX_GPIO_Init+0x150>)
 800aaa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaa2:	f003 0302 	and.w	r3, r3, #2
 800aaa6:	607b      	str	r3, [r7, #4]
 800aaa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Charge_Enable_Pin|Discharge_Enable_Pin|POS_AIR_GND_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f640 011c 	movw	r1, #2076	@ 0x81c
 800aab0:	4835      	ldr	r0, [pc, #212]	@ (800ab88 <MX_GPIO_Init+0x154>)
 800aab2:	f003 fb65 	bl	800e180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Temp_Fault_Pin|Precharge_Enable_Pin|NEG_AIR_GND_Pin|Cell_Fault_Pin
 800aab6:	2200      	movs	r2, #0
 800aab8:	f648 0146 	movw	r1, #34886	@ 0x8846
 800aabc:	4833      	ldr	r0, [pc, #204]	@ (800ab8c <MX_GPIO_Init+0x158>)
 800aabe:	f003 fb5f 	bl	800e180 <HAL_GPIO_WritePin>
                          |CSB1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSB_2_GPIO_Port, CSB_2_Pin, GPIO_PIN_SET);
 800aac2:	2201      	movs	r2, #1
 800aac4:	2180      	movs	r1, #128	@ 0x80
 800aac6:	4830      	ldr	r0, [pc, #192]	@ (800ab88 <MX_GPIO_Init+0x154>)
 800aac8:	f003 fb5a 	bl	800e180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W2_GPIO_Port, W2_Pin, GPIO_PIN_SET);
 800aacc:	2201      	movs	r2, #1
 800aace:	2120      	movs	r1, #32
 800aad0:	482e      	ldr	r0, [pc, #184]	@ (800ab8c <MX_GPIO_Init+0x158>)
 800aad2:	f003 fb55 	bl	800e180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDC_IN_Pin */
  GPIO_InitStruct.Pin = SDC_IN_Pin;
 800aad6:	2302      	movs	r3, #2
 800aad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aada:	2300      	movs	r3, #0
 800aadc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aade:	2301      	movs	r3, #1
 800aae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDC_IN_GPIO_Port, &GPIO_InitStruct);
 800aae2:	f107 0314 	add.w	r3, r7, #20
 800aae6:	4619      	mov	r1, r3
 800aae8:	4827      	ldr	r0, [pc, #156]	@ (800ab88 <MX_GPIO_Init+0x154>)
 800aaea:	f003 f8cd 	bl	800dc88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_Enable_Pin Discharge_Enable_Pin POS_AIR_GND_Pin CSB_2_Pin
                           PC11 */
  GPIO_InitStruct.Pin = Charge_Enable_Pin|Discharge_Enable_Pin|POS_AIR_GND_Pin|CSB_2_Pin
 800aaee:	f640 039c 	movw	r3, #2204	@ 0x89c
 800aaf2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aafc:	2300      	movs	r3, #0
 800aafe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab00:	f107 0314 	add.w	r3, r7, #20
 800ab04:	4619      	mov	r1, r3
 800ab06:	4820      	ldr	r0, [pc, #128]	@ (800ab88 <MX_GPIO_Init+0x154>)
 800ab08:	f003 f8be 	bl	800dc88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_Power_Pin Ready_Power_Pin Always_On_Power_Pin */
  GPIO_InitStruct.Pin = Charge_Power_Pin|Ready_Power_Pin|Always_On_Power_Pin;
 800ab0c:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800ab10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab12:	2300      	movs	r3, #0
 800ab14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab1a:	f107 0314 	add.w	r3, r7, #20
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4819      	ldr	r0, [pc, #100]	@ (800ab88 <MX_GPIO_Init+0x154>)
 800ab22:	f003 f8b1 	bl	800dc88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temp_Fault_Pin Precharge_Enable_Pin NEG_AIR_GND_Pin Cell_Fault_Pin
                           W2_Pin CSB1_Pin */
  GPIO_InitStruct.Pin = Temp_Fault_Pin|Precharge_Enable_Pin|NEG_AIR_GND_Pin|Cell_Fault_Pin
 800ab26:	f648 0366 	movw	r3, #34918	@ 0x8866
 800ab2a:	617b      	str	r3, [r7, #20]
                          |W2_Pin|CSB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab34:	2300      	movs	r3, #0
 800ab36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab38:	f107 0314 	add.w	r3, r7, #20
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4813      	ldr	r0, [pc, #76]	@ (800ab8c <MX_GPIO_Init+0x158>)
 800ab40:	f003 f8a2 	bl	800dc88 <HAL_GPIO_Init>

  /*Configure GPIO pins : W1_Pin I2_Pin M1_Pin */
  GPIO_InitStruct.Pin = W1_Pin|I2_Pin|M1_Pin;
 800ab44:	f44f 6383 	mov.w	r3, #1048	@ 0x418
 800ab48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab52:	f107 0314 	add.w	r3, r7, #20
 800ab56:	4619      	mov	r1, r3
 800ab58:	480c      	ldr	r0, [pc, #48]	@ (800ab8c <MX_GPIO_Init+0x158>)
 800ab5a:	f003 f895 	bl	800dc88 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_Pin */
  GPIO_InitStruct.Pin = M2_Pin;
 800ab5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab64:	2300      	movs	r3, #0
 800ab66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 800ab6c:	f107 0314 	add.w	r3, r7, #20
 800ab70:	4619      	mov	r1, r3
 800ab72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ab76:	f003 f887 	bl	800dc88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800ab7a:	bf00      	nop
 800ab7c:	3728      	adds	r7, #40	@ 0x28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	40021000 	.word	0x40021000
 800ab88:	48000800 	.word	0x48000800
 800ab8c:	48000400 	.word	0x48000400

0800ab90 <__io_putchar>:

/**
 * @brief  Retargets the C library printf function to the USART.
 */
PUTCHAR_PROTOTYPE
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the LPUART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800ab98:	1d39      	adds	r1, r7, #4
 800ab9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab9e:	2201      	movs	r2, #1
 800aba0:	4803      	ldr	r0, [pc, #12]	@ (800abb0 <__io_putchar+0x20>)
 800aba2:	f006 fd85 	bl	80116b0 <HAL_UART_Transmit>

	return ch;
 800aba6:	687b      	ldr	r3, [r7, #4]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20001fa4 	.word	0x20001fa4

0800abb4 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	71fb      	strb	r3, [r7, #7]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 800abbe:	4b0b      	ldr	r3, [pc, #44]	@ (800abec <__io_getchar+0x38>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2208      	movs	r2, #8
 800abc4:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800abc6:	1df9      	adds	r1, r7, #7
 800abc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abcc:	2201      	movs	r2, #1
 800abce:	4807      	ldr	r0, [pc, #28]	@ (800abec <__io_getchar+0x38>)
 800abd0:	f006 fdfc 	bl	80117cc <HAL_UART_Receive>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800abd4:	1df9      	adds	r1, r7, #7
 800abd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abda:	2201      	movs	r2, #1
 800abdc:	4803      	ldr	r0, [pc, #12]	@ (800abec <__io_getchar+0x38>)
 800abde:	f006 fd67 	bl	80116b0 <HAL_UART_Transmit>
	return ch;
 800abe2:	79fb      	ldrb	r3, [r7, #7]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20001fa4 	.word	0x20001fa4

0800abf0 <HAL_FDCAN_RxFifo0Callback>:

/*placeholder echo function*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08e      	sub	sp, #56	@ 0x38
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	f003 0301 	and.w	r3, r3, #1
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d01a      	beq.n	800ac3a <HAL_FDCAN_RxFifo0Callback+0x4a>
	{
		FDCAN_RxHeaderTypeDef localRxHeader;
		uint8_t localRxData[8];

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &localRxHeader, localRxData) != HAL_OK)
 800ac04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ac08:	f107 0208 	add.w	r2, r7, #8
 800ac0c:	2140      	movs	r1, #64	@ 0x40
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f002 fcae 	bl	800d570 <HAL_FDCAN_GetRxMessage>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d002      	beq.n	800ac20 <HAL_FDCAN_RxFifo0Callback+0x30>
		{
			Error_Handler();
 800ac1a:	f000 f813 	bl	800ac44 <Error_Handler>
			return;
 800ac1e:	e00c      	b.n	800ac3a <HAL_FDCAN_RxFifo0Callback+0x4a>
		}

		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, localRxData) != HAL_OK)
 800ac20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ac24:	461a      	mov	r2, r3
 800ac26:	4906      	ldr	r1, [pc, #24]	@ (800ac40 <HAL_FDCAN_RxFifo0Callback+0x50>)
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f002 fc5c 	bl	800d4e6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <HAL_FDCAN_RxFifo0Callback+0x4a>
		{
			Error_Handler();
 800ac34:	f000 f806 	bl	800ac44 <Error_Handler>
			return;
 800ac38:	bf00      	nop
		}
	}
}
 800ac3a:	3738      	adds	r7, #56	@ 0x38
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	200021f4 	.word	0x200021f4

0800ac44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800ac48:	b672      	cpsid	i
}
 800ac4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800ac4c:	bf00      	nop
 800ac4e:	e7fd      	b.n	800ac4c <Error_Handler+0x8>

0800ac50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac56:	4b0f      	ldr	r3, [pc, #60]	@ (800ac94 <HAL_MspInit+0x44>)
 800ac58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac5a:	4a0e      	ldr	r2, [pc, #56]	@ (800ac94 <HAL_MspInit+0x44>)
 800ac5c:	f043 0301 	orr.w	r3, r3, #1
 800ac60:	6613      	str	r3, [r2, #96]	@ 0x60
 800ac62:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <HAL_MspInit+0x44>)
 800ac64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac6e:	4b09      	ldr	r3, [pc, #36]	@ (800ac94 <HAL_MspInit+0x44>)
 800ac70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac72:	4a08      	ldr	r2, [pc, #32]	@ (800ac94 <HAL_MspInit+0x44>)
 800ac74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac78:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac7a:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <HAL_MspInit+0x44>)
 800ac7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800ac86:	f003 fc69 	bl	800e55c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	40021000 	.word	0x40021000

0800ac98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b0a0      	sub	sp, #128	@ 0x80
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aca0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800aca4:	2200      	movs	r2, #0
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	605a      	str	r2, [r3, #4]
 800acaa:	609a      	str	r2, [r3, #8]
 800acac:	60da      	str	r2, [r3, #12]
 800acae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800acb0:	f107 0318 	add.w	r3, r7, #24
 800acb4:	2254      	movs	r2, #84	@ 0x54
 800acb6:	2100      	movs	r1, #0
 800acb8:	4618      	mov	r0, r3
 800acba:	f009 fb9d 	bl	80143f8 <memset>
  if(hadc->Instance==ADC1)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acc6:	d13e      	bne.n	800ad46 <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800acc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800accc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800acce:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800acd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800acd4:	f107 0318 	add.w	r3, r7, #24
 800acd8:	4618      	mov	r0, r3
 800acda:	f004 f97d 	bl	800efd8 <HAL_RCCEx_PeriphCLKConfig>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800ace4:	f7ff ffae 	bl	800ac44 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800ace8:	4b3a      	ldr	r3, [pc, #232]	@ (800add4 <HAL_ADC_MspInit+0x13c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3301      	adds	r3, #1
 800acee:	4a39      	ldr	r2, [pc, #228]	@ (800add4 <HAL_ADC_MspInit+0x13c>)
 800acf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800acf2:	4b38      	ldr	r3, [pc, #224]	@ (800add4 <HAL_ADC_MspInit+0x13c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d10b      	bne.n	800ad12 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800acfa:	4b37      	ldr	r3, [pc, #220]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800acfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acfe:	4a36      	ldr	r2, [pc, #216]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ad04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad06:	4b34      	ldr	r3, [pc, #208]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad12:	4b31      	ldr	r3, [pc, #196]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad16:	4a30      	ldr	r2, [pc, #192]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad18:	f043 0301 	orr.w	r3, r3, #1
 800ad1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad1e:	4b2e      	ldr	r3, [pc, #184]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	613b      	str	r3, [r7, #16]
 800ad28:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Low_Pin;
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_Sensor_Low_GPIO_Port, &GPIO_InitStruct);
 800ad36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ad40:	f002 ffa2 	bl	800dc88 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800ad44:	e042      	b.n	800adcc <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a24      	ldr	r2, [pc, #144]	@ (800addc <HAL_ADC_MspInit+0x144>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d13d      	bne.n	800adcc <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800ad50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800ad56:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800ad5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad5c:	f107 0318 	add.w	r3, r7, #24
 800ad60:	4618      	mov	r0, r3
 800ad62:	f004 f939 	bl	800efd8 <HAL_RCCEx_PeriphCLKConfig>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 800ad6c:	f7ff ff6a 	bl	800ac44 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800ad70:	4b18      	ldr	r3, [pc, #96]	@ (800add4 <HAL_ADC_MspInit+0x13c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	4a17      	ldr	r2, [pc, #92]	@ (800add4 <HAL_ADC_MspInit+0x13c>)
 800ad78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800ad7a:	4b16      	ldr	r3, [pc, #88]	@ (800add4 <HAL_ADC_MspInit+0x13c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d10b      	bne.n	800ad9a <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800ad82:	4b15      	ldr	r3, [pc, #84]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad86:	4a14      	ldr	r2, [pc, #80]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ad8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad8e:	4b12      	ldr	r3, [pc, #72]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad9a:	4b0f      	ldr	r3, [pc, #60]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ad9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad9e:	4a0e      	ldr	r2, [pc, #56]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ada0:	f043 0301 	orr.w	r3, r3, #1
 800ada4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ada6:	4b0c      	ldr	r3, [pc, #48]	@ (800add8 <HAL_ADC_MspInit+0x140>)
 800ada8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	60bb      	str	r3, [r7, #8]
 800adb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_Sensor_High_Pin;
 800adb2:	2310      	movs	r3, #16
 800adb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800adb6:	2303      	movs	r3, #3
 800adb8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_Sensor_High_GPIO_Port, &GPIO_InitStruct);
 800adbe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800adc2:	4619      	mov	r1, r3
 800adc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800adc8:	f002 ff5e 	bl	800dc88 <HAL_GPIO_Init>
}
 800adcc:	bf00      	nop
 800adce:	3780      	adds	r7, #128	@ 0x80
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	20002368 	.word	0x20002368
 800add8:	40021000 	.word	0x40021000
 800addc:	50000100 	.word	0x50000100

0800ade0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b09e      	sub	sp, #120	@ 0x78
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	609a      	str	r2, [r3, #8]
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800adf8:	f107 0310 	add.w	r3, r7, #16
 800adfc:	2254      	movs	r2, #84	@ 0x54
 800adfe:	2100      	movs	r1, #0
 800ae00:	4618      	mov	r0, r3
 800ae02:	f009 faf9 	bl	80143f8 <memset>
  if(hfdcan->Instance==FDCAN2)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a24      	ldr	r2, [pc, #144]	@ (800ae9c <HAL_FDCAN_MspInit+0xbc>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d140      	bne.n	800ae92 <HAL_FDCAN_MspInit+0xb2>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800ae10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800ae16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ae1a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ae1c:	f107 0310 	add.w	r3, r7, #16
 800ae20:	4618      	mov	r0, r3
 800ae22:	f004 f8d9 	bl	800efd8 <HAL_RCCEx_PeriphCLKConfig>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800ae2c:	f7ff ff0a 	bl	800ac44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800ae30:	4b1b      	ldr	r3, [pc, #108]	@ (800aea0 <HAL_FDCAN_MspInit+0xc0>)
 800ae32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae34:	4a1a      	ldr	r2, [pc, #104]	@ (800aea0 <HAL_FDCAN_MspInit+0xc0>)
 800ae36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ae3a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae3c:	4b18      	ldr	r3, [pc, #96]	@ (800aea0 <HAL_FDCAN_MspInit+0xc0>)
 800ae3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae44:	60fb      	str	r3, [r7, #12]
 800ae46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae48:	4b15      	ldr	r3, [pc, #84]	@ (800aea0 <HAL_FDCAN_MspInit+0xc0>)
 800ae4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae4c:	4a14      	ldr	r2, [pc, #80]	@ (800aea0 <HAL_FDCAN_MspInit+0xc0>)
 800ae4e:	f043 0302 	orr.w	r3, r3, #2
 800ae52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae54:	4b12      	ldr	r3, [pc, #72]	@ (800aea0 <HAL_FDCAN_MspInit+0xc0>)
 800ae56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	60bb      	str	r3, [r7, #8]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800ae60:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800ae64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae66:	2302      	movs	r3, #2
 800ae68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800ae72:	2309      	movs	r3, #9
 800ae74:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae76:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4809      	ldr	r0, [pc, #36]	@ (800aea4 <HAL_FDCAN_MspInit+0xc4>)
 800ae7e:	f002 ff03 	bl	800dc88 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800ae82:	2200      	movs	r2, #0
 800ae84:	2100      	movs	r1, #0
 800ae86:	2056      	movs	r0, #86	@ 0x56
 800ae88:	f002 f8d5 	bl	800d036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800ae8c:	2056      	movs	r0, #86	@ 0x56
 800ae8e:	f002 f8ec 	bl	800d06a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800ae92:	bf00      	nop
 800ae94:	3778      	adds	r7, #120	@ 0x78
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	40006800 	.word	0x40006800
 800aea0:	40021000 	.word	0x40021000
 800aea4:	48000400 	.word	0x48000400

0800aea8 <HAL_FDCAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* hfdcan)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  if(hfdcan->Instance==FDCAN2)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a0a      	ldr	r2, [pc, #40]	@ (800aee0 <HAL_FDCAN_MspDeInit+0x38>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d10d      	bne.n	800aed6 <HAL_FDCAN_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN FDCAN2_MspDeInit 0 */

    /* USER CODE END FDCAN2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 800aeba:	4b0a      	ldr	r3, [pc, #40]	@ (800aee4 <HAL_FDCAN_MspDeInit+0x3c>)
 800aebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aebe:	4a09      	ldr	r2, [pc, #36]	@ (800aee4 <HAL_FDCAN_MspDeInit+0x3c>)
 800aec0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aec4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 800aec6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800aeca:	4807      	ldr	r0, [pc, #28]	@ (800aee8 <HAL_FDCAN_MspDeInit+0x40>)
 800aecc:	f003 f85e 	bl	800df8c <HAL_GPIO_DeInit>

    /* FDCAN2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(FDCAN2_IT0_IRQn);
 800aed0:	2056      	movs	r0, #86	@ 0x56
 800aed2:	f002 f8d8 	bl	800d086 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN FDCAN2_MspDeInit 1 */

    /* USER CODE END FDCAN2_MspDeInit 1 */
  }

}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	40006800 	.word	0x40006800
 800aee4:	40021000 	.word	0x40021000
 800aee8:	48000400 	.word	0x48000400

0800aeec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b09e      	sub	sp, #120	@ 0x78
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aef4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	605a      	str	r2, [r3, #4]
 800aefe:	609a      	str	r2, [r3, #8]
 800af00:	60da      	str	r2, [r3, #12]
 800af02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800af04:	f107 0310 	add.w	r3, r7, #16
 800af08:	2254      	movs	r2, #84	@ 0x54
 800af0a:	2100      	movs	r1, #0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f009 fa73 	bl	80143f8 <memset>
  if(hi2c->Instance==I2C1)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a1f      	ldr	r2, [pc, #124]	@ (800af94 <HAL_I2C_MspInit+0xa8>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d136      	bne.n	800af8a <HAL_I2C_MspInit+0x9e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800af1c:	2340      	movs	r3, #64	@ 0x40
 800af1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800af20:	2300      	movs	r3, #0
 800af22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800af24:	f107 0310 	add.w	r3, r7, #16
 800af28:	4618      	mov	r0, r3
 800af2a:	f004 f855 	bl	800efd8 <HAL_RCCEx_PeriphCLKConfig>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800af34:	f7ff fe86 	bl	800ac44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af38:	4b17      	ldr	r3, [pc, #92]	@ (800af98 <HAL_I2C_MspInit+0xac>)
 800af3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af3c:	4a16      	ldr	r2, [pc, #88]	@ (800af98 <HAL_I2C_MspInit+0xac>)
 800af3e:	f043 0302 	orr.w	r3, r3, #2
 800af42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800af44:	4b14      	ldr	r3, [pc, #80]	@ (800af98 <HAL_I2C_MspInit+0xac>)
 800af46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af48:	f003 0302 	and.w	r3, r3, #2
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800af50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800af54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800af56:	2312      	movs	r3, #18
 800af58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af5a:	2300      	movs	r3, #0
 800af5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af5e:	2300      	movs	r3, #0
 800af60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800af62:	2304      	movs	r3, #4
 800af64:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800af6a:	4619      	mov	r1, r3
 800af6c:	480b      	ldr	r0, [pc, #44]	@ (800af9c <HAL_I2C_MspInit+0xb0>)
 800af6e:	f002 fe8b 	bl	800dc88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800af72:	4b09      	ldr	r3, [pc, #36]	@ (800af98 <HAL_I2C_MspInit+0xac>)
 800af74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af76:	4a08      	ldr	r2, [pc, #32]	@ (800af98 <HAL_I2C_MspInit+0xac>)
 800af78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af7c:	6593      	str	r3, [r2, #88]	@ 0x58
 800af7e:	4b06      	ldr	r3, [pc, #24]	@ (800af98 <HAL_I2C_MspInit+0xac>)
 800af80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af86:	60bb      	str	r3, [r7, #8]
 800af88:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800af8a:	bf00      	nop
 800af8c:	3778      	adds	r7, #120	@ 0x78
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	40005400 	.word	0x40005400
 800af98:	40021000 	.word	0x40021000
 800af9c:	48000400 	.word	0x48000400

0800afa0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b09e      	sub	sp, #120	@ 0x78
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afa8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800afac:	2200      	movs	r2, #0
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	605a      	str	r2, [r3, #4]
 800afb2:	609a      	str	r2, [r3, #8]
 800afb4:	60da      	str	r2, [r3, #12]
 800afb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800afb8:	f107 0310 	add.w	r3, r7, #16
 800afbc:	2254      	movs	r2, #84	@ 0x54
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f009 fa19 	bl	80143f8 <memset>
  if(huart->Instance==LPUART1)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a1f      	ldr	r2, [pc, #124]	@ (800b048 <HAL_UART_MspInit+0xa8>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d136      	bne.n	800b03e <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800afd0:	2320      	movs	r3, #32
 800afd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800afd4:	2300      	movs	r3, #0
 800afd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800afd8:	f107 0310 	add.w	r3, r7, #16
 800afdc:	4618      	mov	r0, r3
 800afde:	f003 fffb 	bl	800efd8 <HAL_RCCEx_PeriphCLKConfig>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800afe8:	f7ff fe2c 	bl	800ac44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800afec:	4b17      	ldr	r3, [pc, #92]	@ (800b04c <HAL_UART_MspInit+0xac>)
 800afee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aff0:	4a16      	ldr	r2, [pc, #88]	@ (800b04c <HAL_UART_MspInit+0xac>)
 800aff2:	f043 0301 	orr.w	r3, r3, #1
 800aff6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800aff8:	4b14      	ldr	r3, [pc, #80]	@ (800b04c <HAL_UART_MspInit+0xac>)
 800affa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b004:	4b11      	ldr	r3, [pc, #68]	@ (800b04c <HAL_UART_MspInit+0xac>)
 800b006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b008:	4a10      	ldr	r2, [pc, #64]	@ (800b04c <HAL_UART_MspInit+0xac>)
 800b00a:	f043 0301 	orr.w	r3, r3, #1
 800b00e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b010:	4b0e      	ldr	r3, [pc, #56]	@ (800b04c <HAL_UART_MspInit+0xac>)
 800b012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	60bb      	str	r3, [r7, #8]
 800b01a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800b01c:	230c      	movs	r3, #12
 800b01e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b020:	2302      	movs	r3, #2
 800b022:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b024:	2300      	movs	r3, #0
 800b026:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b028:	2300      	movs	r3, #0
 800b02a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800b02c:	230c      	movs	r3, #12
 800b02e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b030:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800b034:	4619      	mov	r1, r3
 800b036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b03a:	f002 fe25 	bl	800dc88 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800b03e:	bf00      	nop
 800b040:	3778      	adds	r7, #120	@ 0x78
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	40008000 	.word	0x40008000
 800b04c:	40021000 	.word	0x40021000

0800b050 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b098      	sub	sp, #96	@ 0x60
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b058:	f107 030c 	add.w	r3, r7, #12
 800b05c:	2254      	movs	r2, #84	@ 0x54
 800b05e:	2100      	movs	r1, #0
 800b060:	4618      	mov	r0, r3
 800b062:	f009 f9c9 	bl	80143f8 <memset>
  if(hrtc->Instance==RTC)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a15      	ldr	r2, [pc, #84]	@ (800b0c0 <HAL_RTC_MspInit+0x70>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d123      	bne.n	800b0b8 <HAL_RTC_MspInit+0x68>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b070:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b074:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800b076:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b07a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b07c:	f107 030c 	add.w	r3, r7, #12
 800b080:	4618      	mov	r0, r3
 800b082:	f003 ffa9 	bl	800efd8 <HAL_RCCEx_PeriphCLKConfig>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800b08c:	f7ff fdda 	bl	800ac44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b090:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <HAL_RTC_MspInit+0x74>)
 800b092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b096:	4a0b      	ldr	r2, [pc, #44]	@ (800b0c4 <HAL_RTC_MspInit+0x74>)
 800b098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b09c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800b0a0:	4b08      	ldr	r3, [pc, #32]	@ (800b0c4 <HAL_RTC_MspInit+0x74>)
 800b0a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0a4:	4a07      	ldr	r2, [pc, #28]	@ (800b0c4 <HAL_RTC_MspInit+0x74>)
 800b0a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b0aa:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0ac:	4b05      	ldr	r3, [pc, #20]	@ (800b0c4 <HAL_RTC_MspInit+0x74>)
 800b0ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0b4:	60bb      	str	r3, [r7, #8]
 800b0b6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800b0b8:	bf00      	nop
 800b0ba:	3760      	adds	r7, #96	@ 0x60
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	40002800 	.word	0x40002800
 800b0c4:	40021000 	.word	0x40021000

0800b0c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b08a      	sub	sp, #40	@ 0x28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d0:	f107 0314 	add.w	r3, r7, #20
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	605a      	str	r2, [r3, #4]
 800b0da:	609a      	str	r2, [r3, #8]
 800b0dc:	60da      	str	r2, [r3, #12]
 800b0de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a17      	ldr	r2, [pc, #92]	@ (800b144 <HAL_SPI_MspInit+0x7c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d128      	bne.n	800b13c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b0ea:	4b17      	ldr	r3, [pc, #92]	@ (800b148 <HAL_SPI_MspInit+0x80>)
 800b0ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0ee:	4a16      	ldr	r2, [pc, #88]	@ (800b148 <HAL_SPI_MspInit+0x80>)
 800b0f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b0f4:	6613      	str	r3, [r2, #96]	@ 0x60
 800b0f6:	4b14      	ldr	r3, [pc, #80]	@ (800b148 <HAL_SPI_MspInit+0x80>)
 800b0f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b0fe:	613b      	str	r3, [r7, #16]
 800b100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b102:	4b11      	ldr	r3, [pc, #68]	@ (800b148 <HAL_SPI_MspInit+0x80>)
 800b104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b106:	4a10      	ldr	r2, [pc, #64]	@ (800b148 <HAL_SPI_MspInit+0x80>)
 800b108:	f043 0301 	orr.w	r3, r3, #1
 800b10c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b10e:	4b0e      	ldr	r3, [pc, #56]	@ (800b148 <HAL_SPI_MspInit+0x80>)
 800b110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b11a:	23e0      	movs	r3, #224	@ 0xe0
 800b11c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11e:	2302      	movs	r3, #2
 800b120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b122:	2300      	movs	r3, #0
 800b124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b126:	2300      	movs	r3, #0
 800b128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b12a:	2305      	movs	r3, #5
 800b12c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b12e:	f107 0314 	add.w	r3, r7, #20
 800b132:	4619      	mov	r1, r3
 800b134:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b138:	f002 fda6 	bl	800dc88 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800b13c:	bf00      	nop
 800b13e:	3728      	adds	r7, #40	@ 0x28
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	40013000 	.word	0x40013000
 800b148:	40021000 	.word	0x40021000

0800b14c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a13      	ldr	r2, [pc, #76]	@ (800b1a8 <HAL_TIM_PWM_MspInit+0x5c>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d10c      	bne.n	800b178 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b15e:	4b13      	ldr	r3, [pc, #76]	@ (800b1ac <HAL_TIM_PWM_MspInit+0x60>)
 800b160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b162:	4a12      	ldr	r2, [pc, #72]	@ (800b1ac <HAL_TIM_PWM_MspInit+0x60>)
 800b164:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b168:	6613      	str	r3, [r2, #96]	@ 0x60
 800b16a:	4b10      	ldr	r3, [pc, #64]	@ (800b1ac <HAL_TIM_PWM_MspInit+0x60>)
 800b16c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b16e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800b176:	e010      	b.n	800b19a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1b0 <HAL_TIM_PWM_MspInit+0x64>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d10b      	bne.n	800b19a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b182:	4b0a      	ldr	r3, [pc, #40]	@ (800b1ac <HAL_TIM_PWM_MspInit+0x60>)
 800b184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b186:	4a09      	ldr	r2, [pc, #36]	@ (800b1ac <HAL_TIM_PWM_MspInit+0x60>)
 800b188:	f043 0302 	orr.w	r3, r3, #2
 800b18c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b18e:	4b07      	ldr	r3, [pc, #28]	@ (800b1ac <HAL_TIM_PWM_MspInit+0x60>)
 800b190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b192:	f003 0302 	and.w	r3, r3, #2
 800b196:	60bb      	str	r3, [r7, #8]
 800b198:	68bb      	ldr	r3, [r7, #8]
}
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	40012c00 	.word	0x40012c00
 800b1ac:	40021000 	.word	0x40021000
 800b1b0:	40000400 	.word	0x40000400

0800b1b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c4:	d10c      	bne.n	800b1e0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b1c6:	4b12      	ldr	r3, [pc, #72]	@ (800b210 <HAL_TIM_Base_MspInit+0x5c>)
 800b1c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1ca:	4a11      	ldr	r2, [pc, #68]	@ (800b210 <HAL_TIM_Base_MspInit+0x5c>)
 800b1cc:	f043 0301 	orr.w	r3, r3, #1
 800b1d0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b1d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b210 <HAL_TIM_Base_MspInit+0x5c>)
 800b1d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800b1de:	e010      	b.n	800b202 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a0b      	ldr	r2, [pc, #44]	@ (800b214 <HAL_TIM_Base_MspInit+0x60>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d10b      	bne.n	800b202 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b1ea:	4b09      	ldr	r3, [pc, #36]	@ (800b210 <HAL_TIM_Base_MspInit+0x5c>)
 800b1ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ee:	4a08      	ldr	r2, [pc, #32]	@ (800b210 <HAL_TIM_Base_MspInit+0x5c>)
 800b1f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b1f4:	6613      	str	r3, [r2, #96]	@ 0x60
 800b1f6:	4b06      	ldr	r3, [pc, #24]	@ (800b210 <HAL_TIM_Base_MspInit+0x5c>)
 800b1f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1fe:	60bb      	str	r3, [r7, #8]
 800b200:	68bb      	ldr	r3, [r7, #8]
}
 800b202:	bf00      	nop
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	40021000 	.word	0x40021000
 800b214:	40013400 	.word	0x40013400

0800b218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08a      	sub	sp, #40	@ 0x28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b220:	f107 0314 	add.w	r3, r7, #20
 800b224:	2200      	movs	r2, #0
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	605a      	str	r2, [r3, #4]
 800b22a:	609a      	str	r2, [r3, #8]
 800b22c:	60da      	str	r2, [r3, #12]
 800b22e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a22      	ldr	r2, [pc, #136]	@ (800b2c0 <HAL_TIM_MspPostInit+0xa8>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d11d      	bne.n	800b276 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b23a:	4b22      	ldr	r3, [pc, #136]	@ (800b2c4 <HAL_TIM_MspPostInit+0xac>)
 800b23c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b23e:	4a21      	ldr	r2, [pc, #132]	@ (800b2c4 <HAL_TIM_MspPostInit+0xac>)
 800b240:	f043 0304 	orr.w	r3, r3, #4
 800b244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b246:	4b1f      	ldr	r3, [pc, #124]	@ (800b2c4 <HAL_TIM_MspPostInit+0xac>)
 800b248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	613b      	str	r3, [r7, #16]
 800b250:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b252:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b258:	2302      	movs	r3, #2
 800b25a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b25c:	2300      	movs	r3, #0
 800b25e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b260:	2300      	movs	r3, #0
 800b262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800b264:	2304      	movs	r3, #4
 800b266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b268:	f107 0314 	add.w	r3, r7, #20
 800b26c:	4619      	mov	r1, r3
 800b26e:	4816      	ldr	r0, [pc, #88]	@ (800b2c8 <HAL_TIM_MspPostInit+0xb0>)
 800b270:	f002 fd0a 	bl	800dc88 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b274:	e020      	b.n	800b2b8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a14      	ldr	r2, [pc, #80]	@ (800b2cc <HAL_TIM_MspPostInit+0xb4>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d11b      	bne.n	800b2b8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b280:	4b10      	ldr	r3, [pc, #64]	@ (800b2c4 <HAL_TIM_MspPostInit+0xac>)
 800b282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b284:	4a0f      	ldr	r2, [pc, #60]	@ (800b2c4 <HAL_TIM_MspPostInit+0xac>)
 800b286:	f043 0302 	orr.w	r3, r3, #2
 800b28a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b28c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c4 <HAL_TIM_MspPostInit+0xac>)
 800b28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b290:	f003 0302 	and.w	r3, r3, #2
 800b294:	60fb      	str	r3, [r7, #12]
 800b296:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800b298:	2380      	movs	r3, #128	@ 0x80
 800b29a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b29c:	2302      	movs	r3, #2
 800b29e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 800b2a8:	230a      	movs	r3, #10
 800b2aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2ac:	f107 0314 	add.w	r3, r7, #20
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4807      	ldr	r0, [pc, #28]	@ (800b2d0 <HAL_TIM_MspPostInit+0xb8>)
 800b2b4:	f002 fce8 	bl	800dc88 <HAL_GPIO_Init>
}
 800b2b8:	bf00      	nop
 800b2ba:	3728      	adds	r7, #40	@ 0x28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	40012c00 	.word	0x40012c00
 800b2c4:	40021000 	.word	0x40021000
 800b2c8:	48000800 	.word	0x48000800
 800b2cc:	40000400 	.word	0x40000400
 800b2d0:	48000400 	.word	0x48000400

0800b2d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b2d8:	bf00      	nop
 800b2da:	e7fd      	b.n	800b2d8 <NMI_Handler+0x4>

0800b2dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b2e0:	bf00      	nop
 800b2e2:	e7fd      	b.n	800b2e0 <HardFault_Handler+0x4>

0800b2e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b2e8:	bf00      	nop
 800b2ea:	e7fd      	b.n	800b2e8 <MemManage_Handler+0x4>

0800b2ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b2f0:	bf00      	nop
 800b2f2:	e7fd      	b.n	800b2f0 <BusFault_Handler+0x4>

0800b2f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b2f8:	bf00      	nop
 800b2fa:	e7fd      	b.n	800b2f8 <UsageFault_Handler+0x4>

0800b2fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b300:	bf00      	nop
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b30a:	b480      	push	{r7}
 800b30c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b30e:	bf00      	nop
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b31c:	bf00      	nop
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b32a:	f000 f961 	bl	800b5f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b32e:	bf00      	nop
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800b338:	4802      	ldr	r0, [pc, #8]	@ (800b344 <FDCAN2_IT0_IRQHandler+0x10>)
 800b33a:	f002 fa21 	bl	800d780 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800b33e:	bf00      	nop
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20001eec 	.word	0x20001eec

0800b348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  return 1;
 800b34c:	2301      	movs	r3, #1
}
 800b34e:	4618      	mov	r0, r3
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <_kill>:

int _kill(int pid, int sig)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b362:	f009 f873 	bl	801444c <__errno>
 800b366:	4603      	mov	r3, r0
 800b368:	2216      	movs	r2, #22
 800b36a:	601a      	str	r2, [r3, #0]
  return -1;
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b370:	4618      	mov	r0, r3
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <_exit>:

void _exit (int status)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b380:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff ffe7 	bl	800b358 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b38a:	bf00      	nop
 800b38c:	e7fd      	b.n	800b38a <_exit+0x12>

0800b38e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b086      	sub	sp, #24
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b39a:	2300      	movs	r3, #0
 800b39c:	617b      	str	r3, [r7, #20]
 800b39e:	e00a      	b.n	800b3b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b3a0:	f7ff fc08 	bl	800abb4 <__io_getchar>
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	60ba      	str	r2, [r7, #8]
 800b3ac:	b2ca      	uxtb	r2, r1
 800b3ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	617b      	str	r3, [r7, #20]
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	dbf0      	blt.n	800b3a0 <_read+0x12>
  }

  return len;
 800b3be:	687b      	ldr	r3, [r7, #4]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	617b      	str	r3, [r7, #20]
 800b3d8:	e009      	b.n	800b3ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	1c5a      	adds	r2, r3, #1
 800b3de:	60ba      	str	r2, [r7, #8]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff fbd4 	bl	800ab90 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	617b      	str	r3, [r7, #20]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	dbf1      	blt.n	800b3da <_write+0x12>
  }
  return len;
 800b3f6:	687b      	ldr	r3, [r7, #4]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <_close>:

int _close(int file)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b428:	605a      	str	r2, [r3, #4]
  return 0;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <_isatty>:

int _isatty(int file)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b440:	2301      	movs	r3, #1
}
 800b442:	4618      	mov	r0, r3
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b44e:	b480      	push	{r7}
 800b450:	b085      	sub	sp, #20
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b470:	4a14      	ldr	r2, [pc, #80]	@ (800b4c4 <_sbrk+0x5c>)
 800b472:	4b15      	ldr	r3, [pc, #84]	@ (800b4c8 <_sbrk+0x60>)
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b47c:	4b13      	ldr	r3, [pc, #76]	@ (800b4cc <_sbrk+0x64>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b484:	4b11      	ldr	r3, [pc, #68]	@ (800b4cc <_sbrk+0x64>)
 800b486:	4a12      	ldr	r2, [pc, #72]	@ (800b4d0 <_sbrk+0x68>)
 800b488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b48a:	4b10      	ldr	r3, [pc, #64]	@ (800b4cc <_sbrk+0x64>)
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4413      	add	r3, r2
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	429a      	cmp	r2, r3
 800b496:	d207      	bcs.n	800b4a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b498:	f008 ffd8 	bl	801444c <__errno>
 800b49c:	4603      	mov	r3, r0
 800b49e:	220c      	movs	r2, #12
 800b4a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b4a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4a6:	e009      	b.n	800b4bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b4a8:	4b08      	ldr	r3, [pc, #32]	@ (800b4cc <_sbrk+0x64>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b4ae:	4b07      	ldr	r3, [pc, #28]	@ (800b4cc <_sbrk+0x64>)
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	4a05      	ldr	r2, [pc, #20]	@ (800b4cc <_sbrk+0x64>)
 800b4b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20020000 	.word	0x20020000
 800b4c8:	00000400 	.word	0x00000400
 800b4cc:	2000236c 	.word	0x2000236c
 800b4d0:	200024c0 	.word	0x200024c0

0800b4d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b4d8:	4b06      	ldr	r3, [pc, #24]	@ (800b4f4 <SystemInit+0x20>)
 800b4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4de:	4a05      	ldr	r2, [pc, #20]	@ (800b4f4 <SystemInit+0x20>)
 800b4e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b4e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b4e8:	bf00      	nop
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	e000ed00 	.word	0xe000ed00

0800b4f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b4f8:	480d      	ldr	r0, [pc, #52]	@ (800b530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b4fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b4fc:	f7ff ffea 	bl	800b4d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b500:	480c      	ldr	r0, [pc, #48]	@ (800b534 <LoopForever+0x6>)
  ldr r1, =_edata
 800b502:	490d      	ldr	r1, [pc, #52]	@ (800b538 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b504:	4a0d      	ldr	r2, [pc, #52]	@ (800b53c <LoopForever+0xe>)
  movs r3, #0
 800b506:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800b508:	e002      	b.n	800b510 <LoopCopyDataInit>

0800b50a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b50a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b50c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b50e:	3304      	adds	r3, #4

0800b510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b514:	d3f9      	bcc.n	800b50a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b516:	4a0a      	ldr	r2, [pc, #40]	@ (800b540 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b518:	4c0a      	ldr	r4, [pc, #40]	@ (800b544 <LoopForever+0x16>)
  movs r3, #0
 800b51a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b51c:	e001      	b.n	800b522 <LoopFillZerobss>

0800b51e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b51e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b520:	3204      	adds	r2, #4

0800b522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b524:	d3fb      	bcc.n	800b51e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b526:	f008 ff97 	bl	8014458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b52a:	f7fe fdd3 	bl	800a0d4 <main>

0800b52e <LoopForever>:

LoopForever:
    b LoopForever
 800b52e:	e7fe      	b.n	800b52e <LoopForever>
  ldr   r0, =_estack
 800b530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b538:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800b53c:	080185a8 	.word	0x080185a8
  ldr r2, =_sbss
 800b540:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800b544:	200024c0 	.word	0x200024c0

0800b548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b548:	e7fe      	b.n	800b548 <ADC1_2_IRQHandler>

0800b54a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b554:	2003      	movs	r0, #3
 800b556:	f001 fd63 	bl	800d020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b55a:	2000      	movs	r0, #0
 800b55c:	f000 f80e 	bl	800b57c <HAL_InitTick>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	71fb      	strb	r3, [r7, #7]
 800b56a:	e001      	b.n	800b570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b56c:	f7ff fb70 	bl	800ac50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b570:	79fb      	ldrb	r3, [r7, #7]

}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800b588:	4b16      	ldr	r3, [pc, #88]	@ (800b5e4 <HAL_InitTick+0x68>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d022      	beq.n	800b5d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800b590:	4b15      	ldr	r3, [pc, #84]	@ (800b5e8 <HAL_InitTick+0x6c>)
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	4b13      	ldr	r3, [pc, #76]	@ (800b5e4 <HAL_InitTick+0x68>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b59c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fd7c 	bl	800d0a2 <HAL_SYSTICK_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10f      	bne.n	800b5d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b0f      	cmp	r3, #15
 800b5b4:	d809      	bhi.n	800b5ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	6879      	ldr	r1, [r7, #4]
 800b5ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5be:	f001 fd3a 	bl	800d036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b5c2:	4a0a      	ldr	r2, [pc, #40]	@ (800b5ec <HAL_InitTick+0x70>)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	e007      	b.n	800b5da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	73fb      	strb	r3, [r7, #15]
 800b5ce:	e004      	b.n	800b5da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	73fb      	strb	r3, [r7, #15]
 800b5d4:	e001      	b.n	800b5da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20000058 	.word	0x20000058
 800b5e8:	20000050 	.word	0x20000050
 800b5ec:	20000054 	.word	0x20000054

0800b5f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b5f4:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <HAL_IncTick+0x1c>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	4b05      	ldr	r3, [pc, #20]	@ (800b610 <HAL_IncTick+0x20>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	4a03      	ldr	r2, [pc, #12]	@ (800b60c <HAL_IncTick+0x1c>)
 800b600:	6013      	str	r3, [r2, #0]
}
 800b602:	bf00      	nop
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20002370 	.word	0x20002370
 800b610:	20000058 	.word	0x20000058

0800b614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b614:	b480      	push	{r7}
 800b616:	af00      	add	r7, sp, #0
  return uwTick;
 800b618:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <HAL_GetTick+0x14>)
 800b61a:	681b      	ldr	r3, [r3, #0]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	20002370 	.word	0x20002370

0800b62c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b634:	f7ff ffee 	bl	800b614 <HAL_GetTick>
 800b638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b644:	d004      	beq.n	800b650 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800b646:	4b09      	ldr	r3, [pc, #36]	@ (800b66c <HAL_Delay+0x40>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	4413      	add	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b650:	bf00      	nop
 800b652:	f7ff ffdf 	bl	800b614 <HAL_GetTick>
 800b656:	4602      	mov	r2, r0
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d8f7      	bhi.n	800b652 <HAL_Delay+0x26>
  {
  }
}
 800b662:	bf00      	nop
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20000058 	.word	0x20000058

0800b670 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	431a      	orrs	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	609a      	str	r2, [r3, #8]
}
 800b68a:	bf00      	nop
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b696:	b480      	push	{r7}
 800b698:	b083      	sub	sp, #12
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	609a      	str	r2, [r3, #8]
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3360      	adds	r3, #96	@ 0x60
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	4b08      	ldr	r3, [pc, #32]	@ (800b71c <LL_ADC_SetOffset+0x44>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	4313      	orrs	r3, r2
 800b708:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b710:	bf00      	nop
 800b712:	371c      	adds	r7, #28
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	03fff000 	.word	0x03fff000

0800b720 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3360      	adds	r3, #96	@ 0x60
 800b72e:	461a      	mov	r2, r3
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3360      	adds	r3, #96	@ 0x60
 800b75c:	461a      	mov	r2, r3
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	431a      	orrs	r2, r3
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b776:	bf00      	nop
 800b778:	371c      	adds	r7, #28
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800b782:	b480      	push	{r7}
 800b784:	b087      	sub	sp, #28
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3360      	adds	r3, #96	@ 0x60
 800b792:	461a      	mov	r2, r3
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800b7ac:	bf00      	nop
 800b7ae:	371c      	adds	r7, #28
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3360      	adds	r3, #96	@ 0x60
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800b7e2:	bf00      	nop
 800b7e4:	371c      	adds	r7, #28
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	431a      	orrs	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	615a      	str	r2, [r3, #20]
}
 800b808:	bf00      	nop
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b828:	2301      	movs	r3, #1
 800b82a:	e000      	b.n	800b82e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b087      	sub	sp, #28
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3330      	adds	r3, #48	@ 0x30
 800b84a:	461a      	mov	r2, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	0a1b      	lsrs	r3, r3, #8
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	f003 030c 	and.w	r3, r3, #12
 800b856:	4413      	add	r3, r2
 800b858:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	f003 031f 	and.w	r3, r3, #31
 800b864:	211f      	movs	r1, #31
 800b866:	fa01 f303 	lsl.w	r3, r1, r3
 800b86a:	43db      	mvns	r3, r3
 800b86c:	401a      	ands	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	0e9b      	lsrs	r3, r3, #26
 800b872:	f003 011f 	and.w	r1, r3, #31
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f003 031f 	and.w	r3, r3, #31
 800b87c:	fa01 f303 	lsl.w	r3, r1, r3
 800b880:	431a      	orrs	r2, r3
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b886:	bf00      	nop
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b892:	b480      	push	{r7}
 800b894:	b087      	sub	sp, #28
 800b896:	af00      	add	r7, sp, #0
 800b898:	60f8      	str	r0, [r7, #12]
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3314      	adds	r3, #20
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	0e5b      	lsrs	r3, r3, #25
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	4413      	add	r3, r2
 800b8b0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	0d1b      	lsrs	r3, r3, #20
 800b8ba:	f003 031f 	and.w	r3, r3, #31
 800b8be:	2107      	movs	r1, #7
 800b8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c4:	43db      	mvns	r3, r3
 800b8c6:	401a      	ands	r2, r3
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	0d1b      	lsrs	r3, r3, #20
 800b8cc:	f003 031f 	and.w	r3, r3, #31
 800b8d0:	6879      	ldr	r1, [r7, #4]
 800b8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b8dc:	bf00      	nop
 800b8de:	371c      	adds	r7, #28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b900:	43db      	mvns	r3, r3
 800b902:	401a      	ands	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f003 0318 	and.w	r3, r3, #24
 800b90a:	4908      	ldr	r1, [pc, #32]	@ (800b92c <LL_ADC_SetChannelSingleDiff+0x44>)
 800b90c:	40d9      	lsrs	r1, r3
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	400b      	ands	r3, r1
 800b912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b916:	431a      	orrs	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b91e:	bf00      	nop
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	0007ffff 	.word	0x0007ffff

0800b930 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	f003 031f 	and.w	r3, r3, #31
}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6093      	str	r3, [r2, #8]
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b99c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9a0:	d101      	bne.n	800b9a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b9c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b9c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689b      	ldr	r3, [r3, #8]
 800b9e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b9ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9f0:	d101      	bne.n	800b9f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e000      	b.n	800b9f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ba18:	f043 0201 	orr.w	r2, r3, #1
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d101      	bne.n	800ba44 <LL_ADC_IsEnabled+0x18>
 800ba40:	2301      	movs	r3, #1
 800ba42:	e000      	b.n	800ba46 <LL_ADC_IsEnabled+0x1a>
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ba66:	f043 0204 	orr.w	r2, r3, #4
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f003 0304 	and.w	r3, r3, #4
 800ba8a:	2b04      	cmp	r3, #4
 800ba8c:	d101      	bne.n	800ba92 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b08      	cmp	r3, #8
 800bab2:	d101      	bne.n	800bab8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800bab4:	2301      	movs	r3, #1
 800bab6:	e000      	b.n	800baba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
	...

0800bac8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bac8:	b590      	push	{r4, r7, lr}
 800baca:	b089      	sub	sp, #36	@ 0x24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e1a9      	b.n	800be36 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d109      	bne.n	800bb04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff f8d1 	bl	800ac98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff ff3f 	bl	800b98c <LL_ADC_IsDeepPowerDownEnabled>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d004      	beq.n	800bb1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff ff25 	bl	800b968 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff ff5a 	bl	800b9dc <LL_ADC_IsInternalRegulatorEnabled>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d115      	bne.n	800bb5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff ff3e 	bl	800b9b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bb38:	4b9c      	ldr	r3, [pc, #624]	@ (800bdac <HAL_ADC_Init+0x2e4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	099b      	lsrs	r3, r3, #6
 800bb3e:	4a9c      	ldr	r2, [pc, #624]	@ (800bdb0 <HAL_ADC_Init+0x2e8>)
 800bb40:	fba2 2303 	umull	r2, r3, r2, r3
 800bb44:	099b      	lsrs	r3, r3, #6
 800bb46:	3301      	adds	r3, #1
 800bb48:	005b      	lsls	r3, r3, #1
 800bb4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800bb4c:	e002      	b.n	800bb54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1f9      	bne.n	800bb4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff ff3c 	bl	800b9dc <LL_ADC_IsInternalRegulatorEnabled>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10d      	bne.n	800bb86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb6e:	f043 0210 	orr.w	r2, r3, #16
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb7a:	f043 0201 	orr.w	r2, r3, #1
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7ff ff75 	bl	800ba7a <LL_ADC_REG_IsConversionOngoing>
 800bb90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb96:	f003 0310 	and.w	r3, r3, #16
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f040 8142 	bne.w	800be24 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f040 813e 	bne.w	800be24 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800bbb0:	f043 0202 	orr.w	r2, r3, #2
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7ff ff35 	bl	800ba2c <LL_ADC_IsEnabled>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d141      	bne.n	800bc4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbd0:	d004      	beq.n	800bbdc <HAL_ADC_Init+0x114>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a77      	ldr	r2, [pc, #476]	@ (800bdb4 <HAL_ADC_Init+0x2ec>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d10f      	bne.n	800bbfc <HAL_ADC_Init+0x134>
 800bbdc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800bbe0:	f7ff ff24 	bl	800ba2c <LL_ADC_IsEnabled>
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	4873      	ldr	r0, [pc, #460]	@ (800bdb4 <HAL_ADC_Init+0x2ec>)
 800bbe8:	f7ff ff20 	bl	800ba2c <LL_ADC_IsEnabled>
 800bbec:	4603      	mov	r3, r0
 800bbee:	4323      	orrs	r3, r4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bf0c      	ite	eq
 800bbf4:	2301      	moveq	r3, #1
 800bbf6:	2300      	movne	r3, #0
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	e012      	b.n	800bc22 <HAL_ADC_Init+0x15a>
 800bbfc:	486e      	ldr	r0, [pc, #440]	@ (800bdb8 <HAL_ADC_Init+0x2f0>)
 800bbfe:	f7ff ff15 	bl	800ba2c <LL_ADC_IsEnabled>
 800bc02:	4604      	mov	r4, r0
 800bc04:	486d      	ldr	r0, [pc, #436]	@ (800bdbc <HAL_ADC_Init+0x2f4>)
 800bc06:	f7ff ff11 	bl	800ba2c <LL_ADC_IsEnabled>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	431c      	orrs	r4, r3
 800bc0e:	486c      	ldr	r0, [pc, #432]	@ (800bdc0 <HAL_ADC_Init+0x2f8>)
 800bc10:	f7ff ff0c 	bl	800ba2c <LL_ADC_IsEnabled>
 800bc14:	4603      	mov	r3, r0
 800bc16:	4323      	orrs	r3, r4
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bf0c      	ite	eq
 800bc1c:	2301      	moveq	r3, #1
 800bc1e:	2300      	movne	r3, #0
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d012      	beq.n	800bc4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc2e:	d004      	beq.n	800bc3a <HAL_ADC_Init+0x172>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a5f      	ldr	r2, [pc, #380]	@ (800bdb4 <HAL_ADC_Init+0x2ec>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d101      	bne.n	800bc3e <HAL_ADC_Init+0x176>
 800bc3a:	4a62      	ldr	r2, [pc, #392]	@ (800bdc4 <HAL_ADC_Init+0x2fc>)
 800bc3c:	e000      	b.n	800bc40 <HAL_ADC_Init+0x178>
 800bc3e:	4a62      	ldr	r2, [pc, #392]	@ (800bdc8 <HAL_ADC_Init+0x300>)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4619      	mov	r1, r3
 800bc46:	4610      	mov	r0, r2
 800bc48:	f7ff fd12 	bl	800b670 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7f5b      	ldrb	r3, [r3, #29]
 800bc50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800bc56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800bc5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800bc62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bc6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d106      	bne.n	800bc88 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	045b      	lsls	r3, r3, #17
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d009      	beq.n	800bca4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc94:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800bc9e:	69ba      	ldr	r2, [r7, #24]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68da      	ldr	r2, [r3, #12]
 800bcaa:	4b48      	ldr	r3, [pc, #288]	@ (800bdcc <HAL_ADC_Init+0x304>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	6812      	ldr	r2, [r2, #0]
 800bcb2:	69b9      	ldr	r1, [r7, #24]
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	430a      	orrs	r2, r1
 800bccc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff fee4 	bl	800baa0 <LL_ADC_INJ_IsConversionOngoing>
 800bcd8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d17f      	bne.n	800bde0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d17c      	bne.n	800bde0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800bcea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bcf2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd02:	f023 0302 	bic.w	r3, r3, #2
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	6812      	ldr	r2, [r2, #0]
 800bd0a:	69b9      	ldr	r1, [r7, #24]
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d017      	beq.n	800bd48 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	691a      	ldr	r2, [r3, #16]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bd26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800bd34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	6911      	ldr	r1, [r2, #16]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	6812      	ldr	r2, [r2, #0]
 800bd40:	430b      	orrs	r3, r1
 800bd42:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800bd46:	e013      	b.n	800bd70 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	691a      	ldr	r2, [r3, #16]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bd56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800bd68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bd6c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d12a      	bne.n	800bdd0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bd84:	f023 0304 	bic.w	r3, r3, #4
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bd90:	4311      	orrs	r1, r2
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800bd96:	4311      	orrs	r1, r2
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	431a      	orrs	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f042 0201 	orr.w	r2, r2, #1
 800bda8:	611a      	str	r2, [r3, #16]
 800bdaa:	e019      	b.n	800bde0 <HAL_ADC_Init+0x318>
 800bdac:	20000050 	.word	0x20000050
 800bdb0:	053e2d63 	.word	0x053e2d63
 800bdb4:	50000100 	.word	0x50000100
 800bdb8:	50000400 	.word	0x50000400
 800bdbc:	50000500 	.word	0x50000500
 800bdc0:	50000600 	.word	0x50000600
 800bdc4:	50000300 	.word	0x50000300
 800bdc8:	50000700 	.word	0x50000700
 800bdcc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	691a      	ldr	r2, [r3, #16]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 0201 	bic.w	r2, r2, #1
 800bdde:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d10c      	bne.n	800be02 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdee:	f023 010f 	bic.w	r1, r3, #15
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	1e5a      	subs	r2, r3, #1
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	631a      	str	r2, [r3, #48]	@ 0x30
 800be00:	e007      	b.n	800be12 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f022 020f 	bic.w	r2, r2, #15
 800be10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be16:	f023 0303 	bic.w	r3, r3, #3
 800be1a:	f043 0201 	orr.w	r2, r3, #1
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	65da      	str	r2, [r3, #92]	@ 0x5c
 800be22:	e007      	b.n	800be34 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be28:	f043 0210 	orr.w	r2, r3, #16
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800be34:	7ffb      	ldrb	r3, [r7, #31]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3724      	adds	r7, #36	@ 0x24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd90      	pop	{r4, r7, pc}
 800be3e:	bf00      	nop

0800be40 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be50:	d004      	beq.n	800be5c <HAL_ADC_Start+0x1c>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a67      	ldr	r2, [pc, #412]	@ (800bff4 <HAL_ADC_Start+0x1b4>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d101      	bne.n	800be60 <HAL_ADC_Start+0x20>
 800be5c:	4b66      	ldr	r3, [pc, #408]	@ (800bff8 <HAL_ADC_Start+0x1b8>)
 800be5e:	e000      	b.n	800be62 <HAL_ADC_Start+0x22>
 800be60:	4b66      	ldr	r3, [pc, #408]	@ (800bffc <HAL_ADC_Start+0x1bc>)
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff fd64 	bl	800b930 <LL_ADC_GetMultimode>
 800be68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff fe03 	bl	800ba7a <LL_ADC_REG_IsConversionOngoing>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	f040 80b4 	bne.w	800bfe4 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800be82:	2b01      	cmp	r3, #1
 800be84:	d101      	bne.n	800be8a <HAL_ADC_Start+0x4a>
 800be86:	2302      	movs	r3, #2
 800be88:	e0af      	b.n	800bfea <HAL_ADC_Start+0x1aa>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fe0c 	bl	800cab0 <ADC_Enable>
 800be98:	4603      	mov	r3, r0
 800be9a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800be9c:	7dfb      	ldrb	r3, [r7, #23]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f040 809b 	bne.w	800bfda <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bea8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a4d      	ldr	r2, [pc, #308]	@ (800bff4 <HAL_ADC_Start+0x1b4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d009      	beq.n	800bed6 <HAL_ADC_Start+0x96>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a4e      	ldr	r2, [pc, #312]	@ (800c000 <HAL_ADC_Start+0x1c0>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d002      	beq.n	800bed2 <HAL_ADC_Start+0x92>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	e003      	b.n	800beda <HAL_ADC_Start+0x9a>
 800bed2:	4b4c      	ldr	r3, [pc, #304]	@ (800c004 <HAL_ADC_Start+0x1c4>)
 800bed4:	e001      	b.n	800beda <HAL_ADC_Start+0x9a>
 800bed6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6812      	ldr	r2, [r2, #0]
 800bede:	4293      	cmp	r3, r2
 800bee0:	d002      	beq.n	800bee8 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d105      	bne.n	800bef4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800befc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf00:	d106      	bne.n	800bf10 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf06:	f023 0206 	bic.w	r2, r3, #6
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	661a      	str	r2, [r3, #96]	@ 0x60
 800bf0e:	e002      	b.n	800bf16 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	221c      	movs	r2, #28
 800bf1c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a32      	ldr	r2, [pc, #200]	@ (800bff4 <HAL_ADC_Start+0x1b4>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d009      	beq.n	800bf44 <HAL_ADC_Start+0x104>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a32      	ldr	r2, [pc, #200]	@ (800c000 <HAL_ADC_Start+0x1c0>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d002      	beq.n	800bf40 <HAL_ADC_Start+0x100>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	e003      	b.n	800bf48 <HAL_ADC_Start+0x108>
 800bf40:	4b30      	ldr	r3, [pc, #192]	@ (800c004 <HAL_ADC_Start+0x1c4>)
 800bf42:	e001      	b.n	800bf48 <HAL_ADC_Start+0x108>
 800bf44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6812      	ldr	r2, [r2, #0]
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d008      	beq.n	800bf62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d005      	beq.n	800bf62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	2b05      	cmp	r3, #5
 800bf5a:	d002      	beq.n	800bf62 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	2b09      	cmp	r3, #9
 800bf60:	d114      	bne.n	800bf8c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d007      	beq.n	800bf80 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bf78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff fd64 	bl	800ba52 <LL_ADC_REG_StartConversion>
 800bf8a:	e02d      	b.n	800bfe8 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a15      	ldr	r2, [pc, #84]	@ (800bff4 <HAL_ADC_Start+0x1b4>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d009      	beq.n	800bfb6 <HAL_ADC_Start+0x176>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a16      	ldr	r2, [pc, #88]	@ (800c000 <HAL_ADC_Start+0x1c0>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d002      	beq.n	800bfb2 <HAL_ADC_Start+0x172>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	e003      	b.n	800bfba <HAL_ADC_Start+0x17a>
 800bfb2:	4b14      	ldr	r3, [pc, #80]	@ (800c004 <HAL_ADC_Start+0x1c4>)
 800bfb4:	e001      	b.n	800bfba <HAL_ADC_Start+0x17a>
 800bfb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800bfba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00f      	beq.n	800bfe8 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfcc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bfd0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bfd8:	e006      	b.n	800bfe8 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800bfe2:	e001      	b.n	800bfe8 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	50000100 	.word	0x50000100
 800bff8:	50000300 	.word	0x50000300
 800bffc:	50000700 	.word	0x50000700
 800c000:	50000500 	.word	0x50000500
 800c004:	50000400 	.word	0x50000400

0800c008 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c01a:	d004      	beq.n	800c026 <HAL_ADC_PollForConversion+0x1e>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a77      	ldr	r2, [pc, #476]	@ (800c200 <HAL_ADC_PollForConversion+0x1f8>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d101      	bne.n	800c02a <HAL_ADC_PollForConversion+0x22>
 800c026:	4b77      	ldr	r3, [pc, #476]	@ (800c204 <HAL_ADC_PollForConversion+0x1fc>)
 800c028:	e000      	b.n	800c02c <HAL_ADC_PollForConversion+0x24>
 800c02a:	4b77      	ldr	r3, [pc, #476]	@ (800c208 <HAL_ADC_PollForConversion+0x200>)
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fc7f 	bl	800b930 <LL_ADC_GetMultimode>
 800c032:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	2b08      	cmp	r3, #8
 800c03a:	d102      	bne.n	800c042 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800c03c:	2308      	movs	r3, #8
 800c03e:	61fb      	str	r3, [r7, #28]
 800c040:	e037      	b.n	800c0b2 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d005      	beq.n	800c054 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	2b05      	cmp	r3, #5
 800c04c:	d002      	beq.n	800c054 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	2b09      	cmp	r3, #9
 800c052:	d111      	bne.n	800c078 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d007      	beq.n	800c072 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c066:	f043 0220 	orr.w	r2, r3, #32
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e0c1      	b.n	800c1f6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800c072:	2304      	movs	r3, #4
 800c074:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c076:	e01c      	b.n	800c0b2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c080:	d004      	beq.n	800c08c <HAL_ADC_PollForConversion+0x84>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a5e      	ldr	r2, [pc, #376]	@ (800c200 <HAL_ADC_PollForConversion+0x1f8>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d101      	bne.n	800c090 <HAL_ADC_PollForConversion+0x88>
 800c08c:	4b5d      	ldr	r3, [pc, #372]	@ (800c204 <HAL_ADC_PollForConversion+0x1fc>)
 800c08e:	e000      	b.n	800c092 <HAL_ADC_PollForConversion+0x8a>
 800c090:	4b5d      	ldr	r3, [pc, #372]	@ (800c208 <HAL_ADC_PollForConversion+0x200>)
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff fc5a 	bl	800b94c <LL_ADC_GetMultiDMATransfer>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d007      	beq.n	800c0ae <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0a2:	f043 0220 	orr.w	r2, r3, #32
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e0a3      	b.n	800c1f6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800c0ae:	2304      	movs	r3, #4
 800c0b0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c0b2:	f7ff faaf 	bl	800b614 <HAL_GetTick>
 800c0b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c0b8:	e021      	b.n	800c0fe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0c0:	d01d      	beq.n	800c0fe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800c0c2:	f7ff faa7 	bl	800b614 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <HAL_ADC_PollForConversion+0xd0>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d112      	bne.n	800c0fe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	4013      	ands	r3, r2
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10b      	bne.n	800c0fe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0ea:	f043 0204 	orr.w	r2, r3, #4
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	e07b      	b.n	800c1f6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	4013      	ands	r3, r2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0d6      	beq.n	800c0ba <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c110:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7ff fb79 	bl	800b814 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d01c      	beq.n	800c162 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	7f5b      	ldrb	r3, [r3, #29]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d118      	bne.n	800c162 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0308 	and.w	r3, r3, #8
 800c13a:	2b08      	cmp	r3, #8
 800c13c:	d111      	bne.n	800c162 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c142:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c14e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c15a:	f043 0201 	orr.w	r2, r3, #1
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a26      	ldr	r2, [pc, #152]	@ (800c200 <HAL_ADC_PollForConversion+0x1f8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d009      	beq.n	800c180 <HAL_ADC_PollForConversion+0x178>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a26      	ldr	r2, [pc, #152]	@ (800c20c <HAL_ADC_PollForConversion+0x204>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d002      	beq.n	800c17c <HAL_ADC_PollForConversion+0x174>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	e003      	b.n	800c184 <HAL_ADC_PollForConversion+0x17c>
 800c17c:	4b24      	ldr	r3, [pc, #144]	@ (800c210 <HAL_ADC_PollForConversion+0x208>)
 800c17e:	e001      	b.n	800c184 <HAL_ADC_PollForConversion+0x17c>
 800c180:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	6812      	ldr	r2, [r2, #0]
 800c188:	4293      	cmp	r3, r2
 800c18a:	d008      	beq.n	800c19e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2b05      	cmp	r3, #5
 800c196:	d002      	beq.n	800c19e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	2b09      	cmp	r3, #9
 800c19c:	d104      	bne.n	800c1a8 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	61bb      	str	r3, [r7, #24]
 800c1a6:	e014      	b.n	800c1d2 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a14      	ldr	r2, [pc, #80]	@ (800c200 <HAL_ADC_PollForConversion+0x1f8>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d009      	beq.n	800c1c6 <HAL_ADC_PollForConversion+0x1be>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a15      	ldr	r2, [pc, #84]	@ (800c20c <HAL_ADC_PollForConversion+0x204>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d002      	beq.n	800c1c2 <HAL_ADC_PollForConversion+0x1ba>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	e003      	b.n	800c1ca <HAL_ADC_PollForConversion+0x1c2>
 800c1c2:	4b13      	ldr	r3, [pc, #76]	@ (800c210 <HAL_ADC_PollForConversion+0x208>)
 800c1c4:	e001      	b.n	800c1ca <HAL_ADC_PollForConversion+0x1c2>
 800c1c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800c1ca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	2b08      	cmp	r3, #8
 800c1d6:	d104      	bne.n	800c1e2 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2208      	movs	r2, #8
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e008      	b.n	800c1f4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d103      	bne.n	800c1f4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	220c      	movs	r2, #12
 800c1f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3720      	adds	r7, #32
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	50000100 	.word	0x50000100
 800c204:	50000300 	.word	0x50000300
 800c208:	50000700 	.word	0x50000700
 800c20c:	50000500 	.word	0x50000500
 800c210:	50000400 	.word	0x50000400

0800c214 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c222:	4618      	mov	r0, r3
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
	...

0800c230 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b0b6      	sub	sp, #216	@ 0xd8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800c240:	2300      	movs	r3, #0
 800c242:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d102      	bne.n	800c254 <HAL_ADC_ConfigChannel+0x24>
 800c24e:	2302      	movs	r3, #2
 800c250:	f000 bc13 	b.w	800ca7a <HAL_ADC_ConfigChannel+0x84a>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fc0a 	bl	800ba7a <LL_ADC_REG_IsConversionOngoing>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f040 83f3 	bne.w	800ca54 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	6859      	ldr	r1, [r3, #4]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	f7ff fadd 	bl	800b83a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff fbf8 	bl	800ba7a <LL_ADC_REG_IsConversionOngoing>
 800c28a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff fc04 	bl	800baa0 <LL_ADC_INJ_IsConversionOngoing>
 800c298:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c29c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 81d9 	bne.w	800c658 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c2a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f040 81d4 	bne.w	800c658 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2b8:	d10f      	bne.n	800c2da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	f7ff fae4 	bl	800b892 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff fa8b 	bl	800b7ee <LL_ADC_SetSamplingTimeCommonConfig>
 800c2d8:	e00e      	b.n	800c2f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	6819      	ldr	r1, [r3, #0]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f7ff fad3 	bl	800b892 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7ff fa7b 	bl	800b7ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	695a      	ldr	r2, [r3, #20]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	08db      	lsrs	r3, r3, #3
 800c304:	f003 0303 	and.w	r3, r3, #3
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	fa02 f303 	lsl.w	r3, r2, r3
 800c30e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	2b04      	cmp	r3, #4
 800c318:	d022      	beq.n	800c360 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6818      	ldr	r0, [r3, #0]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	6919      	ldr	r1, [r3, #16]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c32a:	f7ff f9d5 	bl	800b6d8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6818      	ldr	r0, [r3, #0]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	6919      	ldr	r1, [r3, #16]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7ff fa21 	bl	800b782 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d102      	bne.n	800c356 <HAL_ADC_ConfigChannel+0x126>
 800c350:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c354:	e000      	b.n	800c358 <HAL_ADC_ConfigChannel+0x128>
 800c356:	2300      	movs	r3, #0
 800c358:	461a      	mov	r2, r3
 800c35a:	f7ff fa2d 	bl	800b7b8 <LL_ADC_SetOffsetSaturation>
 800c35e:	e17b      	b.n	800c658 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2100      	movs	r1, #0
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff f9da 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <HAL_ADC_ConfigChannel+0x15c>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2100      	movs	r1, #0
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff f9cf 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c382:	4603      	mov	r3, r0
 800c384:	0e9b      	lsrs	r3, r3, #26
 800c386:	f003 021f 	and.w	r2, r3, #31
 800c38a:	e01e      	b.n	800c3ca <HAL_ADC_ConfigChannel+0x19a>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2100      	movs	r1, #0
 800c392:	4618      	mov	r0, r3
 800c394:	f7ff f9c4 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c398:	4603      	mov	r3, r0
 800c39a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c39e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c3a2:	fa93 f3a3 	rbit	r3, r3
 800c3a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c3aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c3ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c3b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800c3ba:	2320      	movs	r3, #32
 800c3bc:	e004      	b.n	800c3c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800c3be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c3c2:	fab3 f383 	clz	r3, r3
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d105      	bne.n	800c3e2 <HAL_ADC_ConfigChannel+0x1b2>
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	0e9b      	lsrs	r3, r3, #26
 800c3dc:	f003 031f 	and.w	r3, r3, #31
 800c3e0:	e018      	b.n	800c414 <HAL_ADC_ConfigChannel+0x1e4>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c3ee:	fa93 f3a3 	rbit	r3, r3
 800c3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800c3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800c3fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800c406:	2320      	movs	r3, #32
 800c408:	e004      	b.n	800c414 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800c40a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c40e:	fab3 f383 	clz	r3, r3
 800c412:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c414:	429a      	cmp	r2, r3
 800c416:	d106      	bne.n	800c426 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2200      	movs	r2, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff f993 	bl	800b74c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2101      	movs	r1, #1
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff f977 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c432:	4603      	mov	r3, r0
 800c434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10a      	bne.n	800c452 <HAL_ADC_ConfigChannel+0x222>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2101      	movs	r1, #1
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff f96c 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c448:	4603      	mov	r3, r0
 800c44a:	0e9b      	lsrs	r3, r3, #26
 800c44c:	f003 021f 	and.w	r2, r3, #31
 800c450:	e01e      	b.n	800c490 <HAL_ADC_ConfigChannel+0x260>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2101      	movs	r1, #1
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff f961 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c45e:	4603      	mov	r3, r0
 800c460:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c468:	fa93 f3a3 	rbit	r3, r3
 800c46c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800c470:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800c478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800c480:	2320      	movs	r3, #32
 800c482:	e004      	b.n	800c48e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800c484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c488:	fab3 f383 	clz	r3, r3
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d105      	bne.n	800c4a8 <HAL_ADC_ConfigChannel+0x278>
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	0e9b      	lsrs	r3, r3, #26
 800c4a2:	f003 031f 	and.w	r3, r3, #31
 800c4a6:	e018      	b.n	800c4da <HAL_ADC_ConfigChannel+0x2aa>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4b4:	fa93 f3a3 	rbit	r3, r3
 800c4b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800c4bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c4c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800c4c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800c4cc:	2320      	movs	r3, #32
 800c4ce:	e004      	b.n	800c4da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800c4d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4d4:	fab3 f383 	clz	r3, r3
 800c4d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d106      	bne.n	800c4ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	2101      	movs	r1, #1
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff f930 	bl	800b74c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2102      	movs	r1, #2
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff f914 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <HAL_ADC_ConfigChannel+0x2e8>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2102      	movs	r1, #2
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff f909 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c50e:	4603      	mov	r3, r0
 800c510:	0e9b      	lsrs	r3, r3, #26
 800c512:	f003 021f 	and.w	r2, r3, #31
 800c516:	e01e      	b.n	800c556 <HAL_ADC_ConfigChannel+0x326>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2102      	movs	r1, #2
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff f8fe 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c524:	4603      	mov	r3, r0
 800c526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c52a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c52e:	fa93 f3a3 	rbit	r3, r3
 800c532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800c536:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c53a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800c53e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800c546:	2320      	movs	r3, #32
 800c548:	e004      	b.n	800c554 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800c54a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c54e:	fab3 f383 	clz	r3, r3
 800c552:	b2db      	uxtb	r3, r3
 800c554:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d105      	bne.n	800c56e <HAL_ADC_ConfigChannel+0x33e>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	0e9b      	lsrs	r3, r3, #26
 800c568:	f003 031f 	and.w	r3, r3, #31
 800c56c:	e016      	b.n	800c59c <HAL_ADC_ConfigChannel+0x36c>
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c576:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c57a:	fa93 f3a3 	rbit	r3, r3
 800c57e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800c580:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c582:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800c586:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800c58e:	2320      	movs	r3, #32
 800c590:	e004      	b.n	800c59c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800c592:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c596:	fab3 f383 	clz	r3, r3
 800c59a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d106      	bne.n	800c5ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2102      	movs	r1, #2
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff f8cf 	bl	800b74c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2103      	movs	r1, #3
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7ff f8b3 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <HAL_ADC_ConfigChannel+0x3aa>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2103      	movs	r1, #3
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7ff f8a8 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	0e9b      	lsrs	r3, r3, #26
 800c5d4:	f003 021f 	and.w	r2, r3, #31
 800c5d8:	e017      	b.n	800c60a <HAL_ADC_ConfigChannel+0x3da>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2103      	movs	r1, #3
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7ff f89d 	bl	800b720 <LL_ADC_GetOffsetChannel>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5ec:	fa93 f3a3 	rbit	r3, r3
 800c5f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800c5f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800c5f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800c5fc:	2320      	movs	r3, #32
 800c5fe:	e003      	b.n	800c608 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800c600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c602:	fab3 f383 	clz	r3, r3
 800c606:	b2db      	uxtb	r3, r3
 800c608:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c612:	2b00      	cmp	r3, #0
 800c614:	d105      	bne.n	800c622 <HAL_ADC_ConfigChannel+0x3f2>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	0e9b      	lsrs	r3, r3, #26
 800c61c:	f003 031f 	and.w	r3, r3, #31
 800c620:	e011      	b.n	800c646 <HAL_ADC_ConfigChannel+0x416>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c62a:	fa93 f3a3 	rbit	r3, r3
 800c62e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800c630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c632:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800c634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800c63a:	2320      	movs	r3, #32
 800c63c:	e003      	b.n	800c646 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800c63e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c640:	fab3 f383 	clz	r3, r3
 800c644:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c646:	429a      	cmp	r2, r3
 800c648:	d106      	bne.n	800c658 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2200      	movs	r2, #0
 800c650:	2103      	movs	r1, #3
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff f87a 	bl	800b74c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff f9e5 	bl	800ba2c <LL_ADC_IsEnabled>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	f040 813d 	bne.w	800c8e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	6819      	ldr	r1, [r3, #0]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	461a      	mov	r2, r3
 800c678:	f7ff f936 	bl	800b8e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	4aa2      	ldr	r2, [pc, #648]	@ (800c90c <HAL_ADC_ConfigChannel+0x6dc>)
 800c682:	4293      	cmp	r3, r2
 800c684:	f040 812e 	bne.w	800c8e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10b      	bne.n	800c6b0 <HAL_ADC_ConfigChannel+0x480>
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	0e9b      	lsrs	r3, r3, #26
 800c69e:	3301      	adds	r3, #1
 800c6a0:	f003 031f 	and.w	r3, r3, #31
 800c6a4:	2b09      	cmp	r3, #9
 800c6a6:	bf94      	ite	ls
 800c6a8:	2301      	movls	r3, #1
 800c6aa:	2300      	movhi	r3, #0
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	e019      	b.n	800c6e4 <HAL_ADC_ConfigChannel+0x4b4>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c6b8:	fa93 f3a3 	rbit	r3, r3
 800c6bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800c6be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800c6c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800c6c8:	2320      	movs	r3, #32
 800c6ca:	e003      	b.n	800c6d4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800c6cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6ce:	fab3 f383 	clz	r3, r3
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	f003 031f 	and.w	r3, r3, #31
 800c6da:	2b09      	cmp	r3, #9
 800c6dc:	bf94      	ite	ls
 800c6de:	2301      	movls	r3, #1
 800c6e0:	2300      	movhi	r3, #0
 800c6e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d079      	beq.n	800c7dc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d107      	bne.n	800c704 <HAL_ADC_ConfigChannel+0x4d4>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	0e9b      	lsrs	r3, r3, #26
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	069b      	lsls	r3, r3, #26
 800c6fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c702:	e015      	b.n	800c730 <HAL_ADC_ConfigChannel+0x500>
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c70a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c70c:	fa93 f3a3 	rbit	r3, r3
 800c710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800c712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c714:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800c716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800c71c:	2320      	movs	r3, #32
 800c71e:	e003      	b.n	800c728 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800c720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c722:	fab3 f383 	clz	r3, r3
 800c726:	b2db      	uxtb	r3, r3
 800c728:	3301      	adds	r3, #1
 800c72a:	069b      	lsls	r3, r3, #26
 800c72c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d109      	bne.n	800c750 <HAL_ADC_ConfigChannel+0x520>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	0e9b      	lsrs	r3, r3, #26
 800c742:	3301      	adds	r3, #1
 800c744:	f003 031f 	and.w	r3, r3, #31
 800c748:	2101      	movs	r1, #1
 800c74a:	fa01 f303 	lsl.w	r3, r1, r3
 800c74e:	e017      	b.n	800c780 <HAL_ADC_ConfigChannel+0x550>
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c758:	fa93 f3a3 	rbit	r3, r3
 800c75c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800c75e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c760:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800c762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c764:	2b00      	cmp	r3, #0
 800c766:	d101      	bne.n	800c76c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800c768:	2320      	movs	r3, #32
 800c76a:	e003      	b.n	800c774 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800c76c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c76e:	fab3 f383 	clz	r3, r3
 800c772:	b2db      	uxtb	r3, r3
 800c774:	3301      	adds	r3, #1
 800c776:	f003 031f 	and.w	r3, r3, #31
 800c77a:	2101      	movs	r1, #1
 800c77c:	fa01 f303 	lsl.w	r3, r1, r3
 800c780:	ea42 0103 	orr.w	r1, r2, r3
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <HAL_ADC_ConfigChannel+0x576>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	0e9b      	lsrs	r3, r3, #26
 800c796:	3301      	adds	r3, #1
 800c798:	f003 021f 	and.w	r2, r3, #31
 800c79c:	4613      	mov	r3, r2
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	4413      	add	r3, r2
 800c7a2:	051b      	lsls	r3, r3, #20
 800c7a4:	e018      	b.n	800c7d8 <HAL_ADC_ConfigChannel+0x5a8>
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ae:	fa93 f3a3 	rbit	r3, r3
 800c7b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800c7b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d101      	bne.n	800c7c2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800c7be:	2320      	movs	r3, #32
 800c7c0:	e003      	b.n	800c7ca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800c7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c4:	fab3 f383 	clz	r3, r3
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	f003 021f 	and.w	r2, r3, #31
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c7d8:	430b      	orrs	r3, r1
 800c7da:	e07e      	b.n	800c8da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d107      	bne.n	800c7f8 <HAL_ADC_ConfigChannel+0x5c8>
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	0e9b      	lsrs	r3, r3, #26
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	069b      	lsls	r3, r3, #26
 800c7f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c7f6:	e015      	b.n	800c824 <HAL_ADC_ConfigChannel+0x5f4>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c800:	fa93 f3a3 	rbit	r3, r3
 800c804:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c808:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800c810:	2320      	movs	r3, #32
 800c812:	e003      	b.n	800c81c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800c814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c816:	fab3 f383 	clz	r3, r3
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	3301      	adds	r3, #1
 800c81e:	069b      	lsls	r3, r3, #26
 800c820:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d109      	bne.n	800c844 <HAL_ADC_ConfigChannel+0x614>
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	0e9b      	lsrs	r3, r3, #26
 800c836:	3301      	adds	r3, #1
 800c838:	f003 031f 	and.w	r3, r3, #31
 800c83c:	2101      	movs	r1, #1
 800c83e:	fa01 f303 	lsl.w	r3, r1, r3
 800c842:	e017      	b.n	800c874 <HAL_ADC_ConfigChannel+0x644>
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	fa93 f3a3 	rbit	r3, r3
 800c850:	61fb      	str	r3, [r7, #28]
  return result;
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800c85c:	2320      	movs	r3, #32
 800c85e:	e003      	b.n	800c868 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800c860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c862:	fab3 f383 	clz	r3, r3
 800c866:	b2db      	uxtb	r3, r3
 800c868:	3301      	adds	r3, #1
 800c86a:	f003 031f 	and.w	r3, r3, #31
 800c86e:	2101      	movs	r1, #1
 800c870:	fa01 f303 	lsl.w	r3, r1, r3
 800c874:	ea42 0103 	orr.w	r1, r2, r3
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10d      	bne.n	800c8a0 <HAL_ADC_ConfigChannel+0x670>
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	0e9b      	lsrs	r3, r3, #26
 800c88a:	3301      	adds	r3, #1
 800c88c:	f003 021f 	and.w	r2, r3, #31
 800c890:	4613      	mov	r3, r2
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	4413      	add	r3, r2
 800c896:	3b1e      	subs	r3, #30
 800c898:	051b      	lsls	r3, r3, #20
 800c89a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c89e:	e01b      	b.n	800c8d8 <HAL_ADC_ConfigChannel+0x6a8>
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	fa93 f3a3 	rbit	r3, r3
 800c8ac:	613b      	str	r3, [r7, #16]
  return result;
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d101      	bne.n	800c8bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800c8b8:	2320      	movs	r3, #32
 800c8ba:	e003      	b.n	800c8c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	fab3 f383 	clz	r3, r3
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	f003 021f 	and.w	r2, r3, #31
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	4413      	add	r3, r2
 800c8d0:	3b1e      	subs	r3, #30
 800c8d2:	051b      	lsls	r3, r3, #20
 800c8d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c8d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c8de:	4619      	mov	r1, r3
 800c8e0:	f7fe ffd7 	bl	800b892 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	4b09      	ldr	r3, [pc, #36]	@ (800c910 <HAL_ADC_ConfigChannel+0x6e0>)
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 80be 	beq.w	800ca6e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8fa:	d004      	beq.n	800c906 <HAL_ADC_ConfigChannel+0x6d6>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a04      	ldr	r2, [pc, #16]	@ (800c914 <HAL_ADC_ConfigChannel+0x6e4>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d10a      	bne.n	800c91c <HAL_ADC_ConfigChannel+0x6ec>
 800c906:	4b04      	ldr	r3, [pc, #16]	@ (800c918 <HAL_ADC_ConfigChannel+0x6e8>)
 800c908:	e009      	b.n	800c91e <HAL_ADC_ConfigChannel+0x6ee>
 800c90a:	bf00      	nop
 800c90c:	407f0000 	.word	0x407f0000
 800c910:	80080000 	.word	0x80080000
 800c914:	50000100 	.word	0x50000100
 800c918:	50000300 	.word	0x50000300
 800c91c:	4b59      	ldr	r3, [pc, #356]	@ (800ca84 <HAL_ADC_ConfigChannel+0x854>)
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe fecc 	bl	800b6bc <LL_ADC_GetCommonPathInternalCh>
 800c924:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a56      	ldr	r2, [pc, #344]	@ (800ca88 <HAL_ADC_ConfigChannel+0x858>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d004      	beq.n	800c93c <HAL_ADC_ConfigChannel+0x70c>
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a55      	ldr	r2, [pc, #340]	@ (800ca8c <HAL_ADC_ConfigChannel+0x85c>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d13a      	bne.n	800c9b2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c93c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c944:	2b00      	cmp	r3, #0
 800c946:	d134      	bne.n	800c9b2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c950:	d005      	beq.n	800c95e <HAL_ADC_ConfigChannel+0x72e>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a4e      	ldr	r2, [pc, #312]	@ (800ca90 <HAL_ADC_ConfigChannel+0x860>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	f040 8085 	bne.w	800ca68 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c966:	d004      	beq.n	800c972 <HAL_ADC_ConfigChannel+0x742>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a49      	ldr	r2, [pc, #292]	@ (800ca94 <HAL_ADC_ConfigChannel+0x864>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d101      	bne.n	800c976 <HAL_ADC_ConfigChannel+0x746>
 800c972:	4a49      	ldr	r2, [pc, #292]	@ (800ca98 <HAL_ADC_ConfigChannel+0x868>)
 800c974:	e000      	b.n	800c978 <HAL_ADC_ConfigChannel+0x748>
 800c976:	4a43      	ldr	r2, [pc, #268]	@ (800ca84 <HAL_ADC_ConfigChannel+0x854>)
 800c978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c97c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c980:	4619      	mov	r1, r3
 800c982:	4610      	mov	r0, r2
 800c984:	f7fe fe87 	bl	800b696 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c988:	4b44      	ldr	r3, [pc, #272]	@ (800ca9c <HAL_ADC_ConfigChannel+0x86c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	099b      	lsrs	r3, r3, #6
 800c98e:	4a44      	ldr	r2, [pc, #272]	@ (800caa0 <HAL_ADC_ConfigChannel+0x870>)
 800c990:	fba2 2303 	umull	r2, r3, r2, r3
 800c994:	099b      	lsrs	r3, r3, #6
 800c996:	1c5a      	adds	r2, r3, #1
 800c998:	4613      	mov	r3, r2
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	4413      	add	r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c9a2:	e002      	b.n	800c9aa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1f9      	bne.n	800c9a4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c9b0:	e05a      	b.n	800ca68 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a3b      	ldr	r2, [pc, #236]	@ (800caa4 <HAL_ADC_ConfigChannel+0x874>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d125      	bne.n	800ca08 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c9bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d11f      	bne.n	800ca08 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a31      	ldr	r2, [pc, #196]	@ (800ca94 <HAL_ADC_ConfigChannel+0x864>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d104      	bne.n	800c9dc <HAL_ADC_ConfigChannel+0x7ac>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a34      	ldr	r2, [pc, #208]	@ (800caa8 <HAL_ADC_ConfigChannel+0x878>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d047      	beq.n	800ca6c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c9e4:	d004      	beq.n	800c9f0 <HAL_ADC_ConfigChannel+0x7c0>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a2a      	ldr	r2, [pc, #168]	@ (800ca94 <HAL_ADC_ConfigChannel+0x864>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d101      	bne.n	800c9f4 <HAL_ADC_ConfigChannel+0x7c4>
 800c9f0:	4a29      	ldr	r2, [pc, #164]	@ (800ca98 <HAL_ADC_ConfigChannel+0x868>)
 800c9f2:	e000      	b.n	800c9f6 <HAL_ADC_ConfigChannel+0x7c6>
 800c9f4:	4a23      	ldr	r2, [pc, #140]	@ (800ca84 <HAL_ADC_ConfigChannel+0x854>)
 800c9f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c9fe:	4619      	mov	r1, r3
 800ca00:	4610      	mov	r0, r2
 800ca02:	f7fe fe48 	bl	800b696 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ca06:	e031      	b.n	800ca6c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a27      	ldr	r2, [pc, #156]	@ (800caac <HAL_ADC_ConfigChannel+0x87c>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d12d      	bne.n	800ca6e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ca12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d127      	bne.n	800ca6e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a1c      	ldr	r2, [pc, #112]	@ (800ca94 <HAL_ADC_ConfigChannel+0x864>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d022      	beq.n	800ca6e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca30:	d004      	beq.n	800ca3c <HAL_ADC_ConfigChannel+0x80c>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a17      	ldr	r2, [pc, #92]	@ (800ca94 <HAL_ADC_ConfigChannel+0x864>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d101      	bne.n	800ca40 <HAL_ADC_ConfigChannel+0x810>
 800ca3c:	4a16      	ldr	r2, [pc, #88]	@ (800ca98 <HAL_ADC_ConfigChannel+0x868>)
 800ca3e:	e000      	b.n	800ca42 <HAL_ADC_ConfigChannel+0x812>
 800ca40:	4a10      	ldr	r2, [pc, #64]	@ (800ca84 <HAL_ADC_ConfigChannel+0x854>)
 800ca42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f7fe fe22 	bl	800b696 <LL_ADC_SetCommonPathInternalCh>
 800ca52:	e00c      	b.n	800ca6e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca58:	f043 0220 	orr.w	r2, r3, #32
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800ca66:	e002      	b.n	800ca6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ca68:	bf00      	nop
 800ca6a:	e000      	b.n	800ca6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ca6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800ca76:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	37d8      	adds	r7, #216	@ 0xd8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	50000700 	.word	0x50000700
 800ca88:	c3210000 	.word	0xc3210000
 800ca8c:	90c00010 	.word	0x90c00010
 800ca90:	50000600 	.word	0x50000600
 800ca94:	50000100 	.word	0x50000100
 800ca98:	50000300 	.word	0x50000300
 800ca9c:	20000050 	.word	0x20000050
 800caa0:	053e2d63 	.word	0x053e2d63
 800caa4:	c7520000 	.word	0xc7520000
 800caa8:	50000500 	.word	0x50000500
 800caac:	cb840000 	.word	0xcb840000

0800cab0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800cab8:	2300      	movs	r3, #0
 800caba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe ffb3 	bl	800ba2c <LL_ADC_IsEnabled>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d176      	bne.n	800cbba <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	689a      	ldr	r2, [r3, #8]
 800cad2:	4b3c      	ldr	r3, [pc, #240]	@ (800cbc4 <ADC_Enable+0x114>)
 800cad4:	4013      	ands	r3, r2
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00d      	beq.n	800caf6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cade:	f043 0210 	orr.w	r2, r3, #16
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caea:	f043 0201 	orr.w	r2, r3, #1
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e062      	b.n	800cbbc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe ff82 	bl	800ba04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb08:	d004      	beq.n	800cb14 <ADC_Enable+0x64>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a2e      	ldr	r2, [pc, #184]	@ (800cbc8 <ADC_Enable+0x118>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d101      	bne.n	800cb18 <ADC_Enable+0x68>
 800cb14:	4b2d      	ldr	r3, [pc, #180]	@ (800cbcc <ADC_Enable+0x11c>)
 800cb16:	e000      	b.n	800cb1a <ADC_Enable+0x6a>
 800cb18:	4b2d      	ldr	r3, [pc, #180]	@ (800cbd0 <ADC_Enable+0x120>)
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fe fdce 	bl	800b6bc <LL_ADC_GetCommonPathInternalCh>
 800cb20:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800cb22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d013      	beq.n	800cb52 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800cb2a:	4b2a      	ldr	r3, [pc, #168]	@ (800cbd4 <ADC_Enable+0x124>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	099b      	lsrs	r3, r3, #6
 800cb30:	4a29      	ldr	r2, [pc, #164]	@ (800cbd8 <ADC_Enable+0x128>)
 800cb32:	fba2 2303 	umull	r2, r3, r2, r3
 800cb36:	099b      	lsrs	r3, r3, #6
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	4413      	add	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800cb44:	e002      	b.n	800cb4c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1f9      	bne.n	800cb46 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800cb52:	f7fe fd5f 	bl	800b614 <HAL_GetTick>
 800cb56:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cb58:	e028      	b.n	800cbac <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe ff64 	bl	800ba2c <LL_ADC_IsEnabled>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d104      	bne.n	800cb74 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fe ff48 	bl	800ba04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800cb74:	f7fe fd4e 	bl	800b614 <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d914      	bls.n	800cbac <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d00d      	beq.n	800cbac <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb94:	f043 0210 	orr.w	r2, r3, #16
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cba0:	f043 0201 	orr.w	r2, r3, #1
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e007      	b.n	800cbbc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 0301 	and.w	r3, r3, #1
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d1cf      	bne.n	800cb5a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	8000003f 	.word	0x8000003f
 800cbc8:	50000100 	.word	0x50000100
 800cbcc:	50000300 	.word	0x50000300
 800cbd0:	50000700 	.word	0x50000700
 800cbd4:	20000050 	.word	0x20000050
 800cbd8:	053e2d63 	.word	0x053e2d63

0800cbdc <LL_ADC_IsEnabled>:
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d101      	bne.n	800cbf4 <LL_ADC_IsEnabled+0x18>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e000      	b.n	800cbf6 <LL_ADC_IsEnabled+0x1a>
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <LL_ADC_REG_IsConversionOngoing>:
{
 800cc02:	b480      	push	{r7}
 800cc04:	b083      	sub	sp, #12
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	f003 0304 	and.w	r3, r3, #4
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	d101      	bne.n	800cc1a <LL_ADC_REG_IsConversionOngoing+0x18>
 800cc16:	2301      	movs	r3, #1
 800cc18:	e000      	b.n	800cc1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b0a1      	sub	sp, #132	@ 0x84
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d101      	bne.n	800cc46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800cc42:	2302      	movs	r3, #2
 800cc44:	e0e7      	b.n	800ce16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800cc4e:	2300      	movs	r3, #0
 800cc50:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800cc52:	2300      	movs	r3, #0
 800cc54:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc5e:	d102      	bne.n	800cc66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800cc60:	4b6f      	ldr	r3, [pc, #444]	@ (800ce20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800cc62:	60bb      	str	r3, [r7, #8]
 800cc64:	e009      	b.n	800cc7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a6e      	ldr	r2, [pc, #440]	@ (800ce24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d102      	bne.n	800cc76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800cc70:	4b6d      	ldr	r3, [pc, #436]	@ (800ce28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800cc72:	60bb      	str	r3, [r7, #8]
 800cc74:	e001      	b.n	800cc7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800cc76:	2300      	movs	r3, #0
 800cc78:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10b      	bne.n	800cc98 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc84:	f043 0220 	orr.w	r2, r3, #32
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e0be      	b.n	800ce16 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7ff ffb1 	bl	800cc02 <LL_ADC_REG_IsConversionOngoing>
 800cca0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff ffab 	bl	800cc02 <LL_ADC_REG_IsConversionOngoing>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f040 80a0 	bne.w	800cdf4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800ccb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f040 809c 	bne.w	800cdf4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ccc4:	d004      	beq.n	800ccd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a55      	ldr	r2, [pc, #340]	@ (800ce20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d101      	bne.n	800ccd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800ccd0:	4b56      	ldr	r3, [pc, #344]	@ (800ce2c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800ccd2:	e000      	b.n	800ccd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800ccd4:	4b56      	ldr	r3, [pc, #344]	@ (800ce30 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800ccd6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d04b      	beq.n	800cd78 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800cce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	6859      	ldr	r1, [r3, #4]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ccf2:	035b      	lsls	r3, r3, #13
 800ccf4:	430b      	orrs	r3, r1
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ccfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd04:	d004      	beq.n	800cd10 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a45      	ldr	r2, [pc, #276]	@ (800ce20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d10f      	bne.n	800cd30 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800cd10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800cd14:	f7ff ff62 	bl	800cbdc <LL_ADC_IsEnabled>
 800cd18:	4604      	mov	r4, r0
 800cd1a:	4841      	ldr	r0, [pc, #260]	@ (800ce20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800cd1c:	f7ff ff5e 	bl	800cbdc <LL_ADC_IsEnabled>
 800cd20:	4603      	mov	r3, r0
 800cd22:	4323      	orrs	r3, r4
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	bf0c      	ite	eq
 800cd28:	2301      	moveq	r3, #1
 800cd2a:	2300      	movne	r3, #0
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	e012      	b.n	800cd56 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800cd30:	483c      	ldr	r0, [pc, #240]	@ (800ce24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800cd32:	f7ff ff53 	bl	800cbdc <LL_ADC_IsEnabled>
 800cd36:	4604      	mov	r4, r0
 800cd38:	483b      	ldr	r0, [pc, #236]	@ (800ce28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800cd3a:	f7ff ff4f 	bl	800cbdc <LL_ADC_IsEnabled>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	431c      	orrs	r4, r3
 800cd42:	483c      	ldr	r0, [pc, #240]	@ (800ce34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800cd44:	f7ff ff4a 	bl	800cbdc <LL_ADC_IsEnabled>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	4323      	orrs	r3, r4
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	bf0c      	ite	eq
 800cd50:	2301      	moveq	r3, #1
 800cd52:	2300      	movne	r3, #0
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d056      	beq.n	800ce08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800cd5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800cd62:	f023 030f 	bic.w	r3, r3, #15
 800cd66:	683a      	ldr	r2, [r7, #0]
 800cd68:	6811      	ldr	r1, [r2, #0]
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	6892      	ldr	r2, [r2, #8]
 800cd6e:	430a      	orrs	r2, r1
 800cd70:	431a      	orrs	r2, r3
 800cd72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd74:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800cd76:	e047      	b.n	800ce08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800cd78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cd80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd8c:	d004      	beq.n	800cd98 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a23      	ldr	r2, [pc, #140]	@ (800ce20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d10f      	bne.n	800cdb8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800cd98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800cd9c:	f7ff ff1e 	bl	800cbdc <LL_ADC_IsEnabled>
 800cda0:	4604      	mov	r4, r0
 800cda2:	481f      	ldr	r0, [pc, #124]	@ (800ce20 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800cda4:	f7ff ff1a 	bl	800cbdc <LL_ADC_IsEnabled>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	4323      	orrs	r3, r4
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	bf0c      	ite	eq
 800cdb0:	2301      	moveq	r3, #1
 800cdb2:	2300      	movne	r3, #0
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	e012      	b.n	800cdde <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800cdb8:	481a      	ldr	r0, [pc, #104]	@ (800ce24 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800cdba:	f7ff ff0f 	bl	800cbdc <LL_ADC_IsEnabled>
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4819      	ldr	r0, [pc, #100]	@ (800ce28 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800cdc2:	f7ff ff0b 	bl	800cbdc <LL_ADC_IsEnabled>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	431c      	orrs	r4, r3
 800cdca:	481a      	ldr	r0, [pc, #104]	@ (800ce34 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800cdcc:	f7ff ff06 	bl	800cbdc <LL_ADC_IsEnabled>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	4323      	orrs	r3, r4
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	bf0c      	ite	eq
 800cdd8:	2301      	moveq	r3, #1
 800cdda:	2300      	movne	r3, #0
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d012      	beq.n	800ce08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800cde2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800cdea:	f023 030f 	bic.w	r3, r3, #15
 800cdee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cdf0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800cdf2:	e009      	b.n	800ce08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdf8:	f043 0220 	orr.w	r2, r3, #32
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ce06:	e000      	b.n	800ce0a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ce08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800ce12:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3784      	adds	r7, #132	@ 0x84
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd90      	pop	{r4, r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	50000100 	.word	0x50000100
 800ce24:	50000400 	.word	0x50000400
 800ce28:	50000500 	.word	0x50000500
 800ce2c:	50000300 	.word	0x50000300
 800ce30:	50000700 	.word	0x50000700
 800ce34:	50000600 	.word	0x50000600

0800ce38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f003 0307 	and.w	r3, r3, #7
 800ce46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ce48:	4b0c      	ldr	r3, [pc, #48]	@ (800ce7c <__NVIC_SetPriorityGrouping+0x44>)
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ce54:	4013      	ands	r3, r2
 800ce56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ce60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ce64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ce6a:	4a04      	ldr	r2, [pc, #16]	@ (800ce7c <__NVIC_SetPriorityGrouping+0x44>)
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	60d3      	str	r3, [r2, #12]
}
 800ce70:	bf00      	nop
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	e000ed00 	.word	0xe000ed00

0800ce80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ce80:	b480      	push	{r7}
 800ce82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ce84:	4b04      	ldr	r3, [pc, #16]	@ (800ce98 <__NVIC_GetPriorityGrouping+0x18>)
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	0a1b      	lsrs	r3, r3, #8
 800ce8a:	f003 0307 	and.w	r3, r3, #7
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	e000ed00 	.word	0xe000ed00

0800ce9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	db0b      	blt.n	800cec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ceae:	79fb      	ldrb	r3, [r7, #7]
 800ceb0:	f003 021f 	and.w	r2, r3, #31
 800ceb4:	4907      	ldr	r1, [pc, #28]	@ (800ced4 <__NVIC_EnableIRQ+0x38>)
 800ceb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceba:	095b      	lsrs	r3, r3, #5
 800cebc:	2001      	movs	r0, #1
 800cebe:	fa00 f202 	lsl.w	r2, r0, r2
 800cec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800cec6:	bf00      	nop
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	e000e100 	.word	0xe000e100

0800ced8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	db12      	blt.n	800cf10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ceea:	79fb      	ldrb	r3, [r7, #7]
 800ceec:	f003 021f 	and.w	r2, r3, #31
 800cef0:	490a      	ldr	r1, [pc, #40]	@ (800cf1c <__NVIC_DisableIRQ+0x44>)
 800cef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cef6:	095b      	lsrs	r3, r3, #5
 800cef8:	2001      	movs	r0, #1
 800cefa:	fa00 f202 	lsl.w	r2, r0, r2
 800cefe:	3320      	adds	r3, #32
 800cf00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cf04:	f3bf 8f4f 	dsb	sy
}
 800cf08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf0a:	f3bf 8f6f 	isb	sy
}
 800cf0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	e000e100 	.word	0xe000e100

0800cf20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	6039      	str	r1, [r7, #0]
 800cf2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cf2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	db0a      	blt.n	800cf4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	490c      	ldr	r1, [pc, #48]	@ (800cf6c <__NVIC_SetPriority+0x4c>)
 800cf3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf3e:	0112      	lsls	r2, r2, #4
 800cf40:	b2d2      	uxtb	r2, r2
 800cf42:	440b      	add	r3, r1
 800cf44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800cf48:	e00a      	b.n	800cf60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	4908      	ldr	r1, [pc, #32]	@ (800cf70 <__NVIC_SetPriority+0x50>)
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	f003 030f 	and.w	r3, r3, #15
 800cf56:	3b04      	subs	r3, #4
 800cf58:	0112      	lsls	r2, r2, #4
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	761a      	strb	r2, [r3, #24]
}
 800cf60:	bf00      	nop
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	e000e100 	.word	0xe000e100
 800cf70:	e000ed00 	.word	0xe000ed00

0800cf74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b089      	sub	sp, #36	@ 0x24
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f003 0307 	and.w	r3, r3, #7
 800cf86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	f1c3 0307 	rsb	r3, r3, #7
 800cf8e:	2b04      	cmp	r3, #4
 800cf90:	bf28      	it	cs
 800cf92:	2304      	movcs	r3, #4
 800cf94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	3304      	adds	r3, #4
 800cf9a:	2b06      	cmp	r3, #6
 800cf9c:	d902      	bls.n	800cfa4 <NVIC_EncodePriority+0x30>
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	3b03      	subs	r3, #3
 800cfa2:	e000      	b.n	800cfa6 <NVIC_EncodePriority+0x32>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cfa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb2:	43da      	mvns	r2, r3
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	401a      	ands	r2, r3
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cfbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc6:	43d9      	mvns	r1, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cfcc:	4313      	orrs	r3, r2
         );
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3724      	adds	r7, #36	@ 0x24
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
	...

0800cfdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cfec:	d301      	bcc.n	800cff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800cfee:	2301      	movs	r3, #1
 800cff0:	e00f      	b.n	800d012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800cff2:	4a0a      	ldr	r2, [pc, #40]	@ (800d01c <SysTick_Config+0x40>)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800cffa:	210f      	movs	r1, #15
 800cffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d000:	f7ff ff8e 	bl	800cf20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d004:	4b05      	ldr	r3, [pc, #20]	@ (800d01c <SysTick_Config+0x40>)
 800d006:	2200      	movs	r2, #0
 800d008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d00a:	4b04      	ldr	r3, [pc, #16]	@ (800d01c <SysTick_Config+0x40>)
 800d00c:	2207      	movs	r2, #7
 800d00e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	e000e010 	.word	0xe000e010

0800d020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7ff ff05 	bl	800ce38 <__NVIC_SetPriorityGrouping>
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b086      	sub	sp, #24
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	4603      	mov	r3, r0
 800d03e:	60b9      	str	r1, [r7, #8]
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d044:	f7ff ff1c 	bl	800ce80 <__NVIC_GetPriorityGrouping>
 800d048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	6978      	ldr	r0, [r7, #20]
 800d050:	f7ff ff90 	bl	800cf74 <NVIC_EncodePriority>
 800d054:	4602      	mov	r2, r0
 800d056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d05a:	4611      	mov	r1, r2
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff ff5f 	bl	800cf20 <__NVIC_SetPriority>
}
 800d062:	bf00      	nop
 800d064:	3718      	adds	r7, #24
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b082      	sub	sp, #8
 800d06e:	af00      	add	r7, sp, #0
 800d070:	4603      	mov	r3, r0
 800d072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d078:	4618      	mov	r0, r3
 800d07a:	f7ff ff0f 	bl	800ce9c <__NVIC_EnableIRQ>
}
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	4603      	mov	r3, r0
 800d08e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff ff1f 	bl	800ced8 <__NVIC_DisableIRQ>
}
 800d09a:	bf00      	nop
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b082      	sub	sp, #8
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f7ff ff96 	bl	800cfdc <SysTick_Config>
 800d0b0:	4603      	mov	r3, r0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3708      	adds	r7, #8
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
	...

0800d0bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e147      	b.n	800d35e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d106      	bne.n	800d0e8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7fd fe7c 	bl	800ade0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	699a      	ldr	r2, [r3, #24]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f022 0210 	bic.w	r2, r2, #16
 800d0f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d0f8:	f7fe fa8c 	bl	800b614 <HAL_GetTick>
 800d0fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800d0fe:	e012      	b.n	800d126 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800d100:	f7fe fa88 	bl	800b614 <HAL_GetTick>
 800d104:	4602      	mov	r2, r0
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	2b0a      	cmp	r3, #10
 800d10c:	d90b      	bls.n	800d126 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d112:	f043 0201 	orr.w	r2, r3, #1
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2203      	movs	r2, #3
 800d11e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e11b      	b.n	800d35e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	f003 0308 	and.w	r3, r3, #8
 800d130:	2b08      	cmp	r3, #8
 800d132:	d0e5      	beq.n	800d100 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	699a      	ldr	r2, [r3, #24]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f042 0201 	orr.w	r2, r2, #1
 800d142:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d144:	f7fe fa66 	bl	800b614 <HAL_GetTick>
 800d148:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800d14a:	e012      	b.n	800d172 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800d14c:	f7fe fa62 	bl	800b614 <HAL_GetTick>
 800d150:	4602      	mov	r2, r0
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	2b0a      	cmp	r3, #10
 800d158:	d90b      	bls.n	800d172 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d15e:	f043 0201 	orr.w	r2, r3, #1
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2203      	movs	r2, #3
 800d16a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	e0f5      	b.n	800d35e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	f003 0301 	and.w	r3, r3, #1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d0e5      	beq.n	800d14c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	699a      	ldr	r2, [r3, #24]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f042 0202 	orr.w	r2, r2, #2
 800d18e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a74      	ldr	r2, [pc, #464]	@ (800d368 <HAL_FDCAN_Init+0x2ac>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d103      	bne.n	800d1a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800d19a:	4a74      	ldr	r2, [pc, #464]	@ (800d36c <HAL_FDCAN_Init+0x2b0>)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7c1b      	ldrb	r3, [r3, #16]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d108      	bne.n	800d1bc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	699a      	ldr	r2, [r3, #24]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d1b8:	619a      	str	r2, [r3, #24]
 800d1ba:	e007      	b.n	800d1cc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	699a      	ldr	r2, [r3, #24]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7c5b      	ldrb	r3, [r3, #17]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d108      	bne.n	800d1e6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	699a      	ldr	r2, [r3, #24]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1e2:	619a      	str	r2, [r3, #24]
 800d1e4:	e007      	b.n	800d1f6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	699a      	ldr	r2, [r3, #24]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d1f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	7c9b      	ldrb	r3, [r3, #18]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d108      	bne.n	800d210 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	699a      	ldr	r2, [r3, #24]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d20c:	619a      	str	r2, [r3, #24]
 800d20e:	e007      	b.n	800d220 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	699a      	ldr	r2, [r3, #24]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d21e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	689a      	ldr	r2, [r3, #8]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	430a      	orrs	r2, r1
 800d234:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	699a      	ldr	r2, [r3, #24]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800d244:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	691a      	ldr	r2, [r3, #16]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f022 0210 	bic.w	r2, r2, #16
 800d254:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d108      	bne.n	800d270 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f042 0204 	orr.w	r2, r2, #4
 800d26c:	619a      	str	r2, [r3, #24]
 800d26e:	e02c      	b.n	800d2ca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d028      	beq.n	800d2ca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d01c      	beq.n	800d2ba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	699a      	ldr	r2, [r3, #24]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d28e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	691a      	ldr	r2, [r3, #16]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f042 0210 	orr.w	r2, r2, #16
 800d29e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d110      	bne.n	800d2ca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	699a      	ldr	r2, [r3, #24]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f042 0220 	orr.w	r2, r2, #32
 800d2b6:	619a      	str	r2, [r3, #24]
 800d2b8:	e007      	b.n	800d2ca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	699a      	ldr	r2, [r3, #24]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f042 0220 	orr.w	r2, r2, #32
 800d2c8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	699b      	ldr	r3, [r3, #24]
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d2da:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a1b      	ldr	r3, [r3, #32]
 800d2e0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800d2e2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800d2f2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800d2f4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d2fe:	d115      	bne.n	800d32c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d304:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30a:	3b01      	subs	r3, #1
 800d30c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d30e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d314:	3b01      	subs	r3, #1
 800d316:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800d318:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d320:	3b01      	subs	r3, #1
 800d322:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800d328:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800d32a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	430a      	orrs	r2, r1
 800d33e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fbb8 	bl	800dab8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	40006400 	.word	0x40006400
 800d36c:	40006500 	.word	0x40006500

0800d370 <HAL_FDCAN_DeInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeInit(FDCAN_HandleTypeDef *hfdcan)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <HAL_FDCAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	e015      	b.n	800d3ae <HAL_FDCAN_DeInit+0x3e>

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));

  /* Stop the FDCAN module: return value is voluntary ignored */
  (void)HAL_FDCAN_Stop(hfdcan);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f83f 	bl	800d406 <HAL_FDCAN_Stop>

  /* Disable Interrupt lines */
  CLEAR_BIT(hfdcan->Instance->ILE, (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f022 0203 	bic.w	r2, r2, #3
 800d396:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* DeInit the low level hardware: CLOCK, NVIC */
  hfdcan->MspDeInitCallback(hfdcan);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_FDCAN_MspDeInit(hfdcan);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7fd fd85 	bl	800aea8 <HAL_FDCAN_MspDeInit>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Reset the FDCAN ErrorCode */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_RESET;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800d3b6:	b480      	push	{r7}
 800d3b8:	b083      	sub	sp, #12
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d110      	bne.n	800d3ec <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	699a      	ldr	r2, [r3, #24]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f022 0201 	bic.w	r2, r2, #1
 800d3e0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	e006      	b.n	800d3fa <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3f0:	f043 0204 	orr.w	r2, r3, #4
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800d3f8:	2301      	movs	r3, #1
  }
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	370c      	adds	r7, #12
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr

0800d406 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800d406:	b480      	push	{r7}
 800d408:	b085      	sub	sp, #20
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d156      	bne.n	800d4cc <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	699a      	ldr	r2, [r3, #24]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f042 0201 	orr.w	r2, r2, #1
 800d42c:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800d42e:	e011      	b.n	800d454 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b0a      	cmp	r3, #10
 800d434:	d90b      	bls.n	800d44e <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d43a:	f043 0201 	orr.w	r2, r3, #1
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2203      	movs	r2, #3
 800d446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e045      	b.n	800d4da <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3301      	adds	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0e6      	beq.n	800d430 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800d462:	2300      	movs	r3, #0
 800d464:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	699a      	ldr	r2, [r3, #24]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f022 0210 	bic.w	r2, r2, #16
 800d474:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800d476:	e011      	b.n	800d49c <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2b0a      	cmp	r3, #10
 800d47c:	d90b      	bls.n	800d496 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d482:	f043 0201 	orr.w	r2, r3, #1
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2203      	movs	r2, #3
 800d48e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e021      	b.n	800d4da <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	3301      	adds	r3, #1
 800d49a:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	699b      	ldr	r3, [r3, #24]
 800d4a2:	f003 0308 	and.w	r3, r3, #8
 800d4a6:	2b08      	cmp	r3, #8
 800d4a8:	d0e6      	beq.n	800d478 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	699a      	ldr	r2, [r3, #24]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f042 0202 	orr.w	r2, r2, #2
 800d4b8:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	e006      	b.n	800d4da <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4d0:	f043 0208 	orr.w	r2, r3, #8
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800d4d8:	2301      	movs	r3, #1
  }
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b086      	sub	sp, #24
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	60f8      	str	r0, [r7, #12]
 800d4ee:	60b9      	str	r1, [r7, #8]
 800d4f0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d12c      	bne.n	800d558 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d007      	beq.n	800d51e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d512:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e023      	b.n	800d566 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800d526:	0c1b      	lsrs	r3, r3, #16
 800d528:	f003 0303 	and.w	r3, r3, #3
 800d52c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	68b9      	ldr	r1, [r7, #8]
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f000 fb2b 	bl	800db90 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2101      	movs	r1, #1
 800d540:	697a      	ldr	r2, [r7, #20]
 800d542:	fa01 f202 	lsl.w	r2, r1, r2
 800d546:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800d54a:	2201      	movs	r2, #1
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	409a      	lsls	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	e006      	b.n	800d566 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d55c:	f043 0208 	orr.w	r2, r3, #8
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800d564:	2301      	movs	r3, #1
  }
}
 800d566:	4618      	mov	r0, r3
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800d570:	b480      	push	{r7}
 800d572:	b08b      	sub	sp, #44	@ 0x2c
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d588:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800d58a:	7efb      	ldrb	r3, [r7, #27]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	f040 80e8 	bne.w	800d762 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2b40      	cmp	r3, #64	@ 0x40
 800d596:	d137      	bne.n	800d608 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5a0:	f003 030f 	and.w	r3, r3, #15
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d107      	bne.n	800d5b8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e0db      	b.n	800d770 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d5c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d5c8:	d10a      	bne.n	800d5e0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d5d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5da:	d101      	bne.n	800d5e0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5e8:	0a1b      	lsrs	r3, r3, #8
 800d5ea:	f003 0303 	and.w	r3, r3, #3
 800d5ee:	69fa      	ldr	r2, [r7, #28]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800d5f8:	69fa      	ldr	r2, [r7, #28]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	4413      	add	r3, r2
 800d600:	00db      	lsls	r3, r3, #3
 800d602:	440b      	add	r3, r1
 800d604:	627b      	str	r3, [r7, #36]	@ 0x24
 800d606:	e036      	b.n	800d676 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d610:	f003 030f 	and.w	r3, r3, #15
 800d614:	2b00      	cmp	r3, #0
 800d616:	d107      	bne.n	800d628 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d61c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	e0a3      	b.n	800d770 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d630:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d638:	d10a      	bne.n	800d650 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d64a:	d101      	bne.n	800d650 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800d64c:	2301      	movs	r3, #1
 800d64e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d658:	0a1b      	lsrs	r3, r3, #8
 800d65a:	f003 0303 	and.w	r3, r3, #3
 800d65e:	69fa      	ldr	r2, [r7, #28]
 800d660:	4413      	add	r3, r2
 800d662:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d668:	69fa      	ldr	r2, [r7, #28]
 800d66a:	4613      	mov	r3, r2
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	4413      	add	r3, r2
 800d670:	00db      	lsls	r3, r3, #3
 800d672:	440b      	add	r3, r1
 800d674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800d676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d107      	bne.n	800d69a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800d68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	0c9b      	lsrs	r3, r3, #18
 800d690:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	e005      	b.n	800d6a6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800d69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800d6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	0c1b      	lsrs	r3, r3, #16
 800d6d4:	f003 020f 	and.w	r2, r3, #15
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	0e1b      	lsrs	r3, r3, #24
 800d6fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800d702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	0fda      	lsrs	r2, r3, #31
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800d70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70e:	3304      	adds	r3, #4
 800d710:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800d716:	2300      	movs	r3, #0
 800d718:	623b      	str	r3, [r7, #32]
 800d71a:	e00a      	b.n	800d732 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	441a      	add	r2, r3
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	440b      	add	r3, r1
 800d728:	7812      	ldrb	r2, [r2, #0]
 800d72a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	3301      	adds	r3, #1
 800d730:	623b      	str	r3, [r7, #32]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	4a11      	ldr	r2, [pc, #68]	@ (800d77c <HAL_FDCAN_GetRxMessage+0x20c>)
 800d738:	5cd3      	ldrb	r3, [r2, r3]
 800d73a:	461a      	mov	r2, r3
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	4293      	cmp	r3, r2
 800d740:	d3ec      	bcc.n	800d71c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	2b40      	cmp	r3, #64	@ 0x40
 800d746:	d105      	bne.n	800d754 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	69fa      	ldr	r2, [r7, #28]
 800d74e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800d752:	e004      	b.n	800d75e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	69fa      	ldr	r2, [r7, #28]
 800d75a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	e006      	b.n	800d770 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d766:	f043 0208 	orr.w	r2, r3, #8
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
  }
}
 800d770:	4618      	mov	r0, r3
 800d772:	372c      	adds	r7, #44	@ 0x2c
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr
 800d77c:	0801813c 	.word	0x0801813c

0800d780 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08c      	sub	sp, #48	@ 0x30
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d78e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800d792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d79c:	4013      	ands	r3, r2
 800d79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7a6:	f003 0307 	and.w	r3, r3, #7
 800d7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7d6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800d7da:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7e2:	6a3a      	ldr	r2, [r7, #32]
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800d7f2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7fa:	69fa      	ldr	r2, [r7, #28]
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d806:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d80e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	099b      	lsrs	r3, r3, #6
 800d814:	f003 0301 	and.w	r3, r3, #1
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00c      	beq.n	800d836 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	099b      	lsrs	r3, r3, #6
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	d006      	beq.n	800d836 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2240      	movs	r2, #64	@ 0x40
 800d82e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f922 	bl	800da7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	0a1b      	lsrs	r3, r3, #8
 800d83a:	f003 0301 	and.w	r3, r3, #1
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d01a      	beq.n	800d878 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	0a1b      	lsrs	r3, r3, #8
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d014      	beq.n	800d878 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d856:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	4013      	ands	r3, r2
 800d864:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d86e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800d870:	6939      	ldr	r1, [r7, #16]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f8e2 	bl	800da3c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d007      	beq.n	800d88e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d884:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800d886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f8ac 	bl	800d9e6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800d88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d890:	2b00      	cmp	r3, #0
 800d892:	d007      	beq.n	800d8a4 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d89a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800d89c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7fd f9a6 	bl	800abf0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d007      	beq.n	800d8ba <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8b0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800d8b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f8a1 	bl	800d9fc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	0a5b      	lsrs	r3, r3, #9
 800d8be:	f003 0301 	and.w	r3, r3, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00d      	beq.n	800d8e2 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	0a5b      	lsrs	r3, r3, #9
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d007      	beq.n	800d8e2 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f898 	bl	800da12 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	09db      	lsrs	r3, r3, #7
 800d8e6:	f003 0301 	and.w	r3, r3, #1
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d019      	beq.n	800d922 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	09db      	lsrs	r3, r3, #7
 800d8f2:	f003 0301 	and.w	r3, r3, #1
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d013      	beq.n	800d922 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d902:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	4013      	ands	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2280      	movs	r2, #128	@ 0x80
 800d918:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f000 f882 	bl	800da26 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	0b5b      	lsrs	r3, r3, #13
 800d926:	f003 0301 	and.w	r3, r3, #1
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00d      	beq.n	800d94a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	0b5b      	lsrs	r3, r3, #13
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	2b00      	cmp	r3, #0
 800d938:	d007      	beq.n	800d94a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d942:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f884 	bl	800da52 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	0bdb      	lsrs	r3, r3, #15
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00d      	beq.n	800d972 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	0bdb      	lsrs	r3, r3, #15
 800d95a:	f003 0301 	and.w	r3, r3, #1
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d96a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 f87a 	bl	800da66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	0b9b      	lsrs	r3, r3, #14
 800d976:	f003 0301 	and.w	r3, r3, #1
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d010      	beq.n	800d9a0 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	0b9b      	lsrs	r3, r3, #14
 800d982:	f003 0301 	and.w	r3, r3, #1
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800d992:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d998:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d007      	beq.n	800d9b6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	69fa      	ldr	r2, [r7, #28]
 800d9ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800d9ae:	69f9      	ldr	r1, [r7, #28]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f876 	bl	800daa2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800d9b6:	6a3b      	ldr	r3, [r7, #32]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d009      	beq.n	800d9d0 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6a3a      	ldr	r2, [r7, #32]
 800d9c2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d9c8:	6a3b      	ldr	r3, [r7, #32]
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 f858 	bl	800da8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800d9de:	bf00      	nop
 800d9e0:	3730      	adds	r7, #48	@ 0x30
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800d9e6:	b480      	push	{r7}
 800d9e8:	b083      	sub	sp, #12
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800da12:	b480      	push	{r7}
 800da14:	b083      	sub	sp, #12
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800da46:	bf00      	nop
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800da52:	b480      	push	{r7}
 800da54:	b083      	sub	sp, #12
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800da5a:	bf00      	nop
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800da6e:	bf00      	nop
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b083      	sub	sp, #12
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800da82:	bf00      	nop
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800da96:	bf00      	nop
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr

0800daa2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800daa2:	b480      	push	{r7}
 800daa4:	b083      	sub	sp, #12
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800daac:	bf00      	nop
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800dac0:	4b30      	ldr	r3, [pc, #192]	@ (800db84 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800dac2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a2f      	ldr	r2, [pc, #188]	@ (800db88 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d103      	bne.n	800dad6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800dad4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a2c      	ldr	r2, [pc, #176]	@ (800db8c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d103      	bne.n	800dae8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800dae6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800daf6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dafe:	041a      	lsls	r2, r3, #16
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	430a      	orrs	r2, r1
 800db06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db1c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db24:	061a      	lsls	r2, r3, #24
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	430a      	orrs	r2, r1
 800db2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	e005      	b.n	800db6a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	3304      	adds	r3, #4
 800db68:	60fb      	str	r3, [r7, #12]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	429a      	cmp	r2, r3
 800db74:	d3f3      	bcc.n	800db5e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	4000a400 	.word	0x4000a400
 800db88:	40006800 	.word	0x40006800
 800db8c:	40006c00 	.word	0x40006c00

0800db90 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800db90:	b480      	push	{r7}
 800db92:	b089      	sub	sp, #36	@ 0x24
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10a      	bne.n	800dbbc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800dbae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	61fb      	str	r3, [r7, #28]
 800dbba:	e00a      	b.n	800dbd2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800dbc4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800dbca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800dbcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dbd0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800dbdc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800dbe2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800dbe8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	4413      	add	r3, r2
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	440b      	add	r3, r1
 800dc04:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	69fa      	ldr	r2, [r7, #28]
 800dc0a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	3304      	adds	r3, #4
 800dc10:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	693a      	ldr	r2, [r7, #16]
 800dc16:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800dc1e:	2300      	movs	r3, #0
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	e020      	b.n	800dc66 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	3303      	adds	r3, #3
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	3302      	adds	r3, #2
 800dc34:	6879      	ldr	r1, [r7, #4]
 800dc36:	440b      	add	r3, r1
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800dc3c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	3301      	adds	r3, #1
 800dc42:	6879      	ldr	r1, [r7, #4]
 800dc44:	440b      	add	r3, r1
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800dc4a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	440a      	add	r2, r1
 800dc52:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800dc54:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800dc5a:	69bb      	ldr	r3, [r7, #24]
 800dc5c:	3304      	adds	r3, #4
 800dc5e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	3304      	adds	r3, #4
 800dc64:	617b      	str	r3, [r7, #20]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	4a06      	ldr	r2, [pc, #24]	@ (800dc84 <FDCAN_CopyMessageToRAM+0xf4>)
 800dc6c:	5cd3      	ldrb	r3, [r2, r3]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d3d6      	bcc.n	800dc24 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800dc76:	bf00      	nop
 800dc78:	bf00      	nop
 800dc7a:	3724      	adds	r7, #36	@ 0x24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	0801813c 	.word	0x0801813c

0800dc88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b087      	sub	sp, #28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dc92:	2300      	movs	r3, #0
 800dc94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800dc96:	e15a      	b.n	800df4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	2101      	movs	r1, #1
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	fa01 f303 	lsl.w	r3, r1, r3
 800dca4:	4013      	ands	r3, r2
 800dca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 814c 	beq.w	800df48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	f003 0303 	and.w	r3, r3, #3
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d005      	beq.n	800dcc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d130      	bne.n	800dd2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	005b      	lsls	r3, r3, #1
 800dcd2:	2203      	movs	r2, #3
 800dcd4:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd8:	43db      	mvns	r3, r3
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	4013      	ands	r3, r2
 800dcde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	68da      	ldr	r2, [r3, #12]
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dcfe:	2201      	movs	r2, #1
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	fa02 f303 	lsl.w	r3, r2, r3
 800dd06:	43db      	mvns	r3, r3
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	091b      	lsrs	r3, r3, #4
 800dd14:	f003 0201 	and.w	r2, r3, #1
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	4313      	orrs	r3, r2
 800dd22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	693a      	ldr	r2, [r7, #16]
 800dd28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	f003 0303 	and.w	r3, r3, #3
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d017      	beq.n	800dd66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	2203      	movs	r2, #3
 800dd42:	fa02 f303 	lsl.w	r3, r2, r3
 800dd46:	43db      	mvns	r3, r3
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	689a      	ldr	r2, [r3, #8]
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	005b      	lsls	r3, r3, #1
 800dd56:	fa02 f303 	lsl.w	r3, r2, r3
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	693a      	ldr	r2, [r7, #16]
 800dd64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	f003 0303 	and.w	r3, r3, #3
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	d123      	bne.n	800ddba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	08da      	lsrs	r2, r3, #3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3208      	adds	r2, #8
 800dd7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	220f      	movs	r2, #15
 800dd8a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd8e:	43db      	mvns	r3, r3
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	4013      	ands	r3, r2
 800dd94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	691a      	ldr	r2, [r3, #16]
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	f003 0307 	and.w	r3, r3, #7
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	fa02 f303 	lsl.w	r3, r2, r3
 800dda6:	693a      	ldr	r2, [r7, #16]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	08da      	lsrs	r2, r3, #3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3208      	adds	r2, #8
 800ddb4:	6939      	ldr	r1, [r7, #16]
 800ddb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	fa02 f303 	lsl.w	r3, r2, r3
 800ddca:	43db      	mvns	r3, r3
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	4013      	ands	r3, r2
 800ddd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	f003 0203 	and.w	r2, r3, #3
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	005b      	lsls	r3, r3, #1
 800ddde:	fa02 f303 	lsl.w	r3, r2, r3
 800dde2:	693a      	ldr	r2, [r7, #16]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	693a      	ldr	r2, [r7, #16]
 800ddec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 80a6 	beq.w	800df48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ddfc:	4b5b      	ldr	r3, [pc, #364]	@ (800df6c <HAL_GPIO_Init+0x2e4>)
 800ddfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de00:	4a5a      	ldr	r2, [pc, #360]	@ (800df6c <HAL_GPIO_Init+0x2e4>)
 800de02:	f043 0301 	orr.w	r3, r3, #1
 800de06:	6613      	str	r3, [r2, #96]	@ 0x60
 800de08:	4b58      	ldr	r3, [pc, #352]	@ (800df6c <HAL_GPIO_Init+0x2e4>)
 800de0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de0c:	f003 0301 	and.w	r3, r3, #1
 800de10:	60bb      	str	r3, [r7, #8]
 800de12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800de14:	4a56      	ldr	r2, [pc, #344]	@ (800df70 <HAL_GPIO_Init+0x2e8>)
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	089b      	lsrs	r3, r3, #2
 800de1a:	3302      	adds	r3, #2
 800de1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	f003 0303 	and.w	r3, r3, #3
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	220f      	movs	r2, #15
 800de2c:	fa02 f303 	lsl.w	r3, r2, r3
 800de30:	43db      	mvns	r3, r3
 800de32:	693a      	ldr	r2, [r7, #16]
 800de34:	4013      	ands	r3, r2
 800de36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800de3e:	d01f      	beq.n	800de80 <HAL_GPIO_Init+0x1f8>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4a4c      	ldr	r2, [pc, #304]	@ (800df74 <HAL_GPIO_Init+0x2ec>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d019      	beq.n	800de7c <HAL_GPIO_Init+0x1f4>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	4a4b      	ldr	r2, [pc, #300]	@ (800df78 <HAL_GPIO_Init+0x2f0>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d013      	beq.n	800de78 <HAL_GPIO_Init+0x1f0>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4a4a      	ldr	r2, [pc, #296]	@ (800df7c <HAL_GPIO_Init+0x2f4>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d00d      	beq.n	800de74 <HAL_GPIO_Init+0x1ec>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a49      	ldr	r2, [pc, #292]	@ (800df80 <HAL_GPIO_Init+0x2f8>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d007      	beq.n	800de70 <HAL_GPIO_Init+0x1e8>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a48      	ldr	r2, [pc, #288]	@ (800df84 <HAL_GPIO_Init+0x2fc>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d101      	bne.n	800de6c <HAL_GPIO_Init+0x1e4>
 800de68:	2305      	movs	r3, #5
 800de6a:	e00a      	b.n	800de82 <HAL_GPIO_Init+0x1fa>
 800de6c:	2306      	movs	r3, #6
 800de6e:	e008      	b.n	800de82 <HAL_GPIO_Init+0x1fa>
 800de70:	2304      	movs	r3, #4
 800de72:	e006      	b.n	800de82 <HAL_GPIO_Init+0x1fa>
 800de74:	2303      	movs	r3, #3
 800de76:	e004      	b.n	800de82 <HAL_GPIO_Init+0x1fa>
 800de78:	2302      	movs	r3, #2
 800de7a:	e002      	b.n	800de82 <HAL_GPIO_Init+0x1fa>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e000      	b.n	800de82 <HAL_GPIO_Init+0x1fa>
 800de80:	2300      	movs	r3, #0
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	f002 0203 	and.w	r2, r2, #3
 800de88:	0092      	lsls	r2, r2, #2
 800de8a:	4093      	lsls	r3, r2
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	4313      	orrs	r3, r2
 800de90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800de92:	4937      	ldr	r1, [pc, #220]	@ (800df70 <HAL_GPIO_Init+0x2e8>)
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	089b      	lsrs	r3, r3, #2
 800de98:	3302      	adds	r3, #2
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dea0:	4b39      	ldr	r3, [pc, #228]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	43db      	mvns	r3, r3
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	4013      	ands	r3, r2
 800deae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d003      	beq.n	800dec4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800dec4:	4a30      	ldr	r2, [pc, #192]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800deca:	4b2f      	ldr	r3, [pc, #188]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	43db      	mvns	r3, r3
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	4013      	ands	r3, r2
 800ded8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	4313      	orrs	r3, r2
 800deec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800deee:	4a26      	ldr	r2, [pc, #152]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800def4:	4b24      	ldr	r3, [pc, #144]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	43db      	mvns	r3, r3
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	4013      	ands	r3, r2
 800df02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d003      	beq.n	800df18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	4313      	orrs	r3, r2
 800df16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800df18:	4a1b      	ldr	r2, [pc, #108]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800df1e:	4b1a      	ldr	r3, [pc, #104]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	43db      	mvns	r3, r3
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	4013      	ands	r3, r2
 800df2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800df36:	2b00      	cmp	r3, #0
 800df38:	d003      	beq.n	800df42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800df3a:	693a      	ldr	r2, [r7, #16]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4313      	orrs	r3, r2
 800df40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800df42:	4a11      	ldr	r2, [pc, #68]	@ (800df88 <HAL_GPIO_Init+0x300>)
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	3301      	adds	r3, #1
 800df4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	fa22 f303 	lsr.w	r3, r2, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f47f ae9d 	bne.w	800dc98 <HAL_GPIO_Init+0x10>
  }
}
 800df5e:	bf00      	nop
 800df60:	bf00      	nop
 800df62:	371c      	adds	r7, #28
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr
 800df6c:	40021000 	.word	0x40021000
 800df70:	40010000 	.word	0x40010000
 800df74:	48000400 	.word	0x48000400
 800df78:	48000800 	.word	0x48000800
 800df7c:	48000c00 	.word	0x48000c00
 800df80:	48001000 	.word	0x48001000
 800df84:	48001400 	.word	0x48001400
 800df88:	40010400 	.word	0x40010400

0800df8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b087      	sub	sp, #28
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800df96:	2300      	movs	r3, #0
 800df98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800df9a:	e0bd      	b.n	800e118 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800df9c:	2201      	movs	r2, #1
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 80b0 	beq.w	800e112 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800dfb2:	4a60      	ldr	r2, [pc, #384]	@ (800e134 <HAL_GPIO_DeInit+0x1a8>)
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	089b      	lsrs	r3, r3, #2
 800dfb8:	3302      	adds	r3, #2
 800dfba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfbe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	f003 0303 	and.w	r3, r3, #3
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	220f      	movs	r2, #15
 800dfca:	fa02 f303 	lsl.w	r3, r2, r3
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800dfda:	d01f      	beq.n	800e01c <HAL_GPIO_DeInit+0x90>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a56      	ldr	r2, [pc, #344]	@ (800e138 <HAL_GPIO_DeInit+0x1ac>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d019      	beq.n	800e018 <HAL_GPIO_DeInit+0x8c>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a55      	ldr	r2, [pc, #340]	@ (800e13c <HAL_GPIO_DeInit+0x1b0>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d013      	beq.n	800e014 <HAL_GPIO_DeInit+0x88>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a54      	ldr	r2, [pc, #336]	@ (800e140 <HAL_GPIO_DeInit+0x1b4>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d00d      	beq.n	800e010 <HAL_GPIO_DeInit+0x84>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a53      	ldr	r2, [pc, #332]	@ (800e144 <HAL_GPIO_DeInit+0x1b8>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d007      	beq.n	800e00c <HAL_GPIO_DeInit+0x80>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a52      	ldr	r2, [pc, #328]	@ (800e148 <HAL_GPIO_DeInit+0x1bc>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d101      	bne.n	800e008 <HAL_GPIO_DeInit+0x7c>
 800e004:	2305      	movs	r3, #5
 800e006:	e00a      	b.n	800e01e <HAL_GPIO_DeInit+0x92>
 800e008:	2306      	movs	r3, #6
 800e00a:	e008      	b.n	800e01e <HAL_GPIO_DeInit+0x92>
 800e00c:	2304      	movs	r3, #4
 800e00e:	e006      	b.n	800e01e <HAL_GPIO_DeInit+0x92>
 800e010:	2303      	movs	r3, #3
 800e012:	e004      	b.n	800e01e <HAL_GPIO_DeInit+0x92>
 800e014:	2302      	movs	r3, #2
 800e016:	e002      	b.n	800e01e <HAL_GPIO_DeInit+0x92>
 800e018:	2301      	movs	r3, #1
 800e01a:	e000      	b.n	800e01e <HAL_GPIO_DeInit+0x92>
 800e01c:	2300      	movs	r3, #0
 800e01e:	697a      	ldr	r2, [r7, #20]
 800e020:	f002 0203 	and.w	r2, r2, #3
 800e024:	0092      	lsls	r2, r2, #2
 800e026:	4093      	lsls	r3, r2
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d132      	bne.n	800e094 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800e02e:	4b47      	ldr	r3, [pc, #284]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	43db      	mvns	r3, r3
 800e036:	4945      	ldr	r1, [pc, #276]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e038:	4013      	ands	r3, r2
 800e03a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800e03c:	4b43      	ldr	r3, [pc, #268]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e03e:	685a      	ldr	r2, [r3, #4]
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	43db      	mvns	r3, r3
 800e044:	4941      	ldr	r1, [pc, #260]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e046:	4013      	ands	r3, r2
 800e048:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800e04a:	4b40      	ldr	r3, [pc, #256]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e04c:	68da      	ldr	r2, [r3, #12]
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	43db      	mvns	r3, r3
 800e052:	493e      	ldr	r1, [pc, #248]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e054:	4013      	ands	r3, r2
 800e056:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800e058:	4b3c      	ldr	r3, [pc, #240]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e05a:	689a      	ldr	r2, [r3, #8]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	43db      	mvns	r3, r3
 800e060:	493a      	ldr	r1, [pc, #232]	@ (800e14c <HAL_GPIO_DeInit+0x1c0>)
 800e062:	4013      	ands	r3, r2
 800e064:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f003 0303 	and.w	r3, r3, #3
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	220f      	movs	r2, #15
 800e070:	fa02 f303 	lsl.w	r3, r2, r3
 800e074:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800e076:	4a2f      	ldr	r2, [pc, #188]	@ (800e134 <HAL_GPIO_DeInit+0x1a8>)
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	089b      	lsrs	r3, r3, #2
 800e07c:	3302      	adds	r3, #2
 800e07e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	43da      	mvns	r2, r3
 800e086:	482b      	ldr	r0, [pc, #172]	@ (800e134 <HAL_GPIO_DeInit+0x1a8>)
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	089b      	lsrs	r3, r3, #2
 800e08c:	400a      	ands	r2, r1
 800e08e:	3302      	adds	r3, #2
 800e090:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	2103      	movs	r1, #3
 800e09e:	fa01 f303 	lsl.w	r3, r1, r3
 800e0a2:	431a      	orrs	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	08da      	lsrs	r2, r3, #3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3208      	adds	r2, #8
 800e0b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	f003 0307 	and.w	r3, r3, #7
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	220f      	movs	r2, #15
 800e0be:	fa02 f303 	lsl.w	r3, r2, r3
 800e0c2:	43db      	mvns	r3, r3
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	08d2      	lsrs	r2, r2, #3
 800e0c8:	4019      	ands	r1, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3208      	adds	r2, #8
 800e0ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	68da      	ldr	r2, [r3, #12]
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	2103      	movs	r1, #3
 800e0dc:	fa01 f303 	lsl.w	r3, r1, r3
 800e0e0:	43db      	mvns	r3, r3
 800e0e2:	401a      	ands	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	685a      	ldr	r2, [r3, #4]
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0f4:	43db      	mvns	r3, r3
 800e0f6:	401a      	ands	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	689a      	ldr	r2, [r3, #8]
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	2103      	movs	r1, #3
 800e106:	fa01 f303 	lsl.w	r3, r1, r3
 800e10a:	43db      	mvns	r3, r3
 800e10c:	401a      	ands	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	609a      	str	r2, [r3, #8]
    }

    position++;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	3301      	adds	r3, #1
 800e116:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	fa22 f303 	lsr.w	r3, r2, r3
 800e120:	2b00      	cmp	r3, #0
 800e122:	f47f af3b 	bne.w	800df9c <HAL_GPIO_DeInit+0x10>
  }
}
 800e126:	bf00      	nop
 800e128:	bf00      	nop
 800e12a:	371c      	adds	r7, #28
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr
 800e134:	40010000 	.word	0x40010000
 800e138:	48000400 	.word	0x48000400
 800e13c:	48000800 	.word	0x48000800
 800e140:	48000c00 	.word	0x48000c00
 800e144:	48001000 	.word	0x48001000
 800e148:	48001400 	.word	0x48001400
 800e14c:	40010400 	.word	0x40010400

0800e150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e150:	b480      	push	{r7}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	691a      	ldr	r2, [r3, #16]
 800e160:	887b      	ldrh	r3, [r7, #2]
 800e162:	4013      	ands	r3, r2
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e168:	2301      	movs	r3, #1
 800e16a:	73fb      	strb	r3, [r7, #15]
 800e16c:	e001      	b.n	800e172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e16e:	2300      	movs	r3, #0
 800e170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e172:	7bfb      	ldrb	r3, [r7, #15]
}
 800e174:	4618      	mov	r0, r3
 800e176:	3714      	adds	r7, #20
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	807b      	strh	r3, [r7, #2]
 800e18c:	4613      	mov	r3, r2
 800e18e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e190:	787b      	ldrb	r3, [r7, #1]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d003      	beq.n	800e19e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e196:	887a      	ldrh	r2, [r7, #2]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e19c:	e002      	b.n	800e1a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e19e:	887a      	ldrh	r2, [r7, #2]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e1a4:	bf00      	nop
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e08d      	b.n	800e2de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d106      	bne.n	800e1dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7fc fe88 	bl	800aeec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2224      	movs	r2, #36	@ 0x24
 800e1e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f022 0201 	bic.w	r2, r2, #1
 800e1f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e200:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	689a      	ldr	r2, [r3, #8]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e210:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	2b01      	cmp	r3, #1
 800e218:	d107      	bne.n	800e22a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	689a      	ldr	r2, [r3, #8]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e226:	609a      	str	r2, [r3, #8]
 800e228:	e006      	b.n	800e238 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	689a      	ldr	r2, [r3, #8]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e236:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d108      	bne.n	800e252 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e24e:	605a      	str	r2, [r3, #4]
 800e250:	e007      	b.n	800e262 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e260:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	6812      	ldr	r2, [r2, #0]
 800e26c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e270:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e274:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68da      	ldr	r2, [r3, #12]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e284:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691a      	ldr	r2, [r3, #16]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	695b      	ldr	r3, [r3, #20]
 800e28e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	430a      	orrs	r2, r1
 800e29e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	69d9      	ldr	r1, [r3, #28]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6a1a      	ldr	r2, [r3, #32]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	430a      	orrs	r2, r1
 800e2ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f042 0201 	orr.w	r2, r2, #1
 800e2be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2220      	movs	r2, #32
 800e2ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	b083      	sub	sp, #12
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b20      	cmp	r3, #32
 800e2fa:	d138      	bne.n	800e36e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e302:	2b01      	cmp	r3, #1
 800e304:	d101      	bne.n	800e30a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e306:	2302      	movs	r3, #2
 800e308:	e032      	b.n	800e370 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2224      	movs	r2, #36	@ 0x24
 800e316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f022 0201 	bic.w	r2, r2, #1
 800e328:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e338:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6819      	ldr	r1, [r3, #0]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	430a      	orrs	r2, r1
 800e348:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f042 0201 	orr.w	r2, r2, #1
 800e358:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2220      	movs	r2, #32
 800e35e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	e000      	b.n	800e370 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e36e:	2302      	movs	r3, #2
  }
}
 800e370:	4618      	mov	r0, r3
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr

0800e37c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b20      	cmp	r3, #32
 800e390:	d139      	bne.n	800e406 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d101      	bne.n	800e3a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e39c:	2302      	movs	r3, #2
 800e39e:	e033      	b.n	800e408 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2224      	movs	r2, #36	@ 0x24
 800e3ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f022 0201 	bic.w	r2, r2, #1
 800e3be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e3ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	021b      	lsls	r3, r3, #8
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f042 0201 	orr.w	r2, r2, #1
 800e3f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2220      	movs	r2, #32
 800e3f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	e000      	b.n	800e408 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e406:	2302      	movs	r3, #2
  }
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d141      	bne.n	800e4a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e422:	4b4b      	ldr	r3, [pc, #300]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e42a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e42e:	d131      	bne.n	800e494 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e430:	4b47      	ldr	r3, [pc, #284]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e436:	4a46      	ldr	r2, [pc, #280]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e43c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e440:	4b43      	ldr	r3, [pc, #268]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e448:	4a41      	ldr	r2, [pc, #260]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e44a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e44e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e450:	4b40      	ldr	r3, [pc, #256]	@ (800e554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2232      	movs	r2, #50	@ 0x32
 800e456:	fb02 f303 	mul.w	r3, r2, r3
 800e45a:	4a3f      	ldr	r2, [pc, #252]	@ (800e558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800e45c:	fba2 2303 	umull	r2, r3, r2, r3
 800e460:	0c9b      	lsrs	r3, r3, #18
 800e462:	3301      	adds	r3, #1
 800e464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e466:	e002      	b.n	800e46e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3b01      	subs	r3, #1
 800e46c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e46e:	4b38      	ldr	r3, [pc, #224]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e470:	695b      	ldr	r3, [r3, #20]
 800e472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e47a:	d102      	bne.n	800e482 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1f2      	bne.n	800e468 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e482:	4b33      	ldr	r3, [pc, #204]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e48a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e48e:	d158      	bne.n	800e542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800e490:	2303      	movs	r3, #3
 800e492:	e057      	b.n	800e544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e494:	4b2e      	ldr	r3, [pc, #184]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e49a:	4a2d      	ldr	r2, [pc, #180]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e49c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800e4a4:	e04d      	b.n	800e542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4ac:	d141      	bne.n	800e532 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800e4ae:	4b28      	ldr	r3, [pc, #160]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e4b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4ba:	d131      	bne.n	800e520 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e4bc:	4b24      	ldr	r3, [pc, #144]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4c2:	4a23      	ldr	r2, [pc, #140]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e4c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e4c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e4cc:	4b20      	ldr	r3, [pc, #128]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e4d4:	4a1e      	ldr	r2, [pc, #120]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e4d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e4da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e4dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e554 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2232      	movs	r2, #50	@ 0x32
 800e4e2:	fb02 f303 	mul.w	r3, r2, r3
 800e4e6:	4a1c      	ldr	r2, [pc, #112]	@ (800e558 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800e4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ec:	0c9b      	lsrs	r3, r3, #18
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e4f2:	e002      	b.n	800e4fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e4fa:	4b15      	ldr	r3, [pc, #84]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e4fc:	695b      	ldr	r3, [r3, #20]
 800e4fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e506:	d102      	bne.n	800e50e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1f2      	bne.n	800e4f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e50e:	4b10      	ldr	r3, [pc, #64]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e51a:	d112      	bne.n	800e542 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800e51c:	2303      	movs	r3, #3
 800e51e:	e011      	b.n	800e544 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800e520:	4b0b      	ldr	r3, [pc, #44]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e526:	4a0a      	ldr	r2, [pc, #40]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e52c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800e530:	e007      	b.n	800e542 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e532:	4b07      	ldr	r3, [pc, #28]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e53a:	4a05      	ldr	r2, [pc, #20]	@ (800e550 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800e53c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e540:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3714      	adds	r7, #20
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr
 800e550:	40007000 	.word	0x40007000
 800e554:	20000050 	.word	0x20000050
 800e558:	431bde83 	.word	0x431bde83

0800e55c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800e560:	4b05      	ldr	r3, [pc, #20]	@ (800e578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	4a04      	ldr	r2, [pc, #16]	@ (800e578 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800e566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e56a:	6093      	str	r3, [r2, #8]
}
 800e56c:	bf00      	nop
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	40007000 	.word	0x40007000

0800e57c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e2fe      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f003 0301 	and.w	r3, r3, #1
 800e596:	2b00      	cmp	r3, #0
 800e598:	d075      	beq.n	800e686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e59a:	4b97      	ldr	r3, [pc, #604]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	f003 030c 	and.w	r3, r3, #12
 800e5a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e5a4:	4b94      	ldr	r3, [pc, #592]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f003 0303 	and.w	r3, r3, #3
 800e5ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	2b0c      	cmp	r3, #12
 800e5b2:	d102      	bne.n	800e5ba <HAL_RCC_OscConfig+0x3e>
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	2b03      	cmp	r3, #3
 800e5b8:	d002      	beq.n	800e5c0 <HAL_RCC_OscConfig+0x44>
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	2b08      	cmp	r3, #8
 800e5be:	d10b      	bne.n	800e5d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e5c0:	4b8d      	ldr	r3, [pc, #564]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d05b      	beq.n	800e684 <HAL_RCC_OscConfig+0x108>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d157      	bne.n	800e684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e2d9      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5e0:	d106      	bne.n	800e5f0 <HAL_RCC_OscConfig+0x74>
 800e5e2:	4b85      	ldr	r3, [pc, #532]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a84      	ldr	r2, [pc, #528]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e5e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e5ec:	6013      	str	r3, [r2, #0]
 800e5ee:	e01d      	b.n	800e62c <HAL_RCC_OscConfig+0xb0>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e5f8:	d10c      	bne.n	800e614 <HAL_RCC_OscConfig+0x98>
 800e5fa:	4b7f      	ldr	r3, [pc, #508]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a7e      	ldr	r2, [pc, #504]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	4b7c      	ldr	r3, [pc, #496]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a7b      	ldr	r2, [pc, #492]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e60c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	e00b      	b.n	800e62c <HAL_RCC_OscConfig+0xb0>
 800e614:	4b78      	ldr	r3, [pc, #480]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a77      	ldr	r2, [pc, #476]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e61a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e61e:	6013      	str	r3, [r2, #0]
 800e620:	4b75      	ldr	r3, [pc, #468]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a74      	ldr	r2, [pc, #464]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e62a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d013      	beq.n	800e65c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e634:	f7fc ffee 	bl	800b614 <HAL_GetTick>
 800e638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e63a:	e008      	b.n	800e64e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e63c:	f7fc ffea 	bl	800b614 <HAL_GetTick>
 800e640:	4602      	mov	r2, r0
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	2b64      	cmp	r3, #100	@ 0x64
 800e648:	d901      	bls.n	800e64e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e64a:	2303      	movs	r3, #3
 800e64c:	e29e      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e64e:	4b6a      	ldr	r3, [pc, #424]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0f0      	beq.n	800e63c <HAL_RCC_OscConfig+0xc0>
 800e65a:	e014      	b.n	800e686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e65c:	f7fc ffda 	bl	800b614 <HAL_GetTick>
 800e660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e662:	e008      	b.n	800e676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e664:	f7fc ffd6 	bl	800b614 <HAL_GetTick>
 800e668:	4602      	mov	r2, r0
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	2b64      	cmp	r3, #100	@ 0x64
 800e670:	d901      	bls.n	800e676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e672:	2303      	movs	r3, #3
 800e674:	e28a      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e676:	4b60      	ldr	r3, [pc, #384]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1f0      	bne.n	800e664 <HAL_RCC_OscConfig+0xe8>
 800e682:	e000      	b.n	800e686 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f003 0302 	and.w	r3, r3, #2
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d075      	beq.n	800e77e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e692:	4b59      	ldr	r3, [pc, #356]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	f003 030c 	and.w	r3, r3, #12
 800e69a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e69c:	4b56      	ldr	r3, [pc, #344]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f003 0303 	and.w	r3, r3, #3
 800e6a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	2b0c      	cmp	r3, #12
 800e6aa:	d102      	bne.n	800e6b2 <HAL_RCC_OscConfig+0x136>
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	2b02      	cmp	r3, #2
 800e6b0:	d002      	beq.n	800e6b8 <HAL_RCC_OscConfig+0x13c>
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	2b04      	cmp	r3, #4
 800e6b6:	d11f      	bne.n	800e6f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e6b8:	4b4f      	ldr	r3, [pc, #316]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d005      	beq.n	800e6d0 <HAL_RCC_OscConfig+0x154>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e25d      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e6d0:	4b49      	ldr	r3, [pc, #292]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	061b      	lsls	r3, r3, #24
 800e6de:	4946      	ldr	r1, [pc, #280]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e6e4:	4b45      	ldr	r3, [pc, #276]	@ (800e7fc <HAL_RCC_OscConfig+0x280>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fc ff47 	bl	800b57c <HAL_InitTick>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d043      	beq.n	800e77c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	e249      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d023      	beq.n	800e748 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e700:	4b3d      	ldr	r3, [pc, #244]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a3c      	ldr	r2, [pc, #240]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e70a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e70c:	f7fc ff82 	bl	800b614 <HAL_GetTick>
 800e710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e712:	e008      	b.n	800e726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e714:	f7fc ff7e 	bl	800b614 <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d901      	bls.n	800e726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e722:	2303      	movs	r3, #3
 800e724:	e232      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e726:	4b34      	ldr	r3, [pc, #208]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0f0      	beq.n	800e714 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e732:	4b31      	ldr	r3, [pc, #196]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	691b      	ldr	r3, [r3, #16]
 800e73e:	061b      	lsls	r3, r3, #24
 800e740:	492d      	ldr	r1, [pc, #180]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e742:	4313      	orrs	r3, r2
 800e744:	604b      	str	r3, [r1, #4]
 800e746:	e01a      	b.n	800e77e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e748:	4b2b      	ldr	r3, [pc, #172]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4a2a      	ldr	r2, [pc, #168]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e74e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e754:	f7fc ff5e 	bl	800b614 <HAL_GetTick>
 800e758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e75a:	e008      	b.n	800e76e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e75c:	f7fc ff5a 	bl	800b614 <HAL_GetTick>
 800e760:	4602      	mov	r2, r0
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	2b02      	cmp	r3, #2
 800e768:	d901      	bls.n	800e76e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800e76a:	2303      	movs	r3, #3
 800e76c:	e20e      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e76e:	4b22      	ldr	r3, [pc, #136]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1f0      	bne.n	800e75c <HAL_RCC_OscConfig+0x1e0>
 800e77a:	e000      	b.n	800e77e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e77c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f003 0308 	and.w	r3, r3, #8
 800e786:	2b00      	cmp	r3, #0
 800e788:	d041      	beq.n	800e80e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d01c      	beq.n	800e7cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e792:	4b19      	ldr	r3, [pc, #100]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e798:	4a17      	ldr	r2, [pc, #92]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e79a:	f043 0301 	orr.w	r3, r3, #1
 800e79e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7a2:	f7fc ff37 	bl	800b614 <HAL_GetTick>
 800e7a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e7a8:	e008      	b.n	800e7bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e7aa:	f7fc ff33 	bl	800b614 <HAL_GetTick>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d901      	bls.n	800e7bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	e1e7      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e7bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e7be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7c2:	f003 0302 	and.w	r3, r3, #2
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0ef      	beq.n	800e7aa <HAL_RCC_OscConfig+0x22e>
 800e7ca:	e020      	b.n	800e80e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e7ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7d2:	4a09      	ldr	r2, [pc, #36]	@ (800e7f8 <HAL_RCC_OscConfig+0x27c>)
 800e7d4:	f023 0301 	bic.w	r3, r3, #1
 800e7d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7dc:	f7fc ff1a 	bl	800b614 <HAL_GetTick>
 800e7e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e7e2:	e00d      	b.n	800e800 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e7e4:	f7fc ff16 	bl	800b614 <HAL_GetTick>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	1ad3      	subs	r3, r2, r3
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d906      	bls.n	800e800 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	e1ca      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
 800e7f6:	bf00      	nop
 800e7f8:	40021000 	.word	0x40021000
 800e7fc:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e800:	4b8c      	ldr	r3, [pc, #560]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e806:	f003 0302 	and.w	r3, r3, #2
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1ea      	bne.n	800e7e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 0304 	and.w	r3, r3, #4
 800e816:	2b00      	cmp	r3, #0
 800e818:	f000 80a6 	beq.w	800e968 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e81c:	2300      	movs	r3, #0
 800e81e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e820:	4b84      	ldr	r3, [pc, #528]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <HAL_RCC_OscConfig+0x2b4>
 800e82c:	2301      	movs	r3, #1
 800e82e:	e000      	b.n	800e832 <HAL_RCC_OscConfig+0x2b6>
 800e830:	2300      	movs	r3, #0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00d      	beq.n	800e852 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e836:	4b7f      	ldr	r3, [pc, #508]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e83a:	4a7e      	ldr	r2, [pc, #504]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e83c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e840:	6593      	str	r3, [r2, #88]	@ 0x58
 800e842:	4b7c      	ldr	r3, [pc, #496]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e84a:	60fb      	str	r3, [r7, #12]
 800e84c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e84e:	2301      	movs	r3, #1
 800e850:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e852:	4b79      	ldr	r3, [pc, #484]	@ (800ea38 <HAL_RCC_OscConfig+0x4bc>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d118      	bne.n	800e890 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e85e:	4b76      	ldr	r3, [pc, #472]	@ (800ea38 <HAL_RCC_OscConfig+0x4bc>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a75      	ldr	r2, [pc, #468]	@ (800ea38 <HAL_RCC_OscConfig+0x4bc>)
 800e864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e86a:	f7fc fed3 	bl	800b614 <HAL_GetTick>
 800e86e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e870:	e008      	b.n	800e884 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e872:	f7fc fecf 	bl	800b614 <HAL_GetTick>
 800e876:	4602      	mov	r2, r0
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	1ad3      	subs	r3, r2, r3
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d901      	bls.n	800e884 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800e880:	2303      	movs	r3, #3
 800e882:	e183      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e884:	4b6c      	ldr	r3, [pc, #432]	@ (800ea38 <HAL_RCC_OscConfig+0x4bc>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d0f0      	beq.n	800e872 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d108      	bne.n	800e8aa <HAL_RCC_OscConfig+0x32e>
 800e898:	4b66      	ldr	r3, [pc, #408]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e89e:	4a65      	ldr	r2, [pc, #404]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8a0:	f043 0301 	orr.w	r3, r3, #1
 800e8a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e8a8:	e024      	b.n	800e8f4 <HAL_RCC_OscConfig+0x378>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	2b05      	cmp	r3, #5
 800e8b0:	d110      	bne.n	800e8d4 <HAL_RCC_OscConfig+0x358>
 800e8b2:	4b60      	ldr	r3, [pc, #384]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8b8:	4a5e      	ldr	r2, [pc, #376]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8ba:	f043 0304 	orr.w	r3, r3, #4
 800e8be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e8c2:	4b5c      	ldr	r3, [pc, #368]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8c8:	4a5a      	ldr	r2, [pc, #360]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8ca:	f043 0301 	orr.w	r3, r3, #1
 800e8ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e8d2:	e00f      	b.n	800e8f4 <HAL_RCC_OscConfig+0x378>
 800e8d4:	4b57      	ldr	r3, [pc, #348]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8da:	4a56      	ldr	r2, [pc, #344]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8dc:	f023 0301 	bic.w	r3, r3, #1
 800e8e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e8e4:	4b53      	ldr	r3, [pc, #332]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e8ea:	4a52      	ldr	r2, [pc, #328]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e8ec:	f023 0304 	bic.w	r3, r3, #4
 800e8f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d016      	beq.n	800e92a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e8fc:	f7fc fe8a 	bl	800b614 <HAL_GetTick>
 800e900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e902:	e00a      	b.n	800e91a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e904:	f7fc fe86 	bl	800b614 <HAL_GetTick>
 800e908:	4602      	mov	r2, r0
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e912:	4293      	cmp	r3, r2
 800e914:	d901      	bls.n	800e91a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800e916:	2303      	movs	r3, #3
 800e918:	e138      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e91a:	4b46      	ldr	r3, [pc, #280]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e920:	f003 0302 	and.w	r3, r3, #2
 800e924:	2b00      	cmp	r3, #0
 800e926:	d0ed      	beq.n	800e904 <HAL_RCC_OscConfig+0x388>
 800e928:	e015      	b.n	800e956 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e92a:	f7fc fe73 	bl	800b614 <HAL_GetTick>
 800e92e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e930:	e00a      	b.n	800e948 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e932:	f7fc fe6f 	bl	800b614 <HAL_GetTick>
 800e936:	4602      	mov	r2, r0
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e940:	4293      	cmp	r3, r2
 800e942:	d901      	bls.n	800e948 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800e944:	2303      	movs	r3, #3
 800e946:	e121      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e948:	4b3a      	ldr	r3, [pc, #232]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e94e:	f003 0302 	and.w	r3, r3, #2
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1ed      	bne.n	800e932 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e956:	7ffb      	ldrb	r3, [r7, #31]
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d105      	bne.n	800e968 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e95c:	4b35      	ldr	r3, [pc, #212]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e95e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e960:	4a34      	ldr	r2, [pc, #208]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e966:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0320 	and.w	r3, r3, #32
 800e970:	2b00      	cmp	r3, #0
 800e972:	d03c      	beq.n	800e9ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	699b      	ldr	r3, [r3, #24]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d01c      	beq.n	800e9b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e97c:	4b2d      	ldr	r3, [pc, #180]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e97e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e982:	4a2c      	ldr	r2, [pc, #176]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e984:	f043 0301 	orr.w	r3, r3, #1
 800e988:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e98c:	f7fc fe42 	bl	800b614 <HAL_GetTick>
 800e990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e992:	e008      	b.n	800e9a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e994:	f7fc fe3e 	bl	800b614 <HAL_GetTick>
 800e998:	4602      	mov	r2, r0
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d901      	bls.n	800e9a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	e0f2      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e9a6:	4b23      	ldr	r3, [pc, #140]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e9a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e9ac:	f003 0302 	and.w	r3, r3, #2
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d0ef      	beq.n	800e994 <HAL_RCC_OscConfig+0x418>
 800e9b4:	e01b      	b.n	800e9ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e9b6:	4b1f      	ldr	r3, [pc, #124]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e9b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e9be:	f023 0301 	bic.w	r3, r3, #1
 800e9c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9c6:	f7fc fe25 	bl	800b614 <HAL_GetTick>
 800e9ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e9cc:	e008      	b.n	800e9e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e9ce:	f7fc fe21 	bl	800b614 <HAL_GetTick>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	2b02      	cmp	r3, #2
 800e9da:	d901      	bls.n	800e9e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	e0d5      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e9e0:	4b14      	ldr	r3, [pc, #80]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e9e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e9e6:	f003 0302 	and.w	r3, r3, #2
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1ef      	bne.n	800e9ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	69db      	ldr	r3, [r3, #28]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f000 80c9 	beq.w	800eb8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	f003 030c 	and.w	r3, r3, #12
 800ea00:	2b0c      	cmp	r3, #12
 800ea02:	f000 8083 	beq.w	800eb0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	69db      	ldr	r3, [r3, #28]
 800ea0a:	2b02      	cmp	r3, #2
 800ea0c:	d15e      	bne.n	800eacc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea0e:	4b09      	ldr	r3, [pc, #36]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a08      	ldr	r2, [pc, #32]	@ (800ea34 <HAL_RCC_OscConfig+0x4b8>)
 800ea14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ea18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea1a:	f7fc fdfb 	bl	800b614 <HAL_GetTick>
 800ea1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ea20:	e00c      	b.n	800ea3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea22:	f7fc fdf7 	bl	800b614 <HAL_GetTick>
 800ea26:	4602      	mov	r2, r0
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d905      	bls.n	800ea3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ea30:	2303      	movs	r3, #3
 800ea32:	e0ab      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
 800ea34:	40021000 	.word	0x40021000
 800ea38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ea3c:	4b55      	ldr	r3, [pc, #340]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d1ec      	bne.n	800ea22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ea48:	4b52      	ldr	r3, [pc, #328]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	4b52      	ldr	r3, [pc, #328]	@ (800eb98 <HAL_RCC_OscConfig+0x61c>)
 800ea4e:	4013      	ands	r3, r2
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	6a11      	ldr	r1, [r2, #32]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ea58:	3a01      	subs	r2, #1
 800ea5a:	0112      	lsls	r2, r2, #4
 800ea5c:	4311      	orrs	r1, r2
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ea62:	0212      	lsls	r2, r2, #8
 800ea64:	4311      	orrs	r1, r2
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ea6a:	0852      	lsrs	r2, r2, #1
 800ea6c:	3a01      	subs	r2, #1
 800ea6e:	0552      	lsls	r2, r2, #21
 800ea70:	4311      	orrs	r1, r2
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ea76:	0852      	lsrs	r2, r2, #1
 800ea78:	3a01      	subs	r2, #1
 800ea7a:	0652      	lsls	r2, r2, #25
 800ea7c:	4311      	orrs	r1, r2
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ea82:	06d2      	lsls	r2, r2, #27
 800ea84:	430a      	orrs	r2, r1
 800ea86:	4943      	ldr	r1, [pc, #268]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ea8c:	4b41      	ldr	r3, [pc, #260]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a40      	ldr	r2, [pc, #256]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ea92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ea96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ea98:	4b3e      	ldr	r3, [pc, #248]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	4a3d      	ldr	r2, [pc, #244]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ea9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eaa2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaa4:	f7fc fdb6 	bl	800b614 <HAL_GetTick>
 800eaa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eaaa:	e008      	b.n	800eabe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eaac:	f7fc fdb2 	bl	800b614 <HAL_GetTick>
 800eab0:	4602      	mov	r2, r0
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	d901      	bls.n	800eabe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800eaba:	2303      	movs	r3, #3
 800eabc:	e066      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eabe:	4b35      	ldr	r3, [pc, #212]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d0f0      	beq.n	800eaac <HAL_RCC_OscConfig+0x530>
 800eaca:	e05e      	b.n	800eb8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800eacc:	4b31      	ldr	r3, [pc, #196]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4a30      	ldr	r2, [pc, #192]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800ead2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ead6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ead8:	f7fc fd9c 	bl	800b614 <HAL_GetTick>
 800eadc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eade:	e008      	b.n	800eaf2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eae0:	f7fc fd98 	bl	800b614 <HAL_GetTick>
 800eae4:	4602      	mov	r2, r0
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d901      	bls.n	800eaf2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e04c      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eaf2:	4b28      	ldr	r3, [pc, #160]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1f0      	bne.n	800eae0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800eafe:	4b25      	ldr	r3, [pc, #148]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800eb00:	68da      	ldr	r2, [r3, #12]
 800eb02:	4924      	ldr	r1, [pc, #144]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800eb04:	4b25      	ldr	r3, [pc, #148]	@ (800eb9c <HAL_RCC_OscConfig+0x620>)
 800eb06:	4013      	ands	r3, r2
 800eb08:	60cb      	str	r3, [r1, #12]
 800eb0a:	e03e      	b.n	800eb8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	69db      	ldr	r3, [r3, #28]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d101      	bne.n	800eb18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	e039      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800eb18:	4b1e      	ldr	r3, [pc, #120]	@ (800eb94 <HAL_RCC_OscConfig+0x618>)
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f003 0203 	and.w	r2, r3, #3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a1b      	ldr	r3, [r3, #32]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d12c      	bne.n	800eb86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb36:	3b01      	subs	r3, #1
 800eb38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d123      	bne.n	800eb86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d11b      	bne.n	800eb86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d113      	bne.n	800eb86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb68:	085b      	lsrs	r3, r3, #1
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d109      	bne.n	800eb86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb7c:	085b      	lsrs	r3, r3, #1
 800eb7e:	3b01      	subs	r3, #1
 800eb80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d001      	beq.n	800eb8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	e000      	b.n	800eb8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	40021000 	.word	0x40021000
 800eb98:	019f800c 	.word	0x019f800c
 800eb9c:	feeefffc 	.word	0xfeeefffc

0800eba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d101      	bne.n	800ebb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e11e      	b.n	800edf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ebb8:	4b91      	ldr	r3, [pc, #580]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f003 030f 	and.w	r3, r3, #15
 800ebc0:	683a      	ldr	r2, [r7, #0]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d910      	bls.n	800ebe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ebc6:	4b8e      	ldr	r3, [pc, #568]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f023 020f 	bic.w	r2, r3, #15
 800ebce:	498c      	ldr	r1, [pc, #560]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ebd6:	4b8a      	ldr	r3, [pc, #552]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f003 030f 	and.w	r3, r3, #15
 800ebde:	683a      	ldr	r2, [r7, #0]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d001      	beq.n	800ebe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	e106      	b.n	800edf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f003 0301 	and.w	r3, r3, #1
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d073      	beq.n	800ecdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	2b03      	cmp	r3, #3
 800ebfa:	d129      	bne.n	800ec50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ebfc:	4b81      	ldr	r3, [pc, #516]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e0f4      	b.n	800edf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ec0c:	f000 f99e 	bl	800ef4c <RCC_GetSysClockFreqFromPLLSource>
 800ec10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	4a7c      	ldr	r2, [pc, #496]	@ (800ee08 <HAL_RCC_ClockConfig+0x268>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d93f      	bls.n	800ec9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ec1a:	4b7a      	ldr	r3, [pc, #488]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d009      	beq.n	800ec3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d033      	beq.n	800ec9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d12f      	bne.n	800ec9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ec3a:	4b72      	ldr	r3, [pc, #456]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ec42:	4a70      	ldr	r2, [pc, #448]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ec4a:	2380      	movs	r3, #128	@ 0x80
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	e024      	b.n	800ec9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d107      	bne.n	800ec68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ec58:	4b6a      	ldr	r3, [pc, #424]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d109      	bne.n	800ec78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ec64:	2301      	movs	r3, #1
 800ec66:	e0c6      	b.n	800edf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ec68:	4b66      	ldr	r3, [pc, #408]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ec74:	2301      	movs	r3, #1
 800ec76:	e0be      	b.n	800edf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ec78:	f000 f8ce 	bl	800ee18 <HAL_RCC_GetSysClockFreq>
 800ec7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	4a61      	ldr	r2, [pc, #388]	@ (800ee08 <HAL_RCC_ClockConfig+0x268>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d909      	bls.n	800ec9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ec86:	4b5f      	ldr	r3, [pc, #380]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ec8e:	4a5d      	ldr	r2, [pc, #372]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ec96:	2380      	movs	r3, #128	@ 0x80
 800ec98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ec9a:	4b5a      	ldr	r3, [pc, #360]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	f023 0203 	bic.w	r2, r3, #3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	4957      	ldr	r1, [pc, #348]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ecac:	f7fc fcb2 	bl	800b614 <HAL_GetTick>
 800ecb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ecb2:	e00a      	b.n	800ecca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ecb4:	f7fc fcae 	bl	800b614 <HAL_GetTick>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d901      	bls.n	800ecca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ecc6:	2303      	movs	r3, #3
 800ecc8:	e095      	b.n	800edf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ecca:	4b4e      	ldr	r3, [pc, #312]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	f003 020c 	and.w	r2, r3, #12
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d1eb      	bne.n	800ecb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f003 0302 	and.w	r3, r3, #2
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d023      	beq.n	800ed30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f003 0304 	and.w	r3, r3, #4
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d005      	beq.n	800ed00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ecf4:	4b43      	ldr	r3, [pc, #268]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	4a42      	ldr	r2, [pc, #264]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ecfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ecfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f003 0308 	and.w	r3, r3, #8
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d007      	beq.n	800ed1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ed0c:	4b3d      	ldr	r3, [pc, #244]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ed14:	4a3b      	ldr	r2, [pc, #236]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ed16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ed1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ed1c:	4b39      	ldr	r3, [pc, #228]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ed1e:	689b      	ldr	r3, [r3, #8]
 800ed20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	4936      	ldr	r1, [pc, #216]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	608b      	str	r3, [r1, #8]
 800ed2e:	e008      	b.n	800ed42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	2b80      	cmp	r3, #128	@ 0x80
 800ed34:	d105      	bne.n	800ed42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ed36:	4b33      	ldr	r3, [pc, #204]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	4a32      	ldr	r2, [pc, #200]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ed3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ed40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ed42:	4b2f      	ldr	r3, [pc, #188]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 030f 	and.w	r3, r3, #15
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d21d      	bcs.n	800ed8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed50:	4b2b      	ldr	r3, [pc, #172]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f023 020f 	bic.w	r2, r3, #15
 800ed58:	4929      	ldr	r1, [pc, #164]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ed60:	f7fc fc58 	bl	800b614 <HAL_GetTick>
 800ed64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed66:	e00a      	b.n	800ed7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ed68:	f7fc fc54 	bl	800b614 <HAL_GetTick>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d901      	bls.n	800ed7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ed7a:	2303      	movs	r3, #3
 800ed7c:	e03b      	b.n	800edf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed7e:	4b20      	ldr	r3, [pc, #128]	@ (800ee00 <HAL_RCC_ClockConfig+0x260>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 030f 	and.w	r3, r3, #15
 800ed86:	683a      	ldr	r2, [r7, #0]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d1ed      	bne.n	800ed68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f003 0304 	and.w	r3, r3, #4
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d008      	beq.n	800edaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ed98:	4b1a      	ldr	r3, [pc, #104]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	4917      	ldr	r1, [pc, #92]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800eda6:	4313      	orrs	r3, r2
 800eda8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f003 0308 	and.w	r3, r3, #8
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d009      	beq.n	800edca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800edb6:	4b13      	ldr	r3, [pc, #76]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	691b      	ldr	r3, [r3, #16]
 800edc2:	00db      	lsls	r3, r3, #3
 800edc4:	490f      	ldr	r1, [pc, #60]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800edc6:	4313      	orrs	r3, r2
 800edc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800edca:	f000 f825 	bl	800ee18 <HAL_RCC_GetSysClockFreq>
 800edce:	4602      	mov	r2, r0
 800edd0:	4b0c      	ldr	r3, [pc, #48]	@ (800ee04 <HAL_RCC_ClockConfig+0x264>)
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	091b      	lsrs	r3, r3, #4
 800edd6:	f003 030f 	and.w	r3, r3, #15
 800edda:	490c      	ldr	r1, [pc, #48]	@ (800ee0c <HAL_RCC_ClockConfig+0x26c>)
 800eddc:	5ccb      	ldrb	r3, [r1, r3]
 800edde:	f003 031f 	and.w	r3, r3, #31
 800ede2:	fa22 f303 	lsr.w	r3, r2, r3
 800ede6:	4a0a      	ldr	r2, [pc, #40]	@ (800ee10 <HAL_RCC_ClockConfig+0x270>)
 800ede8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800edea:	4b0a      	ldr	r3, [pc, #40]	@ (800ee14 <HAL_RCC_ClockConfig+0x274>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4618      	mov	r0, r3
 800edf0:	f7fc fbc4 	bl	800b57c <HAL_InitTick>
 800edf4:	4603      	mov	r3, r0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3718      	adds	r7, #24
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	40022000 	.word	0x40022000
 800ee04:	40021000 	.word	0x40021000
 800ee08:	04c4b400 	.word	0x04c4b400
 800ee0c:	08018124 	.word	0x08018124
 800ee10:	20000050 	.word	0x20000050
 800ee14:	20000054 	.word	0x20000054

0800ee18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b087      	sub	sp, #28
 800ee1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ee1e:	4b2c      	ldr	r3, [pc, #176]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	f003 030c 	and.w	r3, r3, #12
 800ee26:	2b04      	cmp	r3, #4
 800ee28:	d102      	bne.n	800ee30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ee2a:	4b2a      	ldr	r3, [pc, #168]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ee2c:	613b      	str	r3, [r7, #16]
 800ee2e:	e047      	b.n	800eec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ee30:	4b27      	ldr	r3, [pc, #156]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	f003 030c 	and.w	r3, r3, #12
 800ee38:	2b08      	cmp	r3, #8
 800ee3a:	d102      	bne.n	800ee42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ee3c:	4b26      	ldr	r3, [pc, #152]	@ (800eed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ee3e:	613b      	str	r3, [r7, #16]
 800ee40:	e03e      	b.n	800eec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ee42:	4b23      	ldr	r3, [pc, #140]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	f003 030c 	and.w	r3, r3, #12
 800ee4a:	2b0c      	cmp	r3, #12
 800ee4c:	d136      	bne.n	800eebc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ee4e:	4b20      	ldr	r3, [pc, #128]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	f003 0303 	and.w	r3, r3, #3
 800ee56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ee58:	4b1d      	ldr	r3, [pc, #116]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	091b      	lsrs	r3, r3, #4
 800ee5e:	f003 030f 	and.w	r3, r3, #15
 800ee62:	3301      	adds	r3, #1
 800ee64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d10c      	bne.n	800ee86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ee6c:	4a1a      	ldr	r2, [pc, #104]	@ (800eed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee74:	4a16      	ldr	r2, [pc, #88]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ee76:	68d2      	ldr	r2, [r2, #12]
 800ee78:	0a12      	lsrs	r2, r2, #8
 800ee7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ee7e:	fb02 f303 	mul.w	r3, r2, r3
 800ee82:	617b      	str	r3, [r7, #20]
      break;
 800ee84:	e00c      	b.n	800eea0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ee86:	4a13      	ldr	r2, [pc, #76]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee8e:	4a10      	ldr	r2, [pc, #64]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ee90:	68d2      	ldr	r2, [r2, #12]
 800ee92:	0a12      	lsrs	r2, r2, #8
 800ee94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ee98:	fb02 f303 	mul.w	r3, r2, r3
 800ee9c:	617b      	str	r3, [r7, #20]
      break;
 800ee9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800eea0:	4b0b      	ldr	r3, [pc, #44]	@ (800eed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	0e5b      	lsrs	r3, r3, #25
 800eea6:	f003 0303 	and.w	r3, r3, #3
 800eeaa:	3301      	adds	r3, #1
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800eeb0:	697a      	ldr	r2, [r7, #20]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeb8:	613b      	str	r3, [r7, #16]
 800eeba:	e001      	b.n	800eec0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800eebc:	2300      	movs	r3, #0
 800eebe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800eec0:	693b      	ldr	r3, [r7, #16]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	371c      	adds	r7, #28
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	40021000 	.word	0x40021000
 800eed4:	00f42400 	.word	0x00f42400
 800eed8:	016e3600 	.word	0x016e3600

0800eedc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eedc:	b480      	push	{r7}
 800eede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eee0:	4b03      	ldr	r3, [pc, #12]	@ (800eef0 <HAL_RCC_GetHCLKFreq+0x14>)
 800eee2:	681b      	ldr	r3, [r3, #0]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop
 800eef0:	20000050 	.word	0x20000050

0800eef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800eef8:	f7ff fff0 	bl	800eedc <HAL_RCC_GetHCLKFreq>
 800eefc:	4602      	mov	r2, r0
 800eefe:	4b06      	ldr	r3, [pc, #24]	@ (800ef18 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef00:	689b      	ldr	r3, [r3, #8]
 800ef02:	0a1b      	lsrs	r3, r3, #8
 800ef04:	f003 0307 	and.w	r3, r3, #7
 800ef08:	4904      	ldr	r1, [pc, #16]	@ (800ef1c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ef0a:	5ccb      	ldrb	r3, [r1, r3]
 800ef0c:	f003 031f 	and.w	r3, r3, #31
 800ef10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	40021000 	.word	0x40021000
 800ef1c:	08018134 	.word	0x08018134

0800ef20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ef24:	f7ff ffda 	bl	800eedc <HAL_RCC_GetHCLKFreq>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	4b06      	ldr	r3, [pc, #24]	@ (800ef44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	0adb      	lsrs	r3, r3, #11
 800ef30:	f003 0307 	and.w	r3, r3, #7
 800ef34:	4904      	ldr	r1, [pc, #16]	@ (800ef48 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ef36:	5ccb      	ldrb	r3, [r1, r3]
 800ef38:	f003 031f 	and.w	r3, r3, #31
 800ef3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	40021000 	.word	0x40021000
 800ef48:	08018134 	.word	0x08018134

0800ef4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b087      	sub	sp, #28
 800ef50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ef52:	4b1e      	ldr	r3, [pc, #120]	@ (800efcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	f003 0303 	and.w	r3, r3, #3
 800ef5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ef5c:	4b1b      	ldr	r3, [pc, #108]	@ (800efcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	091b      	lsrs	r3, r3, #4
 800ef62:	f003 030f 	and.w	r3, r3, #15
 800ef66:	3301      	adds	r3, #1
 800ef68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	d10c      	bne.n	800ef8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ef70:	4a17      	ldr	r2, [pc, #92]	@ (800efd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef78:	4a14      	ldr	r2, [pc, #80]	@ (800efcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ef7a:	68d2      	ldr	r2, [r2, #12]
 800ef7c:	0a12      	lsrs	r2, r2, #8
 800ef7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ef82:	fb02 f303 	mul.w	r3, r2, r3
 800ef86:	617b      	str	r3, [r7, #20]
    break;
 800ef88:	e00c      	b.n	800efa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ef8a:	4a12      	ldr	r2, [pc, #72]	@ (800efd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef92:	4a0e      	ldr	r2, [pc, #56]	@ (800efcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ef94:	68d2      	ldr	r2, [r2, #12]
 800ef96:	0a12      	lsrs	r2, r2, #8
 800ef98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ef9c:	fb02 f303 	mul.w	r3, r2, r3
 800efa0:	617b      	str	r3, [r7, #20]
    break;
 800efa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800efa4:	4b09      	ldr	r3, [pc, #36]	@ (800efcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	0e5b      	lsrs	r3, r3, #25
 800efaa:	f003 0303 	and.w	r3, r3, #3
 800efae:	3301      	adds	r3, #1
 800efb0:	005b      	lsls	r3, r3, #1
 800efb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800efbe:	687b      	ldr	r3, [r7, #4]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	371c      	adds	r7, #28
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr
 800efcc:	40021000 	.word	0x40021000
 800efd0:	016e3600 	.word	0x016e3600
 800efd4:	00f42400 	.word	0x00f42400

0800efd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800efe0:	2300      	movs	r3, #0
 800efe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800efe4:	2300      	movs	r3, #0
 800efe6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f000 8098 	beq.w	800f126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eff6:	2300      	movs	r3, #0
 800eff8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800effa:	4b43      	ldr	r3, [pc, #268]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800effc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800effe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f002:	2b00      	cmp	r3, #0
 800f004:	d10d      	bne.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f006:	4b40      	ldr	r3, [pc, #256]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f00a:	4a3f      	ldr	r2, [pc, #252]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f00c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f010:	6593      	str	r3, [r2, #88]	@ 0x58
 800f012:	4b3d      	ldr	r3, [pc, #244]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f01a:	60bb      	str	r3, [r7, #8]
 800f01c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f01e:	2301      	movs	r3, #1
 800f020:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f022:	4b3a      	ldr	r3, [pc, #232]	@ (800f10c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a39      	ldr	r2, [pc, #228]	@ (800f10c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800f028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f02c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f02e:	f7fc faf1 	bl	800b614 <HAL_GetTick>
 800f032:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f034:	e009      	b.n	800f04a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f036:	f7fc faed 	bl	800b614 <HAL_GetTick>
 800f03a:	4602      	mov	r2, r0
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	2b02      	cmp	r3, #2
 800f042:	d902      	bls.n	800f04a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800f044:	2303      	movs	r3, #3
 800f046:	74fb      	strb	r3, [r7, #19]
        break;
 800f048:	e005      	b.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f04a:	4b30      	ldr	r3, [pc, #192]	@ (800f10c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f052:	2b00      	cmp	r3, #0
 800f054:	d0ef      	beq.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800f056:	7cfb      	ldrb	r3, [r7, #19]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d159      	bne.n	800f110 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f05c:	4b2a      	ldr	r3, [pc, #168]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f066:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d01e      	beq.n	800f0ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	429a      	cmp	r2, r3
 800f076:	d019      	beq.n	800f0ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f078:	4b23      	ldr	r3, [pc, #140]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f07e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f084:	4b20      	ldr	r3, [pc, #128]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f08a:	4a1f      	ldr	r2, [pc, #124]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f08c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f094:	4b1c      	ldr	r3, [pc, #112]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f09a:	4a1b      	ldr	r2, [pc, #108]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f09c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f0a4:	4a18      	ldr	r2, [pc, #96]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	f003 0301 	and.w	r3, r3, #1
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d016      	beq.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0b6:	f7fc faad 	bl	800b614 <HAL_GetTick>
 800f0ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f0bc:	e00b      	b.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f0be:	f7fc faa9 	bl	800b614 <HAL_GetTick>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	1ad3      	subs	r3, r2, r3
 800f0c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d902      	bls.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800f0d0:	2303      	movs	r3, #3
 800f0d2:	74fb      	strb	r3, [r7, #19]
            break;
 800f0d4:	e006      	b.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f0d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0dc:	f003 0302 	and.w	r3, r3, #2
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d0ec      	beq.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800f0e4:	7cfb      	ldrb	r3, [r7, #19]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d10b      	bne.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f0ea:	4b07      	ldr	r3, [pc, #28]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0f8:	4903      	ldr	r1, [pc, #12]	@ (800f108 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800f100:	e008      	b.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f102:	7cfb      	ldrb	r3, [r7, #19]
 800f104:	74bb      	strb	r3, [r7, #18]
 800f106:	e005      	b.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800f108:	40021000 	.word	0x40021000
 800f10c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f110:	7cfb      	ldrb	r3, [r7, #19]
 800f112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f114:	7c7b      	ldrb	r3, [r7, #17]
 800f116:	2b01      	cmp	r3, #1
 800f118:	d105      	bne.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f11a:	4ba7      	ldr	r3, [pc, #668]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f11c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f11e:	4aa6      	ldr	r2, [pc, #664]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f124:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00a      	beq.n	800f148 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f132:	4ba1      	ldr	r3, [pc, #644]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f138:	f023 0203 	bic.w	r2, r3, #3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	499d      	ldr	r1, [pc, #628]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f142:	4313      	orrs	r3, r2
 800f144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 0302 	and.w	r3, r3, #2
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00a      	beq.n	800f16a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f154:	4b98      	ldr	r3, [pc, #608]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f15a:	f023 020c 	bic.w	r2, r3, #12
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	4995      	ldr	r1, [pc, #596]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f164:	4313      	orrs	r3, r2
 800f166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f003 0304 	and.w	r3, r3, #4
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00a      	beq.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f176:	4b90      	ldr	r3, [pc, #576]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f17c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	498c      	ldr	r1, [pc, #560]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f186:	4313      	orrs	r3, r2
 800f188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0308 	and.w	r3, r3, #8
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00a      	beq.n	800f1ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f198:	4b87      	ldr	r3, [pc, #540]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f19e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	4984      	ldr	r1, [pc, #528]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f003 0310 	and.w	r3, r3, #16
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00a      	beq.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f1ba:	4b7f      	ldr	r3, [pc, #508]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	497b      	ldr	r1, [pc, #492]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f003 0320 	and.w	r3, r3, #32
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00a      	beq.n	800f1f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f1dc:	4b76      	ldr	r3, [pc, #472]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	4973      	ldr	r1, [pc, #460]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00a      	beq.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f1fe:	4b6e      	ldr	r3, [pc, #440]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f204:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	69db      	ldr	r3, [r3, #28]
 800f20c:	496a      	ldr	r1, [pc, #424]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f20e:	4313      	orrs	r3, r2
 800f210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00a      	beq.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f220:	4b65      	ldr	r3, [pc, #404]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f226:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a1b      	ldr	r3, [r3, #32]
 800f22e:	4962      	ldr	r1, [pc, #392]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f230:	4313      	orrs	r3, r2
 800f232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00a      	beq.n	800f258 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f242:	4b5d      	ldr	r3, [pc, #372]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f248:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f250:	4959      	ldr	r1, [pc, #356]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f252:	4313      	orrs	r3, r2
 800f254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00a      	beq.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f264:	4b54      	ldr	r3, [pc, #336]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f26a:	f023 0203 	bic.w	r2, r3, #3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f272:	4951      	ldr	r1, [pc, #324]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f274:	4313      	orrs	r3, r2
 800f276:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00a      	beq.n	800f29c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f286:	4b4c      	ldr	r3, [pc, #304]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f28c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f294:	4948      	ldr	r1, [pc, #288]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f296:	4313      	orrs	r3, r2
 800f298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d015      	beq.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f2a8:	4b43      	ldr	r3, [pc, #268]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2b6:	4940      	ldr	r1, [pc, #256]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2c6:	d105      	bne.n	800f2d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f2c8:	4b3b      	ldr	r3, [pc, #236]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	4a3a      	ldr	r2, [pc, #232]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f2ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f2d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d015      	beq.n	800f30c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800f2e0:	4b35      	ldr	r3, [pc, #212]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ee:	4932      	ldr	r1, [pc, #200]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f2fe:	d105      	bne.n	800f30c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f300:	4b2d      	ldr	r3, [pc, #180]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f302:	68db      	ldr	r3, [r3, #12]
 800f304:	4a2c      	ldr	r2, [pc, #176]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f30a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f314:	2b00      	cmp	r3, #0
 800f316:	d015      	beq.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f318:	4b27      	ldr	r3, [pc, #156]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f31e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f326:	4924      	ldr	r1, [pc, #144]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f328:	4313      	orrs	r3, r2
 800f32a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f336:	d105      	bne.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f338:	4b1f      	ldr	r3, [pc, #124]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	4a1e      	ldr	r2, [pc, #120]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f33e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f342:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d015      	beq.n	800f37c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f350:	4b19      	ldr	r3, [pc, #100]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f356:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f35e:	4916      	ldr	r1, [pc, #88]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f360:	4313      	orrs	r3, r2
 800f362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f36a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f36e:	d105      	bne.n	800f37c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f370:	4b11      	ldr	r3, [pc, #68]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	4a10      	ldr	r2, [pc, #64]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f37a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f384:	2b00      	cmp	r3, #0
 800f386:	d019      	beq.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f388:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f38e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f396:	4908      	ldr	r1, [pc, #32]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f398:	4313      	orrs	r3, r2
 800f39a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f3a6:	d109      	bne.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f3a8:	4b03      	ldr	r3, [pc, #12]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	4a02      	ldr	r2, [pc, #8]	@ (800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800f3ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3b2:	60d3      	str	r3, [r2, #12]
 800f3b4:	e002      	b.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800f3b6:	bf00      	nop
 800f3b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d015      	beq.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800f3c8:	4b29      	ldr	r3, [pc, #164]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f3ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3d6:	4926      	ldr	r1, [pc, #152]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3e6:	d105      	bne.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f3e8:	4b21      	ldr	r3, [pc, #132]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	4a20      	ldr	r2, [pc, #128]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f3ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f3f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d015      	beq.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800f400:	4b1b      	ldr	r3, [pc, #108]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f406:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f40e:	4918      	ldr	r1, [pc, #96]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f410:	4313      	orrs	r3, r2
 800f412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f41a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f41e:	d105      	bne.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f420:	4b13      	ldr	r3, [pc, #76]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	4a12      	ldr	r2, [pc, #72]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f42a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f434:	2b00      	cmp	r3, #0
 800f436:	d015      	beq.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f438:	4b0d      	ldr	r3, [pc, #52]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f43a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f43e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f446:	490a      	ldr	r1, [pc, #40]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f448:	4313      	orrs	r3, r2
 800f44a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f456:	d105      	bne.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f458:	4b05      	ldr	r3, [pc, #20]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	4a04      	ldr	r2, [pc, #16]	@ (800f470 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800f45e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f462:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800f464:	7cbb      	ldrb	r3, [r7, #18]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	40021000 	.word	0x40021000

0800f474 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f47c:	2301      	movs	r3, #1
 800f47e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d070      	beq.n	800f568 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d106      	bne.n	800f4a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7fb fdd8 	bl	800b050 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2202      	movs	r2, #2
 800f4a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	f003 0310 	and.w	r3, r3, #16
 800f4b2:	2b10      	cmp	r3, #16
 800f4b4:	d04f      	beq.n	800f556 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	22ca      	movs	r2, #202	@ 0xca
 800f4bc:	625a      	str	r2, [r3, #36]	@ 0x24
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2253      	movs	r2, #83	@ 0x53
 800f4c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f878 	bl	800f5bc <RTC_EnterInitMode>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d126      	bne.n	800f524 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	6812      	ldr	r2, [r2, #0]
 800f4e0:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800f4e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4e8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	6999      	ldr	r1, [r3, #24]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	685a      	ldr	r2, [r3, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	431a      	orrs	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	699b      	ldr	r3, [r3, #24]
 800f4fe:	431a      	orrs	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	430a      	orrs	r2, r1
 800f506:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	68d9      	ldr	r1, [r3, #12]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	689b      	ldr	r3, [r3, #8]
 800f510:	041a      	lsls	r2, r3, #16
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	430a      	orrs	r2, r1
 800f518:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f884 	bl	800f628 <RTC_ExitInitMode>
 800f520:	4603      	mov	r3, r0
 800f522:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f524:	7bfb      	ldrb	r3, [r7, #15]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d110      	bne.n	800f54c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a1a      	ldr	r2, [r3, #32]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	431a      	orrs	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	695b      	ldr	r3, [r3, #20]
 800f542:	431a      	orrs	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	430a      	orrs	r2, r1
 800f54a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	22ff      	movs	r2, #255	@ 0xff
 800f552:	625a      	str	r2, [r3, #36]	@ 0x24
 800f554:	e001      	b.n	800f55a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d103      	bne.n	800f568 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a0d      	ldr	r2, [pc, #52]	@ (800f5b8 <HAL_RTC_WaitForSynchro+0x44>)
 800f582:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f584:	f7fc f846 	bl	800b614 <HAL_GetTick>
 800f588:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800f58a:	e009      	b.n	800f5a0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f58c:	f7fc f842 	bl	800b614 <HAL_GetTick>
 800f590:	4602      	mov	r2, r0
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f59a:	d901      	bls.n	800f5a0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800f59c:	2303      	movs	r3, #3
 800f59e:	e007      	b.n	800f5b0 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	f003 0320 	and.w	r3, r3, #32
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d0ee      	beq.n	800f58c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3710      	adds	r7, #16
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	0001005f 	.word	0x0001005f

0800f5bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d123      	bne.n	800f61e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	68da      	ldr	r2, [r3, #12]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f5e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f5e6:	f7fc f815 	bl	800b614 <HAL_GetTick>
 800f5ea:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f5ec:	e00d      	b.n	800f60a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f5ee:	f7fc f811 	bl	800b614 <HAL_GetTick>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	1ad3      	subs	r3, r2, r3
 800f5f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f5fc:	d905      	bls.n	800f60a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800f5fe:	2303      	movs	r3, #3
 800f600:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2203      	movs	r2, #3
 800f606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f614:	2b00      	cmp	r3, #0
 800f616:	d102      	bne.n	800f61e <RTC_EnterInitMode+0x62>
 800f618:	7bfb      	ldrb	r3, [r7, #15]
 800f61a:	2b03      	cmp	r3, #3
 800f61c:	d1e7      	bne.n	800f5ee <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f630:	2300      	movs	r3, #0
 800f632:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	68da      	ldr	r2, [r3, #12]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f642:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	699b      	ldr	r3, [r3, #24]
 800f64a:	f003 0320 	and.w	r3, r3, #32
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d10c      	bne.n	800f66c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7ff ff8e 	bl	800f574 <HAL_RTC_WaitForSynchro>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d022      	beq.n	800f6a4 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2203      	movs	r2, #3
 800f662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	73fb      	strb	r3, [r7, #15]
 800f66a:	e01b      	b.n	800f6a4 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	699a      	ldr	r2, [r3, #24]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f022 0220 	bic.w	r2, r2, #32
 800f67a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff ff79 	bl	800f574 <HAL_RTC_WaitForSynchro>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d005      	beq.n	800f694 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2203      	movs	r2, #3
 800f68c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800f690:	2303      	movs	r3, #3
 800f692:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	699a      	ldr	r2, [r3, #24]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f042 0220 	orr.w	r2, r2, #32
 800f6a2:	619a      	str	r2, [r3, #24]
  }

  return status;
 800f6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b084      	sub	sp, #16
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	e09d      	b.n	800f7fc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d108      	bne.n	800f6da <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f6d0:	d009      	beq.n	800f6e6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	61da      	str	r2, [r3, #28]
 800f6d8:	e005      	b.n	800f6e6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d106      	bne.n	800f706 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f7fb fce1 	bl	800b0c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2202      	movs	r2, #2
 800f70a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f71c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f726:	d902      	bls.n	800f72e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f728:	2300      	movs	r3, #0
 800f72a:	60fb      	str	r3, [r7, #12]
 800f72c:	e002      	b.n	800f734 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f72e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f732:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800f73c:	d007      	beq.n	800f74e <HAL_SPI_Init+0xa0>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f746:	d002      	beq.n	800f74e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f75e:	431a      	orrs	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	691b      	ldr	r3, [r3, #16]
 800f764:	f003 0302 	and.w	r3, r3, #2
 800f768:	431a      	orrs	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	695b      	ldr	r3, [r3, #20]
 800f76e:	f003 0301 	and.w	r3, r3, #1
 800f772:	431a      	orrs	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f77c:	431a      	orrs	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	69db      	ldr	r3, [r3, #28]
 800f782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f786:	431a      	orrs	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6a1b      	ldr	r3, [r3, #32]
 800f78c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f790:	ea42 0103 	orr.w	r1, r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f798:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	430a      	orrs	r2, r1
 800f7a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	699b      	ldr	r3, [r3, #24]
 800f7a8:	0c1b      	lsrs	r3, r3, #16
 800f7aa:	f003 0204 	and.w	r2, r3, #4
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7b2:	f003 0310 	and.w	r3, r3, #16
 800f7b6:	431a      	orrs	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7bc:	f003 0308 	and.w	r3, r3, #8
 800f7c0:	431a      	orrs	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800f7ca:	ea42 0103 	orr.w	r1, r2, r3
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	430a      	orrs	r2, r1
 800f7da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	69da      	ldr	r2, [r3, #28]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f7ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3710      	adds	r7, #16
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}

0800f804 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b088      	sub	sp, #32
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	603b      	str	r3, [r7, #0]
 800f810:	4613      	mov	r3, r2
 800f812:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f814:	f7fb fefe 	bl	800b614 <HAL_GetTick>
 800f818:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f81a:	88fb      	ldrh	r3, [r7, #6]
 800f81c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b01      	cmp	r3, #1
 800f828:	d001      	beq.n	800f82e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f82a:	2302      	movs	r3, #2
 800f82c:	e15c      	b.n	800fae8 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <HAL_SPI_Transmit+0x36>
 800f834:	88fb      	ldrh	r3, [r7, #6]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d101      	bne.n	800f83e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f83a:	2301      	movs	r3, #1
 800f83c:	e154      	b.n	800fae8 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f844:	2b01      	cmp	r3, #1
 800f846:	d101      	bne.n	800f84c <HAL_SPI_Transmit+0x48>
 800f848:	2302      	movs	r3, #2
 800f84a:	e14d      	b.n	800fae8 <HAL_SPI_Transmit+0x2e4>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	2203      	movs	r2, #3
 800f858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2200      	movs	r2, #0
 800f860:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	88fa      	ldrh	r2, [r7, #6]
 800f86c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	88fa      	ldrh	r2, [r7, #6]
 800f872:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2200      	movs	r2, #0
 800f878:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2200      	movs	r2, #0
 800f886:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f89e:	d10f      	bne.n	800f8c0 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f8ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f8be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8ca:	2b40      	cmp	r3, #64	@ 0x40
 800f8cc:	d007      	beq.n	800f8de <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f8dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f8e6:	d952      	bls.n	800f98e <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d002      	beq.n	800f8f6 <HAL_SPI_Transmit+0xf2>
 800f8f0:	8b7b      	ldrh	r3, [r7, #26]
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d145      	bne.n	800f982 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8fa:	881a      	ldrh	r2, [r3, #0]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f906:	1c9a      	adds	r2, r3, #2
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f910:	b29b      	uxth	r3, r3
 800f912:	3b01      	subs	r3, #1
 800f914:	b29a      	uxth	r2, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f91a:	e032      	b.n	800f982 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	f003 0302 	and.w	r3, r3, #2
 800f926:	2b02      	cmp	r3, #2
 800f928:	d112      	bne.n	800f950 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f92e:	881a      	ldrh	r2, [r3, #0]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f93a:	1c9a      	adds	r2, r3, #2
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f944:	b29b      	uxth	r3, r3
 800f946:	3b01      	subs	r3, #1
 800f948:	b29a      	uxth	r2, r3
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f94e:	e018      	b.n	800f982 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f950:	f7fb fe60 	bl	800b614 <HAL_GetTick>
 800f954:	4602      	mov	r2, r0
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	1ad3      	subs	r3, r2, r3
 800f95a:	683a      	ldr	r2, [r7, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d803      	bhi.n	800f968 <HAL_SPI_Transmit+0x164>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f966:	d102      	bne.n	800f96e <HAL_SPI_Transmit+0x16a>
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d109      	bne.n	800f982 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2201      	movs	r2, #1
 800f972:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f97e:	2303      	movs	r3, #3
 800f980:	e0b2      	b.n	800fae8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f986:	b29b      	uxth	r3, r3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1c7      	bne.n	800f91c <HAL_SPI_Transmit+0x118>
 800f98c:	e083      	b.n	800fa96 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d002      	beq.n	800f99c <HAL_SPI_Transmit+0x198>
 800f996:	8b7b      	ldrh	r3, [r7, #26]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d177      	bne.n	800fa8c <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d912      	bls.n	800f9cc <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9aa:	881a      	ldrh	r2, [r3, #0]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b6:	1c9a      	adds	r2, r3, #2
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	3b02      	subs	r3, #2
 800f9c4:	b29a      	uxth	r2, r3
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f9ca:	e05f      	b.n	800fa8c <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	330c      	adds	r3, #12
 800f9d6:	7812      	ldrb	r2, [r2, #0]
 800f9d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9de:	1c5a      	adds	r2, r3, #1
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f9f2:	e04b      	b.n	800fa8c <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	f003 0302 	and.w	r3, r3, #2
 800f9fe:	2b02      	cmp	r3, #2
 800fa00:	d12b      	bne.n	800fa5a <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d912      	bls.n	800fa32 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa10:	881a      	ldrh	r2, [r3, #0]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa1c:	1c9a      	adds	r2, r3, #2
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	3b02      	subs	r3, #2
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fa30:	e02c      	b.n	800fa8c <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	330c      	adds	r3, #12
 800fa3c:	7812      	ldrb	r2, [r2, #0]
 800fa3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa44:	1c5a      	adds	r2, r3, #1
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	3b01      	subs	r3, #1
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fa58:	e018      	b.n	800fa8c <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa5a:	f7fb fddb 	bl	800b614 <HAL_GetTick>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	683a      	ldr	r2, [r7, #0]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d803      	bhi.n	800fa72 <HAL_SPI_Transmit+0x26e>
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa70:	d102      	bne.n	800fa78 <HAL_SPI_Transmit+0x274>
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d109      	bne.n	800fa8c <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2200      	movs	r2, #0
 800fa84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800fa88:	2303      	movs	r3, #3
 800fa8a:	e02d      	b.n	800fae8 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1ae      	bne.n	800f9f4 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fa96:	69fa      	ldr	r2, [r7, #28]
 800fa98:	6839      	ldr	r1, [r7, #0]
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f000 fcf6 	bl	801048c <SPI_EndRxTxTransaction>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d002      	beq.n	800faac <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2220      	movs	r2, #32
 800faaa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10a      	bne.n	800faca <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fab4:	2300      	movs	r3, #0
 800fab6:	617b      	str	r3, [r7, #20]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	617b      	str	r3, [r7, #20]
 800fac8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2201      	movs	r2, #1
 800face:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2200      	movs	r2, #0
 800fad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800fae2:	2301      	movs	r3, #1
 800fae4:	e000      	b.n	800fae8 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800fae6:	2300      	movs	r3, #0
  }
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3720      	adds	r7, #32
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b088      	sub	sp, #32
 800faf4:	af02      	add	r7, sp, #8
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	603b      	str	r3, [r7, #0]
 800fafc:	4613      	mov	r3, r2
 800fafe:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d001      	beq.n	800fb10 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	e123      	b.n	800fd58 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d002      	beq.n	800fb1c <HAL_SPI_Receive+0x2c>
 800fb16:	88fb      	ldrh	r3, [r7, #6]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d101      	bne.n	800fb20 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e11b      	b.n	800fd58 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb28:	d112      	bne.n	800fb50 <HAL_SPI_Receive+0x60>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10e      	bne.n	800fb50 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2204      	movs	r2, #4
 800fb36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800fb3a:	88fa      	ldrh	r2, [r7, #6]
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	4613      	mov	r3, r2
 800fb42:	68ba      	ldr	r2, [r7, #8]
 800fb44:	68b9      	ldr	r1, [r7, #8]
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	f000 f90a 	bl	800fd60 <HAL_SPI_TransmitReceive>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	e103      	b.n	800fd58 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb50:	f7fb fd60 	bl	800b614 <HAL_GetTick>
 800fb54:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d101      	bne.n	800fb64 <HAL_SPI_Receive+0x74>
 800fb60:	2302      	movs	r3, #2
 800fb62:	e0f9      	b.n	800fd58 <HAL_SPI_Receive+0x268>
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2201      	movs	r2, #1
 800fb68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2204      	movs	r2, #4
 800fb70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	68ba      	ldr	r2, [r7, #8]
 800fb7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	88fa      	ldrh	r2, [r7, #6]
 800fb84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	88fa      	ldrh	r2, [r7, #6]
 800fb8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2200      	movs	r2, #0
 800fb94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2200      	movs	r2, #0
 800fba6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800fbb6:	d908      	bls.n	800fbca <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	685a      	ldr	r2, [r3, #4]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800fbc6:	605a      	str	r2, [r3, #4]
 800fbc8:	e007      	b.n	800fbda <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	685a      	ldr	r2, [r3, #4]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fbd8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fbe2:	d10f      	bne.n	800fc04 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fbf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fc02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc0e:	2b40      	cmp	r3, #64	@ 0x40
 800fc10:	d007      	beq.n	800fc22 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fc20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800fc2a:	d875      	bhi.n	800fd18 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800fc2c:	e037      	b.n	800fc9e <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	f003 0301 	and.w	r3, r3, #1
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d117      	bne.n	800fc6c <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f103 020c 	add.w	r2, r3, #12
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc48:	7812      	ldrb	r2, [r2, #0]
 800fc4a:	b2d2      	uxtb	r2, r2
 800fc4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc52:	1c5a      	adds	r2, r3, #1
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	3b01      	subs	r3, #1
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800fc6a:	e018      	b.n	800fc9e <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc6c:	f7fb fcd2 	bl	800b614 <HAL_GetTick>
 800fc70:	4602      	mov	r2, r0
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	683a      	ldr	r2, [r7, #0]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d803      	bhi.n	800fc84 <HAL_SPI_Receive+0x194>
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc82:	d102      	bne.n	800fc8a <HAL_SPI_Receive+0x19a>
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d109      	bne.n	800fc9e <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800fc9a:	2303      	movs	r3, #3
 800fc9c:	e05c      	b.n	800fd58 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1c1      	bne.n	800fc2e <HAL_SPI_Receive+0x13e>
 800fcaa:	e03b      	b.n	800fd24 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	f003 0301 	and.w	r3, r3, #1
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d115      	bne.n	800fce6 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	68da      	ldr	r2, [r3, #12]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcc4:	b292      	uxth	r2, r2
 800fcc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fccc:	1c9a      	adds	r2, r3, #2
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800fce4:	e018      	b.n	800fd18 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fce6:	f7fb fc95 	bl	800b614 <HAL_GetTick>
 800fcea:	4602      	mov	r2, r0
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	683a      	ldr	r2, [r7, #0]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d803      	bhi.n	800fcfe <HAL_SPI_Receive+0x20e>
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcfc:	d102      	bne.n	800fd04 <HAL_SPI_Receive+0x214>
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d109      	bne.n	800fd18 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2201      	movs	r2, #1
 800fd08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800fd14:	2303      	movs	r3, #3
 800fd16:	e01f      	b.n	800fd58 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d1c3      	bne.n	800fcac <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	6839      	ldr	r1, [r7, #0]
 800fd28:	68f8      	ldr	r0, [r7, #12]
 800fd2a:	f000 fb57 	bl	80103dc <SPI_EndRxTransaction>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2220      	movs	r2, #32
 800fd38:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800fd52:	2301      	movs	r3, #1
 800fd54:	e000      	b.n	800fd58 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800fd56:	2300      	movs	r3, #0
  }
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3718      	adds	r7, #24
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08a      	sub	sp, #40	@ 0x28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
 800fd6c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fd72:	f7fb fc4f 	bl	800b614 <HAL_GetTick>
 800fd76:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800fd7e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800fd86:	887b      	ldrh	r3, [r7, #2]
 800fd88:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800fd8a:	887b      	ldrh	r3, [r7, #2]
 800fd8c:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fd8e:	7ffb      	ldrb	r3, [r7, #31]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d00c      	beq.n	800fdae <HAL_SPI_TransmitReceive+0x4e>
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd9a:	d106      	bne.n	800fdaa <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d102      	bne.n	800fdaa <HAL_SPI_TransmitReceive+0x4a>
 800fda4:	7ffb      	ldrb	r3, [r7, #31]
 800fda6:	2b04      	cmp	r3, #4
 800fda8:	d001      	beq.n	800fdae <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800fdaa:	2302      	movs	r3, #2
 800fdac:	e1f3      	b.n	8010196 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d005      	beq.n	800fdc0 <HAL_SPI_TransmitReceive+0x60>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <HAL_SPI_TransmitReceive+0x60>
 800fdba:	887b      	ldrh	r3, [r7, #2]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d101      	bne.n	800fdc4 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e1e8      	b.n	8010196 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d101      	bne.n	800fdd2 <HAL_SPI_TransmitReceive+0x72>
 800fdce:	2302      	movs	r3, #2
 800fdd0:	e1e1      	b.n	8010196 <HAL_SPI_TransmitReceive+0x436>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b04      	cmp	r3, #4
 800fde4:	d003      	beq.n	800fdee <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2205      	movs	r2, #5
 800fdea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	887a      	ldrh	r2, [r7, #2]
 800fdfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	887a      	ldrh	r2, [r7, #2]
 800fe06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	68ba      	ldr	r2, [r7, #8]
 800fe0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	887a      	ldrh	r2, [r7, #2]
 800fe14:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	887a      	ldrh	r2, [r7, #2]
 800fe1a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2200      	movs	r2, #0
 800fe26:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800fe30:	d802      	bhi.n	800fe38 <HAL_SPI_TransmitReceive+0xd8>
 800fe32:	8abb      	ldrh	r3, [r7, #20]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d908      	bls.n	800fe4a <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	685a      	ldr	r2, [r3, #4]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800fe46:	605a      	str	r2, [r3, #4]
 800fe48:	e007      	b.n	800fe5a <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	685a      	ldr	r2, [r3, #4]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fe58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe64:	2b40      	cmp	r3, #64	@ 0x40
 800fe66:	d007      	beq.n	800fe78 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800fe80:	f240 8083 	bls.w	800ff8a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d002      	beq.n	800fe92 <HAL_SPI_TransmitReceive+0x132>
 800fe8c:	8afb      	ldrh	r3, [r7, #22]
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	d16f      	bne.n	800ff72 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe96:	881a      	ldrh	r2, [r3, #0]
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea2:	1c9a      	adds	r2, r3, #2
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800feac:	b29b      	uxth	r3, r3
 800feae:	3b01      	subs	r3, #1
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800feb6:	e05c      	b.n	800ff72 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	f003 0302 	and.w	r3, r3, #2
 800fec2:	2b02      	cmp	r3, #2
 800fec4:	d11b      	bne.n	800fefe <HAL_SPI_TransmitReceive+0x19e>
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800feca:	b29b      	uxth	r3, r3
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d016      	beq.n	800fefe <HAL_SPI_TransmitReceive+0x19e>
 800fed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d113      	bne.n	800fefe <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feda:	881a      	ldrh	r2, [r3, #0]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fee6:	1c9a      	adds	r2, r3, #2
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	3b01      	subs	r3, #1
 800fef4:	b29a      	uxth	r2, r3
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fefa:	2300      	movs	r3, #0
 800fefc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	f003 0301 	and.w	r3, r3, #1
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d11c      	bne.n	800ff46 <HAL_SPI_TransmitReceive+0x1e6>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d016      	beq.n	800ff46 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	68da      	ldr	r2, [r3, #12]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff22:	b292      	uxth	r2, r2
 800ff24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff2a:	1c9a      	adds	r2, r3, #2
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ff42:	2301      	movs	r3, #1
 800ff44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ff46:	f7fb fb65 	bl	800b614 <HAL_GetTick>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d80d      	bhi.n	800ff72 <HAL_SPI_TransmitReceive+0x212>
 800ff56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff5c:	d009      	beq.n	800ff72 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2201      	movs	r2, #1
 800ff62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	e111      	b.n	8010196 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d19d      	bne.n	800feb8 <HAL_SPI_TransmitReceive+0x158>
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ff82:	b29b      	uxth	r3, r3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d197      	bne.n	800feb8 <HAL_SPI_TransmitReceive+0x158>
 800ff88:	e0e5      	b.n	8010156 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d003      	beq.n	800ff9a <HAL_SPI_TransmitReceive+0x23a>
 800ff92:	8afb      	ldrh	r3, [r7, #22]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	f040 80d1 	bne.w	801013c <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d912      	bls.n	800ffca <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffa8:	881a      	ldrh	r2, [r3, #0]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffb4:	1c9a      	adds	r2, r3, #2
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	3b02      	subs	r3, #2
 800ffc2:	b29a      	uxth	r2, r3
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ffc8:	e0b8      	b.n	801013c <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	330c      	adds	r3, #12
 800ffd4:	7812      	ldrb	r2, [r2, #0]
 800ffd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffdc:	1c5a      	adds	r2, r3, #1
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fff0:	e0a4      	b.n	801013c <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	f003 0302 	and.w	r3, r3, #2
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d134      	bne.n	801006a <HAL_SPI_TransmitReceive+0x30a>
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010004:	b29b      	uxth	r3, r3
 8010006:	2b00      	cmp	r3, #0
 8010008:	d02f      	beq.n	801006a <HAL_SPI_TransmitReceive+0x30a>
 801000a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000c:	2b01      	cmp	r3, #1
 801000e:	d12c      	bne.n	801006a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010014:	b29b      	uxth	r3, r3
 8010016:	2b01      	cmp	r3, #1
 8010018:	d912      	bls.n	8010040 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801001e:	881a      	ldrh	r2, [r3, #0]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801002a:	1c9a      	adds	r2, r3, #2
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010034:	b29b      	uxth	r3, r3
 8010036:	3b02      	subs	r3, #2
 8010038:	b29a      	uxth	r2, r3
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801003e:	e012      	b.n	8010066 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	330c      	adds	r3, #12
 801004a:	7812      	ldrb	r2, [r2, #0]
 801004c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801005c:	b29b      	uxth	r3, r3
 801005e:	3b01      	subs	r3, #1
 8010060:	b29a      	uxth	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010066:	2300      	movs	r3, #0
 8010068:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	f003 0301 	and.w	r3, r3, #1
 8010074:	2b01      	cmp	r3, #1
 8010076:	d148      	bne.n	801010a <HAL_SPI_TransmitReceive+0x3aa>
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801007e:	b29b      	uxth	r3, r3
 8010080:	2b00      	cmp	r3, #0
 8010082:	d042      	beq.n	801010a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801008a:	b29b      	uxth	r3, r3
 801008c:	2b01      	cmp	r3, #1
 801008e:	d923      	bls.n	80100d8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	68da      	ldr	r2, [r3, #12]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801009a:	b292      	uxth	r2, r2
 801009c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100a2:	1c9a      	adds	r2, r3, #2
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	3b02      	subs	r3, #2
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d81f      	bhi.n	8010106 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80100d4:	605a      	str	r2, [r3, #4]
 80100d6:	e016      	b.n	8010106 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f103 020c 	add.w	r2, r3, #12
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100e4:	7812      	ldrb	r2, [r2, #0]
 80100e6:	b2d2      	uxtb	r2, r2
 80100e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ee:	1c5a      	adds	r2, r3, #1
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	3b01      	subs	r3, #1
 80100fe:	b29a      	uxth	r2, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010106:	2301      	movs	r3, #1
 8010108:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801010a:	f7fb fa83 	bl	800b614 <HAL_GetTick>
 801010e:	4602      	mov	r2, r0
 8010110:	6a3b      	ldr	r3, [r7, #32]
 8010112:	1ad3      	subs	r3, r2, r3
 8010114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010116:	429a      	cmp	r2, r3
 8010118:	d803      	bhi.n	8010122 <HAL_SPI_TransmitReceive+0x3c2>
 801011a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801011c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010120:	d102      	bne.n	8010128 <HAL_SPI_TransmitReceive+0x3c8>
 8010122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010124:	2b00      	cmp	r3, #0
 8010126:	d109      	bne.n	801013c <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2201      	movs	r2, #1
 801012c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2200      	movs	r2, #0
 8010134:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8010138:	2303      	movs	r3, #3
 801013a:	e02c      	b.n	8010196 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010140:	b29b      	uxth	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	f47f af55 	bne.w	800fff2 <HAL_SPI_TransmitReceive+0x292>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801014e:	b29b      	uxth	r3, r3
 8010150:	2b00      	cmp	r3, #0
 8010152:	f47f af4e 	bne.w	800fff2 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010156:	6a3a      	ldr	r2, [r7, #32]
 8010158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801015a:	68f8      	ldr	r0, [r7, #12]
 801015c:	f000 f996 	bl	801048c <SPI_EndRxTxTransaction>
 8010160:	4603      	mov	r3, r0
 8010162:	2b00      	cmp	r3, #0
 8010164:	d008      	beq.n	8010178 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2220      	movs	r2, #32
 801016a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2200      	movs	r2, #0
 8010170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8010174:	2301      	movs	r3, #1
 8010176:	e00e      	b.n	8010196 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2201      	movs	r2, #1
 801017c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2200      	movs	r2, #0
 8010184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	e000      	b.n	8010196 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8010194:	2300      	movs	r3, #0
  }
}
 8010196:	4618      	mov	r0, r3
 8010198:	3728      	adds	r7, #40	@ 0x28
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
	...

080101a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b088      	sub	sp, #32
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	603b      	str	r3, [r7, #0]
 80101ac:	4613      	mov	r3, r2
 80101ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80101b0:	f7fb fa30 	bl	800b614 <HAL_GetTick>
 80101b4:	4602      	mov	r2, r0
 80101b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b8:	1a9b      	subs	r3, r3, r2
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	4413      	add	r3, r2
 80101be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80101c0:	f7fb fa28 	bl	800b614 <HAL_GetTick>
 80101c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80101c6:	4b39      	ldr	r3, [pc, #228]	@ (80102ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	015b      	lsls	r3, r3, #5
 80101cc:	0d1b      	lsrs	r3, r3, #20
 80101ce:	69fa      	ldr	r2, [r7, #28]
 80101d0:	fb02 f303 	mul.w	r3, r2, r3
 80101d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80101d6:	e054      	b.n	8010282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101de:	d050      	beq.n	8010282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80101e0:	f7fb fa18 	bl	800b614 <HAL_GetTick>
 80101e4:	4602      	mov	r2, r0
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	69fa      	ldr	r2, [r7, #28]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d902      	bls.n	80101f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d13d      	bne.n	8010272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801020e:	d111      	bne.n	8010234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010218:	d004      	beq.n	8010224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010222:	d107      	bne.n	8010234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801023c:	d10f      	bne.n	801025e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801024c:	601a      	str	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801025c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2201      	movs	r2, #1
 8010262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2200      	movs	r2, #0
 801026a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801026e:	2303      	movs	r3, #3
 8010270:	e017      	b.n	80102a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d101      	bne.n	801027c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010278:	2300      	movs	r3, #0
 801027a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	3b01      	subs	r3, #1
 8010280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	689a      	ldr	r2, [r3, #8]
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	4013      	ands	r3, r2
 801028c:	68ba      	ldr	r2, [r7, #8]
 801028e:	429a      	cmp	r2, r3
 8010290:	bf0c      	ite	eq
 8010292:	2301      	moveq	r3, #1
 8010294:	2300      	movne	r3, #0
 8010296:	b2db      	uxtb	r3, r3
 8010298:	461a      	mov	r2, r3
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	429a      	cmp	r2, r3
 801029e:	d19b      	bne.n	80101d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80102a0:	2300      	movs	r3, #0
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3720      	adds	r7, #32
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20000050 	.word	0x20000050

080102b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08a      	sub	sp, #40	@ 0x28
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
 80102bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80102be:	2300      	movs	r3, #0
 80102c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80102c2:	f7fb f9a7 	bl	800b614 <HAL_GetTick>
 80102c6:	4602      	mov	r2, r0
 80102c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102ca:	1a9b      	subs	r3, r3, r2
 80102cc:	683a      	ldr	r2, [r7, #0]
 80102ce:	4413      	add	r3, r2
 80102d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80102d2:	f7fb f99f 	bl	800b614 <HAL_GetTick>
 80102d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	330c      	adds	r3, #12
 80102de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80102e0:	4b3d      	ldr	r3, [pc, #244]	@ (80103d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	4613      	mov	r3, r2
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	4413      	add	r3, r2
 80102ea:	00da      	lsls	r2, r3, #3
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	0d1b      	lsrs	r3, r3, #20
 80102f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102f2:	fb02 f303 	mul.w	r3, r2, r3
 80102f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80102f8:	e060      	b.n	80103bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010300:	d107      	bne.n	8010312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d104      	bne.n	8010312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	b2db      	uxtb	r3, r3
 801030e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010318:	d050      	beq.n	80103bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801031a:	f7fb f97b 	bl	800b614 <HAL_GetTick>
 801031e:	4602      	mov	r2, r0
 8010320:	6a3b      	ldr	r3, [r7, #32]
 8010322:	1ad3      	subs	r3, r2, r3
 8010324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010326:	429a      	cmp	r2, r3
 8010328:	d902      	bls.n	8010330 <SPI_WaitFifoStateUntilTimeout+0x80>
 801032a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032c:	2b00      	cmp	r3, #0
 801032e:	d13d      	bne.n	80103ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	685a      	ldr	r2, [r3, #4]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 801033e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010348:	d111      	bne.n	801036e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010352:	d004      	beq.n	801035e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801035c:	d107      	bne.n	801036e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801036c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010376:	d10f      	bne.n	8010398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010386:	601a      	str	r2, [r3, #0]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80103a8:	2303      	movs	r3, #3
 80103aa:	e010      	b.n	80103ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d101      	bne.n	80103b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80103b2:	2300      	movs	r3, #0
 80103b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	3b01      	subs	r3, #1
 80103ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	689a      	ldr	r2, [r3, #8]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	4013      	ands	r3, r2
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d196      	bne.n	80102fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80103cc:	2300      	movs	r3, #0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3728      	adds	r7, #40	@ 0x28
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	20000050 	.word	0x20000050

080103dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af02      	add	r7, sp, #8
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80103f0:	d111      	bne.n	8010416 <SPI_EndRxTransaction+0x3a>
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	689b      	ldr	r3, [r3, #8]
 80103f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103fa:	d004      	beq.n	8010406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010404:	d107      	bne.n	8010416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010414:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2200      	movs	r2, #0
 801041e:	2180      	movs	r1, #128	@ 0x80
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f7ff febd 	bl	80101a0 <SPI_WaitFlagStateUntilTimeout>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d007      	beq.n	801043c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010430:	f043 0220 	orr.w	r2, r3, #32
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8010438:	2303      	movs	r3, #3
 801043a:	e023      	b.n	8010484 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010444:	d11d      	bne.n	8010482 <SPI_EndRxTransaction+0xa6>
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801044e:	d004      	beq.n	801045a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010458:	d113      	bne.n	8010482 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	9300      	str	r3, [sp, #0]
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	2200      	movs	r2, #0
 8010462:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f7ff ff22 	bl	80102b0 <SPI_WaitFifoStateUntilTimeout>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d007      	beq.n	8010482 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010476:	f043 0220 	orr.w	r2, r3, #32
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 801047e:	2303      	movs	r3, #3
 8010480:	e000      	b.n	8010484 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8010482:	2300      	movs	r3, #0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af02      	add	r7, sp, #8
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	2200      	movs	r2, #0
 80104a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80104a4:	68f8      	ldr	r0, [r7, #12]
 80104a6:	f7ff ff03 	bl	80102b0 <SPI_WaitFifoStateUntilTimeout>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d007      	beq.n	80104c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80104b4:	f043 0220 	orr.w	r2, r3, #32
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80104bc:	2303      	movs	r3, #3
 80104be:	e027      	b.n	8010510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2200      	movs	r2, #0
 80104c8:	2180      	movs	r1, #128	@ 0x80
 80104ca:	68f8      	ldr	r0, [r7, #12]
 80104cc:	f7ff fe68 	bl	80101a0 <SPI_WaitFlagStateUntilTimeout>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d007      	beq.n	80104e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80104da:	f043 0220 	orr.w	r2, r3, #32
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80104e2:	2303      	movs	r3, #3
 80104e4:	e014      	b.n	8010510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	2200      	movs	r2, #0
 80104ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f7ff fedc 	bl	80102b0 <SPI_WaitFifoStateUntilTimeout>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d007      	beq.n	801050e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010502:	f043 0220 	orr.w	r2, r3, #32
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e000      	b.n	8010510 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801050e:	2300      	movs	r3, #0
}
 8010510:	4618      	mov	r0, r3
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d101      	bne.n	801052a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010526:	2301      	movs	r3, #1
 8010528:	e049      	b.n	80105be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d106      	bne.n	8010544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2200      	movs	r2, #0
 801053a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f7fa fe38 	bl	800b1b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2202      	movs	r2, #2
 8010548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	3304      	adds	r3, #4
 8010554:	4619      	mov	r1, r3
 8010556:	4610      	mov	r0, r2
 8010558:	f000 fab6 	bl	8010ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2201      	movs	r2, #1
 8010570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2201      	movs	r2, #1
 8010580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2201      	movs	r2, #1
 8010590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2201      	movs	r2, #1
 8010598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80105bc:	2300      	movs	r3, #0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b082      	sub	sp, #8
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d101      	bne.n	80105d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80105d4:	2301      	movs	r3, #1
 80105d6:	e049      	b.n	801066c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d106      	bne.n	80105f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f7fa fdad 	bl	800b14c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2202      	movs	r2, #2
 80105f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	3304      	adds	r3, #4
 8010602:	4619      	mov	r1, r3
 8010604:	4610      	mov	r0, r2
 8010606:	f000 fa5f 	bl	8010ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2201      	movs	r2, #1
 801060e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2201      	movs	r2, #1
 8010616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2201      	movs	r2, #1
 801061e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2201      	movs	r2, #1
 8010626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2201      	movs	r2, #1
 801062e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2201      	movs	r2, #1
 8010636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2201      	movs	r2, #1
 801063e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2201      	movs	r2, #1
 8010646:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2201      	movs	r2, #1
 801064e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2201      	movs	r2, #1
 8010656:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2201      	movs	r2, #1
 8010666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b086      	sub	sp, #24
 8010678:	af00      	add	r7, sp, #0
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801068a:	2b01      	cmp	r3, #1
 801068c:	d101      	bne.n	8010692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801068e:	2302      	movs	r3, #2
 8010690:	e0ff      	b.n	8010892 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2201      	movs	r2, #1
 8010696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b14      	cmp	r3, #20
 801069e:	f200 80f0 	bhi.w	8010882 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80106a2:	a201      	add	r2, pc, #4	@ (adr r2, 80106a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80106a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a8:	080106fd 	.word	0x080106fd
 80106ac:	08010883 	.word	0x08010883
 80106b0:	08010883 	.word	0x08010883
 80106b4:	08010883 	.word	0x08010883
 80106b8:	0801073d 	.word	0x0801073d
 80106bc:	08010883 	.word	0x08010883
 80106c0:	08010883 	.word	0x08010883
 80106c4:	08010883 	.word	0x08010883
 80106c8:	0801077f 	.word	0x0801077f
 80106cc:	08010883 	.word	0x08010883
 80106d0:	08010883 	.word	0x08010883
 80106d4:	08010883 	.word	0x08010883
 80106d8:	080107bf 	.word	0x080107bf
 80106dc:	08010883 	.word	0x08010883
 80106e0:	08010883 	.word	0x08010883
 80106e4:	08010883 	.word	0x08010883
 80106e8:	08010801 	.word	0x08010801
 80106ec:	08010883 	.word	0x08010883
 80106f0:	08010883 	.word	0x08010883
 80106f4:	08010883 	.word	0x08010883
 80106f8:	08010841 	.word	0x08010841
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	68b9      	ldr	r1, [r7, #8]
 8010702:	4618      	mov	r0, r3
 8010704:	f000 fa94 	bl	8010c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	699a      	ldr	r2, [r3, #24]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f042 0208 	orr.w	r2, r2, #8
 8010716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	699a      	ldr	r2, [r3, #24]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f022 0204 	bic.w	r2, r2, #4
 8010726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	6999      	ldr	r1, [r3, #24]
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	691a      	ldr	r2, [r3, #16]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	430a      	orrs	r2, r1
 8010738:	619a      	str	r2, [r3, #24]
      break;
 801073a:	e0a5      	b.n	8010888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	68b9      	ldr	r1, [r7, #8]
 8010742:	4618      	mov	r0, r3
 8010744:	f000 fb0e 	bl	8010d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	699a      	ldr	r2, [r3, #24]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	699a      	ldr	r2, [r3, #24]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	6999      	ldr	r1, [r3, #24]
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	021a      	lsls	r2, r3, #8
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	430a      	orrs	r2, r1
 801077a:	619a      	str	r2, [r3, #24]
      break;
 801077c:	e084      	b.n	8010888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	68b9      	ldr	r1, [r7, #8]
 8010784:	4618      	mov	r0, r3
 8010786:	f000 fb81 	bl	8010e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	69da      	ldr	r2, [r3, #28]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f042 0208 	orr.w	r2, r2, #8
 8010798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	69da      	ldr	r2, [r3, #28]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f022 0204 	bic.w	r2, r2, #4
 80107a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	69d9      	ldr	r1, [r3, #28]
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	691a      	ldr	r2, [r3, #16]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	430a      	orrs	r2, r1
 80107ba:	61da      	str	r2, [r3, #28]
      break;
 80107bc:	e064      	b.n	8010888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	68b9      	ldr	r1, [r7, #8]
 80107c4:	4618      	mov	r0, r3
 80107c6:	f000 fbf3 	bl	8010fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	69da      	ldr	r2, [r3, #28]
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80107d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	69da      	ldr	r2, [r3, #28]
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80107e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	69d9      	ldr	r1, [r3, #28]
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	691b      	ldr	r3, [r3, #16]
 80107f4:	021a      	lsls	r2, r3, #8
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	430a      	orrs	r2, r1
 80107fc:	61da      	str	r2, [r3, #28]
      break;
 80107fe:	e043      	b.n	8010888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68b9      	ldr	r1, [r7, #8]
 8010806:	4618      	mov	r0, r3
 8010808:	f000 fc66 	bl	80110d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f042 0208 	orr.w	r2, r2, #8
 801081a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f022 0204 	bic.w	r2, r2, #4
 801082a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	691a      	ldr	r2, [r3, #16]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	430a      	orrs	r2, r1
 801083c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 801083e:	e023      	b.n	8010888 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68b9      	ldr	r1, [r7, #8]
 8010846:	4618      	mov	r0, r3
 8010848:	f000 fcb0 	bl	80111ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801085a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801086a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	021a      	lsls	r2, r3, #8
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	430a      	orrs	r2, r1
 801087e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8010880:	e002      	b.n	8010888 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010882:	2301      	movs	r3, #1
 8010884:	75fb      	strb	r3, [r7, #23]
      break;
 8010886:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2200      	movs	r2, #0
 801088c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010890:	7dfb      	ldrb	r3, [r7, #23]
}
 8010892:	4618      	mov	r0, r3
 8010894:	3718      	adds	r7, #24
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop

0801089c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80108a6:	2300      	movs	r3, #0
 80108a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d101      	bne.n	80108b8 <HAL_TIM_ConfigClockSource+0x1c>
 80108b4:	2302      	movs	r3, #2
 80108b6:	e0f6      	b.n	8010aa6 <HAL_TIM_ConfigClockSource+0x20a>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2201      	movs	r2, #1
 80108bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2202      	movs	r2, #2
 80108c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80108d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80108da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80108e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	68ba      	ldr	r2, [r7, #8]
 80108ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a6f      	ldr	r2, [pc, #444]	@ (8010ab0 <HAL_TIM_ConfigClockSource+0x214>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	f000 80c1 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 80108f8:	4a6d      	ldr	r2, [pc, #436]	@ (8010ab0 <HAL_TIM_ConfigClockSource+0x214>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	f200 80c6 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010900:	4a6c      	ldr	r2, [pc, #432]	@ (8010ab4 <HAL_TIM_ConfigClockSource+0x218>)
 8010902:	4293      	cmp	r3, r2
 8010904:	f000 80b9 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 8010908:	4a6a      	ldr	r2, [pc, #424]	@ (8010ab4 <HAL_TIM_ConfigClockSource+0x218>)
 801090a:	4293      	cmp	r3, r2
 801090c:	f200 80be 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010910:	4a69      	ldr	r2, [pc, #420]	@ (8010ab8 <HAL_TIM_ConfigClockSource+0x21c>)
 8010912:	4293      	cmp	r3, r2
 8010914:	f000 80b1 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 8010918:	4a67      	ldr	r2, [pc, #412]	@ (8010ab8 <HAL_TIM_ConfigClockSource+0x21c>)
 801091a:	4293      	cmp	r3, r2
 801091c:	f200 80b6 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010920:	4a66      	ldr	r2, [pc, #408]	@ (8010abc <HAL_TIM_ConfigClockSource+0x220>)
 8010922:	4293      	cmp	r3, r2
 8010924:	f000 80a9 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 8010928:	4a64      	ldr	r2, [pc, #400]	@ (8010abc <HAL_TIM_ConfigClockSource+0x220>)
 801092a:	4293      	cmp	r3, r2
 801092c:	f200 80ae 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010930:	4a63      	ldr	r2, [pc, #396]	@ (8010ac0 <HAL_TIM_ConfigClockSource+0x224>)
 8010932:	4293      	cmp	r3, r2
 8010934:	f000 80a1 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 8010938:	4a61      	ldr	r2, [pc, #388]	@ (8010ac0 <HAL_TIM_ConfigClockSource+0x224>)
 801093a:	4293      	cmp	r3, r2
 801093c:	f200 80a6 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010940:	4a60      	ldr	r2, [pc, #384]	@ (8010ac4 <HAL_TIM_ConfigClockSource+0x228>)
 8010942:	4293      	cmp	r3, r2
 8010944:	f000 8099 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 8010948:	4a5e      	ldr	r2, [pc, #376]	@ (8010ac4 <HAL_TIM_ConfigClockSource+0x228>)
 801094a:	4293      	cmp	r3, r2
 801094c:	f200 809e 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010950:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010954:	f000 8091 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 8010958:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801095c:	f200 8096 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010964:	f000 8089 	beq.w	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 8010968:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801096c:	f200 808e 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010974:	d03e      	beq.n	80109f4 <HAL_TIM_ConfigClockSource+0x158>
 8010976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801097a:	f200 8087 	bhi.w	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 801097e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010982:	f000 8086 	beq.w	8010a92 <HAL_TIM_ConfigClockSource+0x1f6>
 8010986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801098a:	d87f      	bhi.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 801098c:	2b70      	cmp	r3, #112	@ 0x70
 801098e:	d01a      	beq.n	80109c6 <HAL_TIM_ConfigClockSource+0x12a>
 8010990:	2b70      	cmp	r3, #112	@ 0x70
 8010992:	d87b      	bhi.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 8010994:	2b60      	cmp	r3, #96	@ 0x60
 8010996:	d050      	beq.n	8010a3a <HAL_TIM_ConfigClockSource+0x19e>
 8010998:	2b60      	cmp	r3, #96	@ 0x60
 801099a:	d877      	bhi.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 801099c:	2b50      	cmp	r3, #80	@ 0x50
 801099e:	d03c      	beq.n	8010a1a <HAL_TIM_ConfigClockSource+0x17e>
 80109a0:	2b50      	cmp	r3, #80	@ 0x50
 80109a2:	d873      	bhi.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 80109a4:	2b40      	cmp	r3, #64	@ 0x40
 80109a6:	d058      	beq.n	8010a5a <HAL_TIM_ConfigClockSource+0x1be>
 80109a8:	2b40      	cmp	r3, #64	@ 0x40
 80109aa:	d86f      	bhi.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 80109ac:	2b30      	cmp	r3, #48	@ 0x30
 80109ae:	d064      	beq.n	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 80109b0:	2b30      	cmp	r3, #48	@ 0x30
 80109b2:	d86b      	bhi.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 80109b4:	2b20      	cmp	r3, #32
 80109b6:	d060      	beq.n	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 80109b8:	2b20      	cmp	r3, #32
 80109ba:	d867      	bhi.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d05c      	beq.n	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 80109c0:	2b10      	cmp	r3, #16
 80109c2:	d05a      	beq.n	8010a7a <HAL_TIM_ConfigClockSource+0x1de>
 80109c4:	e062      	b.n	8010a8c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80109d6:	f000 fcd1 	bl	801137c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	689b      	ldr	r3, [r3, #8]
 80109e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80109e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	68ba      	ldr	r2, [r7, #8]
 80109f0:	609a      	str	r2, [r3, #8]
      break;
 80109f2:	e04f      	b.n	8010a94 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010a04:	f000 fcba 	bl	801137c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	689a      	ldr	r2, [r3, #8]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010a16:	609a      	str	r2, [r3, #8]
      break;
 8010a18:	e03c      	b.n	8010a94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a26:	461a      	mov	r2, r3
 8010a28:	f000 fc2c 	bl	8011284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2150      	movs	r1, #80	@ 0x50
 8010a32:	4618      	mov	r0, r3
 8010a34:	f000 fc85 	bl	8011342 <TIM_ITRx_SetConfig>
      break;
 8010a38:	e02c      	b.n	8010a94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a46:	461a      	mov	r2, r3
 8010a48:	f000 fc4b 	bl	80112e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2160      	movs	r1, #96	@ 0x60
 8010a52:	4618      	mov	r0, r3
 8010a54:	f000 fc75 	bl	8011342 <TIM_ITRx_SetConfig>
      break;
 8010a58:	e01c      	b.n	8010a94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a66:	461a      	mov	r2, r3
 8010a68:	f000 fc0c 	bl	8011284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2140      	movs	r1, #64	@ 0x40
 8010a72:	4618      	mov	r0, r3
 8010a74:	f000 fc65 	bl	8011342 <TIM_ITRx_SetConfig>
      break;
 8010a78:	e00c      	b.n	8010a94 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4619      	mov	r1, r3
 8010a84:	4610      	mov	r0, r2
 8010a86:	f000 fc5c 	bl	8011342 <TIM_ITRx_SetConfig>
      break;
 8010a8a:	e003      	b.n	8010a94 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8010a90:	e000      	b.n	8010a94 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8010a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2201      	movs	r2, #1
 8010a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	00100070 	.word	0x00100070
 8010ab4:	00100060 	.word	0x00100060
 8010ab8:	00100050 	.word	0x00100050
 8010abc:	00100040 	.word	0x00100040
 8010ac0:	00100030 	.word	0x00100030
 8010ac4:	00100020 	.word	0x00100020

08010ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b085      	sub	sp, #20
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	4a4c      	ldr	r2, [pc, #304]	@ (8010c0c <TIM_Base_SetConfig+0x144>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d017      	beq.n	8010b10 <TIM_Base_SetConfig+0x48>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ae6:	d013      	beq.n	8010b10 <TIM_Base_SetConfig+0x48>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	4a49      	ldr	r2, [pc, #292]	@ (8010c10 <TIM_Base_SetConfig+0x148>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d00f      	beq.n	8010b10 <TIM_Base_SetConfig+0x48>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4a48      	ldr	r2, [pc, #288]	@ (8010c14 <TIM_Base_SetConfig+0x14c>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d00b      	beq.n	8010b10 <TIM_Base_SetConfig+0x48>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	4a47      	ldr	r2, [pc, #284]	@ (8010c18 <TIM_Base_SetConfig+0x150>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d007      	beq.n	8010b10 <TIM_Base_SetConfig+0x48>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4a46      	ldr	r2, [pc, #280]	@ (8010c1c <TIM_Base_SetConfig+0x154>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d003      	beq.n	8010b10 <TIM_Base_SetConfig+0x48>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	4a45      	ldr	r2, [pc, #276]	@ (8010c20 <TIM_Base_SetConfig+0x158>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d108      	bne.n	8010b22 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	4313      	orrs	r3, r2
 8010b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4a39      	ldr	r2, [pc, #228]	@ (8010c0c <TIM_Base_SetConfig+0x144>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d023      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b30:	d01f      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4a36      	ldr	r2, [pc, #216]	@ (8010c10 <TIM_Base_SetConfig+0x148>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d01b      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4a35      	ldr	r2, [pc, #212]	@ (8010c14 <TIM_Base_SetConfig+0x14c>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d017      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	4a34      	ldr	r2, [pc, #208]	@ (8010c18 <TIM_Base_SetConfig+0x150>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d013      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4a33      	ldr	r2, [pc, #204]	@ (8010c1c <TIM_Base_SetConfig+0x154>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d00f      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4a33      	ldr	r2, [pc, #204]	@ (8010c24 <TIM_Base_SetConfig+0x15c>)
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d00b      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4a32      	ldr	r2, [pc, #200]	@ (8010c28 <TIM_Base_SetConfig+0x160>)
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d007      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	4a31      	ldr	r2, [pc, #196]	@ (8010c2c <TIM_Base_SetConfig+0x164>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d003      	beq.n	8010b72 <TIM_Base_SetConfig+0xaa>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8010c20 <TIM_Base_SetConfig+0x158>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d108      	bne.n	8010b84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	68fa      	ldr	r2, [r7, #12]
 8010b80:	4313      	orrs	r3, r2
 8010b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	695b      	ldr	r3, [r3, #20]
 8010b8e:	4313      	orrs	r3, r2
 8010b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	68fa      	ldr	r2, [r7, #12]
 8010b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	689a      	ldr	r2, [r3, #8]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4a18      	ldr	r2, [pc, #96]	@ (8010c0c <TIM_Base_SetConfig+0x144>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d013      	beq.n	8010bd8 <TIM_Base_SetConfig+0x110>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8010c1c <TIM_Base_SetConfig+0x154>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d00f      	beq.n	8010bd8 <TIM_Base_SetConfig+0x110>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4a1a      	ldr	r2, [pc, #104]	@ (8010c24 <TIM_Base_SetConfig+0x15c>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d00b      	beq.n	8010bd8 <TIM_Base_SetConfig+0x110>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4a19      	ldr	r2, [pc, #100]	@ (8010c28 <TIM_Base_SetConfig+0x160>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d007      	beq.n	8010bd8 <TIM_Base_SetConfig+0x110>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	4a18      	ldr	r2, [pc, #96]	@ (8010c2c <TIM_Base_SetConfig+0x164>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d003      	beq.n	8010bd8 <TIM_Base_SetConfig+0x110>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4a13      	ldr	r2, [pc, #76]	@ (8010c20 <TIM_Base_SetConfig+0x158>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d103      	bne.n	8010be0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	691a      	ldr	r2, [r3, #16]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2201      	movs	r2, #1
 8010be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	691b      	ldr	r3, [r3, #16]
 8010bea:	f003 0301 	and.w	r3, r3, #1
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d105      	bne.n	8010bfe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	691b      	ldr	r3, [r3, #16]
 8010bf6:	f023 0201 	bic.w	r2, r3, #1
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	611a      	str	r2, [r3, #16]
  }
}
 8010bfe:	bf00      	nop
 8010c00:	3714      	adds	r7, #20
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
 8010c0a:	bf00      	nop
 8010c0c:	40012c00 	.word	0x40012c00
 8010c10:	40000400 	.word	0x40000400
 8010c14:	40000800 	.word	0x40000800
 8010c18:	40000c00 	.word	0x40000c00
 8010c1c:	40013400 	.word	0x40013400
 8010c20:	40015000 	.word	0x40015000
 8010c24:	40014000 	.word	0x40014000
 8010c28:	40014400 	.word	0x40014400
 8010c2c:	40014800 	.word	0x40014800

08010c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6a1b      	ldr	r3, [r3, #32]
 8010c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6a1b      	ldr	r3, [r3, #32]
 8010c44:	f023 0201 	bic.w	r2, r3, #1
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	699b      	ldr	r3, [r3, #24]
 8010c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	f023 0303 	bic.w	r3, r3, #3
 8010c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	68fa      	ldr	r2, [r7, #12]
 8010c72:	4313      	orrs	r3, r2
 8010c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	f023 0302 	bic.w	r3, r3, #2
 8010c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	689b      	ldr	r3, [r3, #8]
 8010c82:	697a      	ldr	r2, [r7, #20]
 8010c84:	4313      	orrs	r3, r2
 8010c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4a30      	ldr	r2, [pc, #192]	@ (8010d4c <TIM_OC1_SetConfig+0x11c>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d013      	beq.n	8010cb8 <TIM_OC1_SetConfig+0x88>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	4a2f      	ldr	r2, [pc, #188]	@ (8010d50 <TIM_OC1_SetConfig+0x120>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d00f      	beq.n	8010cb8 <TIM_OC1_SetConfig+0x88>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8010d54 <TIM_OC1_SetConfig+0x124>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d00b      	beq.n	8010cb8 <TIM_OC1_SetConfig+0x88>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8010d58 <TIM_OC1_SetConfig+0x128>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d007      	beq.n	8010cb8 <TIM_OC1_SetConfig+0x88>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4a2c      	ldr	r2, [pc, #176]	@ (8010d5c <TIM_OC1_SetConfig+0x12c>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d003      	beq.n	8010cb8 <TIM_OC1_SetConfig+0x88>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8010d60 <TIM_OC1_SetConfig+0x130>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d10c      	bne.n	8010cd2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	f023 0308 	bic.w	r3, r3, #8
 8010cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	697a      	ldr	r2, [r7, #20]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f023 0304 	bic.w	r3, r3, #4
 8010cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8010d4c <TIM_OC1_SetConfig+0x11c>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d013      	beq.n	8010d02 <TIM_OC1_SetConfig+0xd2>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8010d50 <TIM_OC1_SetConfig+0x120>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d00f      	beq.n	8010d02 <TIM_OC1_SetConfig+0xd2>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8010d54 <TIM_OC1_SetConfig+0x124>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d00b      	beq.n	8010d02 <TIM_OC1_SetConfig+0xd2>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4a1a      	ldr	r2, [pc, #104]	@ (8010d58 <TIM_OC1_SetConfig+0x128>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d007      	beq.n	8010d02 <TIM_OC1_SetConfig+0xd2>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4a19      	ldr	r2, [pc, #100]	@ (8010d5c <TIM_OC1_SetConfig+0x12c>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d003      	beq.n	8010d02 <TIM_OC1_SetConfig+0xd2>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	4a18      	ldr	r2, [pc, #96]	@ (8010d60 <TIM_OC1_SetConfig+0x130>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d111      	bne.n	8010d26 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	695b      	ldr	r3, [r3, #20]
 8010d16:	693a      	ldr	r2, [r7, #16]
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	699b      	ldr	r3, [r3, #24]
 8010d20:	693a      	ldr	r2, [r7, #16]
 8010d22:	4313      	orrs	r3, r2
 8010d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	693a      	ldr	r2, [r7, #16]
 8010d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	685a      	ldr	r2, [r3, #4]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	697a      	ldr	r2, [r7, #20]
 8010d3e:	621a      	str	r2, [r3, #32]
}
 8010d40:	bf00      	nop
 8010d42:	371c      	adds	r7, #28
 8010d44:	46bd      	mov	sp, r7
 8010d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4a:	4770      	bx	lr
 8010d4c:	40012c00 	.word	0x40012c00
 8010d50:	40013400 	.word	0x40013400
 8010d54:	40014000 	.word	0x40014000
 8010d58:	40014400 	.word	0x40014400
 8010d5c:	40014800 	.word	0x40014800
 8010d60:	40015000 	.word	0x40015000

08010d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b087      	sub	sp, #28
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6a1b      	ldr	r3, [r3, #32]
 8010d78:	f023 0210 	bic.w	r2, r3, #16
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	699b      	ldr	r3, [r3, #24]
 8010d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	021b      	lsls	r3, r3, #8
 8010da6:	68fa      	ldr	r2, [r7, #12]
 8010da8:	4313      	orrs	r3, r2
 8010daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	f023 0320 	bic.w	r3, r3, #32
 8010db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	689b      	ldr	r3, [r3, #8]
 8010db8:	011b      	lsls	r3, r3, #4
 8010dba:	697a      	ldr	r2, [r7, #20]
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8010e74 <TIM_OC2_SetConfig+0x110>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d007      	beq.n	8010dd8 <TIM_OC2_SetConfig+0x74>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	4a2b      	ldr	r2, [pc, #172]	@ (8010e78 <TIM_OC2_SetConfig+0x114>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d003      	beq.n	8010dd8 <TIM_OC2_SetConfig+0x74>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8010e7c <TIM_OC2_SetConfig+0x118>)
 8010dd4:	4293      	cmp	r3, r2
 8010dd6:	d10d      	bne.n	8010df4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	011b      	lsls	r3, r3, #4
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	4a1f      	ldr	r2, [pc, #124]	@ (8010e74 <TIM_OC2_SetConfig+0x110>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d013      	beq.n	8010e24 <TIM_OC2_SetConfig+0xc0>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8010e78 <TIM_OC2_SetConfig+0x114>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d00f      	beq.n	8010e24 <TIM_OC2_SetConfig+0xc0>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	4a1e      	ldr	r2, [pc, #120]	@ (8010e80 <TIM_OC2_SetConfig+0x11c>)
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d00b      	beq.n	8010e24 <TIM_OC2_SetConfig+0xc0>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8010e84 <TIM_OC2_SetConfig+0x120>)
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d007      	beq.n	8010e24 <TIM_OC2_SetConfig+0xc0>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4a1c      	ldr	r2, [pc, #112]	@ (8010e88 <TIM_OC2_SetConfig+0x124>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d003      	beq.n	8010e24 <TIM_OC2_SetConfig+0xc0>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	4a17      	ldr	r2, [pc, #92]	@ (8010e7c <TIM_OC2_SetConfig+0x118>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d113      	bne.n	8010e4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	693a      	ldr	r2, [r7, #16]
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	693a      	ldr	r2, [r7, #16]
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	693a      	ldr	r2, [r7, #16]
 8010e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	68fa      	ldr	r2, [r7, #12]
 8010e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	685a      	ldr	r2, [r3, #4]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	621a      	str	r2, [r3, #32]
}
 8010e66:	bf00      	nop
 8010e68:	371c      	adds	r7, #28
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	40012c00 	.word	0x40012c00
 8010e78:	40013400 	.word	0x40013400
 8010e7c:	40015000 	.word	0x40015000
 8010e80:	40014000 	.word	0x40014000
 8010e84:	40014400 	.word	0x40014400
 8010e88:	40014800 	.word	0x40014800

08010e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b087      	sub	sp, #28
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6a1b      	ldr	r3, [r3, #32]
 8010e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6a1b      	ldr	r3, [r3, #32]
 8010ea0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	69db      	ldr	r3, [r3, #28]
 8010eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f023 0303 	bic.w	r3, r3, #3
 8010ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	689b      	ldr	r3, [r3, #8]
 8010ede:	021b      	lsls	r3, r3, #8
 8010ee0:	697a      	ldr	r2, [r7, #20]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4a2b      	ldr	r2, [pc, #172]	@ (8010f98 <TIM_OC3_SetConfig+0x10c>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d007      	beq.n	8010efe <TIM_OC3_SetConfig+0x72>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8010f9c <TIM_OC3_SetConfig+0x110>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d003      	beq.n	8010efe <TIM_OC3_SetConfig+0x72>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4a29      	ldr	r2, [pc, #164]	@ (8010fa0 <TIM_OC3_SetConfig+0x114>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d10d      	bne.n	8010f1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	021b      	lsls	r3, r3, #8
 8010f0c:	697a      	ldr	r2, [r7, #20]
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8010f98 <TIM_OC3_SetConfig+0x10c>)
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d013      	beq.n	8010f4a <TIM_OC3_SetConfig+0xbe>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4a1d      	ldr	r2, [pc, #116]	@ (8010f9c <TIM_OC3_SetConfig+0x110>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d00f      	beq.n	8010f4a <TIM_OC3_SetConfig+0xbe>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8010fa4 <TIM_OC3_SetConfig+0x118>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d00b      	beq.n	8010f4a <TIM_OC3_SetConfig+0xbe>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	4a1c      	ldr	r2, [pc, #112]	@ (8010fa8 <TIM_OC3_SetConfig+0x11c>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d007      	beq.n	8010f4a <TIM_OC3_SetConfig+0xbe>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8010fac <TIM_OC3_SetConfig+0x120>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d003      	beq.n	8010f4a <TIM_OC3_SetConfig+0xbe>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4a16      	ldr	r2, [pc, #88]	@ (8010fa0 <TIM_OC3_SetConfig+0x114>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d113      	bne.n	8010f72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010f58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	695b      	ldr	r3, [r3, #20]
 8010f5e:	011b      	lsls	r3, r3, #4
 8010f60:	693a      	ldr	r2, [r7, #16]
 8010f62:	4313      	orrs	r3, r2
 8010f64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	699b      	ldr	r3, [r3, #24]
 8010f6a:	011b      	lsls	r3, r3, #4
 8010f6c:	693a      	ldr	r2, [r7, #16]
 8010f6e:	4313      	orrs	r3, r2
 8010f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	693a      	ldr	r2, [r7, #16]
 8010f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	68fa      	ldr	r2, [r7, #12]
 8010f7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	685a      	ldr	r2, [r3, #4]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	697a      	ldr	r2, [r7, #20]
 8010f8a:	621a      	str	r2, [r3, #32]
}
 8010f8c:	bf00      	nop
 8010f8e:	371c      	adds	r7, #28
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr
 8010f98:	40012c00 	.word	0x40012c00
 8010f9c:	40013400 	.word	0x40013400
 8010fa0:	40015000 	.word	0x40015000
 8010fa4:	40014000 	.word	0x40014000
 8010fa8:	40014400 	.word	0x40014400
 8010fac:	40014800 	.word	0x40014800

08010fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b087      	sub	sp, #28
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a1b      	ldr	r3, [r3, #32]
 8010fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a1b      	ldr	r3, [r3, #32]
 8010fc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	685b      	ldr	r3, [r3, #4]
 8010fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	69db      	ldr	r3, [r3, #28]
 8010fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	021b      	lsls	r3, r3, #8
 8010ff2:	68fa      	ldr	r2, [r7, #12]
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	031b      	lsls	r3, r3, #12
 8011006:	697a      	ldr	r2, [r7, #20]
 8011008:	4313      	orrs	r3, r2
 801100a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4a2c      	ldr	r2, [pc, #176]	@ (80110c0 <TIM_OC4_SetConfig+0x110>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d007      	beq.n	8011024 <TIM_OC4_SetConfig+0x74>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	4a2b      	ldr	r2, [pc, #172]	@ (80110c4 <TIM_OC4_SetConfig+0x114>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d003      	beq.n	8011024 <TIM_OC4_SetConfig+0x74>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4a2a      	ldr	r2, [pc, #168]	@ (80110c8 <TIM_OC4_SetConfig+0x118>)
 8011020:	4293      	cmp	r3, r2
 8011022:	d10d      	bne.n	8011040 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801102a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	031b      	lsls	r3, r3, #12
 8011032:	697a      	ldr	r2, [r7, #20]
 8011034:	4313      	orrs	r3, r2
 8011036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801103e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	4a1f      	ldr	r2, [pc, #124]	@ (80110c0 <TIM_OC4_SetConfig+0x110>)
 8011044:	4293      	cmp	r3, r2
 8011046:	d013      	beq.n	8011070 <TIM_OC4_SetConfig+0xc0>
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	4a1e      	ldr	r2, [pc, #120]	@ (80110c4 <TIM_OC4_SetConfig+0x114>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d00f      	beq.n	8011070 <TIM_OC4_SetConfig+0xc0>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a1e      	ldr	r2, [pc, #120]	@ (80110cc <TIM_OC4_SetConfig+0x11c>)
 8011054:	4293      	cmp	r3, r2
 8011056:	d00b      	beq.n	8011070 <TIM_OC4_SetConfig+0xc0>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4a1d      	ldr	r2, [pc, #116]	@ (80110d0 <TIM_OC4_SetConfig+0x120>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d007      	beq.n	8011070 <TIM_OC4_SetConfig+0xc0>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4a1c      	ldr	r2, [pc, #112]	@ (80110d4 <TIM_OC4_SetConfig+0x124>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d003      	beq.n	8011070 <TIM_OC4_SetConfig+0xc0>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	4a17      	ldr	r2, [pc, #92]	@ (80110c8 <TIM_OC4_SetConfig+0x118>)
 801106c:	4293      	cmp	r3, r2
 801106e:	d113      	bne.n	8011098 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011076:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801107e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	695b      	ldr	r3, [r3, #20]
 8011084:	019b      	lsls	r3, r3, #6
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	4313      	orrs	r3, r2
 801108a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	699b      	ldr	r3, [r3, #24]
 8011090:	019b      	lsls	r3, r3, #6
 8011092:	693a      	ldr	r2, [r7, #16]
 8011094:	4313      	orrs	r3, r2
 8011096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	693a      	ldr	r2, [r7, #16]
 801109c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68fa      	ldr	r2, [r7, #12]
 80110a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	685a      	ldr	r2, [r3, #4]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	697a      	ldr	r2, [r7, #20]
 80110b0:	621a      	str	r2, [r3, #32]
}
 80110b2:	bf00      	nop
 80110b4:	371c      	adds	r7, #28
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	40012c00 	.word	0x40012c00
 80110c4:	40013400 	.word	0x40013400
 80110c8:	40015000 	.word	0x40015000
 80110cc:	40014000 	.word	0x40014000
 80110d0:	40014400 	.word	0x40014400
 80110d4:	40014800 	.word	0x40014800

080110d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80110d8:	b480      	push	{r7}
 80110da:	b087      	sub	sp, #28
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a1b      	ldr	r3, [r3, #32]
 80110e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6a1b      	ldr	r3, [r3, #32]
 80110ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801110a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	4313      	orrs	r3, r2
 8011114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801111c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	041b      	lsls	r3, r3, #16
 8011124:	693a      	ldr	r2, [r7, #16]
 8011126:	4313      	orrs	r3, r2
 8011128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4a19      	ldr	r2, [pc, #100]	@ (8011194 <TIM_OC5_SetConfig+0xbc>)
 801112e:	4293      	cmp	r3, r2
 8011130:	d013      	beq.n	801115a <TIM_OC5_SetConfig+0x82>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4a18      	ldr	r2, [pc, #96]	@ (8011198 <TIM_OC5_SetConfig+0xc0>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d00f      	beq.n	801115a <TIM_OC5_SetConfig+0x82>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4a17      	ldr	r2, [pc, #92]	@ (801119c <TIM_OC5_SetConfig+0xc4>)
 801113e:	4293      	cmp	r3, r2
 8011140:	d00b      	beq.n	801115a <TIM_OC5_SetConfig+0x82>
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	4a16      	ldr	r2, [pc, #88]	@ (80111a0 <TIM_OC5_SetConfig+0xc8>)
 8011146:	4293      	cmp	r3, r2
 8011148:	d007      	beq.n	801115a <TIM_OC5_SetConfig+0x82>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	4a15      	ldr	r2, [pc, #84]	@ (80111a4 <TIM_OC5_SetConfig+0xcc>)
 801114e:	4293      	cmp	r3, r2
 8011150:	d003      	beq.n	801115a <TIM_OC5_SetConfig+0x82>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	4a14      	ldr	r2, [pc, #80]	@ (80111a8 <TIM_OC5_SetConfig+0xd0>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d109      	bne.n	801116e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011160:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	021b      	lsls	r3, r3, #8
 8011168:	697a      	ldr	r2, [r7, #20]
 801116a:	4313      	orrs	r3, r2
 801116c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	697a      	ldr	r2, [r7, #20]
 8011172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	693a      	ldr	r2, [r7, #16]
 8011186:	621a      	str	r2, [r3, #32]
}
 8011188:	bf00      	nop
 801118a:	371c      	adds	r7, #28
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr
 8011194:	40012c00 	.word	0x40012c00
 8011198:	40013400 	.word	0x40013400
 801119c:	40014000 	.word	0x40014000
 80111a0:	40014400 	.word	0x40014400
 80111a4:	40014800 	.word	0x40014800
 80111a8:	40015000 	.word	0x40015000

080111ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b087      	sub	sp, #28
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a1b      	ldr	r3, [r3, #32]
 80111ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6a1b      	ldr	r3, [r3, #32]
 80111c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80111d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80111da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80111de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	021b      	lsls	r3, r3, #8
 80111e6:	68fa      	ldr	r2, [r7, #12]
 80111e8:	4313      	orrs	r3, r2
 80111ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80111f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	689b      	ldr	r3, [r3, #8]
 80111f8:	051b      	lsls	r3, r3, #20
 80111fa:	693a      	ldr	r2, [r7, #16]
 80111fc:	4313      	orrs	r3, r2
 80111fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	4a1a      	ldr	r2, [pc, #104]	@ (801126c <TIM_OC6_SetConfig+0xc0>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d013      	beq.n	8011230 <TIM_OC6_SetConfig+0x84>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4a19      	ldr	r2, [pc, #100]	@ (8011270 <TIM_OC6_SetConfig+0xc4>)
 801120c:	4293      	cmp	r3, r2
 801120e:	d00f      	beq.n	8011230 <TIM_OC6_SetConfig+0x84>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	4a18      	ldr	r2, [pc, #96]	@ (8011274 <TIM_OC6_SetConfig+0xc8>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d00b      	beq.n	8011230 <TIM_OC6_SetConfig+0x84>
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	4a17      	ldr	r2, [pc, #92]	@ (8011278 <TIM_OC6_SetConfig+0xcc>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d007      	beq.n	8011230 <TIM_OC6_SetConfig+0x84>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	4a16      	ldr	r2, [pc, #88]	@ (801127c <TIM_OC6_SetConfig+0xd0>)
 8011224:	4293      	cmp	r3, r2
 8011226:	d003      	beq.n	8011230 <TIM_OC6_SetConfig+0x84>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	4a15      	ldr	r2, [pc, #84]	@ (8011280 <TIM_OC6_SetConfig+0xd4>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d109      	bne.n	8011244 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	695b      	ldr	r3, [r3, #20]
 801123c:	029b      	lsls	r3, r3, #10
 801123e:	697a      	ldr	r2, [r7, #20]
 8011240:	4313      	orrs	r3, r2
 8011242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	697a      	ldr	r2, [r7, #20]
 8011248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	685a      	ldr	r2, [r3, #4]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	693a      	ldr	r2, [r7, #16]
 801125c:	621a      	str	r2, [r3, #32]
}
 801125e:	bf00      	nop
 8011260:	371c      	adds	r7, #28
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	40012c00 	.word	0x40012c00
 8011270:	40013400 	.word	0x40013400
 8011274:	40014000 	.word	0x40014000
 8011278:	40014400 	.word	0x40014400
 801127c:	40014800 	.word	0x40014800
 8011280:	40015000 	.word	0x40015000

08011284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011284:	b480      	push	{r7}
 8011286:	b087      	sub	sp, #28
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	6a1b      	ldr	r3, [r3, #32]
 8011294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6a1b      	ldr	r3, [r3, #32]
 801129a:	f023 0201 	bic.w	r2, r3, #1
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	699b      	ldr	r3, [r3, #24]
 80112a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80112ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	011b      	lsls	r3, r3, #4
 80112b4:	693a      	ldr	r2, [r7, #16]
 80112b6:	4313      	orrs	r3, r2
 80112b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	f023 030a 	bic.w	r3, r3, #10
 80112c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80112c2:	697a      	ldr	r2, [r7, #20]
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	4313      	orrs	r3, r2
 80112c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	693a      	ldr	r2, [r7, #16]
 80112ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	697a      	ldr	r2, [r7, #20]
 80112d4:	621a      	str	r2, [r3, #32]
}
 80112d6:	bf00      	nop
 80112d8:	371c      	adds	r7, #28
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80112e2:	b480      	push	{r7}
 80112e4:	b087      	sub	sp, #28
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	60f8      	str	r0, [r7, #12]
 80112ea:	60b9      	str	r1, [r7, #8]
 80112ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6a1b      	ldr	r3, [r3, #32]
 80112f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	6a1b      	ldr	r3, [r3, #32]
 80112f8:	f023 0210 	bic.w	r2, r3, #16
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	699b      	ldr	r3, [r3, #24]
 8011304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801130c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	031b      	lsls	r3, r3, #12
 8011312:	693a      	ldr	r2, [r7, #16]
 8011314:	4313      	orrs	r3, r2
 8011316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801131e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	011b      	lsls	r3, r3, #4
 8011324:	697a      	ldr	r2, [r7, #20]
 8011326:	4313      	orrs	r3, r2
 8011328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	693a      	ldr	r2, [r7, #16]
 801132e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	697a      	ldr	r2, [r7, #20]
 8011334:	621a      	str	r2, [r3, #32]
}
 8011336:	bf00      	nop
 8011338:	371c      	adds	r7, #28
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr

08011342 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011342:	b480      	push	{r7}
 8011344:	b085      	sub	sp, #20
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
 801134a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	689b      	ldr	r3, [r3, #8]
 8011350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8011358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801135c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	4313      	orrs	r3, r2
 8011364:	f043 0307 	orr.w	r3, r3, #7
 8011368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	609a      	str	r2, [r3, #8]
}
 8011370:	bf00      	nop
 8011372:	3714      	adds	r7, #20
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr

0801137c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801137c:	b480      	push	{r7}
 801137e:	b087      	sub	sp, #28
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
 8011388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	021a      	lsls	r2, r3, #8
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	431a      	orrs	r2, r3
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	4313      	orrs	r3, r2
 80113a4:	697a      	ldr	r2, [r7, #20]
 80113a6:	4313      	orrs	r3, r2
 80113a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	697a      	ldr	r2, [r7, #20]
 80113ae:	609a      	str	r2, [r3, #8]
}
 80113b0:	bf00      	nop
 80113b2:	371c      	adds	r7, #28
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d101      	bne.n	80113d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80113d0:	2302      	movs	r3, #2
 80113d2:	e074      	b.n	80114be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2201      	movs	r2, #1
 80113d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2202      	movs	r2, #2
 80113e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	689b      	ldr	r3, [r3, #8]
 80113f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4a34      	ldr	r2, [pc, #208]	@ (80114cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d009      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	4a33      	ldr	r2, [pc, #204]	@ (80114d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011404:	4293      	cmp	r3, r2
 8011406:	d004      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4a31      	ldr	r2, [pc, #196]	@ (80114d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d108      	bne.n	8011424 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011418:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	68fa      	ldr	r2, [r7, #12]
 8011420:	4313      	orrs	r3, r2
 8011422:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 801142a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801142e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	68fa      	ldr	r2, [r7, #12]
 8011436:	4313      	orrs	r3, r2
 8011438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	68fa      	ldr	r2, [r7, #12]
 8011440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4a21      	ldr	r2, [pc, #132]	@ (80114cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d022      	beq.n	8011492 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011454:	d01d      	beq.n	8011492 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	4a1f      	ldr	r2, [pc, #124]	@ (80114d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d018      	beq.n	8011492 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4a1d      	ldr	r2, [pc, #116]	@ (80114dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d013      	beq.n	8011492 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a1c      	ldr	r2, [pc, #112]	@ (80114e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d00e      	beq.n	8011492 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	4a15      	ldr	r2, [pc, #84]	@ (80114d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d009      	beq.n	8011492 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4a18      	ldr	r2, [pc, #96]	@ (80114e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d004      	beq.n	8011492 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a11      	ldr	r2, [pc, #68]	@ (80114d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d10c      	bne.n	80114ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	4313      	orrs	r3, r2
 80114a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	68ba      	ldr	r2, [r7, #8]
 80114aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2201      	movs	r2, #1
 80114b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2200      	movs	r2, #0
 80114b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80114bc:	2300      	movs	r3, #0
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	40012c00 	.word	0x40012c00
 80114d0:	40013400 	.word	0x40013400
 80114d4:	40015000 	.word	0x40015000
 80114d8:	40000400 	.word	0x40000400
 80114dc:	40000800 	.word	0x40000800
 80114e0:	40000c00 	.word	0x40000c00
 80114e4:	40014000 	.word	0x40014000

080114e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80114f2:	2300      	movs	r3, #0
 80114f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d101      	bne.n	8011504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011500:	2302      	movs	r3, #2
 8011502:	e078      	b.n	80115f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2201      	movs	r2, #1
 8011508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	68db      	ldr	r3, [r3, #12]
 8011516:	4313      	orrs	r3, r2
 8011518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	689b      	ldr	r3, [r3, #8]
 8011524:	4313      	orrs	r3, r2
 8011526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	4313      	orrs	r3, r2
 8011534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4313      	orrs	r3, r2
 8011542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	4313      	orrs	r3, r2
 8011550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	695b      	ldr	r3, [r3, #20]
 801155c:	4313      	orrs	r3, r2
 801155e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801156a:	4313      	orrs	r3, r2
 801156c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	699b      	ldr	r3, [r3, #24]
 8011578:	041b      	lsls	r3, r3, #16
 801157a:	4313      	orrs	r3, r2
 801157c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	69db      	ldr	r3, [r3, #28]
 8011588:	4313      	orrs	r3, r2
 801158a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	4a1c      	ldr	r2, [pc, #112]	@ (8011604 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d009      	beq.n	80115aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4a1b      	ldr	r2, [pc, #108]	@ (8011608 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 801159c:	4293      	cmp	r3, r2
 801159e:	d004      	beq.n	80115aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a19      	ldr	r2, [pc, #100]	@ (801160c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d11c      	bne.n	80115e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115b4:	051b      	lsls	r3, r3, #20
 80115b6:	4313      	orrs	r3, r2
 80115b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	6a1b      	ldr	r3, [r3, #32]
 80115c4:	4313      	orrs	r3, r2
 80115c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d2:	4313      	orrs	r3, r2
 80115d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115e0:	4313      	orrs	r3, r2
 80115e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	40012c00 	.word	0x40012c00
 8011608:	40013400 	.word	0x40013400
 801160c:	40015000 	.word	0x40015000

08011610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d101      	bne.n	8011622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801161e:	2301      	movs	r3, #1
 8011620:	e042      	b.n	80116a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011628:	2b00      	cmp	r3, #0
 801162a:	d106      	bne.n	801163a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2200      	movs	r2, #0
 8011630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7f9 fcb3 	bl	800afa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2224      	movs	r2, #36	@ 0x24
 801163e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f022 0201 	bic.w	r2, r2, #1
 8011650:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011656:	2b00      	cmp	r3, #0
 8011658:	d002      	beq.n	8011660 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 fc7a 	bl	8011f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 f97b 	bl	801195c <UART_SetConfig>
 8011666:	4603      	mov	r3, r0
 8011668:	2b01      	cmp	r3, #1
 801166a:	d101      	bne.n	8011670 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801166c:	2301      	movs	r3, #1
 801166e:	e01b      	b.n	80116a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	685a      	ldr	r2, [r3, #4]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801167e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	689a      	ldr	r2, [r3, #8]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801168e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f042 0201 	orr.w	r2, r2, #1
 801169e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f000 fcf9 	bl	8012098 <UART_CheckIdleState>
 80116a6:	4603      	mov	r3, r0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b08a      	sub	sp, #40	@ 0x28
 80116b4:	af02      	add	r7, sp, #8
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	603b      	str	r3, [r7, #0]
 80116bc:	4613      	mov	r3, r2
 80116be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116c6:	2b20      	cmp	r3, #32
 80116c8:	d17b      	bne.n	80117c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d002      	beq.n	80116d6 <HAL_UART_Transmit+0x26>
 80116d0:	88fb      	ldrh	r3, [r7, #6]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d101      	bne.n	80116da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	e074      	b.n	80117c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2200      	movs	r2, #0
 80116de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2221      	movs	r2, #33	@ 0x21
 80116e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80116ea:	f7f9 ff93 	bl	800b614 <HAL_GetTick>
 80116ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	88fa      	ldrh	r2, [r7, #6]
 80116f4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	88fa      	ldrh	r2, [r7, #6]
 80116fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	689b      	ldr	r3, [r3, #8]
 8011704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011708:	d108      	bne.n	801171c <HAL_UART_Transmit+0x6c>
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d104      	bne.n	801171c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011712:	2300      	movs	r3, #0
 8011714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	61bb      	str	r3, [r7, #24]
 801171a:	e003      	b.n	8011724 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011720:	2300      	movs	r3, #0
 8011722:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011724:	e030      	b.n	8011788 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	9300      	str	r3, [sp, #0]
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	2200      	movs	r2, #0
 801172e:	2180      	movs	r1, #128	@ 0x80
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	f000 fd5b 	bl	80121ec <UART_WaitOnFlagUntilTimeout>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d005      	beq.n	8011748 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2220      	movs	r2, #32
 8011740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011744:	2303      	movs	r3, #3
 8011746:	e03d      	b.n	80117c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d10b      	bne.n	8011766 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	881b      	ldrh	r3, [r3, #0]
 8011752:	461a      	mov	r2, r3
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801175c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	3302      	adds	r3, #2
 8011762:	61bb      	str	r3, [r7, #24]
 8011764:	e007      	b.n	8011776 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	781a      	ldrb	r2, [r3, #0]
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011770:	69fb      	ldr	r3, [r7, #28]
 8011772:	3301      	adds	r3, #1
 8011774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801177c:	b29b      	uxth	r3, r3
 801177e:	3b01      	subs	r3, #1
 8011780:	b29a      	uxth	r2, r3
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801178e:	b29b      	uxth	r3, r3
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1c8      	bne.n	8011726 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	9300      	str	r3, [sp, #0]
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	2200      	movs	r2, #0
 801179c:	2140      	movs	r1, #64	@ 0x40
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f000 fd24 	bl	80121ec <UART_WaitOnFlagUntilTimeout>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d005      	beq.n	80117b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2220      	movs	r2, #32
 80117ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80117b2:	2303      	movs	r3, #3
 80117b4:	e006      	b.n	80117c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2220      	movs	r2, #32
 80117ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80117be:	2300      	movs	r3, #0
 80117c0:	e000      	b.n	80117c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80117c2:	2302      	movs	r3, #2
  }
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3720      	adds	r7, #32
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b08a      	sub	sp, #40	@ 0x28
 80117d0:	af02      	add	r7, sp, #8
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	603b      	str	r3, [r7, #0]
 80117d8:	4613      	mov	r3, r2
 80117da:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80117e2:	2b20      	cmp	r3, #32
 80117e4:	f040 80b5 	bne.w	8011952 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d002      	beq.n	80117f4 <HAL_UART_Receive+0x28>
 80117ee:	88fb      	ldrh	r3, [r7, #6]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d101      	bne.n	80117f8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80117f4:	2301      	movs	r3, #1
 80117f6:	e0ad      	b.n	8011954 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2200      	movs	r2, #0
 80117fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2222      	movs	r2, #34	@ 0x22
 8011804:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2200      	movs	r2, #0
 801180c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801180e:	f7f9 ff01 	bl	800b614 <HAL_GetTick>
 8011812:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	88fa      	ldrh	r2, [r7, #6]
 8011818:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	88fa      	ldrh	r2, [r7, #6]
 8011820:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801182c:	d10e      	bne.n	801184c <HAL_UART_Receive+0x80>
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	691b      	ldr	r3, [r3, #16]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d105      	bne.n	8011842 <HAL_UART_Receive+0x76>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801183c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011840:	e02d      	b.n	801189e <HAL_UART_Receive+0xd2>
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	22ff      	movs	r2, #255	@ 0xff
 8011846:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801184a:	e028      	b.n	801189e <HAL_UART_Receive+0xd2>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d10d      	bne.n	8011870 <HAL_UART_Receive+0xa4>
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d104      	bne.n	8011866 <HAL_UART_Receive+0x9a>
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	22ff      	movs	r2, #255	@ 0xff
 8011860:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011864:	e01b      	b.n	801189e <HAL_UART_Receive+0xd2>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	227f      	movs	r2, #127	@ 0x7f
 801186a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801186e:	e016      	b.n	801189e <HAL_UART_Receive+0xd2>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011878:	d10d      	bne.n	8011896 <HAL_UART_Receive+0xca>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d104      	bne.n	801188c <HAL_UART_Receive+0xc0>
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	227f      	movs	r2, #127	@ 0x7f
 8011886:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801188a:	e008      	b.n	801189e <HAL_UART_Receive+0xd2>
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	223f      	movs	r2, #63	@ 0x3f
 8011890:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011894:	e003      	b.n	801189e <HAL_UART_Receive+0xd2>
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2200      	movs	r2, #0
 801189a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80118a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80118ae:	d108      	bne.n	80118c2 <HAL_UART_Receive+0xf6>
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d104      	bne.n	80118c2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80118b8:	2300      	movs	r3, #0
 80118ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	61bb      	str	r3, [r7, #24]
 80118c0:	e003      	b.n	80118ca <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80118c6:	2300      	movs	r3, #0
 80118c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80118ca:	e036      	b.n	801193a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	2200      	movs	r2, #0
 80118d4:	2120      	movs	r1, #32
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	f000 fc88 	bl	80121ec <UART_WaitOnFlagUntilTimeout>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d005      	beq.n	80118ee <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	2220      	movs	r2, #32
 80118e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80118ea:	2303      	movs	r3, #3
 80118ec:	e032      	b.n	8011954 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d10c      	bne.n	801190e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	8a7b      	ldrh	r3, [r7, #18]
 80118fe:	4013      	ands	r3, r2
 8011900:	b29a      	uxth	r2, r3
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	3302      	adds	r3, #2
 801190a:	61bb      	str	r3, [r7, #24]
 801190c:	e00c      	b.n	8011928 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011914:	b2da      	uxtb	r2, r3
 8011916:	8a7b      	ldrh	r3, [r7, #18]
 8011918:	b2db      	uxtb	r3, r3
 801191a:	4013      	ands	r3, r2
 801191c:	b2da      	uxtb	r2, r3
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	3301      	adds	r3, #1
 8011926:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801192e:	b29b      	uxth	r3, r3
 8011930:	3b01      	subs	r3, #1
 8011932:	b29a      	uxth	r2, r3
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011940:	b29b      	uxth	r3, r3
 8011942:	2b00      	cmp	r3, #0
 8011944:	d1c2      	bne.n	80118cc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2220      	movs	r2, #32
 801194a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 801194e:	2300      	movs	r3, #0
 8011950:	e000      	b.n	8011954 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8011952:	2302      	movs	r3, #2
  }
}
 8011954:	4618      	mov	r0, r3
 8011956:	3720      	adds	r7, #32
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801195c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011960:	b08c      	sub	sp, #48	@ 0x30
 8011962:	af00      	add	r7, sp, #0
 8011964:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011966:	2300      	movs	r3, #0
 8011968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	689a      	ldr	r2, [r3, #8]
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	691b      	ldr	r3, [r3, #16]
 8011974:	431a      	orrs	r2, r3
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	695b      	ldr	r3, [r3, #20]
 801197a:	431a      	orrs	r2, r3
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	69db      	ldr	r3, [r3, #28]
 8011980:	4313      	orrs	r3, r2
 8011982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	4baa      	ldr	r3, [pc, #680]	@ (8011c34 <UART_SetConfig+0x2d8>)
 801198c:	4013      	ands	r3, r2
 801198e:	697a      	ldr	r2, [r7, #20]
 8011990:	6812      	ldr	r2, [r2, #0]
 8011992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011994:	430b      	orrs	r3, r1
 8011996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	68da      	ldr	r2, [r3, #12]
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	430a      	orrs	r2, r1
 80119ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	699b      	ldr	r3, [r3, #24]
 80119b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a9f      	ldr	r2, [pc, #636]	@ (8011c38 <UART_SetConfig+0x2dc>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d004      	beq.n	80119c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	6a1b      	ldr	r3, [r3, #32]
 80119c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119c4:	4313      	orrs	r3, r2
 80119c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	689b      	ldr	r3, [r3, #8]
 80119ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80119d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80119d6:	697a      	ldr	r2, [r7, #20]
 80119d8:	6812      	ldr	r2, [r2, #0]
 80119da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119dc:	430b      	orrs	r3, r1
 80119de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119e6:	f023 010f 	bic.w	r1, r3, #15
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	430a      	orrs	r2, r1
 80119f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a90      	ldr	r2, [pc, #576]	@ (8011c3c <UART_SetConfig+0x2e0>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d125      	bne.n	8011a4c <UART_SetConfig+0xf0>
 8011a00:	4b8f      	ldr	r3, [pc, #572]	@ (8011c40 <UART_SetConfig+0x2e4>)
 8011a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a06:	f003 0303 	and.w	r3, r3, #3
 8011a0a:	2b03      	cmp	r3, #3
 8011a0c:	d81a      	bhi.n	8011a44 <UART_SetConfig+0xe8>
 8011a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8011a14 <UART_SetConfig+0xb8>)
 8011a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a14:	08011a25 	.word	0x08011a25
 8011a18:	08011a35 	.word	0x08011a35
 8011a1c:	08011a2d 	.word	0x08011a2d
 8011a20:	08011a3d 	.word	0x08011a3d
 8011a24:	2301      	movs	r3, #1
 8011a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011a2a:	e116      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011a2c:	2302      	movs	r3, #2
 8011a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011a32:	e112      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011a34:	2304      	movs	r3, #4
 8011a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011a3a:	e10e      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011a3c:	2308      	movs	r3, #8
 8011a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011a42:	e10a      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011a44:	2310      	movs	r3, #16
 8011a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011a4a:	e106      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4a7c      	ldr	r2, [pc, #496]	@ (8011c44 <UART_SetConfig+0x2e8>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d138      	bne.n	8011ac8 <UART_SetConfig+0x16c>
 8011a56:	4b7a      	ldr	r3, [pc, #488]	@ (8011c40 <UART_SetConfig+0x2e4>)
 8011a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a5c:	f003 030c 	and.w	r3, r3, #12
 8011a60:	2b0c      	cmp	r3, #12
 8011a62:	d82d      	bhi.n	8011ac0 <UART_SetConfig+0x164>
 8011a64:	a201      	add	r2, pc, #4	@ (adr r2, 8011a6c <UART_SetConfig+0x110>)
 8011a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a6a:	bf00      	nop
 8011a6c:	08011aa1 	.word	0x08011aa1
 8011a70:	08011ac1 	.word	0x08011ac1
 8011a74:	08011ac1 	.word	0x08011ac1
 8011a78:	08011ac1 	.word	0x08011ac1
 8011a7c:	08011ab1 	.word	0x08011ab1
 8011a80:	08011ac1 	.word	0x08011ac1
 8011a84:	08011ac1 	.word	0x08011ac1
 8011a88:	08011ac1 	.word	0x08011ac1
 8011a8c:	08011aa9 	.word	0x08011aa9
 8011a90:	08011ac1 	.word	0x08011ac1
 8011a94:	08011ac1 	.word	0x08011ac1
 8011a98:	08011ac1 	.word	0x08011ac1
 8011a9c:	08011ab9 	.word	0x08011ab9
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011aa6:	e0d8      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011aae:	e0d4      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011ab0:	2304      	movs	r3, #4
 8011ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011ab6:	e0d0      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011ab8:	2308      	movs	r3, #8
 8011aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011abe:	e0cc      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011ac0:	2310      	movs	r3, #16
 8011ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011ac6:	e0c8      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4a5e      	ldr	r2, [pc, #376]	@ (8011c48 <UART_SetConfig+0x2ec>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d125      	bne.n	8011b1e <UART_SetConfig+0x1c2>
 8011ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8011c40 <UART_SetConfig+0x2e4>)
 8011ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011ad8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011adc:	2b30      	cmp	r3, #48	@ 0x30
 8011ade:	d016      	beq.n	8011b0e <UART_SetConfig+0x1b2>
 8011ae0:	2b30      	cmp	r3, #48	@ 0x30
 8011ae2:	d818      	bhi.n	8011b16 <UART_SetConfig+0x1ba>
 8011ae4:	2b20      	cmp	r3, #32
 8011ae6:	d00a      	beq.n	8011afe <UART_SetConfig+0x1a2>
 8011ae8:	2b20      	cmp	r3, #32
 8011aea:	d814      	bhi.n	8011b16 <UART_SetConfig+0x1ba>
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d002      	beq.n	8011af6 <UART_SetConfig+0x19a>
 8011af0:	2b10      	cmp	r3, #16
 8011af2:	d008      	beq.n	8011b06 <UART_SetConfig+0x1aa>
 8011af4:	e00f      	b.n	8011b16 <UART_SetConfig+0x1ba>
 8011af6:	2300      	movs	r3, #0
 8011af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011afc:	e0ad      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011afe:	2302      	movs	r3, #2
 8011b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b04:	e0a9      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b06:	2304      	movs	r3, #4
 8011b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b0c:	e0a5      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b0e:	2308      	movs	r3, #8
 8011b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b14:	e0a1      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b16:	2310      	movs	r3, #16
 8011b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b1c:	e09d      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4a4a      	ldr	r2, [pc, #296]	@ (8011c4c <UART_SetConfig+0x2f0>)
 8011b24:	4293      	cmp	r3, r2
 8011b26:	d125      	bne.n	8011b74 <UART_SetConfig+0x218>
 8011b28:	4b45      	ldr	r3, [pc, #276]	@ (8011c40 <UART_SetConfig+0x2e4>)
 8011b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8011b34:	d016      	beq.n	8011b64 <UART_SetConfig+0x208>
 8011b36:	2bc0      	cmp	r3, #192	@ 0xc0
 8011b38:	d818      	bhi.n	8011b6c <UART_SetConfig+0x210>
 8011b3a:	2b80      	cmp	r3, #128	@ 0x80
 8011b3c:	d00a      	beq.n	8011b54 <UART_SetConfig+0x1f8>
 8011b3e:	2b80      	cmp	r3, #128	@ 0x80
 8011b40:	d814      	bhi.n	8011b6c <UART_SetConfig+0x210>
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d002      	beq.n	8011b4c <UART_SetConfig+0x1f0>
 8011b46:	2b40      	cmp	r3, #64	@ 0x40
 8011b48:	d008      	beq.n	8011b5c <UART_SetConfig+0x200>
 8011b4a:	e00f      	b.n	8011b6c <UART_SetConfig+0x210>
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b52:	e082      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b54:	2302      	movs	r3, #2
 8011b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b5a:	e07e      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b5c:	2304      	movs	r3, #4
 8011b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b62:	e07a      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b64:	2308      	movs	r3, #8
 8011b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b6a:	e076      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b6c:	2310      	movs	r3, #16
 8011b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011b72:	e072      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4a35      	ldr	r2, [pc, #212]	@ (8011c50 <UART_SetConfig+0x2f4>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d12a      	bne.n	8011bd4 <UART_SetConfig+0x278>
 8011b7e:	4b30      	ldr	r3, [pc, #192]	@ (8011c40 <UART_SetConfig+0x2e4>)
 8011b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011b8c:	d01a      	beq.n	8011bc4 <UART_SetConfig+0x268>
 8011b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011b92:	d81b      	bhi.n	8011bcc <UART_SetConfig+0x270>
 8011b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b98:	d00c      	beq.n	8011bb4 <UART_SetConfig+0x258>
 8011b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b9e:	d815      	bhi.n	8011bcc <UART_SetConfig+0x270>
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d003      	beq.n	8011bac <UART_SetConfig+0x250>
 8011ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011ba8:	d008      	beq.n	8011bbc <UART_SetConfig+0x260>
 8011baa:	e00f      	b.n	8011bcc <UART_SetConfig+0x270>
 8011bac:	2300      	movs	r3, #0
 8011bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011bb2:	e052      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011bb4:	2302      	movs	r3, #2
 8011bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011bba:	e04e      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011bbc:	2304      	movs	r3, #4
 8011bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011bc2:	e04a      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011bc4:	2308      	movs	r3, #8
 8011bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011bca:	e046      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011bcc:	2310      	movs	r3, #16
 8011bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011bd2:	e042      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4a17      	ldr	r2, [pc, #92]	@ (8011c38 <UART_SetConfig+0x2dc>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d13a      	bne.n	8011c54 <UART_SetConfig+0x2f8>
 8011bde:	4b18      	ldr	r3, [pc, #96]	@ (8011c40 <UART_SetConfig+0x2e4>)
 8011be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011be4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011be8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011bec:	d01a      	beq.n	8011c24 <UART_SetConfig+0x2c8>
 8011bee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011bf2:	d81b      	bhi.n	8011c2c <UART_SetConfig+0x2d0>
 8011bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bf8:	d00c      	beq.n	8011c14 <UART_SetConfig+0x2b8>
 8011bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bfe:	d815      	bhi.n	8011c2c <UART_SetConfig+0x2d0>
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d003      	beq.n	8011c0c <UART_SetConfig+0x2b0>
 8011c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011c08:	d008      	beq.n	8011c1c <UART_SetConfig+0x2c0>
 8011c0a:	e00f      	b.n	8011c2c <UART_SetConfig+0x2d0>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011c12:	e022      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011c14:	2302      	movs	r3, #2
 8011c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011c1a:	e01e      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011c1c:	2304      	movs	r3, #4
 8011c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011c22:	e01a      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011c24:	2308      	movs	r3, #8
 8011c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011c2a:	e016      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011c2c:	2310      	movs	r3, #16
 8011c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011c32:	e012      	b.n	8011c5a <UART_SetConfig+0x2fe>
 8011c34:	cfff69f3 	.word	0xcfff69f3
 8011c38:	40008000 	.word	0x40008000
 8011c3c:	40013800 	.word	0x40013800
 8011c40:	40021000 	.word	0x40021000
 8011c44:	40004400 	.word	0x40004400
 8011c48:	40004800 	.word	0x40004800
 8011c4c:	40004c00 	.word	0x40004c00
 8011c50:	40005000 	.word	0x40005000
 8011c54:	2310      	movs	r3, #16
 8011c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4aae      	ldr	r2, [pc, #696]	@ (8011f18 <UART_SetConfig+0x5bc>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	f040 8097 	bne.w	8011d94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011c66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011c6a:	2b08      	cmp	r3, #8
 8011c6c:	d823      	bhi.n	8011cb6 <UART_SetConfig+0x35a>
 8011c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c74 <UART_SetConfig+0x318>)
 8011c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c74:	08011c99 	.word	0x08011c99
 8011c78:	08011cb7 	.word	0x08011cb7
 8011c7c:	08011ca1 	.word	0x08011ca1
 8011c80:	08011cb7 	.word	0x08011cb7
 8011c84:	08011ca7 	.word	0x08011ca7
 8011c88:	08011cb7 	.word	0x08011cb7
 8011c8c:	08011cb7 	.word	0x08011cb7
 8011c90:	08011cb7 	.word	0x08011cb7
 8011c94:	08011caf 	.word	0x08011caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c98:	f7fd f92c 	bl	800eef4 <HAL_RCC_GetPCLK1Freq>
 8011c9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011c9e:	e010      	b.n	8011cc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011ca0:	4b9e      	ldr	r3, [pc, #632]	@ (8011f1c <UART_SetConfig+0x5c0>)
 8011ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011ca4:	e00d      	b.n	8011cc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ca6:	f7fd f8b7 	bl	800ee18 <HAL_RCC_GetSysClockFreq>
 8011caa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011cac:	e009      	b.n	8011cc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011cb4:	e005      	b.n	8011cc2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011cc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f000 8130 	beq.w	8011f2a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cce:	4a94      	ldr	r2, [pc, #592]	@ (8011f20 <UART_SetConfig+0x5c4>)
 8011cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cdc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	685a      	ldr	r2, [r3, #4]
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	005b      	lsls	r3, r3, #1
 8011ce6:	4413      	add	r3, r2
 8011ce8:	69ba      	ldr	r2, [r7, #24]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d305      	bcc.n	8011cfa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	685b      	ldr	r3, [r3, #4]
 8011cf2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011cf4:	69ba      	ldr	r2, [r7, #24]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d903      	bls.n	8011d02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011d00:	e113      	b.n	8011f2a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d04:	2200      	movs	r2, #0
 8011d06:	60bb      	str	r3, [r7, #8]
 8011d08:	60fa      	str	r2, [r7, #12]
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d0e:	4a84      	ldr	r2, [pc, #528]	@ (8011f20 <UART_SetConfig+0x5c4>)
 8011d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	2200      	movs	r2, #0
 8011d18:	603b      	str	r3, [r7, #0]
 8011d1a:	607a      	str	r2, [r7, #4]
 8011d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011d24:	f7ee ffb8 	bl	8000c98 <__aeabi_uldivmod>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	4610      	mov	r0, r2
 8011d2e:	4619      	mov	r1, r3
 8011d30:	f04f 0200 	mov.w	r2, #0
 8011d34:	f04f 0300 	mov.w	r3, #0
 8011d38:	020b      	lsls	r3, r1, #8
 8011d3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011d3e:	0202      	lsls	r2, r0, #8
 8011d40:	6979      	ldr	r1, [r7, #20]
 8011d42:	6849      	ldr	r1, [r1, #4]
 8011d44:	0849      	lsrs	r1, r1, #1
 8011d46:	2000      	movs	r0, #0
 8011d48:	460c      	mov	r4, r1
 8011d4a:	4605      	mov	r5, r0
 8011d4c:	eb12 0804 	adds.w	r8, r2, r4
 8011d50:	eb43 0905 	adc.w	r9, r3, r5
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	469a      	mov	sl, r3
 8011d5c:	4693      	mov	fp, r2
 8011d5e:	4652      	mov	r2, sl
 8011d60:	465b      	mov	r3, fp
 8011d62:	4640      	mov	r0, r8
 8011d64:	4649      	mov	r1, r9
 8011d66:	f7ee ff97 	bl	8000c98 <__aeabi_uldivmod>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	4613      	mov	r3, r2
 8011d70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011d72:	6a3b      	ldr	r3, [r7, #32]
 8011d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011d78:	d308      	bcc.n	8011d8c <UART_SetConfig+0x430>
 8011d7a:	6a3b      	ldr	r3, [r7, #32]
 8011d7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011d80:	d204      	bcs.n	8011d8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	6a3a      	ldr	r2, [r7, #32]
 8011d88:	60da      	str	r2, [r3, #12]
 8011d8a:	e0ce      	b.n	8011f2a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011d92:	e0ca      	b.n	8011f2a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	69db      	ldr	r3, [r3, #28]
 8011d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011d9c:	d166      	bne.n	8011e6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8011d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011da2:	2b08      	cmp	r3, #8
 8011da4:	d827      	bhi.n	8011df6 <UART_SetConfig+0x49a>
 8011da6:	a201      	add	r2, pc, #4	@ (adr r2, 8011dac <UART_SetConfig+0x450>)
 8011da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dac:	08011dd1 	.word	0x08011dd1
 8011db0:	08011dd9 	.word	0x08011dd9
 8011db4:	08011de1 	.word	0x08011de1
 8011db8:	08011df7 	.word	0x08011df7
 8011dbc:	08011de7 	.word	0x08011de7
 8011dc0:	08011df7 	.word	0x08011df7
 8011dc4:	08011df7 	.word	0x08011df7
 8011dc8:	08011df7 	.word	0x08011df7
 8011dcc:	08011def 	.word	0x08011def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011dd0:	f7fd f890 	bl	800eef4 <HAL_RCC_GetPCLK1Freq>
 8011dd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011dd6:	e014      	b.n	8011e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011dd8:	f7fd f8a2 	bl	800ef20 <HAL_RCC_GetPCLK2Freq>
 8011ddc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011dde:	e010      	b.n	8011e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011de0:	4b4e      	ldr	r3, [pc, #312]	@ (8011f1c <UART_SetConfig+0x5c0>)
 8011de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011de4:	e00d      	b.n	8011e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011de6:	f7fd f817 	bl	800ee18 <HAL_RCC_GetSysClockFreq>
 8011dea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011dec:	e009      	b.n	8011e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011df2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011df4:	e005      	b.n	8011e02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011df6:	2300      	movs	r3, #0
 8011df8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	f000 8090 	beq.w	8011f2a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e0e:	4a44      	ldr	r2, [pc, #272]	@ (8011f20 <UART_SetConfig+0x5c4>)
 8011e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e14:	461a      	mov	r2, r3
 8011e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e1c:	005a      	lsls	r2, r3, #1
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	085b      	lsrs	r3, r3, #1
 8011e24:	441a      	add	r2, r3
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e30:	6a3b      	ldr	r3, [r7, #32]
 8011e32:	2b0f      	cmp	r3, #15
 8011e34:	d916      	bls.n	8011e64 <UART_SetConfig+0x508>
 8011e36:	6a3b      	ldr	r3, [r7, #32]
 8011e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e3c:	d212      	bcs.n	8011e64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011e3e:	6a3b      	ldr	r3, [r7, #32]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	f023 030f 	bic.w	r3, r3, #15
 8011e46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011e48:	6a3b      	ldr	r3, [r7, #32]
 8011e4a:	085b      	lsrs	r3, r3, #1
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	f003 0307 	and.w	r3, r3, #7
 8011e52:	b29a      	uxth	r2, r3
 8011e54:	8bfb      	ldrh	r3, [r7, #30]
 8011e56:	4313      	orrs	r3, r2
 8011e58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	8bfa      	ldrh	r2, [r7, #30]
 8011e60:	60da      	str	r2, [r3, #12]
 8011e62:	e062      	b.n	8011f2a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011e64:	2301      	movs	r3, #1
 8011e66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011e6a:	e05e      	b.n	8011f2a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011e6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011e70:	2b08      	cmp	r3, #8
 8011e72:	d828      	bhi.n	8011ec6 <UART_SetConfig+0x56a>
 8011e74:	a201      	add	r2, pc, #4	@ (adr r2, 8011e7c <UART_SetConfig+0x520>)
 8011e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e7a:	bf00      	nop
 8011e7c:	08011ea1 	.word	0x08011ea1
 8011e80:	08011ea9 	.word	0x08011ea9
 8011e84:	08011eb1 	.word	0x08011eb1
 8011e88:	08011ec7 	.word	0x08011ec7
 8011e8c:	08011eb7 	.word	0x08011eb7
 8011e90:	08011ec7 	.word	0x08011ec7
 8011e94:	08011ec7 	.word	0x08011ec7
 8011e98:	08011ec7 	.word	0x08011ec7
 8011e9c:	08011ebf 	.word	0x08011ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ea0:	f7fd f828 	bl	800eef4 <HAL_RCC_GetPCLK1Freq>
 8011ea4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011ea6:	e014      	b.n	8011ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011ea8:	f7fd f83a 	bl	800ef20 <HAL_RCC_GetPCLK2Freq>
 8011eac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011eae:	e010      	b.n	8011ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8011f1c <UART_SetConfig+0x5c0>)
 8011eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011eb4:	e00d      	b.n	8011ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011eb6:	f7fc ffaf 	bl	800ee18 <HAL_RCC_GetSysClockFreq>
 8011eba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011ebc:	e009      	b.n	8011ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011ec4:	e005      	b.n	8011ed2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011eca:	2301      	movs	r3, #1
 8011ecc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011ed0:	bf00      	nop
    }

    if (pclk != 0U)
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d028      	beq.n	8011f2a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011edc:	4a10      	ldr	r2, [pc, #64]	@ (8011f20 <UART_SetConfig+0x5c4>)
 8011ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee6:	fbb3 f2f2 	udiv	r2, r3, r2
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	085b      	lsrs	r3, r3, #1
 8011ef0:	441a      	add	r2, r3
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	685b      	ldr	r3, [r3, #4]
 8011ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011efa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011efc:	6a3b      	ldr	r3, [r7, #32]
 8011efe:	2b0f      	cmp	r3, #15
 8011f00:	d910      	bls.n	8011f24 <UART_SetConfig+0x5c8>
 8011f02:	6a3b      	ldr	r3, [r7, #32]
 8011f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011f08:	d20c      	bcs.n	8011f24 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011f0a:	6a3b      	ldr	r3, [r7, #32]
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	60da      	str	r2, [r3, #12]
 8011f14:	e009      	b.n	8011f2a <UART_SetConfig+0x5ce>
 8011f16:	bf00      	nop
 8011f18:	40008000 	.word	0x40008000
 8011f1c:	00f42400 	.word	0x00f42400
 8011f20:	0801814c 	.word	0x0801814c
      }
      else
      {
        ret = HAL_ERROR;
 8011f24:	2301      	movs	r3, #1
 8011f26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2201      	movs	r2, #1
 8011f36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	2200      	movs	r2, #0
 8011f44:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011f46:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3730      	adds	r7, #48	@ 0x30
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b083      	sub	sp, #12
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f60:	f003 0308 	and.w	r3, r3, #8
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d00a      	beq.n	8011f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	430a      	orrs	r2, r1
 8011f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f82:	f003 0301 	and.w	r3, r3, #1
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00a      	beq.n	8011fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	430a      	orrs	r2, r1
 8011f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fa4:	f003 0302 	and.w	r3, r3, #2
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d00a      	beq.n	8011fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	430a      	orrs	r2, r1
 8011fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fc6:	f003 0304 	and.w	r3, r3, #4
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d00a      	beq.n	8011fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	430a      	orrs	r2, r1
 8011fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fe8:	f003 0310 	and.w	r3, r3, #16
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00a      	beq.n	8012006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	430a      	orrs	r2, r1
 8012004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801200a:	f003 0320 	and.w	r3, r3, #32
 801200e:	2b00      	cmp	r3, #0
 8012010:	d00a      	beq.n	8012028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	430a      	orrs	r2, r1
 8012026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012030:	2b00      	cmp	r3, #0
 8012032:	d01a      	beq.n	801206a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	430a      	orrs	r2, r1
 8012048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801204e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012052:	d10a      	bne.n	801206a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	430a      	orrs	r2, r1
 8012068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00a      	beq.n	801208c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	430a      	orrs	r2, r1
 801208a:	605a      	str	r2, [r3, #4]
  }
}
 801208c:	bf00      	nop
 801208e:	370c      	adds	r7, #12
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b098      	sub	sp, #96	@ 0x60
 801209c:	af02      	add	r7, sp, #8
 801209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2200      	movs	r2, #0
 80120a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80120a8:	f7f9 fab4 	bl	800b614 <HAL_GetTick>
 80120ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	f003 0308 	and.w	r3, r3, #8
 80120b8:	2b08      	cmp	r3, #8
 80120ba:	d12f      	bne.n	801211c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120c4:	2200      	movs	r2, #0
 80120c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 f88e 	bl	80121ec <UART_WaitOnFlagUntilTimeout>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d022      	beq.n	801211c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120de:	e853 3f00 	ldrex	r3, [r3]
 80120e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80120e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80120ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	461a      	mov	r2, r3
 80120f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80120f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80120fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80120fc:	e841 2300 	strex	r3, r2, [r1]
 8012100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1e6      	bne.n	80120d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2220      	movs	r2, #32
 801210c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2200      	movs	r2, #0
 8012114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012118:	2303      	movs	r3, #3
 801211a:	e063      	b.n	80121e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f003 0304 	and.w	r3, r3, #4
 8012126:	2b04      	cmp	r3, #4
 8012128:	d149      	bne.n	80121be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801212a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012132:	2200      	movs	r2, #0
 8012134:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f000 f857 	bl	80121ec <UART_WaitOnFlagUntilTimeout>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d03c      	beq.n	80121be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214c:	e853 3f00 	ldrex	r3, [r3]
 8012150:	623b      	str	r3, [r7, #32]
   return(result);
 8012152:	6a3b      	ldr	r3, [r7, #32]
 8012154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	461a      	mov	r2, r3
 8012160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012162:	633b      	str	r3, [r7, #48]	@ 0x30
 8012164:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801216a:	e841 2300 	strex	r3, r2, [r1]
 801216e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1e6      	bne.n	8012144 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	3308      	adds	r3, #8
 801217c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	e853 3f00 	ldrex	r3, [r3]
 8012184:	60fb      	str	r3, [r7, #12]
   return(result);
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f023 0301 	bic.w	r3, r3, #1
 801218c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	3308      	adds	r3, #8
 8012194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012196:	61fa      	str	r2, [r7, #28]
 8012198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801219a:	69b9      	ldr	r1, [r7, #24]
 801219c:	69fa      	ldr	r2, [r7, #28]
 801219e:	e841 2300 	strex	r3, r2, [r1]
 80121a2:	617b      	str	r3, [r7, #20]
   return(result);
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d1e5      	bne.n	8012176 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2220      	movs	r2, #32
 80121ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2200      	movs	r2, #0
 80121b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80121ba:	2303      	movs	r3, #3
 80121bc:	e012      	b.n	80121e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2220      	movs	r2, #32
 80121c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	2220      	movs	r2, #32
 80121ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2200      	movs	r2, #0
 80121d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2200      	movs	r2, #0
 80121de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80121e2:	2300      	movs	r3, #0
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3758      	adds	r7, #88	@ 0x58
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	60f8      	str	r0, [r7, #12]
 80121f4:	60b9      	str	r1, [r7, #8]
 80121f6:	603b      	str	r3, [r7, #0]
 80121f8:	4613      	mov	r3, r2
 80121fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80121fc:	e04f      	b.n	801229e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012204:	d04b      	beq.n	801229e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012206:	f7f9 fa05 	bl	800b614 <HAL_GetTick>
 801220a:	4602      	mov	r2, r0
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	69ba      	ldr	r2, [r7, #24]
 8012212:	429a      	cmp	r2, r3
 8012214:	d302      	bcc.n	801221c <UART_WaitOnFlagUntilTimeout+0x30>
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d101      	bne.n	8012220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801221c:	2303      	movs	r3, #3
 801221e:	e04e      	b.n	80122be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f003 0304 	and.w	r3, r3, #4
 801222a:	2b00      	cmp	r3, #0
 801222c:	d037      	beq.n	801229e <UART_WaitOnFlagUntilTimeout+0xb2>
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2b80      	cmp	r3, #128	@ 0x80
 8012232:	d034      	beq.n	801229e <UART_WaitOnFlagUntilTimeout+0xb2>
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b40      	cmp	r3, #64	@ 0x40
 8012238:	d031      	beq.n	801229e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	69db      	ldr	r3, [r3, #28]
 8012240:	f003 0308 	and.w	r3, r3, #8
 8012244:	2b08      	cmp	r3, #8
 8012246:	d110      	bne.n	801226a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2208      	movs	r2, #8
 801224e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012250:	68f8      	ldr	r0, [r7, #12]
 8012252:	f000 f838 	bl	80122c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2208      	movs	r2, #8
 801225a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2200      	movs	r2, #0
 8012262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8012266:	2301      	movs	r3, #1
 8012268:	e029      	b.n	80122be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	69db      	ldr	r3, [r3, #28]
 8012270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012278:	d111      	bne.n	801229e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012284:	68f8      	ldr	r0, [r7, #12]
 8012286:	f000 f81e 	bl	80122c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2220      	movs	r2, #32
 801228e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2200      	movs	r2, #0
 8012296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801229a:	2303      	movs	r3, #3
 801229c:	e00f      	b.n	80122be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	69da      	ldr	r2, [r3, #28]
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	4013      	ands	r3, r2
 80122a8:	68ba      	ldr	r2, [r7, #8]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	bf0c      	ite	eq
 80122ae:	2301      	moveq	r3, #1
 80122b0:	2300      	movne	r3, #0
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	461a      	mov	r2, r3
 80122b6:	79fb      	ldrb	r3, [r7, #7]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d0a0      	beq.n	80121fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80122bc:	2300      	movs	r3, #0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3710      	adds	r7, #16
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80122c6:	b480      	push	{r7}
 80122c8:	b095      	sub	sp, #84	@ 0x54
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122d6:	e853 3f00 	ldrex	r3, [r3]
 80122da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80122dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80122e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	461a      	mov	r2, r3
 80122ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80122ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80122f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80122f4:	e841 2300 	strex	r3, r2, [r1]
 80122f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80122fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d1e6      	bne.n	80122ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	3308      	adds	r3, #8
 8012306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	e853 3f00 	ldrex	r3, [r3]
 801230e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012316:	f023 0301 	bic.w	r3, r3, #1
 801231a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	3308      	adds	r3, #8
 8012322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012326:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801232a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801232c:	e841 2300 	strex	r3, r2, [r1]
 8012330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012334:	2b00      	cmp	r3, #0
 8012336:	d1e3      	bne.n	8012300 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801233c:	2b01      	cmp	r3, #1
 801233e:	d118      	bne.n	8012372 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	e853 3f00 	ldrex	r3, [r3]
 801234c:	60bb      	str	r3, [r7, #8]
   return(result);
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	f023 0310 	bic.w	r3, r3, #16
 8012354:	647b      	str	r3, [r7, #68]	@ 0x44
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801235e:	61bb      	str	r3, [r7, #24]
 8012360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012362:	6979      	ldr	r1, [r7, #20]
 8012364:	69ba      	ldr	r2, [r7, #24]
 8012366:	e841 2300 	strex	r3, r2, [r1]
 801236a:	613b      	str	r3, [r7, #16]
   return(result);
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d1e6      	bne.n	8012340 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2220      	movs	r2, #32
 8012376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012386:	bf00      	nop
 8012388:	3754      	adds	r7, #84	@ 0x54
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr

08012392 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012392:	b480      	push	{r7}
 8012394:	b085      	sub	sp, #20
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	d101      	bne.n	80123a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80123a4:	2302      	movs	r3, #2
 80123a6:	e027      	b.n	80123f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2201      	movs	r2, #1
 80123ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2224      	movs	r2, #36	@ 0x24
 80123b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f022 0201 	bic.w	r2, r2, #1
 80123ce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80123d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	68fa      	ldr	r2, [r7, #12]
 80123e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2220      	movs	r2, #32
 80123ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123f6:	2300      	movs	r3, #0
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3714      	adds	r7, #20
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr

08012404 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012414:	2b01      	cmp	r3, #1
 8012416:	d101      	bne.n	801241c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012418:	2302      	movs	r3, #2
 801241a:	e02d      	b.n	8012478 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2201      	movs	r2, #1
 8012420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2224      	movs	r2, #36	@ 0x24
 8012428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f022 0201 	bic.w	r2, r2, #1
 8012442:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	689b      	ldr	r3, [r3, #8]
 801244a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	683a      	ldr	r2, [r7, #0]
 8012454:	430a      	orrs	r2, r1
 8012456:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 f84f 	bl	80124fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	68fa      	ldr	r2, [r7, #12]
 8012464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2220      	movs	r2, #32
 801246a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	3710      	adds	r7, #16
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012490:	2b01      	cmp	r3, #1
 8012492:	d101      	bne.n	8012498 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012494:	2302      	movs	r3, #2
 8012496:	e02d      	b.n	80124f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2201      	movs	r2, #1
 801249c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2224      	movs	r2, #36	@ 0x24
 80124a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f022 0201 	bic.w	r2, r2, #1
 80124be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	689b      	ldr	r3, [r3, #8]
 80124c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	683a      	ldr	r2, [r7, #0]
 80124d0:	430a      	orrs	r2, r1
 80124d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f000 f811 	bl	80124fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	68fa      	ldr	r2, [r7, #12]
 80124e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2220      	movs	r2, #32
 80124e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2200      	movs	r2, #0
 80124ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80124f2:	2300      	movs	r3, #0
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	3710      	adds	r7, #16
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80124fc:	b480      	push	{r7}
 80124fe:	b085      	sub	sp, #20
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012508:	2b00      	cmp	r3, #0
 801250a:	d108      	bne.n	801251e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2201      	movs	r2, #1
 8012510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2201      	movs	r2, #1
 8012518:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801251c:	e031      	b.n	8012582 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801251e:	2308      	movs	r3, #8
 8012520:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012522:	2308      	movs	r3, #8
 8012524:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	689b      	ldr	r3, [r3, #8]
 801252c:	0e5b      	lsrs	r3, r3, #25
 801252e:	b2db      	uxtb	r3, r3
 8012530:	f003 0307 	and.w	r3, r3, #7
 8012534:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	0f5b      	lsrs	r3, r3, #29
 801253e:	b2db      	uxtb	r3, r3
 8012540:	f003 0307 	and.w	r3, r3, #7
 8012544:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012546:	7bbb      	ldrb	r3, [r7, #14]
 8012548:	7b3a      	ldrb	r2, [r7, #12]
 801254a:	4911      	ldr	r1, [pc, #68]	@ (8012590 <UARTEx_SetNbDataToProcess+0x94>)
 801254c:	5c8a      	ldrb	r2, [r1, r2]
 801254e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012552:	7b3a      	ldrb	r2, [r7, #12]
 8012554:	490f      	ldr	r1, [pc, #60]	@ (8012594 <UARTEx_SetNbDataToProcess+0x98>)
 8012556:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012558:	fb93 f3f2 	sdiv	r3, r3, r2
 801255c:	b29a      	uxth	r2, r3
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012564:	7bfb      	ldrb	r3, [r7, #15]
 8012566:	7b7a      	ldrb	r2, [r7, #13]
 8012568:	4909      	ldr	r1, [pc, #36]	@ (8012590 <UARTEx_SetNbDataToProcess+0x94>)
 801256a:	5c8a      	ldrb	r2, [r1, r2]
 801256c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012570:	7b7a      	ldrb	r2, [r7, #13]
 8012572:	4908      	ldr	r1, [pc, #32]	@ (8012594 <UARTEx_SetNbDataToProcess+0x98>)
 8012574:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012576:	fb93 f3f2 	sdiv	r3, r3, r2
 801257a:	b29a      	uxth	r2, r3
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012582:	bf00      	nop
 8012584:	3714      	adds	r7, #20
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	08018164 	.word	0x08018164
 8012594:	0801816c 	.word	0x0801816c

08012598 <calloc>:
 8012598:	4b02      	ldr	r3, [pc, #8]	@ (80125a4 <calloc+0xc>)
 801259a:	460a      	mov	r2, r1
 801259c:	4601      	mov	r1, r0
 801259e:	6818      	ldr	r0, [r3, #0]
 80125a0:	f000 b802 	b.w	80125a8 <_calloc_r>
 80125a4:	200001d4 	.word	0x200001d4

080125a8 <_calloc_r>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	fba1 5402 	umull	r5, r4, r1, r2
 80125ae:	b934      	cbnz	r4, 80125be <_calloc_r+0x16>
 80125b0:	4629      	mov	r1, r5
 80125b2:	f000 fb1b 	bl	8012bec <_malloc_r>
 80125b6:	4606      	mov	r6, r0
 80125b8:	b928      	cbnz	r0, 80125c6 <_calloc_r+0x1e>
 80125ba:	4630      	mov	r0, r6
 80125bc:	bd70      	pop	{r4, r5, r6, pc}
 80125be:	220c      	movs	r2, #12
 80125c0:	6002      	str	r2, [r0, #0]
 80125c2:	2600      	movs	r6, #0
 80125c4:	e7f9      	b.n	80125ba <_calloc_r+0x12>
 80125c6:	462a      	mov	r2, r5
 80125c8:	4621      	mov	r1, r4
 80125ca:	f001 ff15 	bl	80143f8 <memset>
 80125ce:	e7f4      	b.n	80125ba <_calloc_r+0x12>

080125d0 <exit>:
 80125d0:	b508      	push	{r3, lr}
 80125d2:	4b06      	ldr	r3, [pc, #24]	@ (80125ec <exit+0x1c>)
 80125d4:	4604      	mov	r4, r0
 80125d6:	b113      	cbz	r3, 80125de <exit+0xe>
 80125d8:	2100      	movs	r1, #0
 80125da:	f3af 8000 	nop.w
 80125de:	4b04      	ldr	r3, [pc, #16]	@ (80125f0 <exit+0x20>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	b103      	cbz	r3, 80125e6 <exit+0x16>
 80125e4:	4798      	blx	r3
 80125e6:	4620      	mov	r0, r4
 80125e8:	f7f8 fec6 	bl	800b378 <_exit>
 80125ec:	00000000 	.word	0x00000000
 80125f0:	200024b4 	.word	0x200024b4

080125f4 <__cvt>:
 80125f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125f8:	ec57 6b10 	vmov	r6, r7, d0
 80125fc:	2f00      	cmp	r7, #0
 80125fe:	460c      	mov	r4, r1
 8012600:	4619      	mov	r1, r3
 8012602:	463b      	mov	r3, r7
 8012604:	bfbb      	ittet	lt
 8012606:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801260a:	461f      	movlt	r7, r3
 801260c:	2300      	movge	r3, #0
 801260e:	232d      	movlt	r3, #45	@ 0x2d
 8012610:	700b      	strb	r3, [r1, #0]
 8012612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012614:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012618:	4691      	mov	r9, r2
 801261a:	f023 0820 	bic.w	r8, r3, #32
 801261e:	bfbc      	itt	lt
 8012620:	4632      	movlt	r2, r6
 8012622:	4616      	movlt	r6, r2
 8012624:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012628:	d005      	beq.n	8012636 <__cvt+0x42>
 801262a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801262e:	d100      	bne.n	8012632 <__cvt+0x3e>
 8012630:	3401      	adds	r4, #1
 8012632:	2102      	movs	r1, #2
 8012634:	e000      	b.n	8012638 <__cvt+0x44>
 8012636:	2103      	movs	r1, #3
 8012638:	ab03      	add	r3, sp, #12
 801263a:	9301      	str	r3, [sp, #4]
 801263c:	ab02      	add	r3, sp, #8
 801263e:	9300      	str	r3, [sp, #0]
 8012640:	ec47 6b10 	vmov	d0, r6, r7
 8012644:	4653      	mov	r3, sl
 8012646:	4622      	mov	r2, r4
 8012648:	f001 ffda 	bl	8014600 <_dtoa_r>
 801264c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012650:	4605      	mov	r5, r0
 8012652:	d119      	bne.n	8012688 <__cvt+0x94>
 8012654:	f019 0f01 	tst.w	r9, #1
 8012658:	d00e      	beq.n	8012678 <__cvt+0x84>
 801265a:	eb00 0904 	add.w	r9, r0, r4
 801265e:	2200      	movs	r2, #0
 8012660:	2300      	movs	r3, #0
 8012662:	4630      	mov	r0, r6
 8012664:	4639      	mov	r1, r7
 8012666:	f7ee fa37 	bl	8000ad8 <__aeabi_dcmpeq>
 801266a:	b108      	cbz	r0, 8012670 <__cvt+0x7c>
 801266c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012670:	2230      	movs	r2, #48	@ 0x30
 8012672:	9b03      	ldr	r3, [sp, #12]
 8012674:	454b      	cmp	r3, r9
 8012676:	d31e      	bcc.n	80126b6 <__cvt+0xc2>
 8012678:	9b03      	ldr	r3, [sp, #12]
 801267a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801267c:	1b5b      	subs	r3, r3, r5
 801267e:	4628      	mov	r0, r5
 8012680:	6013      	str	r3, [r2, #0]
 8012682:	b004      	add	sp, #16
 8012684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012688:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801268c:	eb00 0904 	add.w	r9, r0, r4
 8012690:	d1e5      	bne.n	801265e <__cvt+0x6a>
 8012692:	7803      	ldrb	r3, [r0, #0]
 8012694:	2b30      	cmp	r3, #48	@ 0x30
 8012696:	d10a      	bne.n	80126ae <__cvt+0xba>
 8012698:	2200      	movs	r2, #0
 801269a:	2300      	movs	r3, #0
 801269c:	4630      	mov	r0, r6
 801269e:	4639      	mov	r1, r7
 80126a0:	f7ee fa1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80126a4:	b918      	cbnz	r0, 80126ae <__cvt+0xba>
 80126a6:	f1c4 0401 	rsb	r4, r4, #1
 80126aa:	f8ca 4000 	str.w	r4, [sl]
 80126ae:	f8da 3000 	ldr.w	r3, [sl]
 80126b2:	4499      	add	r9, r3
 80126b4:	e7d3      	b.n	801265e <__cvt+0x6a>
 80126b6:	1c59      	adds	r1, r3, #1
 80126b8:	9103      	str	r1, [sp, #12]
 80126ba:	701a      	strb	r2, [r3, #0]
 80126bc:	e7d9      	b.n	8012672 <__cvt+0x7e>

080126be <__exponent>:
 80126be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126c0:	2900      	cmp	r1, #0
 80126c2:	bfba      	itte	lt
 80126c4:	4249      	neglt	r1, r1
 80126c6:	232d      	movlt	r3, #45	@ 0x2d
 80126c8:	232b      	movge	r3, #43	@ 0x2b
 80126ca:	2909      	cmp	r1, #9
 80126cc:	7002      	strb	r2, [r0, #0]
 80126ce:	7043      	strb	r3, [r0, #1]
 80126d0:	dd29      	ble.n	8012726 <__exponent+0x68>
 80126d2:	f10d 0307 	add.w	r3, sp, #7
 80126d6:	461d      	mov	r5, r3
 80126d8:	270a      	movs	r7, #10
 80126da:	461a      	mov	r2, r3
 80126dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80126e0:	fb07 1416 	mls	r4, r7, r6, r1
 80126e4:	3430      	adds	r4, #48	@ 0x30
 80126e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80126ea:	460c      	mov	r4, r1
 80126ec:	2c63      	cmp	r4, #99	@ 0x63
 80126ee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80126f2:	4631      	mov	r1, r6
 80126f4:	dcf1      	bgt.n	80126da <__exponent+0x1c>
 80126f6:	3130      	adds	r1, #48	@ 0x30
 80126f8:	1e94      	subs	r4, r2, #2
 80126fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80126fe:	1c41      	adds	r1, r0, #1
 8012700:	4623      	mov	r3, r4
 8012702:	42ab      	cmp	r3, r5
 8012704:	d30a      	bcc.n	801271c <__exponent+0x5e>
 8012706:	f10d 0309 	add.w	r3, sp, #9
 801270a:	1a9b      	subs	r3, r3, r2
 801270c:	42ac      	cmp	r4, r5
 801270e:	bf88      	it	hi
 8012710:	2300      	movhi	r3, #0
 8012712:	3302      	adds	r3, #2
 8012714:	4403      	add	r3, r0
 8012716:	1a18      	subs	r0, r3, r0
 8012718:	b003      	add	sp, #12
 801271a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801271c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012720:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012724:	e7ed      	b.n	8012702 <__exponent+0x44>
 8012726:	2330      	movs	r3, #48	@ 0x30
 8012728:	3130      	adds	r1, #48	@ 0x30
 801272a:	7083      	strb	r3, [r0, #2]
 801272c:	70c1      	strb	r1, [r0, #3]
 801272e:	1d03      	adds	r3, r0, #4
 8012730:	e7f1      	b.n	8012716 <__exponent+0x58>
	...

08012734 <_printf_float>:
 8012734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012738:	b08d      	sub	sp, #52	@ 0x34
 801273a:	460c      	mov	r4, r1
 801273c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012740:	4616      	mov	r6, r2
 8012742:	461f      	mov	r7, r3
 8012744:	4605      	mov	r5, r0
 8012746:	f001 feaf 	bl	80144a8 <_localeconv_r>
 801274a:	6803      	ldr	r3, [r0, #0]
 801274c:	9304      	str	r3, [sp, #16]
 801274e:	4618      	mov	r0, r3
 8012750:	f7ed fd96 	bl	8000280 <strlen>
 8012754:	2300      	movs	r3, #0
 8012756:	930a      	str	r3, [sp, #40]	@ 0x28
 8012758:	f8d8 3000 	ldr.w	r3, [r8]
 801275c:	9005      	str	r0, [sp, #20]
 801275e:	3307      	adds	r3, #7
 8012760:	f023 0307 	bic.w	r3, r3, #7
 8012764:	f103 0208 	add.w	r2, r3, #8
 8012768:	f894 a018 	ldrb.w	sl, [r4, #24]
 801276c:	f8d4 b000 	ldr.w	fp, [r4]
 8012770:	f8c8 2000 	str.w	r2, [r8]
 8012774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012778:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801277c:	9307      	str	r3, [sp, #28]
 801277e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012782:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801278a:	4b9c      	ldr	r3, [pc, #624]	@ (80129fc <_printf_float+0x2c8>)
 801278c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012790:	f7ee f9d4 	bl	8000b3c <__aeabi_dcmpun>
 8012794:	bb70      	cbnz	r0, 80127f4 <_printf_float+0xc0>
 8012796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801279a:	4b98      	ldr	r3, [pc, #608]	@ (80129fc <_printf_float+0x2c8>)
 801279c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80127a0:	f7ee f9ae 	bl	8000b00 <__aeabi_dcmple>
 80127a4:	bb30      	cbnz	r0, 80127f4 <_printf_float+0xc0>
 80127a6:	2200      	movs	r2, #0
 80127a8:	2300      	movs	r3, #0
 80127aa:	4640      	mov	r0, r8
 80127ac:	4649      	mov	r1, r9
 80127ae:	f7ee f99d 	bl	8000aec <__aeabi_dcmplt>
 80127b2:	b110      	cbz	r0, 80127ba <_printf_float+0x86>
 80127b4:	232d      	movs	r3, #45	@ 0x2d
 80127b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127ba:	4a91      	ldr	r2, [pc, #580]	@ (8012a00 <_printf_float+0x2cc>)
 80127bc:	4b91      	ldr	r3, [pc, #580]	@ (8012a04 <_printf_float+0x2d0>)
 80127be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80127c2:	bf8c      	ite	hi
 80127c4:	4690      	movhi	r8, r2
 80127c6:	4698      	movls	r8, r3
 80127c8:	2303      	movs	r3, #3
 80127ca:	6123      	str	r3, [r4, #16]
 80127cc:	f02b 0304 	bic.w	r3, fp, #4
 80127d0:	6023      	str	r3, [r4, #0]
 80127d2:	f04f 0900 	mov.w	r9, #0
 80127d6:	9700      	str	r7, [sp, #0]
 80127d8:	4633      	mov	r3, r6
 80127da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80127dc:	4621      	mov	r1, r4
 80127de:	4628      	mov	r0, r5
 80127e0:	f000 fa84 	bl	8012cec <_printf_common>
 80127e4:	3001      	adds	r0, #1
 80127e6:	f040 808d 	bne.w	8012904 <_printf_float+0x1d0>
 80127ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80127ee:	b00d      	add	sp, #52	@ 0x34
 80127f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f4:	4642      	mov	r2, r8
 80127f6:	464b      	mov	r3, r9
 80127f8:	4640      	mov	r0, r8
 80127fa:	4649      	mov	r1, r9
 80127fc:	f7ee f99e 	bl	8000b3c <__aeabi_dcmpun>
 8012800:	b140      	cbz	r0, 8012814 <_printf_float+0xe0>
 8012802:	464b      	mov	r3, r9
 8012804:	2b00      	cmp	r3, #0
 8012806:	bfbc      	itt	lt
 8012808:	232d      	movlt	r3, #45	@ 0x2d
 801280a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801280e:	4a7e      	ldr	r2, [pc, #504]	@ (8012a08 <_printf_float+0x2d4>)
 8012810:	4b7e      	ldr	r3, [pc, #504]	@ (8012a0c <_printf_float+0x2d8>)
 8012812:	e7d4      	b.n	80127be <_printf_float+0x8a>
 8012814:	6863      	ldr	r3, [r4, #4]
 8012816:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801281a:	9206      	str	r2, [sp, #24]
 801281c:	1c5a      	adds	r2, r3, #1
 801281e:	d13b      	bne.n	8012898 <_printf_float+0x164>
 8012820:	2306      	movs	r3, #6
 8012822:	6063      	str	r3, [r4, #4]
 8012824:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012828:	2300      	movs	r3, #0
 801282a:	6022      	str	r2, [r4, #0]
 801282c:	9303      	str	r3, [sp, #12]
 801282e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012830:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012834:	ab09      	add	r3, sp, #36	@ 0x24
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	6861      	ldr	r1, [r4, #4]
 801283a:	ec49 8b10 	vmov	d0, r8, r9
 801283e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012842:	4628      	mov	r0, r5
 8012844:	f7ff fed6 	bl	80125f4 <__cvt>
 8012848:	9b06      	ldr	r3, [sp, #24]
 801284a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801284c:	2b47      	cmp	r3, #71	@ 0x47
 801284e:	4680      	mov	r8, r0
 8012850:	d129      	bne.n	80128a6 <_printf_float+0x172>
 8012852:	1cc8      	adds	r0, r1, #3
 8012854:	db02      	blt.n	801285c <_printf_float+0x128>
 8012856:	6863      	ldr	r3, [r4, #4]
 8012858:	4299      	cmp	r1, r3
 801285a:	dd41      	ble.n	80128e0 <_printf_float+0x1ac>
 801285c:	f1aa 0a02 	sub.w	sl, sl, #2
 8012860:	fa5f fa8a 	uxtb.w	sl, sl
 8012864:	3901      	subs	r1, #1
 8012866:	4652      	mov	r2, sl
 8012868:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801286c:	9109      	str	r1, [sp, #36]	@ 0x24
 801286e:	f7ff ff26 	bl	80126be <__exponent>
 8012872:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012874:	1813      	adds	r3, r2, r0
 8012876:	2a01      	cmp	r2, #1
 8012878:	4681      	mov	r9, r0
 801287a:	6123      	str	r3, [r4, #16]
 801287c:	dc02      	bgt.n	8012884 <_printf_float+0x150>
 801287e:	6822      	ldr	r2, [r4, #0]
 8012880:	07d2      	lsls	r2, r2, #31
 8012882:	d501      	bpl.n	8012888 <_printf_float+0x154>
 8012884:	3301      	adds	r3, #1
 8012886:	6123      	str	r3, [r4, #16]
 8012888:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801288c:	2b00      	cmp	r3, #0
 801288e:	d0a2      	beq.n	80127d6 <_printf_float+0xa2>
 8012890:	232d      	movs	r3, #45	@ 0x2d
 8012892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012896:	e79e      	b.n	80127d6 <_printf_float+0xa2>
 8012898:	9a06      	ldr	r2, [sp, #24]
 801289a:	2a47      	cmp	r2, #71	@ 0x47
 801289c:	d1c2      	bne.n	8012824 <_printf_float+0xf0>
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1c0      	bne.n	8012824 <_printf_float+0xf0>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e7bd      	b.n	8012822 <_printf_float+0xee>
 80128a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80128aa:	d9db      	bls.n	8012864 <_printf_float+0x130>
 80128ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80128b0:	d118      	bne.n	80128e4 <_printf_float+0x1b0>
 80128b2:	2900      	cmp	r1, #0
 80128b4:	6863      	ldr	r3, [r4, #4]
 80128b6:	dd0b      	ble.n	80128d0 <_printf_float+0x19c>
 80128b8:	6121      	str	r1, [r4, #16]
 80128ba:	b913      	cbnz	r3, 80128c2 <_printf_float+0x18e>
 80128bc:	6822      	ldr	r2, [r4, #0]
 80128be:	07d0      	lsls	r0, r2, #31
 80128c0:	d502      	bpl.n	80128c8 <_printf_float+0x194>
 80128c2:	3301      	adds	r3, #1
 80128c4:	440b      	add	r3, r1
 80128c6:	6123      	str	r3, [r4, #16]
 80128c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80128ca:	f04f 0900 	mov.w	r9, #0
 80128ce:	e7db      	b.n	8012888 <_printf_float+0x154>
 80128d0:	b913      	cbnz	r3, 80128d8 <_printf_float+0x1a4>
 80128d2:	6822      	ldr	r2, [r4, #0]
 80128d4:	07d2      	lsls	r2, r2, #31
 80128d6:	d501      	bpl.n	80128dc <_printf_float+0x1a8>
 80128d8:	3302      	adds	r3, #2
 80128da:	e7f4      	b.n	80128c6 <_printf_float+0x192>
 80128dc:	2301      	movs	r3, #1
 80128de:	e7f2      	b.n	80128c6 <_printf_float+0x192>
 80128e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80128e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128e6:	4299      	cmp	r1, r3
 80128e8:	db05      	blt.n	80128f6 <_printf_float+0x1c2>
 80128ea:	6823      	ldr	r3, [r4, #0]
 80128ec:	6121      	str	r1, [r4, #16]
 80128ee:	07d8      	lsls	r0, r3, #31
 80128f0:	d5ea      	bpl.n	80128c8 <_printf_float+0x194>
 80128f2:	1c4b      	adds	r3, r1, #1
 80128f4:	e7e7      	b.n	80128c6 <_printf_float+0x192>
 80128f6:	2900      	cmp	r1, #0
 80128f8:	bfd4      	ite	le
 80128fa:	f1c1 0202 	rsble	r2, r1, #2
 80128fe:	2201      	movgt	r2, #1
 8012900:	4413      	add	r3, r2
 8012902:	e7e0      	b.n	80128c6 <_printf_float+0x192>
 8012904:	6823      	ldr	r3, [r4, #0]
 8012906:	055a      	lsls	r2, r3, #21
 8012908:	d407      	bmi.n	801291a <_printf_float+0x1e6>
 801290a:	6923      	ldr	r3, [r4, #16]
 801290c:	4642      	mov	r2, r8
 801290e:	4631      	mov	r1, r6
 8012910:	4628      	mov	r0, r5
 8012912:	47b8      	blx	r7
 8012914:	3001      	adds	r0, #1
 8012916:	d12b      	bne.n	8012970 <_printf_float+0x23c>
 8012918:	e767      	b.n	80127ea <_printf_float+0xb6>
 801291a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801291e:	f240 80dd 	bls.w	8012adc <_printf_float+0x3a8>
 8012922:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012926:	2200      	movs	r2, #0
 8012928:	2300      	movs	r3, #0
 801292a:	f7ee f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 801292e:	2800      	cmp	r0, #0
 8012930:	d033      	beq.n	801299a <_printf_float+0x266>
 8012932:	4a37      	ldr	r2, [pc, #220]	@ (8012a10 <_printf_float+0x2dc>)
 8012934:	2301      	movs	r3, #1
 8012936:	4631      	mov	r1, r6
 8012938:	4628      	mov	r0, r5
 801293a:	47b8      	blx	r7
 801293c:	3001      	adds	r0, #1
 801293e:	f43f af54 	beq.w	80127ea <_printf_float+0xb6>
 8012942:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012946:	4543      	cmp	r3, r8
 8012948:	db02      	blt.n	8012950 <_printf_float+0x21c>
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	07d8      	lsls	r0, r3, #31
 801294e:	d50f      	bpl.n	8012970 <_printf_float+0x23c>
 8012950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012954:	4631      	mov	r1, r6
 8012956:	4628      	mov	r0, r5
 8012958:	47b8      	blx	r7
 801295a:	3001      	adds	r0, #1
 801295c:	f43f af45 	beq.w	80127ea <_printf_float+0xb6>
 8012960:	f04f 0900 	mov.w	r9, #0
 8012964:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012968:	f104 0a1a 	add.w	sl, r4, #26
 801296c:	45c8      	cmp	r8, r9
 801296e:	dc09      	bgt.n	8012984 <_printf_float+0x250>
 8012970:	6823      	ldr	r3, [r4, #0]
 8012972:	079b      	lsls	r3, r3, #30
 8012974:	f100 8103 	bmi.w	8012b7e <_printf_float+0x44a>
 8012978:	68e0      	ldr	r0, [r4, #12]
 801297a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801297c:	4298      	cmp	r0, r3
 801297e:	bfb8      	it	lt
 8012980:	4618      	movlt	r0, r3
 8012982:	e734      	b.n	80127ee <_printf_float+0xba>
 8012984:	2301      	movs	r3, #1
 8012986:	4652      	mov	r2, sl
 8012988:	4631      	mov	r1, r6
 801298a:	4628      	mov	r0, r5
 801298c:	47b8      	blx	r7
 801298e:	3001      	adds	r0, #1
 8012990:	f43f af2b 	beq.w	80127ea <_printf_float+0xb6>
 8012994:	f109 0901 	add.w	r9, r9, #1
 8012998:	e7e8      	b.n	801296c <_printf_float+0x238>
 801299a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801299c:	2b00      	cmp	r3, #0
 801299e:	dc39      	bgt.n	8012a14 <_printf_float+0x2e0>
 80129a0:	4a1b      	ldr	r2, [pc, #108]	@ (8012a10 <_printf_float+0x2dc>)
 80129a2:	2301      	movs	r3, #1
 80129a4:	4631      	mov	r1, r6
 80129a6:	4628      	mov	r0, r5
 80129a8:	47b8      	blx	r7
 80129aa:	3001      	adds	r0, #1
 80129ac:	f43f af1d 	beq.w	80127ea <_printf_float+0xb6>
 80129b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80129b4:	ea59 0303 	orrs.w	r3, r9, r3
 80129b8:	d102      	bne.n	80129c0 <_printf_float+0x28c>
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	07d9      	lsls	r1, r3, #31
 80129be:	d5d7      	bpl.n	8012970 <_printf_float+0x23c>
 80129c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129c4:	4631      	mov	r1, r6
 80129c6:	4628      	mov	r0, r5
 80129c8:	47b8      	blx	r7
 80129ca:	3001      	adds	r0, #1
 80129cc:	f43f af0d 	beq.w	80127ea <_printf_float+0xb6>
 80129d0:	f04f 0a00 	mov.w	sl, #0
 80129d4:	f104 0b1a 	add.w	fp, r4, #26
 80129d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129da:	425b      	negs	r3, r3
 80129dc:	4553      	cmp	r3, sl
 80129de:	dc01      	bgt.n	80129e4 <_printf_float+0x2b0>
 80129e0:	464b      	mov	r3, r9
 80129e2:	e793      	b.n	801290c <_printf_float+0x1d8>
 80129e4:	2301      	movs	r3, #1
 80129e6:	465a      	mov	r2, fp
 80129e8:	4631      	mov	r1, r6
 80129ea:	4628      	mov	r0, r5
 80129ec:	47b8      	blx	r7
 80129ee:	3001      	adds	r0, #1
 80129f0:	f43f aefb 	beq.w	80127ea <_printf_float+0xb6>
 80129f4:	f10a 0a01 	add.w	sl, sl, #1
 80129f8:	e7ee      	b.n	80129d8 <_printf_float+0x2a4>
 80129fa:	bf00      	nop
 80129fc:	7fefffff 	.word	0x7fefffff
 8012a00:	08018178 	.word	0x08018178
 8012a04:	08018174 	.word	0x08018174
 8012a08:	08018180 	.word	0x08018180
 8012a0c:	0801817c 	.word	0x0801817c
 8012a10:	08018184 	.word	0x08018184
 8012a14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012a16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a1a:	4553      	cmp	r3, sl
 8012a1c:	bfa8      	it	ge
 8012a1e:	4653      	movge	r3, sl
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	4699      	mov	r9, r3
 8012a24:	dc36      	bgt.n	8012a94 <_printf_float+0x360>
 8012a26:	f04f 0b00 	mov.w	fp, #0
 8012a2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a2e:	f104 021a 	add.w	r2, r4, #26
 8012a32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012a34:	9306      	str	r3, [sp, #24]
 8012a36:	eba3 0309 	sub.w	r3, r3, r9
 8012a3a:	455b      	cmp	r3, fp
 8012a3c:	dc31      	bgt.n	8012aa2 <_printf_float+0x36e>
 8012a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a40:	459a      	cmp	sl, r3
 8012a42:	dc3a      	bgt.n	8012aba <_printf_float+0x386>
 8012a44:	6823      	ldr	r3, [r4, #0]
 8012a46:	07da      	lsls	r2, r3, #31
 8012a48:	d437      	bmi.n	8012aba <_printf_float+0x386>
 8012a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a4c:	ebaa 0903 	sub.w	r9, sl, r3
 8012a50:	9b06      	ldr	r3, [sp, #24]
 8012a52:	ebaa 0303 	sub.w	r3, sl, r3
 8012a56:	4599      	cmp	r9, r3
 8012a58:	bfa8      	it	ge
 8012a5a:	4699      	movge	r9, r3
 8012a5c:	f1b9 0f00 	cmp.w	r9, #0
 8012a60:	dc33      	bgt.n	8012aca <_printf_float+0x396>
 8012a62:	f04f 0800 	mov.w	r8, #0
 8012a66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a6a:	f104 0b1a 	add.w	fp, r4, #26
 8012a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a70:	ebaa 0303 	sub.w	r3, sl, r3
 8012a74:	eba3 0309 	sub.w	r3, r3, r9
 8012a78:	4543      	cmp	r3, r8
 8012a7a:	f77f af79 	ble.w	8012970 <_printf_float+0x23c>
 8012a7e:	2301      	movs	r3, #1
 8012a80:	465a      	mov	r2, fp
 8012a82:	4631      	mov	r1, r6
 8012a84:	4628      	mov	r0, r5
 8012a86:	47b8      	blx	r7
 8012a88:	3001      	adds	r0, #1
 8012a8a:	f43f aeae 	beq.w	80127ea <_printf_float+0xb6>
 8012a8e:	f108 0801 	add.w	r8, r8, #1
 8012a92:	e7ec      	b.n	8012a6e <_printf_float+0x33a>
 8012a94:	4642      	mov	r2, r8
 8012a96:	4631      	mov	r1, r6
 8012a98:	4628      	mov	r0, r5
 8012a9a:	47b8      	blx	r7
 8012a9c:	3001      	adds	r0, #1
 8012a9e:	d1c2      	bne.n	8012a26 <_printf_float+0x2f2>
 8012aa0:	e6a3      	b.n	80127ea <_printf_float+0xb6>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	4631      	mov	r1, r6
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	9206      	str	r2, [sp, #24]
 8012aaa:	47b8      	blx	r7
 8012aac:	3001      	adds	r0, #1
 8012aae:	f43f ae9c 	beq.w	80127ea <_printf_float+0xb6>
 8012ab2:	9a06      	ldr	r2, [sp, #24]
 8012ab4:	f10b 0b01 	add.w	fp, fp, #1
 8012ab8:	e7bb      	b.n	8012a32 <_printf_float+0x2fe>
 8012aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012abe:	4631      	mov	r1, r6
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	47b8      	blx	r7
 8012ac4:	3001      	adds	r0, #1
 8012ac6:	d1c0      	bne.n	8012a4a <_printf_float+0x316>
 8012ac8:	e68f      	b.n	80127ea <_printf_float+0xb6>
 8012aca:	9a06      	ldr	r2, [sp, #24]
 8012acc:	464b      	mov	r3, r9
 8012ace:	4442      	add	r2, r8
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	47b8      	blx	r7
 8012ad6:	3001      	adds	r0, #1
 8012ad8:	d1c3      	bne.n	8012a62 <_printf_float+0x32e>
 8012ada:	e686      	b.n	80127ea <_printf_float+0xb6>
 8012adc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012ae0:	f1ba 0f01 	cmp.w	sl, #1
 8012ae4:	dc01      	bgt.n	8012aea <_printf_float+0x3b6>
 8012ae6:	07db      	lsls	r3, r3, #31
 8012ae8:	d536      	bpl.n	8012b58 <_printf_float+0x424>
 8012aea:	2301      	movs	r3, #1
 8012aec:	4642      	mov	r2, r8
 8012aee:	4631      	mov	r1, r6
 8012af0:	4628      	mov	r0, r5
 8012af2:	47b8      	blx	r7
 8012af4:	3001      	adds	r0, #1
 8012af6:	f43f ae78 	beq.w	80127ea <_printf_float+0xb6>
 8012afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012afe:	4631      	mov	r1, r6
 8012b00:	4628      	mov	r0, r5
 8012b02:	47b8      	blx	r7
 8012b04:	3001      	adds	r0, #1
 8012b06:	f43f ae70 	beq.w	80127ea <_printf_float+0xb6>
 8012b0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012b0e:	2200      	movs	r2, #0
 8012b10:	2300      	movs	r3, #0
 8012b12:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012b16:	f7ed ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 8012b1a:	b9c0      	cbnz	r0, 8012b4e <_printf_float+0x41a>
 8012b1c:	4653      	mov	r3, sl
 8012b1e:	f108 0201 	add.w	r2, r8, #1
 8012b22:	4631      	mov	r1, r6
 8012b24:	4628      	mov	r0, r5
 8012b26:	47b8      	blx	r7
 8012b28:	3001      	adds	r0, #1
 8012b2a:	d10c      	bne.n	8012b46 <_printf_float+0x412>
 8012b2c:	e65d      	b.n	80127ea <_printf_float+0xb6>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	465a      	mov	r2, fp
 8012b32:	4631      	mov	r1, r6
 8012b34:	4628      	mov	r0, r5
 8012b36:	47b8      	blx	r7
 8012b38:	3001      	adds	r0, #1
 8012b3a:	f43f ae56 	beq.w	80127ea <_printf_float+0xb6>
 8012b3e:	f108 0801 	add.w	r8, r8, #1
 8012b42:	45d0      	cmp	r8, sl
 8012b44:	dbf3      	blt.n	8012b2e <_printf_float+0x3fa>
 8012b46:	464b      	mov	r3, r9
 8012b48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012b4c:	e6df      	b.n	801290e <_printf_float+0x1da>
 8012b4e:	f04f 0800 	mov.w	r8, #0
 8012b52:	f104 0b1a 	add.w	fp, r4, #26
 8012b56:	e7f4      	b.n	8012b42 <_printf_float+0x40e>
 8012b58:	2301      	movs	r3, #1
 8012b5a:	4642      	mov	r2, r8
 8012b5c:	e7e1      	b.n	8012b22 <_printf_float+0x3ee>
 8012b5e:	2301      	movs	r3, #1
 8012b60:	464a      	mov	r2, r9
 8012b62:	4631      	mov	r1, r6
 8012b64:	4628      	mov	r0, r5
 8012b66:	47b8      	blx	r7
 8012b68:	3001      	adds	r0, #1
 8012b6a:	f43f ae3e 	beq.w	80127ea <_printf_float+0xb6>
 8012b6e:	f108 0801 	add.w	r8, r8, #1
 8012b72:	68e3      	ldr	r3, [r4, #12]
 8012b74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b76:	1a5b      	subs	r3, r3, r1
 8012b78:	4543      	cmp	r3, r8
 8012b7a:	dcf0      	bgt.n	8012b5e <_printf_float+0x42a>
 8012b7c:	e6fc      	b.n	8012978 <_printf_float+0x244>
 8012b7e:	f04f 0800 	mov.w	r8, #0
 8012b82:	f104 0919 	add.w	r9, r4, #25
 8012b86:	e7f4      	b.n	8012b72 <_printf_float+0x43e>

08012b88 <malloc>:
 8012b88:	4b02      	ldr	r3, [pc, #8]	@ (8012b94 <malloc+0xc>)
 8012b8a:	4601      	mov	r1, r0
 8012b8c:	6818      	ldr	r0, [r3, #0]
 8012b8e:	f000 b82d 	b.w	8012bec <_malloc_r>
 8012b92:	bf00      	nop
 8012b94:	200001d4 	.word	0x200001d4

08012b98 <free>:
 8012b98:	4b02      	ldr	r3, [pc, #8]	@ (8012ba4 <free+0xc>)
 8012b9a:	4601      	mov	r1, r0
 8012b9c:	6818      	ldr	r0, [r3, #0]
 8012b9e:	f002 baff 	b.w	80151a0 <_free_r>
 8012ba2:	bf00      	nop
 8012ba4:	200001d4 	.word	0x200001d4

08012ba8 <sbrk_aligned>:
 8012ba8:	b570      	push	{r4, r5, r6, lr}
 8012baa:	4e0f      	ldr	r6, [pc, #60]	@ (8012be8 <sbrk_aligned+0x40>)
 8012bac:	460c      	mov	r4, r1
 8012bae:	6831      	ldr	r1, [r6, #0]
 8012bb0:	4605      	mov	r5, r0
 8012bb2:	b911      	cbnz	r1, 8012bba <sbrk_aligned+0x12>
 8012bb4:	f001 fc3a 	bl	801442c <_sbrk_r>
 8012bb8:	6030      	str	r0, [r6, #0]
 8012bba:	4621      	mov	r1, r4
 8012bbc:	4628      	mov	r0, r5
 8012bbe:	f001 fc35 	bl	801442c <_sbrk_r>
 8012bc2:	1c43      	adds	r3, r0, #1
 8012bc4:	d103      	bne.n	8012bce <sbrk_aligned+0x26>
 8012bc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012bca:	4620      	mov	r0, r4
 8012bcc:	bd70      	pop	{r4, r5, r6, pc}
 8012bce:	1cc4      	adds	r4, r0, #3
 8012bd0:	f024 0403 	bic.w	r4, r4, #3
 8012bd4:	42a0      	cmp	r0, r4
 8012bd6:	d0f8      	beq.n	8012bca <sbrk_aligned+0x22>
 8012bd8:	1a21      	subs	r1, r4, r0
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f001 fc26 	bl	801442c <_sbrk_r>
 8012be0:	3001      	adds	r0, #1
 8012be2:	d1f2      	bne.n	8012bca <sbrk_aligned+0x22>
 8012be4:	e7ef      	b.n	8012bc6 <sbrk_aligned+0x1e>
 8012be6:	bf00      	nop
 8012be8:	20002374 	.word	0x20002374

08012bec <_malloc_r>:
 8012bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bf0:	1ccd      	adds	r5, r1, #3
 8012bf2:	f025 0503 	bic.w	r5, r5, #3
 8012bf6:	3508      	adds	r5, #8
 8012bf8:	2d0c      	cmp	r5, #12
 8012bfa:	bf38      	it	cc
 8012bfc:	250c      	movcc	r5, #12
 8012bfe:	2d00      	cmp	r5, #0
 8012c00:	4606      	mov	r6, r0
 8012c02:	db01      	blt.n	8012c08 <_malloc_r+0x1c>
 8012c04:	42a9      	cmp	r1, r5
 8012c06:	d904      	bls.n	8012c12 <_malloc_r+0x26>
 8012c08:	230c      	movs	r3, #12
 8012c0a:	6033      	str	r3, [r6, #0]
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ce8 <_malloc_r+0xfc>
 8012c16:	f000 fc03 	bl	8013420 <__malloc_lock>
 8012c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8012c1e:	461c      	mov	r4, r3
 8012c20:	bb44      	cbnz	r4, 8012c74 <_malloc_r+0x88>
 8012c22:	4629      	mov	r1, r5
 8012c24:	4630      	mov	r0, r6
 8012c26:	f7ff ffbf 	bl	8012ba8 <sbrk_aligned>
 8012c2a:	1c43      	adds	r3, r0, #1
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	d158      	bne.n	8012ce2 <_malloc_r+0xf6>
 8012c30:	f8d8 4000 	ldr.w	r4, [r8]
 8012c34:	4627      	mov	r7, r4
 8012c36:	2f00      	cmp	r7, #0
 8012c38:	d143      	bne.n	8012cc2 <_malloc_r+0xd6>
 8012c3a:	2c00      	cmp	r4, #0
 8012c3c:	d04b      	beq.n	8012cd6 <_malloc_r+0xea>
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	4639      	mov	r1, r7
 8012c42:	4630      	mov	r0, r6
 8012c44:	eb04 0903 	add.w	r9, r4, r3
 8012c48:	f001 fbf0 	bl	801442c <_sbrk_r>
 8012c4c:	4581      	cmp	r9, r0
 8012c4e:	d142      	bne.n	8012cd6 <_malloc_r+0xea>
 8012c50:	6821      	ldr	r1, [r4, #0]
 8012c52:	1a6d      	subs	r5, r5, r1
 8012c54:	4629      	mov	r1, r5
 8012c56:	4630      	mov	r0, r6
 8012c58:	f7ff ffa6 	bl	8012ba8 <sbrk_aligned>
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	d03a      	beq.n	8012cd6 <_malloc_r+0xea>
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	442b      	add	r3, r5
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	f8d8 3000 	ldr.w	r3, [r8]
 8012c6a:	685a      	ldr	r2, [r3, #4]
 8012c6c:	bb62      	cbnz	r2, 8012cc8 <_malloc_r+0xdc>
 8012c6e:	f8c8 7000 	str.w	r7, [r8]
 8012c72:	e00f      	b.n	8012c94 <_malloc_r+0xa8>
 8012c74:	6822      	ldr	r2, [r4, #0]
 8012c76:	1b52      	subs	r2, r2, r5
 8012c78:	d420      	bmi.n	8012cbc <_malloc_r+0xd0>
 8012c7a:	2a0b      	cmp	r2, #11
 8012c7c:	d917      	bls.n	8012cae <_malloc_r+0xc2>
 8012c7e:	1961      	adds	r1, r4, r5
 8012c80:	42a3      	cmp	r3, r4
 8012c82:	6025      	str	r5, [r4, #0]
 8012c84:	bf18      	it	ne
 8012c86:	6059      	strne	r1, [r3, #4]
 8012c88:	6863      	ldr	r3, [r4, #4]
 8012c8a:	bf08      	it	eq
 8012c8c:	f8c8 1000 	streq.w	r1, [r8]
 8012c90:	5162      	str	r2, [r4, r5]
 8012c92:	604b      	str	r3, [r1, #4]
 8012c94:	4630      	mov	r0, r6
 8012c96:	f000 fbc9 	bl	801342c <__malloc_unlock>
 8012c9a:	f104 000b 	add.w	r0, r4, #11
 8012c9e:	1d23      	adds	r3, r4, #4
 8012ca0:	f020 0007 	bic.w	r0, r0, #7
 8012ca4:	1ac2      	subs	r2, r0, r3
 8012ca6:	bf1c      	itt	ne
 8012ca8:	1a1b      	subne	r3, r3, r0
 8012caa:	50a3      	strne	r3, [r4, r2]
 8012cac:	e7af      	b.n	8012c0e <_malloc_r+0x22>
 8012cae:	6862      	ldr	r2, [r4, #4]
 8012cb0:	42a3      	cmp	r3, r4
 8012cb2:	bf0c      	ite	eq
 8012cb4:	f8c8 2000 	streq.w	r2, [r8]
 8012cb8:	605a      	strne	r2, [r3, #4]
 8012cba:	e7eb      	b.n	8012c94 <_malloc_r+0xa8>
 8012cbc:	4623      	mov	r3, r4
 8012cbe:	6864      	ldr	r4, [r4, #4]
 8012cc0:	e7ae      	b.n	8012c20 <_malloc_r+0x34>
 8012cc2:	463c      	mov	r4, r7
 8012cc4:	687f      	ldr	r7, [r7, #4]
 8012cc6:	e7b6      	b.n	8012c36 <_malloc_r+0x4a>
 8012cc8:	461a      	mov	r2, r3
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	42a3      	cmp	r3, r4
 8012cce:	d1fb      	bne.n	8012cc8 <_malloc_r+0xdc>
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	6053      	str	r3, [r2, #4]
 8012cd4:	e7de      	b.n	8012c94 <_malloc_r+0xa8>
 8012cd6:	230c      	movs	r3, #12
 8012cd8:	6033      	str	r3, [r6, #0]
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f000 fba6 	bl	801342c <__malloc_unlock>
 8012ce0:	e794      	b.n	8012c0c <_malloc_r+0x20>
 8012ce2:	6005      	str	r5, [r0, #0]
 8012ce4:	e7d6      	b.n	8012c94 <_malloc_r+0xa8>
 8012ce6:	bf00      	nop
 8012ce8:	20002378 	.word	0x20002378

08012cec <_printf_common>:
 8012cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf0:	4616      	mov	r6, r2
 8012cf2:	4698      	mov	r8, r3
 8012cf4:	688a      	ldr	r2, [r1, #8]
 8012cf6:	690b      	ldr	r3, [r1, #16]
 8012cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	bfb8      	it	lt
 8012d00:	4613      	movlt	r3, r2
 8012d02:	6033      	str	r3, [r6, #0]
 8012d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d08:	4607      	mov	r7, r0
 8012d0a:	460c      	mov	r4, r1
 8012d0c:	b10a      	cbz	r2, 8012d12 <_printf_common+0x26>
 8012d0e:	3301      	adds	r3, #1
 8012d10:	6033      	str	r3, [r6, #0]
 8012d12:	6823      	ldr	r3, [r4, #0]
 8012d14:	0699      	lsls	r1, r3, #26
 8012d16:	bf42      	ittt	mi
 8012d18:	6833      	ldrmi	r3, [r6, #0]
 8012d1a:	3302      	addmi	r3, #2
 8012d1c:	6033      	strmi	r3, [r6, #0]
 8012d1e:	6825      	ldr	r5, [r4, #0]
 8012d20:	f015 0506 	ands.w	r5, r5, #6
 8012d24:	d106      	bne.n	8012d34 <_printf_common+0x48>
 8012d26:	f104 0a19 	add.w	sl, r4, #25
 8012d2a:	68e3      	ldr	r3, [r4, #12]
 8012d2c:	6832      	ldr	r2, [r6, #0]
 8012d2e:	1a9b      	subs	r3, r3, r2
 8012d30:	42ab      	cmp	r3, r5
 8012d32:	dc26      	bgt.n	8012d82 <_printf_common+0x96>
 8012d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012d38:	6822      	ldr	r2, [r4, #0]
 8012d3a:	3b00      	subs	r3, #0
 8012d3c:	bf18      	it	ne
 8012d3e:	2301      	movne	r3, #1
 8012d40:	0692      	lsls	r2, r2, #26
 8012d42:	d42b      	bmi.n	8012d9c <_printf_common+0xb0>
 8012d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012d48:	4641      	mov	r1, r8
 8012d4a:	4638      	mov	r0, r7
 8012d4c:	47c8      	blx	r9
 8012d4e:	3001      	adds	r0, #1
 8012d50:	d01e      	beq.n	8012d90 <_printf_common+0xa4>
 8012d52:	6823      	ldr	r3, [r4, #0]
 8012d54:	6922      	ldr	r2, [r4, #16]
 8012d56:	f003 0306 	and.w	r3, r3, #6
 8012d5a:	2b04      	cmp	r3, #4
 8012d5c:	bf02      	ittt	eq
 8012d5e:	68e5      	ldreq	r5, [r4, #12]
 8012d60:	6833      	ldreq	r3, [r6, #0]
 8012d62:	1aed      	subeq	r5, r5, r3
 8012d64:	68a3      	ldr	r3, [r4, #8]
 8012d66:	bf0c      	ite	eq
 8012d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d6c:	2500      	movne	r5, #0
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	bfc4      	itt	gt
 8012d72:	1a9b      	subgt	r3, r3, r2
 8012d74:	18ed      	addgt	r5, r5, r3
 8012d76:	2600      	movs	r6, #0
 8012d78:	341a      	adds	r4, #26
 8012d7a:	42b5      	cmp	r5, r6
 8012d7c:	d11a      	bne.n	8012db4 <_printf_common+0xc8>
 8012d7e:	2000      	movs	r0, #0
 8012d80:	e008      	b.n	8012d94 <_printf_common+0xa8>
 8012d82:	2301      	movs	r3, #1
 8012d84:	4652      	mov	r2, sl
 8012d86:	4641      	mov	r1, r8
 8012d88:	4638      	mov	r0, r7
 8012d8a:	47c8      	blx	r9
 8012d8c:	3001      	adds	r0, #1
 8012d8e:	d103      	bne.n	8012d98 <_printf_common+0xac>
 8012d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d98:	3501      	adds	r5, #1
 8012d9a:	e7c6      	b.n	8012d2a <_printf_common+0x3e>
 8012d9c:	18e1      	adds	r1, r4, r3
 8012d9e:	1c5a      	adds	r2, r3, #1
 8012da0:	2030      	movs	r0, #48	@ 0x30
 8012da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012da6:	4422      	add	r2, r4
 8012da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012db0:	3302      	adds	r3, #2
 8012db2:	e7c7      	b.n	8012d44 <_printf_common+0x58>
 8012db4:	2301      	movs	r3, #1
 8012db6:	4622      	mov	r2, r4
 8012db8:	4641      	mov	r1, r8
 8012dba:	4638      	mov	r0, r7
 8012dbc:	47c8      	blx	r9
 8012dbe:	3001      	adds	r0, #1
 8012dc0:	d0e6      	beq.n	8012d90 <_printf_common+0xa4>
 8012dc2:	3601      	adds	r6, #1
 8012dc4:	e7d9      	b.n	8012d7a <_printf_common+0x8e>
	...

08012dc8 <_printf_i>:
 8012dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dcc:	7e0f      	ldrb	r7, [r1, #24]
 8012dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012dd0:	2f78      	cmp	r7, #120	@ 0x78
 8012dd2:	4691      	mov	r9, r2
 8012dd4:	4680      	mov	r8, r0
 8012dd6:	460c      	mov	r4, r1
 8012dd8:	469a      	mov	sl, r3
 8012dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012dde:	d807      	bhi.n	8012df0 <_printf_i+0x28>
 8012de0:	2f62      	cmp	r7, #98	@ 0x62
 8012de2:	d80a      	bhi.n	8012dfa <_printf_i+0x32>
 8012de4:	2f00      	cmp	r7, #0
 8012de6:	f000 80d1 	beq.w	8012f8c <_printf_i+0x1c4>
 8012dea:	2f58      	cmp	r7, #88	@ 0x58
 8012dec:	f000 80b8 	beq.w	8012f60 <_printf_i+0x198>
 8012df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012df8:	e03a      	b.n	8012e70 <_printf_i+0xa8>
 8012dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012dfe:	2b15      	cmp	r3, #21
 8012e00:	d8f6      	bhi.n	8012df0 <_printf_i+0x28>
 8012e02:	a101      	add	r1, pc, #4	@ (adr r1, 8012e08 <_printf_i+0x40>)
 8012e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e08:	08012e61 	.word	0x08012e61
 8012e0c:	08012e75 	.word	0x08012e75
 8012e10:	08012df1 	.word	0x08012df1
 8012e14:	08012df1 	.word	0x08012df1
 8012e18:	08012df1 	.word	0x08012df1
 8012e1c:	08012df1 	.word	0x08012df1
 8012e20:	08012e75 	.word	0x08012e75
 8012e24:	08012df1 	.word	0x08012df1
 8012e28:	08012df1 	.word	0x08012df1
 8012e2c:	08012df1 	.word	0x08012df1
 8012e30:	08012df1 	.word	0x08012df1
 8012e34:	08012f73 	.word	0x08012f73
 8012e38:	08012e9f 	.word	0x08012e9f
 8012e3c:	08012f2d 	.word	0x08012f2d
 8012e40:	08012df1 	.word	0x08012df1
 8012e44:	08012df1 	.word	0x08012df1
 8012e48:	08012f95 	.word	0x08012f95
 8012e4c:	08012df1 	.word	0x08012df1
 8012e50:	08012e9f 	.word	0x08012e9f
 8012e54:	08012df1 	.word	0x08012df1
 8012e58:	08012df1 	.word	0x08012df1
 8012e5c:	08012f35 	.word	0x08012f35
 8012e60:	6833      	ldr	r3, [r6, #0]
 8012e62:	1d1a      	adds	r2, r3, #4
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	6032      	str	r2, [r6, #0]
 8012e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012e70:	2301      	movs	r3, #1
 8012e72:	e09c      	b.n	8012fae <_printf_i+0x1e6>
 8012e74:	6833      	ldr	r3, [r6, #0]
 8012e76:	6820      	ldr	r0, [r4, #0]
 8012e78:	1d19      	adds	r1, r3, #4
 8012e7a:	6031      	str	r1, [r6, #0]
 8012e7c:	0606      	lsls	r6, r0, #24
 8012e7e:	d501      	bpl.n	8012e84 <_printf_i+0xbc>
 8012e80:	681d      	ldr	r5, [r3, #0]
 8012e82:	e003      	b.n	8012e8c <_printf_i+0xc4>
 8012e84:	0645      	lsls	r5, r0, #25
 8012e86:	d5fb      	bpl.n	8012e80 <_printf_i+0xb8>
 8012e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012e8c:	2d00      	cmp	r5, #0
 8012e8e:	da03      	bge.n	8012e98 <_printf_i+0xd0>
 8012e90:	232d      	movs	r3, #45	@ 0x2d
 8012e92:	426d      	negs	r5, r5
 8012e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e98:	4858      	ldr	r0, [pc, #352]	@ (8012ffc <_printf_i+0x234>)
 8012e9a:	230a      	movs	r3, #10
 8012e9c:	e011      	b.n	8012ec2 <_printf_i+0xfa>
 8012e9e:	6821      	ldr	r1, [r4, #0]
 8012ea0:	6833      	ldr	r3, [r6, #0]
 8012ea2:	0608      	lsls	r0, r1, #24
 8012ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ea8:	d402      	bmi.n	8012eb0 <_printf_i+0xe8>
 8012eaa:	0649      	lsls	r1, r1, #25
 8012eac:	bf48      	it	mi
 8012eae:	b2ad      	uxthmi	r5, r5
 8012eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8012eb2:	4852      	ldr	r0, [pc, #328]	@ (8012ffc <_printf_i+0x234>)
 8012eb4:	6033      	str	r3, [r6, #0]
 8012eb6:	bf14      	ite	ne
 8012eb8:	230a      	movne	r3, #10
 8012eba:	2308      	moveq	r3, #8
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012ec2:	6866      	ldr	r6, [r4, #4]
 8012ec4:	60a6      	str	r6, [r4, #8]
 8012ec6:	2e00      	cmp	r6, #0
 8012ec8:	db05      	blt.n	8012ed6 <_printf_i+0x10e>
 8012eca:	6821      	ldr	r1, [r4, #0]
 8012ecc:	432e      	orrs	r6, r5
 8012ece:	f021 0104 	bic.w	r1, r1, #4
 8012ed2:	6021      	str	r1, [r4, #0]
 8012ed4:	d04b      	beq.n	8012f6e <_printf_i+0x1a6>
 8012ed6:	4616      	mov	r6, r2
 8012ed8:	fbb5 f1f3 	udiv	r1, r5, r3
 8012edc:	fb03 5711 	mls	r7, r3, r1, r5
 8012ee0:	5dc7      	ldrb	r7, [r0, r7]
 8012ee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ee6:	462f      	mov	r7, r5
 8012ee8:	42bb      	cmp	r3, r7
 8012eea:	460d      	mov	r5, r1
 8012eec:	d9f4      	bls.n	8012ed8 <_printf_i+0x110>
 8012eee:	2b08      	cmp	r3, #8
 8012ef0:	d10b      	bne.n	8012f0a <_printf_i+0x142>
 8012ef2:	6823      	ldr	r3, [r4, #0]
 8012ef4:	07df      	lsls	r7, r3, #31
 8012ef6:	d508      	bpl.n	8012f0a <_printf_i+0x142>
 8012ef8:	6923      	ldr	r3, [r4, #16]
 8012efa:	6861      	ldr	r1, [r4, #4]
 8012efc:	4299      	cmp	r1, r3
 8012efe:	bfde      	ittt	le
 8012f00:	2330      	movle	r3, #48	@ 0x30
 8012f02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f06:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012f0a:	1b92      	subs	r2, r2, r6
 8012f0c:	6122      	str	r2, [r4, #16]
 8012f0e:	f8cd a000 	str.w	sl, [sp]
 8012f12:	464b      	mov	r3, r9
 8012f14:	aa03      	add	r2, sp, #12
 8012f16:	4621      	mov	r1, r4
 8012f18:	4640      	mov	r0, r8
 8012f1a:	f7ff fee7 	bl	8012cec <_printf_common>
 8012f1e:	3001      	adds	r0, #1
 8012f20:	d14a      	bne.n	8012fb8 <_printf_i+0x1f0>
 8012f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f26:	b004      	add	sp, #16
 8012f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f2c:	6823      	ldr	r3, [r4, #0]
 8012f2e:	f043 0320 	orr.w	r3, r3, #32
 8012f32:	6023      	str	r3, [r4, #0]
 8012f34:	4832      	ldr	r0, [pc, #200]	@ (8013000 <_printf_i+0x238>)
 8012f36:	2778      	movs	r7, #120	@ 0x78
 8012f38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012f3c:	6823      	ldr	r3, [r4, #0]
 8012f3e:	6831      	ldr	r1, [r6, #0]
 8012f40:	061f      	lsls	r7, r3, #24
 8012f42:	f851 5b04 	ldr.w	r5, [r1], #4
 8012f46:	d402      	bmi.n	8012f4e <_printf_i+0x186>
 8012f48:	065f      	lsls	r7, r3, #25
 8012f4a:	bf48      	it	mi
 8012f4c:	b2ad      	uxthmi	r5, r5
 8012f4e:	6031      	str	r1, [r6, #0]
 8012f50:	07d9      	lsls	r1, r3, #31
 8012f52:	bf44      	itt	mi
 8012f54:	f043 0320 	orrmi.w	r3, r3, #32
 8012f58:	6023      	strmi	r3, [r4, #0]
 8012f5a:	b11d      	cbz	r5, 8012f64 <_printf_i+0x19c>
 8012f5c:	2310      	movs	r3, #16
 8012f5e:	e7ad      	b.n	8012ebc <_printf_i+0xf4>
 8012f60:	4826      	ldr	r0, [pc, #152]	@ (8012ffc <_printf_i+0x234>)
 8012f62:	e7e9      	b.n	8012f38 <_printf_i+0x170>
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	f023 0320 	bic.w	r3, r3, #32
 8012f6a:	6023      	str	r3, [r4, #0]
 8012f6c:	e7f6      	b.n	8012f5c <_printf_i+0x194>
 8012f6e:	4616      	mov	r6, r2
 8012f70:	e7bd      	b.n	8012eee <_printf_i+0x126>
 8012f72:	6833      	ldr	r3, [r6, #0]
 8012f74:	6825      	ldr	r5, [r4, #0]
 8012f76:	6961      	ldr	r1, [r4, #20]
 8012f78:	1d18      	adds	r0, r3, #4
 8012f7a:	6030      	str	r0, [r6, #0]
 8012f7c:	062e      	lsls	r6, r5, #24
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	d501      	bpl.n	8012f86 <_printf_i+0x1be>
 8012f82:	6019      	str	r1, [r3, #0]
 8012f84:	e002      	b.n	8012f8c <_printf_i+0x1c4>
 8012f86:	0668      	lsls	r0, r5, #25
 8012f88:	d5fb      	bpl.n	8012f82 <_printf_i+0x1ba>
 8012f8a:	8019      	strh	r1, [r3, #0]
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	6123      	str	r3, [r4, #16]
 8012f90:	4616      	mov	r6, r2
 8012f92:	e7bc      	b.n	8012f0e <_printf_i+0x146>
 8012f94:	6833      	ldr	r3, [r6, #0]
 8012f96:	1d1a      	adds	r2, r3, #4
 8012f98:	6032      	str	r2, [r6, #0]
 8012f9a:	681e      	ldr	r6, [r3, #0]
 8012f9c:	6862      	ldr	r2, [r4, #4]
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	f7ed f91d 	bl	80001e0 <memchr>
 8012fa6:	b108      	cbz	r0, 8012fac <_printf_i+0x1e4>
 8012fa8:	1b80      	subs	r0, r0, r6
 8012faa:	6060      	str	r0, [r4, #4]
 8012fac:	6863      	ldr	r3, [r4, #4]
 8012fae:	6123      	str	r3, [r4, #16]
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012fb6:	e7aa      	b.n	8012f0e <_printf_i+0x146>
 8012fb8:	6923      	ldr	r3, [r4, #16]
 8012fba:	4632      	mov	r2, r6
 8012fbc:	4649      	mov	r1, r9
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	47d0      	blx	sl
 8012fc2:	3001      	adds	r0, #1
 8012fc4:	d0ad      	beq.n	8012f22 <_printf_i+0x15a>
 8012fc6:	6823      	ldr	r3, [r4, #0]
 8012fc8:	079b      	lsls	r3, r3, #30
 8012fca:	d413      	bmi.n	8012ff4 <_printf_i+0x22c>
 8012fcc:	68e0      	ldr	r0, [r4, #12]
 8012fce:	9b03      	ldr	r3, [sp, #12]
 8012fd0:	4298      	cmp	r0, r3
 8012fd2:	bfb8      	it	lt
 8012fd4:	4618      	movlt	r0, r3
 8012fd6:	e7a6      	b.n	8012f26 <_printf_i+0x15e>
 8012fd8:	2301      	movs	r3, #1
 8012fda:	4632      	mov	r2, r6
 8012fdc:	4649      	mov	r1, r9
 8012fde:	4640      	mov	r0, r8
 8012fe0:	47d0      	blx	sl
 8012fe2:	3001      	adds	r0, #1
 8012fe4:	d09d      	beq.n	8012f22 <_printf_i+0x15a>
 8012fe6:	3501      	adds	r5, #1
 8012fe8:	68e3      	ldr	r3, [r4, #12]
 8012fea:	9903      	ldr	r1, [sp, #12]
 8012fec:	1a5b      	subs	r3, r3, r1
 8012fee:	42ab      	cmp	r3, r5
 8012ff0:	dcf2      	bgt.n	8012fd8 <_printf_i+0x210>
 8012ff2:	e7eb      	b.n	8012fcc <_printf_i+0x204>
 8012ff4:	2500      	movs	r5, #0
 8012ff6:	f104 0619 	add.w	r6, r4, #25
 8012ffa:	e7f5      	b.n	8012fe8 <_printf_i+0x220>
 8012ffc:	08018186 	.word	0x08018186
 8013000:	08018197 	.word	0x08018197

08013004 <_scanf_float>:
 8013004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013008:	b087      	sub	sp, #28
 801300a:	4691      	mov	r9, r2
 801300c:	9303      	str	r3, [sp, #12]
 801300e:	688b      	ldr	r3, [r1, #8]
 8013010:	1e5a      	subs	r2, r3, #1
 8013012:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013016:	bf81      	itttt	hi
 8013018:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801301c:	eb03 0b05 	addhi.w	fp, r3, r5
 8013020:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013024:	608b      	strhi	r3, [r1, #8]
 8013026:	680b      	ldr	r3, [r1, #0]
 8013028:	460a      	mov	r2, r1
 801302a:	f04f 0500 	mov.w	r5, #0
 801302e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8013032:	f842 3b1c 	str.w	r3, [r2], #28
 8013036:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801303a:	4680      	mov	r8, r0
 801303c:	460c      	mov	r4, r1
 801303e:	bf98      	it	ls
 8013040:	f04f 0b00 	movls.w	fp, #0
 8013044:	9201      	str	r2, [sp, #4]
 8013046:	4616      	mov	r6, r2
 8013048:	46aa      	mov	sl, r5
 801304a:	462f      	mov	r7, r5
 801304c:	9502      	str	r5, [sp, #8]
 801304e:	68a2      	ldr	r2, [r4, #8]
 8013050:	b15a      	cbz	r2, 801306a <_scanf_float+0x66>
 8013052:	f8d9 3000 	ldr.w	r3, [r9]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b4e      	cmp	r3, #78	@ 0x4e
 801305a:	d863      	bhi.n	8013124 <_scanf_float+0x120>
 801305c:	2b40      	cmp	r3, #64	@ 0x40
 801305e:	d83b      	bhi.n	80130d8 <_scanf_float+0xd4>
 8013060:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013064:	b2c8      	uxtb	r0, r1
 8013066:	280e      	cmp	r0, #14
 8013068:	d939      	bls.n	80130de <_scanf_float+0xda>
 801306a:	b11f      	cbz	r7, 8013074 <_scanf_float+0x70>
 801306c:	6823      	ldr	r3, [r4, #0]
 801306e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013072:	6023      	str	r3, [r4, #0]
 8013074:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8013078:	f1ba 0f01 	cmp.w	sl, #1
 801307c:	f200 8114 	bhi.w	80132a8 <_scanf_float+0x2a4>
 8013080:	9b01      	ldr	r3, [sp, #4]
 8013082:	429e      	cmp	r6, r3
 8013084:	f200 8105 	bhi.w	8013292 <_scanf_float+0x28e>
 8013088:	2001      	movs	r0, #1
 801308a:	b007      	add	sp, #28
 801308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013090:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013094:	2a0d      	cmp	r2, #13
 8013096:	d8e8      	bhi.n	801306a <_scanf_float+0x66>
 8013098:	a101      	add	r1, pc, #4	@ (adr r1, 80130a0 <_scanf_float+0x9c>)
 801309a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801309e:	bf00      	nop
 80130a0:	080131e9 	.word	0x080131e9
 80130a4:	0801306b 	.word	0x0801306b
 80130a8:	0801306b 	.word	0x0801306b
 80130ac:	0801306b 	.word	0x0801306b
 80130b0:	08013245 	.word	0x08013245
 80130b4:	0801321f 	.word	0x0801321f
 80130b8:	0801306b 	.word	0x0801306b
 80130bc:	0801306b 	.word	0x0801306b
 80130c0:	080131f7 	.word	0x080131f7
 80130c4:	0801306b 	.word	0x0801306b
 80130c8:	0801306b 	.word	0x0801306b
 80130cc:	0801306b 	.word	0x0801306b
 80130d0:	0801306b 	.word	0x0801306b
 80130d4:	080131b3 	.word	0x080131b3
 80130d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80130dc:	e7da      	b.n	8013094 <_scanf_float+0x90>
 80130de:	290e      	cmp	r1, #14
 80130e0:	d8c3      	bhi.n	801306a <_scanf_float+0x66>
 80130e2:	a001      	add	r0, pc, #4	@ (adr r0, 80130e8 <_scanf_float+0xe4>)
 80130e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80130e8:	080131a3 	.word	0x080131a3
 80130ec:	0801306b 	.word	0x0801306b
 80130f0:	080131a3 	.word	0x080131a3
 80130f4:	08013233 	.word	0x08013233
 80130f8:	0801306b 	.word	0x0801306b
 80130fc:	08013145 	.word	0x08013145
 8013100:	08013189 	.word	0x08013189
 8013104:	08013189 	.word	0x08013189
 8013108:	08013189 	.word	0x08013189
 801310c:	08013189 	.word	0x08013189
 8013110:	08013189 	.word	0x08013189
 8013114:	08013189 	.word	0x08013189
 8013118:	08013189 	.word	0x08013189
 801311c:	08013189 	.word	0x08013189
 8013120:	08013189 	.word	0x08013189
 8013124:	2b6e      	cmp	r3, #110	@ 0x6e
 8013126:	d809      	bhi.n	801313c <_scanf_float+0x138>
 8013128:	2b60      	cmp	r3, #96	@ 0x60
 801312a:	d8b1      	bhi.n	8013090 <_scanf_float+0x8c>
 801312c:	2b54      	cmp	r3, #84	@ 0x54
 801312e:	d07b      	beq.n	8013228 <_scanf_float+0x224>
 8013130:	2b59      	cmp	r3, #89	@ 0x59
 8013132:	d19a      	bne.n	801306a <_scanf_float+0x66>
 8013134:	2d07      	cmp	r5, #7
 8013136:	d198      	bne.n	801306a <_scanf_float+0x66>
 8013138:	2508      	movs	r5, #8
 801313a:	e02f      	b.n	801319c <_scanf_float+0x198>
 801313c:	2b74      	cmp	r3, #116	@ 0x74
 801313e:	d073      	beq.n	8013228 <_scanf_float+0x224>
 8013140:	2b79      	cmp	r3, #121	@ 0x79
 8013142:	e7f6      	b.n	8013132 <_scanf_float+0x12e>
 8013144:	6821      	ldr	r1, [r4, #0]
 8013146:	05c8      	lsls	r0, r1, #23
 8013148:	d51e      	bpl.n	8013188 <_scanf_float+0x184>
 801314a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801314e:	6021      	str	r1, [r4, #0]
 8013150:	3701      	adds	r7, #1
 8013152:	f1bb 0f00 	cmp.w	fp, #0
 8013156:	d003      	beq.n	8013160 <_scanf_float+0x15c>
 8013158:	3201      	adds	r2, #1
 801315a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 801315e:	60a2      	str	r2, [r4, #8]
 8013160:	68a3      	ldr	r3, [r4, #8]
 8013162:	3b01      	subs	r3, #1
 8013164:	60a3      	str	r3, [r4, #8]
 8013166:	6923      	ldr	r3, [r4, #16]
 8013168:	3301      	adds	r3, #1
 801316a:	6123      	str	r3, [r4, #16]
 801316c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013170:	3b01      	subs	r3, #1
 8013172:	2b00      	cmp	r3, #0
 8013174:	f8c9 3004 	str.w	r3, [r9, #4]
 8013178:	f340 8082 	ble.w	8013280 <_scanf_float+0x27c>
 801317c:	f8d9 3000 	ldr.w	r3, [r9]
 8013180:	3301      	adds	r3, #1
 8013182:	f8c9 3000 	str.w	r3, [r9]
 8013186:	e762      	b.n	801304e <_scanf_float+0x4a>
 8013188:	eb1a 0105 	adds.w	r1, sl, r5
 801318c:	f47f af6d 	bne.w	801306a <_scanf_float+0x66>
 8013190:	6822      	ldr	r2, [r4, #0]
 8013192:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013196:	6022      	str	r2, [r4, #0]
 8013198:	460d      	mov	r5, r1
 801319a:	468a      	mov	sl, r1
 801319c:	f806 3b01 	strb.w	r3, [r6], #1
 80131a0:	e7de      	b.n	8013160 <_scanf_float+0x15c>
 80131a2:	6822      	ldr	r2, [r4, #0]
 80131a4:	0610      	lsls	r0, r2, #24
 80131a6:	f57f af60 	bpl.w	801306a <_scanf_float+0x66>
 80131aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80131ae:	6022      	str	r2, [r4, #0]
 80131b0:	e7f4      	b.n	801319c <_scanf_float+0x198>
 80131b2:	f1ba 0f00 	cmp.w	sl, #0
 80131b6:	d10c      	bne.n	80131d2 <_scanf_float+0x1ce>
 80131b8:	b977      	cbnz	r7, 80131d8 <_scanf_float+0x1d4>
 80131ba:	6822      	ldr	r2, [r4, #0]
 80131bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80131c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80131c4:	d108      	bne.n	80131d8 <_scanf_float+0x1d4>
 80131c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80131ca:	6022      	str	r2, [r4, #0]
 80131cc:	f04f 0a01 	mov.w	sl, #1
 80131d0:	e7e4      	b.n	801319c <_scanf_float+0x198>
 80131d2:	f1ba 0f02 	cmp.w	sl, #2
 80131d6:	d050      	beq.n	801327a <_scanf_float+0x276>
 80131d8:	2d01      	cmp	r5, #1
 80131da:	d002      	beq.n	80131e2 <_scanf_float+0x1de>
 80131dc:	2d04      	cmp	r5, #4
 80131de:	f47f af44 	bne.w	801306a <_scanf_float+0x66>
 80131e2:	3501      	adds	r5, #1
 80131e4:	b2ed      	uxtb	r5, r5
 80131e6:	e7d9      	b.n	801319c <_scanf_float+0x198>
 80131e8:	f1ba 0f01 	cmp.w	sl, #1
 80131ec:	f47f af3d 	bne.w	801306a <_scanf_float+0x66>
 80131f0:	f04f 0a02 	mov.w	sl, #2
 80131f4:	e7d2      	b.n	801319c <_scanf_float+0x198>
 80131f6:	b975      	cbnz	r5, 8013216 <_scanf_float+0x212>
 80131f8:	2f00      	cmp	r7, #0
 80131fa:	f47f af37 	bne.w	801306c <_scanf_float+0x68>
 80131fe:	6822      	ldr	r2, [r4, #0]
 8013200:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013204:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013208:	f040 8103 	bne.w	8013412 <_scanf_float+0x40e>
 801320c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013210:	6022      	str	r2, [r4, #0]
 8013212:	2501      	movs	r5, #1
 8013214:	e7c2      	b.n	801319c <_scanf_float+0x198>
 8013216:	2d03      	cmp	r5, #3
 8013218:	d0e3      	beq.n	80131e2 <_scanf_float+0x1de>
 801321a:	2d05      	cmp	r5, #5
 801321c:	e7df      	b.n	80131de <_scanf_float+0x1da>
 801321e:	2d02      	cmp	r5, #2
 8013220:	f47f af23 	bne.w	801306a <_scanf_float+0x66>
 8013224:	2503      	movs	r5, #3
 8013226:	e7b9      	b.n	801319c <_scanf_float+0x198>
 8013228:	2d06      	cmp	r5, #6
 801322a:	f47f af1e 	bne.w	801306a <_scanf_float+0x66>
 801322e:	2507      	movs	r5, #7
 8013230:	e7b4      	b.n	801319c <_scanf_float+0x198>
 8013232:	6822      	ldr	r2, [r4, #0]
 8013234:	0591      	lsls	r1, r2, #22
 8013236:	f57f af18 	bpl.w	801306a <_scanf_float+0x66>
 801323a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801323e:	6022      	str	r2, [r4, #0]
 8013240:	9702      	str	r7, [sp, #8]
 8013242:	e7ab      	b.n	801319c <_scanf_float+0x198>
 8013244:	6822      	ldr	r2, [r4, #0]
 8013246:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801324a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801324e:	d005      	beq.n	801325c <_scanf_float+0x258>
 8013250:	0550      	lsls	r0, r2, #21
 8013252:	f57f af0a 	bpl.w	801306a <_scanf_float+0x66>
 8013256:	2f00      	cmp	r7, #0
 8013258:	f000 80db 	beq.w	8013412 <_scanf_float+0x40e>
 801325c:	0591      	lsls	r1, r2, #22
 801325e:	bf58      	it	pl
 8013260:	9902      	ldrpl	r1, [sp, #8]
 8013262:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013266:	bf58      	it	pl
 8013268:	1a79      	subpl	r1, r7, r1
 801326a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801326e:	bf58      	it	pl
 8013270:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013274:	6022      	str	r2, [r4, #0]
 8013276:	2700      	movs	r7, #0
 8013278:	e790      	b.n	801319c <_scanf_float+0x198>
 801327a:	f04f 0a03 	mov.w	sl, #3
 801327e:	e78d      	b.n	801319c <_scanf_float+0x198>
 8013280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013284:	4649      	mov	r1, r9
 8013286:	4640      	mov	r0, r8
 8013288:	4798      	blx	r3
 801328a:	2800      	cmp	r0, #0
 801328c:	f43f aedf 	beq.w	801304e <_scanf_float+0x4a>
 8013290:	e6eb      	b.n	801306a <_scanf_float+0x66>
 8013292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801329a:	464a      	mov	r2, r9
 801329c:	4640      	mov	r0, r8
 801329e:	4798      	blx	r3
 80132a0:	6923      	ldr	r3, [r4, #16]
 80132a2:	3b01      	subs	r3, #1
 80132a4:	6123      	str	r3, [r4, #16]
 80132a6:	e6eb      	b.n	8013080 <_scanf_float+0x7c>
 80132a8:	1e6b      	subs	r3, r5, #1
 80132aa:	2b06      	cmp	r3, #6
 80132ac:	d824      	bhi.n	80132f8 <_scanf_float+0x2f4>
 80132ae:	2d02      	cmp	r5, #2
 80132b0:	d836      	bhi.n	8013320 <_scanf_float+0x31c>
 80132b2:	9b01      	ldr	r3, [sp, #4]
 80132b4:	429e      	cmp	r6, r3
 80132b6:	f67f aee7 	bls.w	8013088 <_scanf_float+0x84>
 80132ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80132be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80132c2:	464a      	mov	r2, r9
 80132c4:	4640      	mov	r0, r8
 80132c6:	4798      	blx	r3
 80132c8:	6923      	ldr	r3, [r4, #16]
 80132ca:	3b01      	subs	r3, #1
 80132cc:	6123      	str	r3, [r4, #16]
 80132ce:	e7f0      	b.n	80132b2 <_scanf_float+0x2ae>
 80132d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80132d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80132d8:	464a      	mov	r2, r9
 80132da:	4640      	mov	r0, r8
 80132dc:	4798      	blx	r3
 80132de:	6923      	ldr	r3, [r4, #16]
 80132e0:	3b01      	subs	r3, #1
 80132e2:	6123      	str	r3, [r4, #16]
 80132e4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80132e8:	fa5f fa8a 	uxtb.w	sl, sl
 80132ec:	f1ba 0f02 	cmp.w	sl, #2
 80132f0:	d1ee      	bne.n	80132d0 <_scanf_float+0x2cc>
 80132f2:	3d03      	subs	r5, #3
 80132f4:	b2ed      	uxtb	r5, r5
 80132f6:	1b76      	subs	r6, r6, r5
 80132f8:	6823      	ldr	r3, [r4, #0]
 80132fa:	05da      	lsls	r2, r3, #23
 80132fc:	d530      	bpl.n	8013360 <_scanf_float+0x35c>
 80132fe:	055b      	lsls	r3, r3, #21
 8013300:	d511      	bpl.n	8013326 <_scanf_float+0x322>
 8013302:	9b01      	ldr	r3, [sp, #4]
 8013304:	429e      	cmp	r6, r3
 8013306:	f67f aebf 	bls.w	8013088 <_scanf_float+0x84>
 801330a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801330e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013312:	464a      	mov	r2, r9
 8013314:	4640      	mov	r0, r8
 8013316:	4798      	blx	r3
 8013318:	6923      	ldr	r3, [r4, #16]
 801331a:	3b01      	subs	r3, #1
 801331c:	6123      	str	r3, [r4, #16]
 801331e:	e7f0      	b.n	8013302 <_scanf_float+0x2fe>
 8013320:	46aa      	mov	sl, r5
 8013322:	46b3      	mov	fp, r6
 8013324:	e7de      	b.n	80132e4 <_scanf_float+0x2e0>
 8013326:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801332a:	6923      	ldr	r3, [r4, #16]
 801332c:	2965      	cmp	r1, #101	@ 0x65
 801332e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8013332:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8013336:	6123      	str	r3, [r4, #16]
 8013338:	d00c      	beq.n	8013354 <_scanf_float+0x350>
 801333a:	2945      	cmp	r1, #69	@ 0x45
 801333c:	d00a      	beq.n	8013354 <_scanf_float+0x350>
 801333e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013342:	464a      	mov	r2, r9
 8013344:	4640      	mov	r0, r8
 8013346:	4798      	blx	r3
 8013348:	6923      	ldr	r3, [r4, #16]
 801334a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801334e:	3b01      	subs	r3, #1
 8013350:	1eb5      	subs	r5, r6, #2
 8013352:	6123      	str	r3, [r4, #16]
 8013354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013358:	464a      	mov	r2, r9
 801335a:	4640      	mov	r0, r8
 801335c:	4798      	blx	r3
 801335e:	462e      	mov	r6, r5
 8013360:	6822      	ldr	r2, [r4, #0]
 8013362:	f012 0210 	ands.w	r2, r2, #16
 8013366:	d001      	beq.n	801336c <_scanf_float+0x368>
 8013368:	2000      	movs	r0, #0
 801336a:	e68e      	b.n	801308a <_scanf_float+0x86>
 801336c:	7032      	strb	r2, [r6, #0]
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013378:	d125      	bne.n	80133c6 <_scanf_float+0x3c2>
 801337a:	9b02      	ldr	r3, [sp, #8]
 801337c:	429f      	cmp	r7, r3
 801337e:	d00a      	beq.n	8013396 <_scanf_float+0x392>
 8013380:	1bda      	subs	r2, r3, r7
 8013382:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013386:	429e      	cmp	r6, r3
 8013388:	bf28      	it	cs
 801338a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801338e:	4922      	ldr	r1, [pc, #136]	@ (8013418 <_scanf_float+0x414>)
 8013390:	4630      	mov	r0, r6
 8013392:	f000 f851 	bl	8013438 <siprintf>
 8013396:	9901      	ldr	r1, [sp, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	4640      	mov	r0, r8
 801339c:	f000 ff14 	bl	80141c8 <_strtod_r>
 80133a0:	9b03      	ldr	r3, [sp, #12]
 80133a2:	6821      	ldr	r1, [r4, #0]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f011 0f02 	tst.w	r1, #2
 80133aa:	ec57 6b10 	vmov	r6, r7, d0
 80133ae:	f103 0204 	add.w	r2, r3, #4
 80133b2:	d015      	beq.n	80133e0 <_scanf_float+0x3dc>
 80133b4:	9903      	ldr	r1, [sp, #12]
 80133b6:	600a      	str	r2, [r1, #0]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	e9c3 6700 	strd	r6, r7, [r3]
 80133be:	68e3      	ldr	r3, [r4, #12]
 80133c0:	3301      	adds	r3, #1
 80133c2:	60e3      	str	r3, [r4, #12]
 80133c4:	e7d0      	b.n	8013368 <_scanf_float+0x364>
 80133c6:	9b04      	ldr	r3, [sp, #16]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d0e4      	beq.n	8013396 <_scanf_float+0x392>
 80133cc:	9905      	ldr	r1, [sp, #20]
 80133ce:	230a      	movs	r3, #10
 80133d0:	3101      	adds	r1, #1
 80133d2:	4640      	mov	r0, r8
 80133d4:	f000 ff78 	bl	80142c8 <_strtol_r>
 80133d8:	9b04      	ldr	r3, [sp, #16]
 80133da:	9e05      	ldr	r6, [sp, #20]
 80133dc:	1ac2      	subs	r2, r0, r3
 80133de:	e7d0      	b.n	8013382 <_scanf_float+0x37e>
 80133e0:	f011 0f04 	tst.w	r1, #4
 80133e4:	9903      	ldr	r1, [sp, #12]
 80133e6:	600a      	str	r2, [r1, #0]
 80133e8:	d1e6      	bne.n	80133b8 <_scanf_float+0x3b4>
 80133ea:	681d      	ldr	r5, [r3, #0]
 80133ec:	4632      	mov	r2, r6
 80133ee:	463b      	mov	r3, r7
 80133f0:	4630      	mov	r0, r6
 80133f2:	4639      	mov	r1, r7
 80133f4:	f7ed fba2 	bl	8000b3c <__aeabi_dcmpun>
 80133f8:	b128      	cbz	r0, 8013406 <_scanf_float+0x402>
 80133fa:	4808      	ldr	r0, [pc, #32]	@ (801341c <_scanf_float+0x418>)
 80133fc:	f001 f870 	bl	80144e0 <nanf>
 8013400:	ed85 0a00 	vstr	s0, [r5]
 8013404:	e7db      	b.n	80133be <_scanf_float+0x3ba>
 8013406:	4630      	mov	r0, r6
 8013408:	4639      	mov	r1, r7
 801340a:	f7ed fbf5 	bl	8000bf8 <__aeabi_d2f>
 801340e:	6028      	str	r0, [r5, #0]
 8013410:	e7d5      	b.n	80133be <_scanf_float+0x3ba>
 8013412:	2700      	movs	r7, #0
 8013414:	e62e      	b.n	8013074 <_scanf_float+0x70>
 8013416:	bf00      	nop
 8013418:	080181a8 	.word	0x080181a8
 801341c:	08018349 	.word	0x08018349

08013420 <__malloc_lock>:
 8013420:	4801      	ldr	r0, [pc, #4]	@ (8013428 <__malloc_lock+0x8>)
 8013422:	f001 b83e 	b.w	80144a2 <__retarget_lock_acquire_recursive>
 8013426:	bf00      	nop
 8013428:	200024b8 	.word	0x200024b8

0801342c <__malloc_unlock>:
 801342c:	4801      	ldr	r0, [pc, #4]	@ (8013434 <__malloc_unlock+0x8>)
 801342e:	f001 b839 	b.w	80144a4 <__retarget_lock_release_recursive>
 8013432:	bf00      	nop
 8013434:	200024b8 	.word	0x200024b8

08013438 <siprintf>:
 8013438:	b40e      	push	{r1, r2, r3}
 801343a:	b510      	push	{r4, lr}
 801343c:	b09d      	sub	sp, #116	@ 0x74
 801343e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013440:	9002      	str	r0, [sp, #8]
 8013442:	9006      	str	r0, [sp, #24]
 8013444:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013448:	480a      	ldr	r0, [pc, #40]	@ (8013474 <siprintf+0x3c>)
 801344a:	9107      	str	r1, [sp, #28]
 801344c:	9104      	str	r1, [sp, #16]
 801344e:	490a      	ldr	r1, [pc, #40]	@ (8013478 <siprintf+0x40>)
 8013450:	f853 2b04 	ldr.w	r2, [r3], #4
 8013454:	9105      	str	r1, [sp, #20]
 8013456:	2400      	movs	r4, #0
 8013458:	a902      	add	r1, sp, #8
 801345a:	6800      	ldr	r0, [r0, #0]
 801345c:	9301      	str	r3, [sp, #4]
 801345e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013460:	f002 fa7c 	bl	801595c <_svfiprintf_r>
 8013464:	9b02      	ldr	r3, [sp, #8]
 8013466:	701c      	strb	r4, [r3, #0]
 8013468:	b01d      	add	sp, #116	@ 0x74
 801346a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801346e:	b003      	add	sp, #12
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop
 8013474:	200001d4 	.word	0x200001d4
 8013478:	ffff0208 	.word	0xffff0208

0801347c <std>:
 801347c:	2300      	movs	r3, #0
 801347e:	b510      	push	{r4, lr}
 8013480:	4604      	mov	r4, r0
 8013482:	e9c0 3300 	strd	r3, r3, [r0]
 8013486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801348a:	6083      	str	r3, [r0, #8]
 801348c:	8181      	strh	r1, [r0, #12]
 801348e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013490:	81c2      	strh	r2, [r0, #14]
 8013492:	6183      	str	r3, [r0, #24]
 8013494:	4619      	mov	r1, r3
 8013496:	2208      	movs	r2, #8
 8013498:	305c      	adds	r0, #92	@ 0x5c
 801349a:	f000 ffad 	bl	80143f8 <memset>
 801349e:	4b0d      	ldr	r3, [pc, #52]	@ (80134d4 <std+0x58>)
 80134a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80134a2:	4b0d      	ldr	r3, [pc, #52]	@ (80134d8 <std+0x5c>)
 80134a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80134a6:	4b0d      	ldr	r3, [pc, #52]	@ (80134dc <std+0x60>)
 80134a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80134aa:	4b0d      	ldr	r3, [pc, #52]	@ (80134e0 <std+0x64>)
 80134ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80134ae:	4b0d      	ldr	r3, [pc, #52]	@ (80134e4 <std+0x68>)
 80134b0:	6224      	str	r4, [r4, #32]
 80134b2:	429c      	cmp	r4, r3
 80134b4:	d006      	beq.n	80134c4 <std+0x48>
 80134b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80134ba:	4294      	cmp	r4, r2
 80134bc:	d002      	beq.n	80134c4 <std+0x48>
 80134be:	33d0      	adds	r3, #208	@ 0xd0
 80134c0:	429c      	cmp	r4, r3
 80134c2:	d105      	bne.n	80134d0 <std+0x54>
 80134c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80134c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134cc:	f000 bfe8 	b.w	80144a0 <__retarget_lock_init_recursive>
 80134d0:	bd10      	pop	{r4, pc}
 80134d2:	bf00      	nop
 80134d4:	080168a9 	.word	0x080168a9
 80134d8:	080168cb 	.word	0x080168cb
 80134dc:	08016903 	.word	0x08016903
 80134e0:	08016927 	.word	0x08016927
 80134e4:	2000237c 	.word	0x2000237c

080134e8 <stdio_exit_handler>:
 80134e8:	4a02      	ldr	r2, [pc, #8]	@ (80134f4 <stdio_exit_handler+0xc>)
 80134ea:	4903      	ldr	r1, [pc, #12]	@ (80134f8 <stdio_exit_handler+0x10>)
 80134ec:	4803      	ldr	r0, [pc, #12]	@ (80134fc <stdio_exit_handler+0x14>)
 80134ee:	f000 beed 	b.w	80142cc <_fwalk_sglue>
 80134f2:	bf00      	nop
 80134f4:	2000005c 	.word	0x2000005c
 80134f8:	08015f05 	.word	0x08015f05
 80134fc:	200001d8 	.word	0x200001d8

08013500 <cleanup_stdio>:
 8013500:	6841      	ldr	r1, [r0, #4]
 8013502:	4b0c      	ldr	r3, [pc, #48]	@ (8013534 <cleanup_stdio+0x34>)
 8013504:	4299      	cmp	r1, r3
 8013506:	b510      	push	{r4, lr}
 8013508:	4604      	mov	r4, r0
 801350a:	d001      	beq.n	8013510 <cleanup_stdio+0x10>
 801350c:	f002 fcfa 	bl	8015f04 <_fflush_r>
 8013510:	68a1      	ldr	r1, [r4, #8]
 8013512:	4b09      	ldr	r3, [pc, #36]	@ (8013538 <cleanup_stdio+0x38>)
 8013514:	4299      	cmp	r1, r3
 8013516:	d002      	beq.n	801351e <cleanup_stdio+0x1e>
 8013518:	4620      	mov	r0, r4
 801351a:	f002 fcf3 	bl	8015f04 <_fflush_r>
 801351e:	68e1      	ldr	r1, [r4, #12]
 8013520:	4b06      	ldr	r3, [pc, #24]	@ (801353c <cleanup_stdio+0x3c>)
 8013522:	4299      	cmp	r1, r3
 8013524:	d004      	beq.n	8013530 <cleanup_stdio+0x30>
 8013526:	4620      	mov	r0, r4
 8013528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801352c:	f002 bcea 	b.w	8015f04 <_fflush_r>
 8013530:	bd10      	pop	{r4, pc}
 8013532:	bf00      	nop
 8013534:	2000237c 	.word	0x2000237c
 8013538:	200023e4 	.word	0x200023e4
 801353c:	2000244c 	.word	0x2000244c

08013540 <global_stdio_init.part.0>:
 8013540:	b510      	push	{r4, lr}
 8013542:	4b0b      	ldr	r3, [pc, #44]	@ (8013570 <global_stdio_init.part.0+0x30>)
 8013544:	4c0b      	ldr	r4, [pc, #44]	@ (8013574 <global_stdio_init.part.0+0x34>)
 8013546:	4a0c      	ldr	r2, [pc, #48]	@ (8013578 <global_stdio_init.part.0+0x38>)
 8013548:	601a      	str	r2, [r3, #0]
 801354a:	4620      	mov	r0, r4
 801354c:	2200      	movs	r2, #0
 801354e:	2104      	movs	r1, #4
 8013550:	f7ff ff94 	bl	801347c <std>
 8013554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013558:	2201      	movs	r2, #1
 801355a:	2109      	movs	r1, #9
 801355c:	f7ff ff8e 	bl	801347c <std>
 8013560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013564:	2202      	movs	r2, #2
 8013566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801356a:	2112      	movs	r1, #18
 801356c:	f7ff bf86 	b.w	801347c <std>
 8013570:	200024b4 	.word	0x200024b4
 8013574:	2000237c 	.word	0x2000237c
 8013578:	080134e9 	.word	0x080134e9

0801357c <__sfp_lock_acquire>:
 801357c:	4801      	ldr	r0, [pc, #4]	@ (8013584 <__sfp_lock_acquire+0x8>)
 801357e:	f000 bf90 	b.w	80144a2 <__retarget_lock_acquire_recursive>
 8013582:	bf00      	nop
 8013584:	200024b9 	.word	0x200024b9

08013588 <__sfp_lock_release>:
 8013588:	4801      	ldr	r0, [pc, #4]	@ (8013590 <__sfp_lock_release+0x8>)
 801358a:	f000 bf8b 	b.w	80144a4 <__retarget_lock_release_recursive>
 801358e:	bf00      	nop
 8013590:	200024b9 	.word	0x200024b9

08013594 <__sinit>:
 8013594:	b510      	push	{r4, lr}
 8013596:	4604      	mov	r4, r0
 8013598:	f7ff fff0 	bl	801357c <__sfp_lock_acquire>
 801359c:	6a23      	ldr	r3, [r4, #32]
 801359e:	b11b      	cbz	r3, 80135a8 <__sinit+0x14>
 80135a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135a4:	f7ff bff0 	b.w	8013588 <__sfp_lock_release>
 80135a8:	4b04      	ldr	r3, [pc, #16]	@ (80135bc <__sinit+0x28>)
 80135aa:	6223      	str	r3, [r4, #32]
 80135ac:	4b04      	ldr	r3, [pc, #16]	@ (80135c0 <__sinit+0x2c>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d1f5      	bne.n	80135a0 <__sinit+0xc>
 80135b4:	f7ff ffc4 	bl	8013540 <global_stdio_init.part.0>
 80135b8:	e7f2      	b.n	80135a0 <__sinit+0xc>
 80135ba:	bf00      	nop
 80135bc:	08013501 	.word	0x08013501
 80135c0:	200024b4 	.word	0x200024b4

080135c4 <sulp>:
 80135c4:	b570      	push	{r4, r5, r6, lr}
 80135c6:	4604      	mov	r4, r0
 80135c8:	460d      	mov	r5, r1
 80135ca:	ec45 4b10 	vmov	d0, r4, r5
 80135ce:	4616      	mov	r6, r2
 80135d0:	f003 f82c 	bl	801662c <__ulp>
 80135d4:	ec51 0b10 	vmov	r0, r1, d0
 80135d8:	b17e      	cbz	r6, 80135fa <sulp+0x36>
 80135da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	dd09      	ble.n	80135fa <sulp+0x36>
 80135e6:	051b      	lsls	r3, r3, #20
 80135e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80135ec:	2400      	movs	r4, #0
 80135ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80135f2:	4622      	mov	r2, r4
 80135f4:	462b      	mov	r3, r5
 80135f6:	f7ed f807 	bl	8000608 <__aeabi_dmul>
 80135fa:	ec41 0b10 	vmov	d0, r0, r1
 80135fe:	bd70      	pop	{r4, r5, r6, pc}

08013600 <_strtod_l>:
 8013600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013604:	b09f      	sub	sp, #124	@ 0x7c
 8013606:	460c      	mov	r4, r1
 8013608:	9217      	str	r2, [sp, #92]	@ 0x5c
 801360a:	2200      	movs	r2, #0
 801360c:	921a      	str	r2, [sp, #104]	@ 0x68
 801360e:	9005      	str	r0, [sp, #20]
 8013610:	f04f 0a00 	mov.w	sl, #0
 8013614:	f04f 0b00 	mov.w	fp, #0
 8013618:	460a      	mov	r2, r1
 801361a:	9219      	str	r2, [sp, #100]	@ 0x64
 801361c:	7811      	ldrb	r1, [r2, #0]
 801361e:	292b      	cmp	r1, #43	@ 0x2b
 8013620:	d04a      	beq.n	80136b8 <_strtod_l+0xb8>
 8013622:	d838      	bhi.n	8013696 <_strtod_l+0x96>
 8013624:	290d      	cmp	r1, #13
 8013626:	d832      	bhi.n	801368e <_strtod_l+0x8e>
 8013628:	2908      	cmp	r1, #8
 801362a:	d832      	bhi.n	8013692 <_strtod_l+0x92>
 801362c:	2900      	cmp	r1, #0
 801362e:	d03b      	beq.n	80136a8 <_strtod_l+0xa8>
 8013630:	2200      	movs	r2, #0
 8013632:	920e      	str	r2, [sp, #56]	@ 0x38
 8013634:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013636:	782a      	ldrb	r2, [r5, #0]
 8013638:	2a30      	cmp	r2, #48	@ 0x30
 801363a:	f040 80b2 	bne.w	80137a2 <_strtod_l+0x1a2>
 801363e:	786a      	ldrb	r2, [r5, #1]
 8013640:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013644:	2a58      	cmp	r2, #88	@ 0x58
 8013646:	d16e      	bne.n	8013726 <_strtod_l+0x126>
 8013648:	9302      	str	r3, [sp, #8]
 801364a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	4a8f      	ldr	r2, [pc, #572]	@ (8013890 <_strtod_l+0x290>)
 8013654:	9805      	ldr	r0, [sp, #20]
 8013656:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013658:	a919      	add	r1, sp, #100	@ 0x64
 801365a:	f001 fe53 	bl	8015304 <__gethex>
 801365e:	f010 060f 	ands.w	r6, r0, #15
 8013662:	4604      	mov	r4, r0
 8013664:	d005      	beq.n	8013672 <_strtod_l+0x72>
 8013666:	2e06      	cmp	r6, #6
 8013668:	d128      	bne.n	80136bc <_strtod_l+0xbc>
 801366a:	3501      	adds	r5, #1
 801366c:	2300      	movs	r3, #0
 801366e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013670:	930e      	str	r3, [sp, #56]	@ 0x38
 8013672:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013674:	2b00      	cmp	r3, #0
 8013676:	f040 858e 	bne.w	8014196 <_strtod_l+0xb96>
 801367a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801367c:	b1cb      	cbz	r3, 80136b2 <_strtod_l+0xb2>
 801367e:	4652      	mov	r2, sl
 8013680:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013684:	ec43 2b10 	vmov	d0, r2, r3
 8013688:	b01f      	add	sp, #124	@ 0x7c
 801368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368e:	2920      	cmp	r1, #32
 8013690:	d1ce      	bne.n	8013630 <_strtod_l+0x30>
 8013692:	3201      	adds	r2, #1
 8013694:	e7c1      	b.n	801361a <_strtod_l+0x1a>
 8013696:	292d      	cmp	r1, #45	@ 0x2d
 8013698:	d1ca      	bne.n	8013630 <_strtod_l+0x30>
 801369a:	2101      	movs	r1, #1
 801369c:	910e      	str	r1, [sp, #56]	@ 0x38
 801369e:	1c51      	adds	r1, r2, #1
 80136a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80136a2:	7852      	ldrb	r2, [r2, #1]
 80136a4:	2a00      	cmp	r2, #0
 80136a6:	d1c5      	bne.n	8013634 <_strtod_l+0x34>
 80136a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80136aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f040 8570 	bne.w	8014192 <_strtod_l+0xb92>
 80136b2:	4652      	mov	r2, sl
 80136b4:	465b      	mov	r3, fp
 80136b6:	e7e5      	b.n	8013684 <_strtod_l+0x84>
 80136b8:	2100      	movs	r1, #0
 80136ba:	e7ef      	b.n	801369c <_strtod_l+0x9c>
 80136bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80136be:	b13a      	cbz	r2, 80136d0 <_strtod_l+0xd0>
 80136c0:	2135      	movs	r1, #53	@ 0x35
 80136c2:	a81c      	add	r0, sp, #112	@ 0x70
 80136c4:	f003 f8ac 	bl	8016820 <__copybits>
 80136c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136ca:	9805      	ldr	r0, [sp, #20]
 80136cc:	f002 fc82 	bl	8015fd4 <_Bfree>
 80136d0:	3e01      	subs	r6, #1
 80136d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80136d4:	2e04      	cmp	r6, #4
 80136d6:	d806      	bhi.n	80136e6 <_strtod_l+0xe6>
 80136d8:	e8df f006 	tbb	[pc, r6]
 80136dc:	201d0314 	.word	0x201d0314
 80136e0:	14          	.byte	0x14
 80136e1:	00          	.byte	0x00
 80136e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80136e6:	05e1      	lsls	r1, r4, #23
 80136e8:	bf48      	it	mi
 80136ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80136ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80136f2:	0d1b      	lsrs	r3, r3, #20
 80136f4:	051b      	lsls	r3, r3, #20
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1bb      	bne.n	8013672 <_strtod_l+0x72>
 80136fa:	f000 fea7 	bl	801444c <__errno>
 80136fe:	2322      	movs	r3, #34	@ 0x22
 8013700:	6003      	str	r3, [r0, #0]
 8013702:	e7b6      	b.n	8013672 <_strtod_l+0x72>
 8013704:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013708:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801370c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013710:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013714:	e7e7      	b.n	80136e6 <_strtod_l+0xe6>
 8013716:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013898 <_strtod_l+0x298>
 801371a:	e7e4      	b.n	80136e6 <_strtod_l+0xe6>
 801371c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013720:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013724:	e7df      	b.n	80136e6 <_strtod_l+0xe6>
 8013726:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013728:	1c5a      	adds	r2, r3, #1
 801372a:	9219      	str	r2, [sp, #100]	@ 0x64
 801372c:	785b      	ldrb	r3, [r3, #1]
 801372e:	2b30      	cmp	r3, #48	@ 0x30
 8013730:	d0f9      	beq.n	8013726 <_strtod_l+0x126>
 8013732:	2b00      	cmp	r3, #0
 8013734:	d09d      	beq.n	8013672 <_strtod_l+0x72>
 8013736:	2301      	movs	r3, #1
 8013738:	2700      	movs	r7, #0
 801373a:	9308      	str	r3, [sp, #32]
 801373c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801373e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013740:	970b      	str	r7, [sp, #44]	@ 0x2c
 8013742:	46b9      	mov	r9, r7
 8013744:	220a      	movs	r2, #10
 8013746:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013748:	7805      	ldrb	r5, [r0, #0]
 801374a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801374e:	b2d9      	uxtb	r1, r3
 8013750:	2909      	cmp	r1, #9
 8013752:	d928      	bls.n	80137a6 <_strtod_l+0x1a6>
 8013754:	494f      	ldr	r1, [pc, #316]	@ (8013894 <_strtod_l+0x294>)
 8013756:	2201      	movs	r2, #1
 8013758:	f000 fe56 	bl	8014408 <strncmp>
 801375c:	2800      	cmp	r0, #0
 801375e:	d032      	beq.n	80137c6 <_strtod_l+0x1c6>
 8013760:	2000      	movs	r0, #0
 8013762:	462a      	mov	r2, r5
 8013764:	900a      	str	r0, [sp, #40]	@ 0x28
 8013766:	464d      	mov	r5, r9
 8013768:	4603      	mov	r3, r0
 801376a:	2a65      	cmp	r2, #101	@ 0x65
 801376c:	d001      	beq.n	8013772 <_strtod_l+0x172>
 801376e:	2a45      	cmp	r2, #69	@ 0x45
 8013770:	d114      	bne.n	801379c <_strtod_l+0x19c>
 8013772:	b91d      	cbnz	r5, 801377c <_strtod_l+0x17c>
 8013774:	9a08      	ldr	r2, [sp, #32]
 8013776:	4302      	orrs	r2, r0
 8013778:	d096      	beq.n	80136a8 <_strtod_l+0xa8>
 801377a:	2500      	movs	r5, #0
 801377c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801377e:	1c62      	adds	r2, r4, #1
 8013780:	9219      	str	r2, [sp, #100]	@ 0x64
 8013782:	7862      	ldrb	r2, [r4, #1]
 8013784:	2a2b      	cmp	r2, #43	@ 0x2b
 8013786:	d07a      	beq.n	801387e <_strtod_l+0x27e>
 8013788:	2a2d      	cmp	r2, #45	@ 0x2d
 801378a:	d07e      	beq.n	801388a <_strtod_l+0x28a>
 801378c:	f04f 0c00 	mov.w	ip, #0
 8013790:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013794:	2909      	cmp	r1, #9
 8013796:	f240 8085 	bls.w	80138a4 <_strtod_l+0x2a4>
 801379a:	9419      	str	r4, [sp, #100]	@ 0x64
 801379c:	f04f 0800 	mov.w	r8, #0
 80137a0:	e0a5      	b.n	80138ee <_strtod_l+0x2ee>
 80137a2:	2300      	movs	r3, #0
 80137a4:	e7c8      	b.n	8013738 <_strtod_l+0x138>
 80137a6:	f1b9 0f08 	cmp.w	r9, #8
 80137aa:	bfd8      	it	le
 80137ac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80137ae:	f100 0001 	add.w	r0, r0, #1
 80137b2:	bfda      	itte	le
 80137b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80137b8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80137ba:	fb02 3707 	mlagt	r7, r2, r7, r3
 80137be:	f109 0901 	add.w	r9, r9, #1
 80137c2:	9019      	str	r0, [sp, #100]	@ 0x64
 80137c4:	e7bf      	b.n	8013746 <_strtod_l+0x146>
 80137c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137c8:	1c5a      	adds	r2, r3, #1
 80137ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80137cc:	785a      	ldrb	r2, [r3, #1]
 80137ce:	f1b9 0f00 	cmp.w	r9, #0
 80137d2:	d03b      	beq.n	801384c <_strtod_l+0x24c>
 80137d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80137d6:	464d      	mov	r5, r9
 80137d8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80137dc:	2b09      	cmp	r3, #9
 80137de:	d912      	bls.n	8013806 <_strtod_l+0x206>
 80137e0:	2301      	movs	r3, #1
 80137e2:	e7c2      	b.n	801376a <_strtod_l+0x16a>
 80137e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137e6:	1c5a      	adds	r2, r3, #1
 80137e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80137ea:	785a      	ldrb	r2, [r3, #1]
 80137ec:	3001      	adds	r0, #1
 80137ee:	2a30      	cmp	r2, #48	@ 0x30
 80137f0:	d0f8      	beq.n	80137e4 <_strtod_l+0x1e4>
 80137f2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80137f6:	2b08      	cmp	r3, #8
 80137f8:	f200 84d2 	bhi.w	80141a0 <_strtod_l+0xba0>
 80137fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80137fe:	900a      	str	r0, [sp, #40]	@ 0x28
 8013800:	2000      	movs	r0, #0
 8013802:	930c      	str	r3, [sp, #48]	@ 0x30
 8013804:	4605      	mov	r5, r0
 8013806:	3a30      	subs	r2, #48	@ 0x30
 8013808:	f100 0301 	add.w	r3, r0, #1
 801380c:	d018      	beq.n	8013840 <_strtod_l+0x240>
 801380e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013810:	4419      	add	r1, r3
 8013812:	910a      	str	r1, [sp, #40]	@ 0x28
 8013814:	462e      	mov	r6, r5
 8013816:	f04f 0e0a 	mov.w	lr, #10
 801381a:	1c71      	adds	r1, r6, #1
 801381c:	eba1 0c05 	sub.w	ip, r1, r5
 8013820:	4563      	cmp	r3, ip
 8013822:	dc15      	bgt.n	8013850 <_strtod_l+0x250>
 8013824:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013828:	182b      	adds	r3, r5, r0
 801382a:	2b08      	cmp	r3, #8
 801382c:	f105 0501 	add.w	r5, r5, #1
 8013830:	4405      	add	r5, r0
 8013832:	dc1a      	bgt.n	801386a <_strtod_l+0x26a>
 8013834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013836:	230a      	movs	r3, #10
 8013838:	fb03 2301 	mla	r3, r3, r1, r2
 801383c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801383e:	2300      	movs	r3, #0
 8013840:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013842:	1c51      	adds	r1, r2, #1
 8013844:	9119      	str	r1, [sp, #100]	@ 0x64
 8013846:	7852      	ldrb	r2, [r2, #1]
 8013848:	4618      	mov	r0, r3
 801384a:	e7c5      	b.n	80137d8 <_strtod_l+0x1d8>
 801384c:	4648      	mov	r0, r9
 801384e:	e7ce      	b.n	80137ee <_strtod_l+0x1ee>
 8013850:	2e08      	cmp	r6, #8
 8013852:	dc05      	bgt.n	8013860 <_strtod_l+0x260>
 8013854:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013856:	fb0e f606 	mul.w	r6, lr, r6
 801385a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801385c:	460e      	mov	r6, r1
 801385e:	e7dc      	b.n	801381a <_strtod_l+0x21a>
 8013860:	2910      	cmp	r1, #16
 8013862:	bfd8      	it	le
 8013864:	fb0e f707 	mulle.w	r7, lr, r7
 8013868:	e7f8      	b.n	801385c <_strtod_l+0x25c>
 801386a:	2b0f      	cmp	r3, #15
 801386c:	bfdc      	itt	le
 801386e:	230a      	movle	r3, #10
 8013870:	fb03 2707 	mlale	r7, r3, r7, r2
 8013874:	e7e3      	b.n	801383e <_strtod_l+0x23e>
 8013876:	2300      	movs	r3, #0
 8013878:	930a      	str	r3, [sp, #40]	@ 0x28
 801387a:	2301      	movs	r3, #1
 801387c:	e77a      	b.n	8013774 <_strtod_l+0x174>
 801387e:	f04f 0c00 	mov.w	ip, #0
 8013882:	1ca2      	adds	r2, r4, #2
 8013884:	9219      	str	r2, [sp, #100]	@ 0x64
 8013886:	78a2      	ldrb	r2, [r4, #2]
 8013888:	e782      	b.n	8013790 <_strtod_l+0x190>
 801388a:	f04f 0c01 	mov.w	ip, #1
 801388e:	e7f8      	b.n	8013882 <_strtod_l+0x282>
 8013890:	08018360 	.word	0x08018360
 8013894:	080181ad 	.word	0x080181ad
 8013898:	7ff00000 	.word	0x7ff00000
 801389c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801389e:	1c51      	adds	r1, r2, #1
 80138a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80138a2:	7852      	ldrb	r2, [r2, #1]
 80138a4:	2a30      	cmp	r2, #48	@ 0x30
 80138a6:	d0f9      	beq.n	801389c <_strtod_l+0x29c>
 80138a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80138ac:	2908      	cmp	r1, #8
 80138ae:	f63f af75 	bhi.w	801379c <_strtod_l+0x19c>
 80138b2:	3a30      	subs	r2, #48	@ 0x30
 80138b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80138b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80138b8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80138ba:	f04f 080a 	mov.w	r8, #10
 80138be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80138c0:	1c56      	adds	r6, r2, #1
 80138c2:	9619      	str	r6, [sp, #100]	@ 0x64
 80138c4:	7852      	ldrb	r2, [r2, #1]
 80138c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80138ca:	f1be 0f09 	cmp.w	lr, #9
 80138ce:	d939      	bls.n	8013944 <_strtod_l+0x344>
 80138d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80138d2:	1a76      	subs	r6, r6, r1
 80138d4:	2e08      	cmp	r6, #8
 80138d6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80138da:	dc03      	bgt.n	80138e4 <_strtod_l+0x2e4>
 80138dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80138de:	4588      	cmp	r8, r1
 80138e0:	bfa8      	it	ge
 80138e2:	4688      	movge	r8, r1
 80138e4:	f1bc 0f00 	cmp.w	ip, #0
 80138e8:	d001      	beq.n	80138ee <_strtod_l+0x2ee>
 80138ea:	f1c8 0800 	rsb	r8, r8, #0
 80138ee:	2d00      	cmp	r5, #0
 80138f0:	d14e      	bne.n	8013990 <_strtod_l+0x390>
 80138f2:	9908      	ldr	r1, [sp, #32]
 80138f4:	4308      	orrs	r0, r1
 80138f6:	f47f aebc 	bne.w	8013672 <_strtod_l+0x72>
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	f47f aed4 	bne.w	80136a8 <_strtod_l+0xa8>
 8013900:	2a69      	cmp	r2, #105	@ 0x69
 8013902:	d028      	beq.n	8013956 <_strtod_l+0x356>
 8013904:	dc25      	bgt.n	8013952 <_strtod_l+0x352>
 8013906:	2a49      	cmp	r2, #73	@ 0x49
 8013908:	d025      	beq.n	8013956 <_strtod_l+0x356>
 801390a:	2a4e      	cmp	r2, #78	@ 0x4e
 801390c:	f47f aecc 	bne.w	80136a8 <_strtod_l+0xa8>
 8013910:	499a      	ldr	r1, [pc, #616]	@ (8013b7c <_strtod_l+0x57c>)
 8013912:	a819      	add	r0, sp, #100	@ 0x64
 8013914:	f001 ff18 	bl	8015748 <__match>
 8013918:	2800      	cmp	r0, #0
 801391a:	f43f aec5 	beq.w	80136a8 <_strtod_l+0xa8>
 801391e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	2b28      	cmp	r3, #40	@ 0x28
 8013924:	d12e      	bne.n	8013984 <_strtod_l+0x384>
 8013926:	4996      	ldr	r1, [pc, #600]	@ (8013b80 <_strtod_l+0x580>)
 8013928:	aa1c      	add	r2, sp, #112	@ 0x70
 801392a:	a819      	add	r0, sp, #100	@ 0x64
 801392c:	f001 ff20 	bl	8015770 <__hexnan>
 8013930:	2805      	cmp	r0, #5
 8013932:	d127      	bne.n	8013984 <_strtod_l+0x384>
 8013934:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013936:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801393a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801393e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013942:	e696      	b.n	8013672 <_strtod_l+0x72>
 8013944:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013946:	fb08 2101 	mla	r1, r8, r1, r2
 801394a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801394e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013950:	e7b5      	b.n	80138be <_strtod_l+0x2be>
 8013952:	2a6e      	cmp	r2, #110	@ 0x6e
 8013954:	e7da      	b.n	801390c <_strtod_l+0x30c>
 8013956:	498b      	ldr	r1, [pc, #556]	@ (8013b84 <_strtod_l+0x584>)
 8013958:	a819      	add	r0, sp, #100	@ 0x64
 801395a:	f001 fef5 	bl	8015748 <__match>
 801395e:	2800      	cmp	r0, #0
 8013960:	f43f aea2 	beq.w	80136a8 <_strtod_l+0xa8>
 8013964:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013966:	4988      	ldr	r1, [pc, #544]	@ (8013b88 <_strtod_l+0x588>)
 8013968:	3b01      	subs	r3, #1
 801396a:	a819      	add	r0, sp, #100	@ 0x64
 801396c:	9319      	str	r3, [sp, #100]	@ 0x64
 801396e:	f001 feeb 	bl	8015748 <__match>
 8013972:	b910      	cbnz	r0, 801397a <_strtod_l+0x37a>
 8013974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013976:	3301      	adds	r3, #1
 8013978:	9319      	str	r3, [sp, #100]	@ 0x64
 801397a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8013b98 <_strtod_l+0x598>
 801397e:	f04f 0a00 	mov.w	sl, #0
 8013982:	e676      	b.n	8013672 <_strtod_l+0x72>
 8013984:	4881      	ldr	r0, [pc, #516]	@ (8013b8c <_strtod_l+0x58c>)
 8013986:	f000 fda3 	bl	80144d0 <nan>
 801398a:	ec5b ab10 	vmov	sl, fp, d0
 801398e:	e670      	b.n	8013672 <_strtod_l+0x72>
 8013990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013992:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013994:	eba8 0303 	sub.w	r3, r8, r3
 8013998:	f1b9 0f00 	cmp.w	r9, #0
 801399c:	bf08      	it	eq
 801399e:	46a9      	moveq	r9, r5
 80139a0:	2d10      	cmp	r5, #16
 80139a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80139a4:	462c      	mov	r4, r5
 80139a6:	bfa8      	it	ge
 80139a8:	2410      	movge	r4, #16
 80139aa:	f7ec fdb3 	bl	8000514 <__aeabi_ui2d>
 80139ae:	2d09      	cmp	r5, #9
 80139b0:	4682      	mov	sl, r0
 80139b2:	468b      	mov	fp, r1
 80139b4:	dc13      	bgt.n	80139de <_strtod_l+0x3de>
 80139b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f43f ae5a 	beq.w	8013672 <_strtod_l+0x72>
 80139be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139c0:	dd78      	ble.n	8013ab4 <_strtod_l+0x4b4>
 80139c2:	2b16      	cmp	r3, #22
 80139c4:	dc5f      	bgt.n	8013a86 <_strtod_l+0x486>
 80139c6:	4972      	ldr	r1, [pc, #456]	@ (8013b90 <_strtod_l+0x590>)
 80139c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80139cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139d0:	4652      	mov	r2, sl
 80139d2:	465b      	mov	r3, fp
 80139d4:	f7ec fe18 	bl	8000608 <__aeabi_dmul>
 80139d8:	4682      	mov	sl, r0
 80139da:	468b      	mov	fp, r1
 80139dc:	e649      	b.n	8013672 <_strtod_l+0x72>
 80139de:	4b6c      	ldr	r3, [pc, #432]	@ (8013b90 <_strtod_l+0x590>)
 80139e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80139e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80139e8:	f7ec fe0e 	bl	8000608 <__aeabi_dmul>
 80139ec:	4682      	mov	sl, r0
 80139ee:	4638      	mov	r0, r7
 80139f0:	468b      	mov	fp, r1
 80139f2:	f7ec fd8f 	bl	8000514 <__aeabi_ui2d>
 80139f6:	4602      	mov	r2, r0
 80139f8:	460b      	mov	r3, r1
 80139fa:	4650      	mov	r0, sl
 80139fc:	4659      	mov	r1, fp
 80139fe:	f7ec fc4d 	bl	800029c <__adddf3>
 8013a02:	2d0f      	cmp	r5, #15
 8013a04:	4682      	mov	sl, r0
 8013a06:	468b      	mov	fp, r1
 8013a08:	ddd5      	ble.n	80139b6 <_strtod_l+0x3b6>
 8013a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a0c:	1b2c      	subs	r4, r5, r4
 8013a0e:	441c      	add	r4, r3
 8013a10:	2c00      	cmp	r4, #0
 8013a12:	f340 8093 	ble.w	8013b3c <_strtod_l+0x53c>
 8013a16:	f014 030f 	ands.w	r3, r4, #15
 8013a1a:	d00a      	beq.n	8013a32 <_strtod_l+0x432>
 8013a1c:	495c      	ldr	r1, [pc, #368]	@ (8013b90 <_strtod_l+0x590>)
 8013a1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a22:	4652      	mov	r2, sl
 8013a24:	465b      	mov	r3, fp
 8013a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a2a:	f7ec fded 	bl	8000608 <__aeabi_dmul>
 8013a2e:	4682      	mov	sl, r0
 8013a30:	468b      	mov	fp, r1
 8013a32:	f034 040f 	bics.w	r4, r4, #15
 8013a36:	d073      	beq.n	8013b20 <_strtod_l+0x520>
 8013a38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013a3c:	dd49      	ble.n	8013ad2 <_strtod_l+0x4d2>
 8013a3e:	2400      	movs	r4, #0
 8013a40:	46a0      	mov	r8, r4
 8013a42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013a44:	46a1      	mov	r9, r4
 8013a46:	9a05      	ldr	r2, [sp, #20]
 8013a48:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8013b98 <_strtod_l+0x598>
 8013a4c:	2322      	movs	r3, #34	@ 0x22
 8013a4e:	6013      	str	r3, [r2, #0]
 8013a50:	f04f 0a00 	mov.w	sl, #0
 8013a54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	f43f ae0b 	beq.w	8013672 <_strtod_l+0x72>
 8013a5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013a5e:	9805      	ldr	r0, [sp, #20]
 8013a60:	f002 fab8 	bl	8015fd4 <_Bfree>
 8013a64:	9805      	ldr	r0, [sp, #20]
 8013a66:	4649      	mov	r1, r9
 8013a68:	f002 fab4 	bl	8015fd4 <_Bfree>
 8013a6c:	9805      	ldr	r0, [sp, #20]
 8013a6e:	4641      	mov	r1, r8
 8013a70:	f002 fab0 	bl	8015fd4 <_Bfree>
 8013a74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013a76:	9805      	ldr	r0, [sp, #20]
 8013a78:	f002 faac 	bl	8015fd4 <_Bfree>
 8013a7c:	9805      	ldr	r0, [sp, #20]
 8013a7e:	4621      	mov	r1, r4
 8013a80:	f002 faa8 	bl	8015fd4 <_Bfree>
 8013a84:	e5f5      	b.n	8013672 <_strtod_l+0x72>
 8013a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	dbbc      	blt.n	8013a0a <_strtod_l+0x40a>
 8013a90:	4c3f      	ldr	r4, [pc, #252]	@ (8013b90 <_strtod_l+0x590>)
 8013a92:	f1c5 050f 	rsb	r5, r5, #15
 8013a96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013a9a:	4652      	mov	r2, sl
 8013a9c:	465b      	mov	r3, fp
 8013a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013aa2:	f7ec fdb1 	bl	8000608 <__aeabi_dmul>
 8013aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aa8:	1b5d      	subs	r5, r3, r5
 8013aaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013aae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013ab2:	e78f      	b.n	80139d4 <_strtod_l+0x3d4>
 8013ab4:	3316      	adds	r3, #22
 8013ab6:	dba8      	blt.n	8013a0a <_strtod_l+0x40a>
 8013ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013aba:	eba3 0808 	sub.w	r8, r3, r8
 8013abe:	4b34      	ldr	r3, [pc, #208]	@ (8013b90 <_strtod_l+0x590>)
 8013ac0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013ac4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013ac8:	4650      	mov	r0, sl
 8013aca:	4659      	mov	r1, fp
 8013acc:	f7ec fec6 	bl	800085c <__aeabi_ddiv>
 8013ad0:	e782      	b.n	80139d8 <_strtod_l+0x3d8>
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	4f2f      	ldr	r7, [pc, #188]	@ (8013b94 <_strtod_l+0x594>)
 8013ad6:	1124      	asrs	r4, r4, #4
 8013ad8:	4650      	mov	r0, sl
 8013ada:	4659      	mov	r1, fp
 8013adc:	461e      	mov	r6, r3
 8013ade:	2c01      	cmp	r4, #1
 8013ae0:	dc21      	bgt.n	8013b26 <_strtod_l+0x526>
 8013ae2:	b10b      	cbz	r3, 8013ae8 <_strtod_l+0x4e8>
 8013ae4:	4682      	mov	sl, r0
 8013ae6:	468b      	mov	fp, r1
 8013ae8:	492a      	ldr	r1, [pc, #168]	@ (8013b94 <_strtod_l+0x594>)
 8013aea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013aee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013af2:	4652      	mov	r2, sl
 8013af4:	465b      	mov	r3, fp
 8013af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013afa:	f7ec fd85 	bl	8000608 <__aeabi_dmul>
 8013afe:	4b26      	ldr	r3, [pc, #152]	@ (8013b98 <_strtod_l+0x598>)
 8013b00:	460a      	mov	r2, r1
 8013b02:	400b      	ands	r3, r1
 8013b04:	4925      	ldr	r1, [pc, #148]	@ (8013b9c <_strtod_l+0x59c>)
 8013b06:	428b      	cmp	r3, r1
 8013b08:	4682      	mov	sl, r0
 8013b0a:	d898      	bhi.n	8013a3e <_strtod_l+0x43e>
 8013b0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013b10:	428b      	cmp	r3, r1
 8013b12:	bf86      	itte	hi
 8013b14:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013ba0 <_strtod_l+0x5a0>
 8013b18:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8013b1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013b20:	2300      	movs	r3, #0
 8013b22:	9308      	str	r3, [sp, #32]
 8013b24:	e076      	b.n	8013c14 <_strtod_l+0x614>
 8013b26:	07e2      	lsls	r2, r4, #31
 8013b28:	d504      	bpl.n	8013b34 <_strtod_l+0x534>
 8013b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b2e:	f7ec fd6b 	bl	8000608 <__aeabi_dmul>
 8013b32:	2301      	movs	r3, #1
 8013b34:	3601      	adds	r6, #1
 8013b36:	1064      	asrs	r4, r4, #1
 8013b38:	3708      	adds	r7, #8
 8013b3a:	e7d0      	b.n	8013ade <_strtod_l+0x4de>
 8013b3c:	d0f0      	beq.n	8013b20 <_strtod_l+0x520>
 8013b3e:	4264      	negs	r4, r4
 8013b40:	f014 020f 	ands.w	r2, r4, #15
 8013b44:	d00a      	beq.n	8013b5c <_strtod_l+0x55c>
 8013b46:	4b12      	ldr	r3, [pc, #72]	@ (8013b90 <_strtod_l+0x590>)
 8013b48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b4c:	4650      	mov	r0, sl
 8013b4e:	4659      	mov	r1, fp
 8013b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b54:	f7ec fe82 	bl	800085c <__aeabi_ddiv>
 8013b58:	4682      	mov	sl, r0
 8013b5a:	468b      	mov	fp, r1
 8013b5c:	1124      	asrs	r4, r4, #4
 8013b5e:	d0df      	beq.n	8013b20 <_strtod_l+0x520>
 8013b60:	2c1f      	cmp	r4, #31
 8013b62:	dd1f      	ble.n	8013ba4 <_strtod_l+0x5a4>
 8013b64:	2400      	movs	r4, #0
 8013b66:	46a0      	mov	r8, r4
 8013b68:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013b6a:	46a1      	mov	r9, r4
 8013b6c:	9a05      	ldr	r2, [sp, #20]
 8013b6e:	2322      	movs	r3, #34	@ 0x22
 8013b70:	f04f 0a00 	mov.w	sl, #0
 8013b74:	f04f 0b00 	mov.w	fp, #0
 8013b78:	6013      	str	r3, [r2, #0]
 8013b7a:	e76b      	b.n	8013a54 <_strtod_l+0x454>
 8013b7c:	08018181 	.word	0x08018181
 8013b80:	0801834c 	.word	0x0801834c
 8013b84:	08018179 	.word	0x08018179
 8013b88:	080181ba 	.word	0x080181ba
 8013b8c:	08018349 	.word	0x08018349
 8013b90:	080184d8 	.word	0x080184d8
 8013b94:	080184b0 	.word	0x080184b0
 8013b98:	7ff00000 	.word	0x7ff00000
 8013b9c:	7ca00000 	.word	0x7ca00000
 8013ba0:	7fefffff 	.word	0x7fefffff
 8013ba4:	f014 0310 	ands.w	r3, r4, #16
 8013ba8:	bf18      	it	ne
 8013baa:	236a      	movne	r3, #106	@ 0x6a
 8013bac:	4ea9      	ldr	r6, [pc, #676]	@ (8013e54 <_strtod_l+0x854>)
 8013bae:	9308      	str	r3, [sp, #32]
 8013bb0:	4650      	mov	r0, sl
 8013bb2:	4659      	mov	r1, fp
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	07e7      	lsls	r7, r4, #31
 8013bb8:	d504      	bpl.n	8013bc4 <_strtod_l+0x5c4>
 8013bba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013bbe:	f7ec fd23 	bl	8000608 <__aeabi_dmul>
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	1064      	asrs	r4, r4, #1
 8013bc6:	f106 0608 	add.w	r6, r6, #8
 8013bca:	d1f4      	bne.n	8013bb6 <_strtod_l+0x5b6>
 8013bcc:	b10b      	cbz	r3, 8013bd2 <_strtod_l+0x5d2>
 8013bce:	4682      	mov	sl, r0
 8013bd0:	468b      	mov	fp, r1
 8013bd2:	9b08      	ldr	r3, [sp, #32]
 8013bd4:	b1b3      	cbz	r3, 8013c04 <_strtod_l+0x604>
 8013bd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013bda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	4659      	mov	r1, fp
 8013be2:	dd0f      	ble.n	8013c04 <_strtod_l+0x604>
 8013be4:	2b1f      	cmp	r3, #31
 8013be6:	dd56      	ble.n	8013c96 <_strtod_l+0x696>
 8013be8:	2b34      	cmp	r3, #52	@ 0x34
 8013bea:	bfde      	ittt	le
 8013bec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8013bf0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013bf4:	4093      	lslle	r3, r2
 8013bf6:	f04f 0a00 	mov.w	sl, #0
 8013bfa:	bfcc      	ite	gt
 8013bfc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013c00:	ea03 0b01 	andle.w	fp, r3, r1
 8013c04:	2200      	movs	r2, #0
 8013c06:	2300      	movs	r3, #0
 8013c08:	4650      	mov	r0, sl
 8013c0a:	4659      	mov	r1, fp
 8013c0c:	f7ec ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 8013c10:	2800      	cmp	r0, #0
 8013c12:	d1a7      	bne.n	8013b64 <_strtod_l+0x564>
 8013c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013c1a:	9805      	ldr	r0, [sp, #20]
 8013c1c:	462b      	mov	r3, r5
 8013c1e:	464a      	mov	r2, r9
 8013c20:	f002 fa40 	bl	80160a4 <__s2b>
 8013c24:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013c26:	2800      	cmp	r0, #0
 8013c28:	f43f af09 	beq.w	8013a3e <_strtod_l+0x43e>
 8013c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c30:	2a00      	cmp	r2, #0
 8013c32:	eba3 0308 	sub.w	r3, r3, r8
 8013c36:	bfa8      	it	ge
 8013c38:	2300      	movge	r3, #0
 8013c3a:	9312      	str	r3, [sp, #72]	@ 0x48
 8013c3c:	2400      	movs	r4, #0
 8013c3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c42:	9316      	str	r3, [sp, #88]	@ 0x58
 8013c44:	46a0      	mov	r8, r4
 8013c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c48:	9805      	ldr	r0, [sp, #20]
 8013c4a:	6859      	ldr	r1, [r3, #4]
 8013c4c:	f002 f982 	bl	8015f54 <_Balloc>
 8013c50:	4681      	mov	r9, r0
 8013c52:	2800      	cmp	r0, #0
 8013c54:	f43f aef7 	beq.w	8013a46 <_strtod_l+0x446>
 8013c58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c5a:	691a      	ldr	r2, [r3, #16]
 8013c5c:	3202      	adds	r2, #2
 8013c5e:	f103 010c 	add.w	r1, r3, #12
 8013c62:	0092      	lsls	r2, r2, #2
 8013c64:	300c      	adds	r0, #12
 8013c66:	f000 fc23 	bl	80144b0 <memcpy>
 8013c6a:	ec4b ab10 	vmov	d0, sl, fp
 8013c6e:	9805      	ldr	r0, [sp, #20]
 8013c70:	aa1c      	add	r2, sp, #112	@ 0x70
 8013c72:	a91b      	add	r1, sp, #108	@ 0x6c
 8013c74:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013c78:	f002 fd48 	bl	801670c <__d2b>
 8013c7c:	901a      	str	r0, [sp, #104]	@ 0x68
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	f43f aee1 	beq.w	8013a46 <_strtod_l+0x446>
 8013c84:	9805      	ldr	r0, [sp, #20]
 8013c86:	2101      	movs	r1, #1
 8013c88:	f002 faa2 	bl	80161d0 <__i2b>
 8013c8c:	4680      	mov	r8, r0
 8013c8e:	b948      	cbnz	r0, 8013ca4 <_strtod_l+0x6a4>
 8013c90:	f04f 0800 	mov.w	r8, #0
 8013c94:	e6d7      	b.n	8013a46 <_strtod_l+0x446>
 8013c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8013c9e:	ea03 0a0a 	and.w	sl, r3, sl
 8013ca2:	e7af      	b.n	8013c04 <_strtod_l+0x604>
 8013ca4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013ca6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013ca8:	2d00      	cmp	r5, #0
 8013caa:	bfab      	itete	ge
 8013cac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013cae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013cb0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013cb2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013cb4:	bfac      	ite	ge
 8013cb6:	18ef      	addge	r7, r5, r3
 8013cb8:	1b5e      	sublt	r6, r3, r5
 8013cba:	9b08      	ldr	r3, [sp, #32]
 8013cbc:	1aed      	subs	r5, r5, r3
 8013cbe:	4415      	add	r5, r2
 8013cc0:	4b65      	ldr	r3, [pc, #404]	@ (8013e58 <_strtod_l+0x858>)
 8013cc2:	3d01      	subs	r5, #1
 8013cc4:	429d      	cmp	r5, r3
 8013cc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013cca:	da50      	bge.n	8013d6e <_strtod_l+0x76e>
 8013ccc:	1b5b      	subs	r3, r3, r5
 8013cce:	2b1f      	cmp	r3, #31
 8013cd0:	eba2 0203 	sub.w	r2, r2, r3
 8013cd4:	f04f 0101 	mov.w	r1, #1
 8013cd8:	dc3d      	bgt.n	8013d56 <_strtod_l+0x756>
 8013cda:	fa01 f303 	lsl.w	r3, r1, r3
 8013cde:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ce4:	18bd      	adds	r5, r7, r2
 8013ce6:	9b08      	ldr	r3, [sp, #32]
 8013ce8:	42af      	cmp	r7, r5
 8013cea:	4416      	add	r6, r2
 8013cec:	441e      	add	r6, r3
 8013cee:	463b      	mov	r3, r7
 8013cf0:	bfa8      	it	ge
 8013cf2:	462b      	movge	r3, r5
 8013cf4:	42b3      	cmp	r3, r6
 8013cf6:	bfa8      	it	ge
 8013cf8:	4633      	movge	r3, r6
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	bfc2      	ittt	gt
 8013cfe:	1aed      	subgt	r5, r5, r3
 8013d00:	1af6      	subgt	r6, r6, r3
 8013d02:	1aff      	subgt	r7, r7, r3
 8013d04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	dd16      	ble.n	8013d38 <_strtod_l+0x738>
 8013d0a:	4641      	mov	r1, r8
 8013d0c:	9805      	ldr	r0, [sp, #20]
 8013d0e:	461a      	mov	r2, r3
 8013d10:	f002 fb16 	bl	8016340 <__pow5mult>
 8013d14:	4680      	mov	r8, r0
 8013d16:	2800      	cmp	r0, #0
 8013d18:	d0ba      	beq.n	8013c90 <_strtod_l+0x690>
 8013d1a:	4601      	mov	r1, r0
 8013d1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013d1e:	9805      	ldr	r0, [sp, #20]
 8013d20:	f002 fa6c 	bl	80161fc <__multiply>
 8013d24:	900a      	str	r0, [sp, #40]	@ 0x28
 8013d26:	2800      	cmp	r0, #0
 8013d28:	f43f ae8d 	beq.w	8013a46 <_strtod_l+0x446>
 8013d2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d2e:	9805      	ldr	r0, [sp, #20]
 8013d30:	f002 f950 	bl	8015fd4 <_Bfree>
 8013d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d36:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d38:	2d00      	cmp	r5, #0
 8013d3a:	dc1d      	bgt.n	8013d78 <_strtod_l+0x778>
 8013d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	dd23      	ble.n	8013d8a <_strtod_l+0x78a>
 8013d42:	4649      	mov	r1, r9
 8013d44:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013d46:	9805      	ldr	r0, [sp, #20]
 8013d48:	f002 fafa 	bl	8016340 <__pow5mult>
 8013d4c:	4681      	mov	r9, r0
 8013d4e:	b9e0      	cbnz	r0, 8013d8a <_strtod_l+0x78a>
 8013d50:	f04f 0900 	mov.w	r9, #0
 8013d54:	e677      	b.n	8013a46 <_strtod_l+0x446>
 8013d56:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013d5a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013d5e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013d62:	35e2      	adds	r5, #226	@ 0xe2
 8013d64:	fa01 f305 	lsl.w	r3, r1, r5
 8013d68:	9310      	str	r3, [sp, #64]	@ 0x40
 8013d6a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013d6c:	e7ba      	b.n	8013ce4 <_strtod_l+0x6e4>
 8013d6e:	2300      	movs	r3, #0
 8013d70:	9310      	str	r3, [sp, #64]	@ 0x40
 8013d72:	2301      	movs	r3, #1
 8013d74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013d76:	e7b5      	b.n	8013ce4 <_strtod_l+0x6e4>
 8013d78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d7a:	9805      	ldr	r0, [sp, #20]
 8013d7c:	462a      	mov	r2, r5
 8013d7e:	f002 fb39 	bl	80163f4 <__lshift>
 8013d82:	901a      	str	r0, [sp, #104]	@ 0x68
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d1d9      	bne.n	8013d3c <_strtod_l+0x73c>
 8013d88:	e65d      	b.n	8013a46 <_strtod_l+0x446>
 8013d8a:	2e00      	cmp	r6, #0
 8013d8c:	dd07      	ble.n	8013d9e <_strtod_l+0x79e>
 8013d8e:	4649      	mov	r1, r9
 8013d90:	9805      	ldr	r0, [sp, #20]
 8013d92:	4632      	mov	r2, r6
 8013d94:	f002 fb2e 	bl	80163f4 <__lshift>
 8013d98:	4681      	mov	r9, r0
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	d0d8      	beq.n	8013d50 <_strtod_l+0x750>
 8013d9e:	2f00      	cmp	r7, #0
 8013da0:	dd08      	ble.n	8013db4 <_strtod_l+0x7b4>
 8013da2:	4641      	mov	r1, r8
 8013da4:	9805      	ldr	r0, [sp, #20]
 8013da6:	463a      	mov	r2, r7
 8013da8:	f002 fb24 	bl	80163f4 <__lshift>
 8013dac:	4680      	mov	r8, r0
 8013dae:	2800      	cmp	r0, #0
 8013db0:	f43f ae49 	beq.w	8013a46 <_strtod_l+0x446>
 8013db4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013db6:	9805      	ldr	r0, [sp, #20]
 8013db8:	464a      	mov	r2, r9
 8013dba:	f002 fba3 	bl	8016504 <__mdiff>
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	f43f ae40 	beq.w	8013a46 <_strtod_l+0x446>
 8013dc6:	68c3      	ldr	r3, [r0, #12]
 8013dc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013dca:	2300      	movs	r3, #0
 8013dcc:	60c3      	str	r3, [r0, #12]
 8013dce:	4641      	mov	r1, r8
 8013dd0:	f002 fb7c 	bl	80164cc <__mcmp>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	da45      	bge.n	8013e64 <_strtod_l+0x864>
 8013dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013dda:	ea53 030a 	orrs.w	r3, r3, sl
 8013dde:	d16b      	bne.n	8013eb8 <_strtod_l+0x8b8>
 8013de0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d167      	bne.n	8013eb8 <_strtod_l+0x8b8>
 8013de8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013dec:	0d1b      	lsrs	r3, r3, #20
 8013dee:	051b      	lsls	r3, r3, #20
 8013df0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013df4:	d960      	bls.n	8013eb8 <_strtod_l+0x8b8>
 8013df6:	6963      	ldr	r3, [r4, #20]
 8013df8:	b913      	cbnz	r3, 8013e00 <_strtod_l+0x800>
 8013dfa:	6923      	ldr	r3, [r4, #16]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	dd5b      	ble.n	8013eb8 <_strtod_l+0x8b8>
 8013e00:	4621      	mov	r1, r4
 8013e02:	2201      	movs	r2, #1
 8013e04:	9805      	ldr	r0, [sp, #20]
 8013e06:	f002 faf5 	bl	80163f4 <__lshift>
 8013e0a:	4641      	mov	r1, r8
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	f002 fb5d 	bl	80164cc <__mcmp>
 8013e12:	2800      	cmp	r0, #0
 8013e14:	dd50      	ble.n	8013eb8 <_strtod_l+0x8b8>
 8013e16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013e1a:	9a08      	ldr	r2, [sp, #32]
 8013e1c:	0d1b      	lsrs	r3, r3, #20
 8013e1e:	051b      	lsls	r3, r3, #20
 8013e20:	2a00      	cmp	r2, #0
 8013e22:	d06a      	beq.n	8013efa <_strtod_l+0x8fa>
 8013e24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013e28:	d867      	bhi.n	8013efa <_strtod_l+0x8fa>
 8013e2a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013e2e:	f67f ae9d 	bls.w	8013b6c <_strtod_l+0x56c>
 8013e32:	4b0a      	ldr	r3, [pc, #40]	@ (8013e5c <_strtod_l+0x85c>)
 8013e34:	4650      	mov	r0, sl
 8013e36:	4659      	mov	r1, fp
 8013e38:	2200      	movs	r2, #0
 8013e3a:	f7ec fbe5 	bl	8000608 <__aeabi_dmul>
 8013e3e:	4b08      	ldr	r3, [pc, #32]	@ (8013e60 <_strtod_l+0x860>)
 8013e40:	400b      	ands	r3, r1
 8013e42:	4682      	mov	sl, r0
 8013e44:	468b      	mov	fp, r1
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	f47f ae08 	bne.w	8013a5c <_strtod_l+0x45c>
 8013e4c:	9a05      	ldr	r2, [sp, #20]
 8013e4e:	2322      	movs	r3, #34	@ 0x22
 8013e50:	6013      	str	r3, [r2, #0]
 8013e52:	e603      	b.n	8013a5c <_strtod_l+0x45c>
 8013e54:	08018378 	.word	0x08018378
 8013e58:	fffffc02 	.word	0xfffffc02
 8013e5c:	39500000 	.word	0x39500000
 8013e60:	7ff00000 	.word	0x7ff00000
 8013e64:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8013e68:	d165      	bne.n	8013f36 <_strtod_l+0x936>
 8013e6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013e6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e70:	b35a      	cbz	r2, 8013eca <_strtod_l+0x8ca>
 8013e72:	4a9f      	ldr	r2, [pc, #636]	@ (80140f0 <_strtod_l+0xaf0>)
 8013e74:	4293      	cmp	r3, r2
 8013e76:	d12b      	bne.n	8013ed0 <_strtod_l+0x8d0>
 8013e78:	9b08      	ldr	r3, [sp, #32]
 8013e7a:	4651      	mov	r1, sl
 8013e7c:	b303      	cbz	r3, 8013ec0 <_strtod_l+0x8c0>
 8013e7e:	4b9d      	ldr	r3, [pc, #628]	@ (80140f4 <_strtod_l+0xaf4>)
 8013e80:	465a      	mov	r2, fp
 8013e82:	4013      	ands	r3, r2
 8013e84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013e8c:	d81b      	bhi.n	8013ec6 <_strtod_l+0x8c6>
 8013e8e:	0d1b      	lsrs	r3, r3, #20
 8013e90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013e94:	fa02 f303 	lsl.w	r3, r2, r3
 8013e98:	4299      	cmp	r1, r3
 8013e9a:	d119      	bne.n	8013ed0 <_strtod_l+0x8d0>
 8013e9c:	4b96      	ldr	r3, [pc, #600]	@ (80140f8 <_strtod_l+0xaf8>)
 8013e9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d102      	bne.n	8013eaa <_strtod_l+0x8aa>
 8013ea4:	3101      	adds	r1, #1
 8013ea6:	f43f adce 	beq.w	8013a46 <_strtod_l+0x446>
 8013eaa:	4b92      	ldr	r3, [pc, #584]	@ (80140f4 <_strtod_l+0xaf4>)
 8013eac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013eae:	401a      	ands	r2, r3
 8013eb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013eb4:	f04f 0a00 	mov.w	sl, #0
 8013eb8:	9b08      	ldr	r3, [sp, #32]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d1b9      	bne.n	8013e32 <_strtod_l+0x832>
 8013ebe:	e5cd      	b.n	8013a5c <_strtod_l+0x45c>
 8013ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013ec4:	e7e8      	b.n	8013e98 <_strtod_l+0x898>
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	e7e6      	b.n	8013e98 <_strtod_l+0x898>
 8013eca:	ea53 030a 	orrs.w	r3, r3, sl
 8013ece:	d0a2      	beq.n	8013e16 <_strtod_l+0x816>
 8013ed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ed2:	b1db      	cbz	r3, 8013f0c <_strtod_l+0x90c>
 8013ed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ed6:	4213      	tst	r3, r2
 8013ed8:	d0ee      	beq.n	8013eb8 <_strtod_l+0x8b8>
 8013eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013edc:	9a08      	ldr	r2, [sp, #32]
 8013ede:	4650      	mov	r0, sl
 8013ee0:	4659      	mov	r1, fp
 8013ee2:	b1bb      	cbz	r3, 8013f14 <_strtod_l+0x914>
 8013ee4:	f7ff fb6e 	bl	80135c4 <sulp>
 8013ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013eec:	ec53 2b10 	vmov	r2, r3, d0
 8013ef0:	f7ec f9d4 	bl	800029c <__adddf3>
 8013ef4:	4682      	mov	sl, r0
 8013ef6:	468b      	mov	fp, r1
 8013ef8:	e7de      	b.n	8013eb8 <_strtod_l+0x8b8>
 8013efa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013efe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013f02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013f06:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013f0a:	e7d5      	b.n	8013eb8 <_strtod_l+0x8b8>
 8013f0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013f0e:	ea13 0f0a 	tst.w	r3, sl
 8013f12:	e7e1      	b.n	8013ed8 <_strtod_l+0x8d8>
 8013f14:	f7ff fb56 	bl	80135c4 <sulp>
 8013f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f1c:	ec53 2b10 	vmov	r2, r3, d0
 8013f20:	f7ec f9ba 	bl	8000298 <__aeabi_dsub>
 8013f24:	2200      	movs	r2, #0
 8013f26:	2300      	movs	r3, #0
 8013f28:	4682      	mov	sl, r0
 8013f2a:	468b      	mov	fp, r1
 8013f2c:	f7ec fdd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8013f30:	2800      	cmp	r0, #0
 8013f32:	d0c1      	beq.n	8013eb8 <_strtod_l+0x8b8>
 8013f34:	e61a      	b.n	8013b6c <_strtod_l+0x56c>
 8013f36:	4641      	mov	r1, r8
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f002 fc3f 	bl	80167bc <__ratio>
 8013f3e:	ec57 6b10 	vmov	r6, r7, d0
 8013f42:	2200      	movs	r2, #0
 8013f44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013f48:	4630      	mov	r0, r6
 8013f4a:	4639      	mov	r1, r7
 8013f4c:	f7ec fdd8 	bl	8000b00 <__aeabi_dcmple>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	d06f      	beq.n	8014034 <_strtod_l+0xa34>
 8013f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d17a      	bne.n	8014050 <_strtod_l+0xa50>
 8013f5a:	f1ba 0f00 	cmp.w	sl, #0
 8013f5e:	d158      	bne.n	8014012 <_strtod_l+0xa12>
 8013f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d15a      	bne.n	8014020 <_strtod_l+0xa20>
 8013f6a:	4b64      	ldr	r3, [pc, #400]	@ (80140fc <_strtod_l+0xafc>)
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	4630      	mov	r0, r6
 8013f70:	4639      	mov	r1, r7
 8013f72:	f7ec fdbb 	bl	8000aec <__aeabi_dcmplt>
 8013f76:	2800      	cmp	r0, #0
 8013f78:	d159      	bne.n	801402e <_strtod_l+0xa2e>
 8013f7a:	4630      	mov	r0, r6
 8013f7c:	4639      	mov	r1, r7
 8013f7e:	4b60      	ldr	r3, [pc, #384]	@ (8014100 <_strtod_l+0xb00>)
 8013f80:	2200      	movs	r2, #0
 8013f82:	f7ec fb41 	bl	8000608 <__aeabi_dmul>
 8013f86:	4606      	mov	r6, r0
 8013f88:	460f      	mov	r7, r1
 8013f8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013f8e:	9606      	str	r6, [sp, #24]
 8013f90:	9307      	str	r3, [sp, #28]
 8013f92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f96:	4d57      	ldr	r5, [pc, #348]	@ (80140f4 <_strtod_l+0xaf4>)
 8013f98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f9e:	401d      	ands	r5, r3
 8013fa0:	4b58      	ldr	r3, [pc, #352]	@ (8014104 <_strtod_l+0xb04>)
 8013fa2:	429d      	cmp	r5, r3
 8013fa4:	f040 80b2 	bne.w	801410c <_strtod_l+0xb0c>
 8013fa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013faa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013fae:	ec4b ab10 	vmov	d0, sl, fp
 8013fb2:	f002 fb3b 	bl	801662c <__ulp>
 8013fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fba:	ec51 0b10 	vmov	r0, r1, d0
 8013fbe:	f7ec fb23 	bl	8000608 <__aeabi_dmul>
 8013fc2:	4652      	mov	r2, sl
 8013fc4:	465b      	mov	r3, fp
 8013fc6:	f7ec f969 	bl	800029c <__adddf3>
 8013fca:	460b      	mov	r3, r1
 8013fcc:	4949      	ldr	r1, [pc, #292]	@ (80140f4 <_strtod_l+0xaf4>)
 8013fce:	4a4e      	ldr	r2, [pc, #312]	@ (8014108 <_strtod_l+0xb08>)
 8013fd0:	4019      	ands	r1, r3
 8013fd2:	4291      	cmp	r1, r2
 8013fd4:	4682      	mov	sl, r0
 8013fd6:	d942      	bls.n	801405e <_strtod_l+0xa5e>
 8013fd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013fda:	4b47      	ldr	r3, [pc, #284]	@ (80140f8 <_strtod_l+0xaf8>)
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d103      	bne.n	8013fe8 <_strtod_l+0x9e8>
 8013fe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	f43f ad2f 	beq.w	8013a46 <_strtod_l+0x446>
 8013fe8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80140f8 <_strtod_l+0xaf8>
 8013fec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013ff0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ff2:	9805      	ldr	r0, [sp, #20]
 8013ff4:	f001 ffee 	bl	8015fd4 <_Bfree>
 8013ff8:	9805      	ldr	r0, [sp, #20]
 8013ffa:	4649      	mov	r1, r9
 8013ffc:	f001 ffea 	bl	8015fd4 <_Bfree>
 8014000:	9805      	ldr	r0, [sp, #20]
 8014002:	4641      	mov	r1, r8
 8014004:	f001 ffe6 	bl	8015fd4 <_Bfree>
 8014008:	9805      	ldr	r0, [sp, #20]
 801400a:	4621      	mov	r1, r4
 801400c:	f001 ffe2 	bl	8015fd4 <_Bfree>
 8014010:	e619      	b.n	8013c46 <_strtod_l+0x646>
 8014012:	f1ba 0f01 	cmp.w	sl, #1
 8014016:	d103      	bne.n	8014020 <_strtod_l+0xa20>
 8014018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801401a:	2b00      	cmp	r3, #0
 801401c:	f43f ada6 	beq.w	8013b6c <_strtod_l+0x56c>
 8014020:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80140d0 <_strtod_l+0xad0>
 8014024:	4f35      	ldr	r7, [pc, #212]	@ (80140fc <_strtod_l+0xafc>)
 8014026:	ed8d 7b06 	vstr	d7, [sp, #24]
 801402a:	2600      	movs	r6, #0
 801402c:	e7b1      	b.n	8013f92 <_strtod_l+0x992>
 801402e:	4f34      	ldr	r7, [pc, #208]	@ (8014100 <_strtod_l+0xb00>)
 8014030:	2600      	movs	r6, #0
 8014032:	e7aa      	b.n	8013f8a <_strtod_l+0x98a>
 8014034:	4b32      	ldr	r3, [pc, #200]	@ (8014100 <_strtod_l+0xb00>)
 8014036:	4630      	mov	r0, r6
 8014038:	4639      	mov	r1, r7
 801403a:	2200      	movs	r2, #0
 801403c:	f7ec fae4 	bl	8000608 <__aeabi_dmul>
 8014040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014042:	4606      	mov	r6, r0
 8014044:	460f      	mov	r7, r1
 8014046:	2b00      	cmp	r3, #0
 8014048:	d09f      	beq.n	8013f8a <_strtod_l+0x98a>
 801404a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801404e:	e7a0      	b.n	8013f92 <_strtod_l+0x992>
 8014050:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80140d8 <_strtod_l+0xad8>
 8014054:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014058:	ec57 6b17 	vmov	r6, r7, d7
 801405c:	e799      	b.n	8013f92 <_strtod_l+0x992>
 801405e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014062:	9b08      	ldr	r3, [sp, #32]
 8014064:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014068:	2b00      	cmp	r3, #0
 801406a:	d1c1      	bne.n	8013ff0 <_strtod_l+0x9f0>
 801406c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014070:	0d1b      	lsrs	r3, r3, #20
 8014072:	051b      	lsls	r3, r3, #20
 8014074:	429d      	cmp	r5, r3
 8014076:	d1bb      	bne.n	8013ff0 <_strtod_l+0x9f0>
 8014078:	4630      	mov	r0, r6
 801407a:	4639      	mov	r1, r7
 801407c:	f7ec fe24 	bl	8000cc8 <__aeabi_d2lz>
 8014080:	f7ec fa94 	bl	80005ac <__aeabi_l2d>
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	4630      	mov	r0, r6
 801408a:	4639      	mov	r1, r7
 801408c:	f7ec f904 	bl	8000298 <__aeabi_dsub>
 8014090:	460b      	mov	r3, r1
 8014092:	4602      	mov	r2, r0
 8014094:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014098:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801409c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801409e:	ea46 060a 	orr.w	r6, r6, sl
 80140a2:	431e      	orrs	r6, r3
 80140a4:	d06f      	beq.n	8014186 <_strtod_l+0xb86>
 80140a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80140e0 <_strtod_l+0xae0>)
 80140a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ac:	f7ec fd1e 	bl	8000aec <__aeabi_dcmplt>
 80140b0:	2800      	cmp	r0, #0
 80140b2:	f47f acd3 	bne.w	8013a5c <_strtod_l+0x45c>
 80140b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80140e8 <_strtod_l+0xae8>)
 80140b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80140c0:	f7ec fd32 	bl	8000b28 <__aeabi_dcmpgt>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d093      	beq.n	8013ff0 <_strtod_l+0x9f0>
 80140c8:	e4c8      	b.n	8013a5c <_strtod_l+0x45c>
 80140ca:	bf00      	nop
 80140cc:	f3af 8000 	nop.w
 80140d0:	00000000 	.word	0x00000000
 80140d4:	bff00000 	.word	0xbff00000
 80140d8:	00000000 	.word	0x00000000
 80140dc:	3ff00000 	.word	0x3ff00000
 80140e0:	94a03595 	.word	0x94a03595
 80140e4:	3fdfffff 	.word	0x3fdfffff
 80140e8:	35afe535 	.word	0x35afe535
 80140ec:	3fe00000 	.word	0x3fe00000
 80140f0:	000fffff 	.word	0x000fffff
 80140f4:	7ff00000 	.word	0x7ff00000
 80140f8:	7fefffff 	.word	0x7fefffff
 80140fc:	3ff00000 	.word	0x3ff00000
 8014100:	3fe00000 	.word	0x3fe00000
 8014104:	7fe00000 	.word	0x7fe00000
 8014108:	7c9fffff 	.word	0x7c9fffff
 801410c:	9b08      	ldr	r3, [sp, #32]
 801410e:	b323      	cbz	r3, 801415a <_strtod_l+0xb5a>
 8014110:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8014114:	d821      	bhi.n	801415a <_strtod_l+0xb5a>
 8014116:	a328      	add	r3, pc, #160	@ (adr r3, 80141b8 <_strtod_l+0xbb8>)
 8014118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411c:	4630      	mov	r0, r6
 801411e:	4639      	mov	r1, r7
 8014120:	f7ec fcee 	bl	8000b00 <__aeabi_dcmple>
 8014124:	b1a0      	cbz	r0, 8014150 <_strtod_l+0xb50>
 8014126:	4639      	mov	r1, r7
 8014128:	4630      	mov	r0, r6
 801412a:	f7ec fd45 	bl	8000bb8 <__aeabi_d2uiz>
 801412e:	2801      	cmp	r0, #1
 8014130:	bf38      	it	cc
 8014132:	2001      	movcc	r0, #1
 8014134:	f7ec f9ee 	bl	8000514 <__aeabi_ui2d>
 8014138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801413a:	4606      	mov	r6, r0
 801413c:	460f      	mov	r7, r1
 801413e:	b9fb      	cbnz	r3, 8014180 <_strtod_l+0xb80>
 8014140:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014144:	9014      	str	r0, [sp, #80]	@ 0x50
 8014146:	9315      	str	r3, [sp, #84]	@ 0x54
 8014148:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801414c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014150:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014152:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8014156:	1b5b      	subs	r3, r3, r5
 8014158:	9311      	str	r3, [sp, #68]	@ 0x44
 801415a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801415e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8014162:	f002 fa63 	bl	801662c <__ulp>
 8014166:	4650      	mov	r0, sl
 8014168:	ec53 2b10 	vmov	r2, r3, d0
 801416c:	4659      	mov	r1, fp
 801416e:	f7ec fa4b 	bl	8000608 <__aeabi_dmul>
 8014172:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014176:	f7ec f891 	bl	800029c <__adddf3>
 801417a:	4682      	mov	sl, r0
 801417c:	468b      	mov	fp, r1
 801417e:	e770      	b.n	8014062 <_strtod_l+0xa62>
 8014180:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8014184:	e7e0      	b.n	8014148 <_strtod_l+0xb48>
 8014186:	a30e      	add	r3, pc, #56	@ (adr r3, 80141c0 <_strtod_l+0xbc0>)
 8014188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418c:	f7ec fcae 	bl	8000aec <__aeabi_dcmplt>
 8014190:	e798      	b.n	80140c4 <_strtod_l+0xac4>
 8014192:	2300      	movs	r3, #0
 8014194:	930e      	str	r3, [sp, #56]	@ 0x38
 8014196:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801419a:	6013      	str	r3, [r2, #0]
 801419c:	f7ff ba6d 	b.w	801367a <_strtod_l+0x7a>
 80141a0:	2a65      	cmp	r2, #101	@ 0x65
 80141a2:	f43f ab68 	beq.w	8013876 <_strtod_l+0x276>
 80141a6:	2a45      	cmp	r2, #69	@ 0x45
 80141a8:	f43f ab65 	beq.w	8013876 <_strtod_l+0x276>
 80141ac:	2301      	movs	r3, #1
 80141ae:	f7ff bba0 	b.w	80138f2 <_strtod_l+0x2f2>
 80141b2:	bf00      	nop
 80141b4:	f3af 8000 	nop.w
 80141b8:	ffc00000 	.word	0xffc00000
 80141bc:	41dfffff 	.word	0x41dfffff
 80141c0:	94a03595 	.word	0x94a03595
 80141c4:	3fcfffff 	.word	0x3fcfffff

080141c8 <_strtod_r>:
 80141c8:	4b01      	ldr	r3, [pc, #4]	@ (80141d0 <_strtod_r+0x8>)
 80141ca:	f7ff ba19 	b.w	8013600 <_strtod_l>
 80141ce:	bf00      	nop
 80141d0:	20000068 	.word	0x20000068

080141d4 <_strtol_l.isra.0>:
 80141d4:	2b24      	cmp	r3, #36	@ 0x24
 80141d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141da:	4686      	mov	lr, r0
 80141dc:	4690      	mov	r8, r2
 80141de:	d801      	bhi.n	80141e4 <_strtol_l.isra.0+0x10>
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d106      	bne.n	80141f2 <_strtol_l.isra.0+0x1e>
 80141e4:	f000 f932 	bl	801444c <__errno>
 80141e8:	2316      	movs	r3, #22
 80141ea:	6003      	str	r3, [r0, #0]
 80141ec:	2000      	movs	r0, #0
 80141ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141f2:	4834      	ldr	r0, [pc, #208]	@ (80142c4 <_strtol_l.isra.0+0xf0>)
 80141f4:	460d      	mov	r5, r1
 80141f6:	462a      	mov	r2, r5
 80141f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141fc:	5d06      	ldrb	r6, [r0, r4]
 80141fe:	f016 0608 	ands.w	r6, r6, #8
 8014202:	d1f8      	bne.n	80141f6 <_strtol_l.isra.0+0x22>
 8014204:	2c2d      	cmp	r4, #45	@ 0x2d
 8014206:	d110      	bne.n	801422a <_strtol_l.isra.0+0x56>
 8014208:	782c      	ldrb	r4, [r5, #0]
 801420a:	2601      	movs	r6, #1
 801420c:	1c95      	adds	r5, r2, #2
 801420e:	f033 0210 	bics.w	r2, r3, #16
 8014212:	d115      	bne.n	8014240 <_strtol_l.isra.0+0x6c>
 8014214:	2c30      	cmp	r4, #48	@ 0x30
 8014216:	d10d      	bne.n	8014234 <_strtol_l.isra.0+0x60>
 8014218:	782a      	ldrb	r2, [r5, #0]
 801421a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801421e:	2a58      	cmp	r2, #88	@ 0x58
 8014220:	d108      	bne.n	8014234 <_strtol_l.isra.0+0x60>
 8014222:	786c      	ldrb	r4, [r5, #1]
 8014224:	3502      	adds	r5, #2
 8014226:	2310      	movs	r3, #16
 8014228:	e00a      	b.n	8014240 <_strtol_l.isra.0+0x6c>
 801422a:	2c2b      	cmp	r4, #43	@ 0x2b
 801422c:	bf04      	itt	eq
 801422e:	782c      	ldrbeq	r4, [r5, #0]
 8014230:	1c95      	addeq	r5, r2, #2
 8014232:	e7ec      	b.n	801420e <_strtol_l.isra.0+0x3a>
 8014234:	2b00      	cmp	r3, #0
 8014236:	d1f6      	bne.n	8014226 <_strtol_l.isra.0+0x52>
 8014238:	2c30      	cmp	r4, #48	@ 0x30
 801423a:	bf14      	ite	ne
 801423c:	230a      	movne	r3, #10
 801423e:	2308      	moveq	r3, #8
 8014240:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014244:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8014248:	2200      	movs	r2, #0
 801424a:	fbbc f9f3 	udiv	r9, ip, r3
 801424e:	4610      	mov	r0, r2
 8014250:	fb03 ca19 	mls	sl, r3, r9, ip
 8014254:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014258:	2f09      	cmp	r7, #9
 801425a:	d80f      	bhi.n	801427c <_strtol_l.isra.0+0xa8>
 801425c:	463c      	mov	r4, r7
 801425e:	42a3      	cmp	r3, r4
 8014260:	dd1b      	ble.n	801429a <_strtol_l.isra.0+0xc6>
 8014262:	1c57      	adds	r7, r2, #1
 8014264:	d007      	beq.n	8014276 <_strtol_l.isra.0+0xa2>
 8014266:	4581      	cmp	r9, r0
 8014268:	d314      	bcc.n	8014294 <_strtol_l.isra.0+0xc0>
 801426a:	d101      	bne.n	8014270 <_strtol_l.isra.0+0x9c>
 801426c:	45a2      	cmp	sl, r4
 801426e:	db11      	blt.n	8014294 <_strtol_l.isra.0+0xc0>
 8014270:	fb00 4003 	mla	r0, r0, r3, r4
 8014274:	2201      	movs	r2, #1
 8014276:	f815 4b01 	ldrb.w	r4, [r5], #1
 801427a:	e7eb      	b.n	8014254 <_strtol_l.isra.0+0x80>
 801427c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014280:	2f19      	cmp	r7, #25
 8014282:	d801      	bhi.n	8014288 <_strtol_l.isra.0+0xb4>
 8014284:	3c37      	subs	r4, #55	@ 0x37
 8014286:	e7ea      	b.n	801425e <_strtol_l.isra.0+0x8a>
 8014288:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801428c:	2f19      	cmp	r7, #25
 801428e:	d804      	bhi.n	801429a <_strtol_l.isra.0+0xc6>
 8014290:	3c57      	subs	r4, #87	@ 0x57
 8014292:	e7e4      	b.n	801425e <_strtol_l.isra.0+0x8a>
 8014294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014298:	e7ed      	b.n	8014276 <_strtol_l.isra.0+0xa2>
 801429a:	1c53      	adds	r3, r2, #1
 801429c:	d108      	bne.n	80142b0 <_strtol_l.isra.0+0xdc>
 801429e:	2322      	movs	r3, #34	@ 0x22
 80142a0:	f8ce 3000 	str.w	r3, [lr]
 80142a4:	4660      	mov	r0, ip
 80142a6:	f1b8 0f00 	cmp.w	r8, #0
 80142aa:	d0a0      	beq.n	80141ee <_strtol_l.isra.0+0x1a>
 80142ac:	1e69      	subs	r1, r5, #1
 80142ae:	e006      	b.n	80142be <_strtol_l.isra.0+0xea>
 80142b0:	b106      	cbz	r6, 80142b4 <_strtol_l.isra.0+0xe0>
 80142b2:	4240      	negs	r0, r0
 80142b4:	f1b8 0f00 	cmp.w	r8, #0
 80142b8:	d099      	beq.n	80141ee <_strtol_l.isra.0+0x1a>
 80142ba:	2a00      	cmp	r2, #0
 80142bc:	d1f6      	bne.n	80142ac <_strtol_l.isra.0+0xd8>
 80142be:	f8c8 1000 	str.w	r1, [r8]
 80142c2:	e794      	b.n	80141ee <_strtol_l.isra.0+0x1a>
 80142c4:	080183a1 	.word	0x080183a1

080142c8 <_strtol_r>:
 80142c8:	f7ff bf84 	b.w	80141d4 <_strtol_l.isra.0>

080142cc <_fwalk_sglue>:
 80142cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142d0:	4607      	mov	r7, r0
 80142d2:	4688      	mov	r8, r1
 80142d4:	4614      	mov	r4, r2
 80142d6:	2600      	movs	r6, #0
 80142d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80142dc:	f1b9 0901 	subs.w	r9, r9, #1
 80142e0:	d505      	bpl.n	80142ee <_fwalk_sglue+0x22>
 80142e2:	6824      	ldr	r4, [r4, #0]
 80142e4:	2c00      	cmp	r4, #0
 80142e6:	d1f7      	bne.n	80142d8 <_fwalk_sglue+0xc>
 80142e8:	4630      	mov	r0, r6
 80142ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142ee:	89ab      	ldrh	r3, [r5, #12]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d907      	bls.n	8014304 <_fwalk_sglue+0x38>
 80142f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80142f8:	3301      	adds	r3, #1
 80142fa:	d003      	beq.n	8014304 <_fwalk_sglue+0x38>
 80142fc:	4629      	mov	r1, r5
 80142fe:	4638      	mov	r0, r7
 8014300:	47c0      	blx	r8
 8014302:	4306      	orrs	r6, r0
 8014304:	3568      	adds	r5, #104	@ 0x68
 8014306:	e7e9      	b.n	80142dc <_fwalk_sglue+0x10>

08014308 <iprintf>:
 8014308:	b40f      	push	{r0, r1, r2, r3}
 801430a:	b507      	push	{r0, r1, r2, lr}
 801430c:	4906      	ldr	r1, [pc, #24]	@ (8014328 <iprintf+0x20>)
 801430e:	ab04      	add	r3, sp, #16
 8014310:	6808      	ldr	r0, [r1, #0]
 8014312:	f853 2b04 	ldr.w	r2, [r3], #4
 8014316:	6881      	ldr	r1, [r0, #8]
 8014318:	9301      	str	r3, [sp, #4]
 801431a:	f001 fc45 	bl	8015ba8 <_vfiprintf_r>
 801431e:	b003      	add	sp, #12
 8014320:	f85d eb04 	ldr.w	lr, [sp], #4
 8014324:	b004      	add	sp, #16
 8014326:	4770      	bx	lr
 8014328:	200001d4 	.word	0x200001d4

0801432c <putchar>:
 801432c:	4b02      	ldr	r3, [pc, #8]	@ (8014338 <putchar+0xc>)
 801432e:	4601      	mov	r1, r0
 8014330:	6818      	ldr	r0, [r3, #0]
 8014332:	6882      	ldr	r2, [r0, #8]
 8014334:	f002 bc2d 	b.w	8016b92 <_putc_r>
 8014338:	200001d4 	.word	0x200001d4

0801433c <_puts_r>:
 801433c:	6a03      	ldr	r3, [r0, #32]
 801433e:	b570      	push	{r4, r5, r6, lr}
 8014340:	6884      	ldr	r4, [r0, #8]
 8014342:	4605      	mov	r5, r0
 8014344:	460e      	mov	r6, r1
 8014346:	b90b      	cbnz	r3, 801434c <_puts_r+0x10>
 8014348:	f7ff f924 	bl	8013594 <__sinit>
 801434c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801434e:	07db      	lsls	r3, r3, #31
 8014350:	d405      	bmi.n	801435e <_puts_r+0x22>
 8014352:	89a3      	ldrh	r3, [r4, #12]
 8014354:	0598      	lsls	r0, r3, #22
 8014356:	d402      	bmi.n	801435e <_puts_r+0x22>
 8014358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801435a:	f000 f8a2 	bl	80144a2 <__retarget_lock_acquire_recursive>
 801435e:	89a3      	ldrh	r3, [r4, #12]
 8014360:	0719      	lsls	r1, r3, #28
 8014362:	d502      	bpl.n	801436a <_puts_r+0x2e>
 8014364:	6923      	ldr	r3, [r4, #16]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d135      	bne.n	80143d6 <_puts_r+0x9a>
 801436a:	4621      	mov	r1, r4
 801436c:	4628      	mov	r0, r5
 801436e:	f002 fb4b 	bl	8016a08 <__swsetup_r>
 8014372:	b380      	cbz	r0, 80143d6 <_puts_r+0x9a>
 8014374:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8014378:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801437a:	07da      	lsls	r2, r3, #31
 801437c:	d405      	bmi.n	801438a <_puts_r+0x4e>
 801437e:	89a3      	ldrh	r3, [r4, #12]
 8014380:	059b      	lsls	r3, r3, #22
 8014382:	d402      	bmi.n	801438a <_puts_r+0x4e>
 8014384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014386:	f000 f88d 	bl	80144a4 <__retarget_lock_release_recursive>
 801438a:	4628      	mov	r0, r5
 801438c:	bd70      	pop	{r4, r5, r6, pc}
 801438e:	2b00      	cmp	r3, #0
 8014390:	da04      	bge.n	801439c <_puts_r+0x60>
 8014392:	69a2      	ldr	r2, [r4, #24]
 8014394:	429a      	cmp	r2, r3
 8014396:	dc17      	bgt.n	80143c8 <_puts_r+0x8c>
 8014398:	290a      	cmp	r1, #10
 801439a:	d015      	beq.n	80143c8 <_puts_r+0x8c>
 801439c:	6823      	ldr	r3, [r4, #0]
 801439e:	1c5a      	adds	r2, r3, #1
 80143a0:	6022      	str	r2, [r4, #0]
 80143a2:	7019      	strb	r1, [r3, #0]
 80143a4:	68a3      	ldr	r3, [r4, #8]
 80143a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80143aa:	3b01      	subs	r3, #1
 80143ac:	60a3      	str	r3, [r4, #8]
 80143ae:	2900      	cmp	r1, #0
 80143b0:	d1ed      	bne.n	801438e <_puts_r+0x52>
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	da11      	bge.n	80143da <_puts_r+0x9e>
 80143b6:	4622      	mov	r2, r4
 80143b8:	210a      	movs	r1, #10
 80143ba:	4628      	mov	r0, r5
 80143bc:	f002 fae5 	bl	801698a <__swbuf_r>
 80143c0:	3001      	adds	r0, #1
 80143c2:	d0d7      	beq.n	8014374 <_puts_r+0x38>
 80143c4:	250a      	movs	r5, #10
 80143c6:	e7d7      	b.n	8014378 <_puts_r+0x3c>
 80143c8:	4622      	mov	r2, r4
 80143ca:	4628      	mov	r0, r5
 80143cc:	f002 fadd 	bl	801698a <__swbuf_r>
 80143d0:	3001      	adds	r0, #1
 80143d2:	d1e7      	bne.n	80143a4 <_puts_r+0x68>
 80143d4:	e7ce      	b.n	8014374 <_puts_r+0x38>
 80143d6:	3e01      	subs	r6, #1
 80143d8:	e7e4      	b.n	80143a4 <_puts_r+0x68>
 80143da:	6823      	ldr	r3, [r4, #0]
 80143dc:	1c5a      	adds	r2, r3, #1
 80143de:	6022      	str	r2, [r4, #0]
 80143e0:	220a      	movs	r2, #10
 80143e2:	701a      	strb	r2, [r3, #0]
 80143e4:	e7ee      	b.n	80143c4 <_puts_r+0x88>
	...

080143e8 <puts>:
 80143e8:	4b02      	ldr	r3, [pc, #8]	@ (80143f4 <puts+0xc>)
 80143ea:	4601      	mov	r1, r0
 80143ec:	6818      	ldr	r0, [r3, #0]
 80143ee:	f7ff bfa5 	b.w	801433c <_puts_r>
 80143f2:	bf00      	nop
 80143f4:	200001d4 	.word	0x200001d4

080143f8 <memset>:
 80143f8:	4402      	add	r2, r0
 80143fa:	4603      	mov	r3, r0
 80143fc:	4293      	cmp	r3, r2
 80143fe:	d100      	bne.n	8014402 <memset+0xa>
 8014400:	4770      	bx	lr
 8014402:	f803 1b01 	strb.w	r1, [r3], #1
 8014406:	e7f9      	b.n	80143fc <memset+0x4>

08014408 <strncmp>:
 8014408:	b510      	push	{r4, lr}
 801440a:	b16a      	cbz	r2, 8014428 <strncmp+0x20>
 801440c:	3901      	subs	r1, #1
 801440e:	1884      	adds	r4, r0, r2
 8014410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014414:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014418:	429a      	cmp	r2, r3
 801441a:	d103      	bne.n	8014424 <strncmp+0x1c>
 801441c:	42a0      	cmp	r0, r4
 801441e:	d001      	beq.n	8014424 <strncmp+0x1c>
 8014420:	2a00      	cmp	r2, #0
 8014422:	d1f5      	bne.n	8014410 <strncmp+0x8>
 8014424:	1ad0      	subs	r0, r2, r3
 8014426:	bd10      	pop	{r4, pc}
 8014428:	4610      	mov	r0, r2
 801442a:	e7fc      	b.n	8014426 <strncmp+0x1e>

0801442c <_sbrk_r>:
 801442c:	b538      	push	{r3, r4, r5, lr}
 801442e:	4d06      	ldr	r5, [pc, #24]	@ (8014448 <_sbrk_r+0x1c>)
 8014430:	2300      	movs	r3, #0
 8014432:	4604      	mov	r4, r0
 8014434:	4608      	mov	r0, r1
 8014436:	602b      	str	r3, [r5, #0]
 8014438:	f7f7 f816 	bl	800b468 <_sbrk>
 801443c:	1c43      	adds	r3, r0, #1
 801443e:	d102      	bne.n	8014446 <_sbrk_r+0x1a>
 8014440:	682b      	ldr	r3, [r5, #0]
 8014442:	b103      	cbz	r3, 8014446 <_sbrk_r+0x1a>
 8014444:	6023      	str	r3, [r4, #0]
 8014446:	bd38      	pop	{r3, r4, r5, pc}
 8014448:	200024bc 	.word	0x200024bc

0801444c <__errno>:
 801444c:	4b01      	ldr	r3, [pc, #4]	@ (8014454 <__errno+0x8>)
 801444e:	6818      	ldr	r0, [r3, #0]
 8014450:	4770      	bx	lr
 8014452:	bf00      	nop
 8014454:	200001d4 	.word	0x200001d4

08014458 <__libc_init_array>:
 8014458:	b570      	push	{r4, r5, r6, lr}
 801445a:	4d0d      	ldr	r5, [pc, #52]	@ (8014490 <__libc_init_array+0x38>)
 801445c:	4c0d      	ldr	r4, [pc, #52]	@ (8014494 <__libc_init_array+0x3c>)
 801445e:	1b64      	subs	r4, r4, r5
 8014460:	10a4      	asrs	r4, r4, #2
 8014462:	2600      	movs	r6, #0
 8014464:	42a6      	cmp	r6, r4
 8014466:	d109      	bne.n	801447c <__libc_init_array+0x24>
 8014468:	4d0b      	ldr	r5, [pc, #44]	@ (8014498 <__libc_init_array+0x40>)
 801446a:	4c0c      	ldr	r4, [pc, #48]	@ (801449c <__libc_init_array+0x44>)
 801446c:	f002 fccc 	bl	8016e08 <_init>
 8014470:	1b64      	subs	r4, r4, r5
 8014472:	10a4      	asrs	r4, r4, #2
 8014474:	2600      	movs	r6, #0
 8014476:	42a6      	cmp	r6, r4
 8014478:	d105      	bne.n	8014486 <__libc_init_array+0x2e>
 801447a:	bd70      	pop	{r4, r5, r6, pc}
 801447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014480:	4798      	blx	r3
 8014482:	3601      	adds	r6, #1
 8014484:	e7ee      	b.n	8014464 <__libc_init_array+0xc>
 8014486:	f855 3b04 	ldr.w	r3, [r5], #4
 801448a:	4798      	blx	r3
 801448c:	3601      	adds	r6, #1
 801448e:	e7f2      	b.n	8014476 <__libc_init_array+0x1e>
	...

080144a0 <__retarget_lock_init_recursive>:
 80144a0:	4770      	bx	lr

080144a2 <__retarget_lock_acquire_recursive>:
 80144a2:	4770      	bx	lr

080144a4 <__retarget_lock_release_recursive>:
 80144a4:	4770      	bx	lr
	...

080144a8 <_localeconv_r>:
 80144a8:	4800      	ldr	r0, [pc, #0]	@ (80144ac <_localeconv_r+0x4>)
 80144aa:	4770      	bx	lr
 80144ac:	20000158 	.word	0x20000158

080144b0 <memcpy>:
 80144b0:	440a      	add	r2, r1
 80144b2:	4291      	cmp	r1, r2
 80144b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80144b8:	d100      	bne.n	80144bc <memcpy+0xc>
 80144ba:	4770      	bx	lr
 80144bc:	b510      	push	{r4, lr}
 80144be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80144c6:	4291      	cmp	r1, r2
 80144c8:	d1f9      	bne.n	80144be <memcpy+0xe>
 80144ca:	bd10      	pop	{r4, pc}
 80144cc:	0000      	movs	r0, r0
	...

080144d0 <nan>:
 80144d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80144d8 <nan+0x8>
 80144d4:	4770      	bx	lr
 80144d6:	bf00      	nop
 80144d8:	00000000 	.word	0x00000000
 80144dc:	7ff80000 	.word	0x7ff80000

080144e0 <nanf>:
 80144e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80144e8 <nanf+0x8>
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop
 80144e8:	7fc00000 	.word	0x7fc00000

080144ec <quorem>:
 80144ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f0:	6903      	ldr	r3, [r0, #16]
 80144f2:	690c      	ldr	r4, [r1, #16]
 80144f4:	42a3      	cmp	r3, r4
 80144f6:	4607      	mov	r7, r0
 80144f8:	db7e      	blt.n	80145f8 <quorem+0x10c>
 80144fa:	3c01      	subs	r4, #1
 80144fc:	f101 0814 	add.w	r8, r1, #20
 8014500:	00a3      	lsls	r3, r4, #2
 8014502:	f100 0514 	add.w	r5, r0, #20
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801450c:	9301      	str	r3, [sp, #4]
 801450e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014516:	3301      	adds	r3, #1
 8014518:	429a      	cmp	r2, r3
 801451a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801451e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014522:	d32e      	bcc.n	8014582 <quorem+0x96>
 8014524:	f04f 0a00 	mov.w	sl, #0
 8014528:	46c4      	mov	ip, r8
 801452a:	46ae      	mov	lr, r5
 801452c:	46d3      	mov	fp, sl
 801452e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014532:	b298      	uxth	r0, r3
 8014534:	fb06 a000 	mla	r0, r6, r0, sl
 8014538:	0c02      	lsrs	r2, r0, #16
 801453a:	0c1b      	lsrs	r3, r3, #16
 801453c:	fb06 2303 	mla	r3, r6, r3, r2
 8014540:	f8de 2000 	ldr.w	r2, [lr]
 8014544:	b280      	uxth	r0, r0
 8014546:	b292      	uxth	r2, r2
 8014548:	1a12      	subs	r2, r2, r0
 801454a:	445a      	add	r2, fp
 801454c:	f8de 0000 	ldr.w	r0, [lr]
 8014550:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014554:	b29b      	uxth	r3, r3
 8014556:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801455a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801455e:	b292      	uxth	r2, r2
 8014560:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014564:	45e1      	cmp	r9, ip
 8014566:	f84e 2b04 	str.w	r2, [lr], #4
 801456a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801456e:	d2de      	bcs.n	801452e <quorem+0x42>
 8014570:	9b00      	ldr	r3, [sp, #0]
 8014572:	58eb      	ldr	r3, [r5, r3]
 8014574:	b92b      	cbnz	r3, 8014582 <quorem+0x96>
 8014576:	9b01      	ldr	r3, [sp, #4]
 8014578:	3b04      	subs	r3, #4
 801457a:	429d      	cmp	r5, r3
 801457c:	461a      	mov	r2, r3
 801457e:	d32f      	bcc.n	80145e0 <quorem+0xf4>
 8014580:	613c      	str	r4, [r7, #16]
 8014582:	4638      	mov	r0, r7
 8014584:	f001 ffa2 	bl	80164cc <__mcmp>
 8014588:	2800      	cmp	r0, #0
 801458a:	db25      	blt.n	80145d8 <quorem+0xec>
 801458c:	4629      	mov	r1, r5
 801458e:	2000      	movs	r0, #0
 8014590:	f858 2b04 	ldr.w	r2, [r8], #4
 8014594:	f8d1 c000 	ldr.w	ip, [r1]
 8014598:	fa1f fe82 	uxth.w	lr, r2
 801459c:	fa1f f38c 	uxth.w	r3, ip
 80145a0:	eba3 030e 	sub.w	r3, r3, lr
 80145a4:	4403      	add	r3, r0
 80145a6:	0c12      	lsrs	r2, r2, #16
 80145a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80145ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80145b6:	45c1      	cmp	r9, r8
 80145b8:	f841 3b04 	str.w	r3, [r1], #4
 80145bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80145c0:	d2e6      	bcs.n	8014590 <quorem+0xa4>
 80145c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80145c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80145ca:	b922      	cbnz	r2, 80145d6 <quorem+0xea>
 80145cc:	3b04      	subs	r3, #4
 80145ce:	429d      	cmp	r5, r3
 80145d0:	461a      	mov	r2, r3
 80145d2:	d30b      	bcc.n	80145ec <quorem+0x100>
 80145d4:	613c      	str	r4, [r7, #16]
 80145d6:	3601      	adds	r6, #1
 80145d8:	4630      	mov	r0, r6
 80145da:	b003      	add	sp, #12
 80145dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e0:	6812      	ldr	r2, [r2, #0]
 80145e2:	3b04      	subs	r3, #4
 80145e4:	2a00      	cmp	r2, #0
 80145e6:	d1cb      	bne.n	8014580 <quorem+0x94>
 80145e8:	3c01      	subs	r4, #1
 80145ea:	e7c6      	b.n	801457a <quorem+0x8e>
 80145ec:	6812      	ldr	r2, [r2, #0]
 80145ee:	3b04      	subs	r3, #4
 80145f0:	2a00      	cmp	r2, #0
 80145f2:	d1ef      	bne.n	80145d4 <quorem+0xe8>
 80145f4:	3c01      	subs	r4, #1
 80145f6:	e7ea      	b.n	80145ce <quorem+0xe2>
 80145f8:	2000      	movs	r0, #0
 80145fa:	e7ee      	b.n	80145da <quorem+0xee>
 80145fc:	0000      	movs	r0, r0
	...

08014600 <_dtoa_r>:
 8014600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014604:	69c7      	ldr	r7, [r0, #28]
 8014606:	b097      	sub	sp, #92	@ 0x5c
 8014608:	ed8d 0b04 	vstr	d0, [sp, #16]
 801460c:	ec55 4b10 	vmov	r4, r5, d0
 8014610:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014612:	9107      	str	r1, [sp, #28]
 8014614:	4681      	mov	r9, r0
 8014616:	920c      	str	r2, [sp, #48]	@ 0x30
 8014618:	9311      	str	r3, [sp, #68]	@ 0x44
 801461a:	b97f      	cbnz	r7, 801463c <_dtoa_r+0x3c>
 801461c:	2010      	movs	r0, #16
 801461e:	f7fe fab3 	bl	8012b88 <malloc>
 8014622:	4602      	mov	r2, r0
 8014624:	f8c9 001c 	str.w	r0, [r9, #28]
 8014628:	b920      	cbnz	r0, 8014634 <_dtoa_r+0x34>
 801462a:	4ba9      	ldr	r3, [pc, #676]	@ (80148d0 <_dtoa_r+0x2d0>)
 801462c:	21ef      	movs	r1, #239	@ 0xef
 801462e:	48a9      	ldr	r0, [pc, #676]	@ (80148d4 <_dtoa_r+0x2d4>)
 8014630:	f002 fb66 	bl	8016d00 <__assert_func>
 8014634:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014638:	6007      	str	r7, [r0, #0]
 801463a:	60c7      	str	r7, [r0, #12]
 801463c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014640:	6819      	ldr	r1, [r3, #0]
 8014642:	b159      	cbz	r1, 801465c <_dtoa_r+0x5c>
 8014644:	685a      	ldr	r2, [r3, #4]
 8014646:	604a      	str	r2, [r1, #4]
 8014648:	2301      	movs	r3, #1
 801464a:	4093      	lsls	r3, r2
 801464c:	608b      	str	r3, [r1, #8]
 801464e:	4648      	mov	r0, r9
 8014650:	f001 fcc0 	bl	8015fd4 <_Bfree>
 8014654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014658:	2200      	movs	r2, #0
 801465a:	601a      	str	r2, [r3, #0]
 801465c:	1e2b      	subs	r3, r5, #0
 801465e:	bfb9      	ittee	lt
 8014660:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014664:	9305      	strlt	r3, [sp, #20]
 8014666:	2300      	movge	r3, #0
 8014668:	6033      	strge	r3, [r6, #0]
 801466a:	9f05      	ldr	r7, [sp, #20]
 801466c:	4b9a      	ldr	r3, [pc, #616]	@ (80148d8 <_dtoa_r+0x2d8>)
 801466e:	bfbc      	itt	lt
 8014670:	2201      	movlt	r2, #1
 8014672:	6032      	strlt	r2, [r6, #0]
 8014674:	43bb      	bics	r3, r7
 8014676:	d112      	bne.n	801469e <_dtoa_r+0x9e>
 8014678:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801467a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801467e:	6013      	str	r3, [r2, #0]
 8014680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014684:	4323      	orrs	r3, r4
 8014686:	f000 855a 	beq.w	801513e <_dtoa_r+0xb3e>
 801468a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801468c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80148ec <_dtoa_r+0x2ec>
 8014690:	2b00      	cmp	r3, #0
 8014692:	f000 855c 	beq.w	801514e <_dtoa_r+0xb4e>
 8014696:	f10a 0303 	add.w	r3, sl, #3
 801469a:	f000 bd56 	b.w	801514a <_dtoa_r+0xb4a>
 801469e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80146a2:	2200      	movs	r2, #0
 80146a4:	ec51 0b17 	vmov	r0, r1, d7
 80146a8:	2300      	movs	r3, #0
 80146aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80146ae:	f7ec fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80146b2:	4680      	mov	r8, r0
 80146b4:	b158      	cbz	r0, 80146ce <_dtoa_r+0xce>
 80146b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80146b8:	2301      	movs	r3, #1
 80146ba:	6013      	str	r3, [r2, #0]
 80146bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80146be:	b113      	cbz	r3, 80146c6 <_dtoa_r+0xc6>
 80146c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80146c2:	4b86      	ldr	r3, [pc, #536]	@ (80148dc <_dtoa_r+0x2dc>)
 80146c4:	6013      	str	r3, [r2, #0]
 80146c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80148f0 <_dtoa_r+0x2f0>
 80146ca:	f000 bd40 	b.w	801514e <_dtoa_r+0xb4e>
 80146ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80146d2:	aa14      	add	r2, sp, #80	@ 0x50
 80146d4:	a915      	add	r1, sp, #84	@ 0x54
 80146d6:	4648      	mov	r0, r9
 80146d8:	f002 f818 	bl	801670c <__d2b>
 80146dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80146e0:	9002      	str	r0, [sp, #8]
 80146e2:	2e00      	cmp	r6, #0
 80146e4:	d078      	beq.n	80147d8 <_dtoa_r+0x1d8>
 80146e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80146e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80146ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80146f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80146f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80146f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80146fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014700:	4619      	mov	r1, r3
 8014702:	2200      	movs	r2, #0
 8014704:	4b76      	ldr	r3, [pc, #472]	@ (80148e0 <_dtoa_r+0x2e0>)
 8014706:	f7eb fdc7 	bl	8000298 <__aeabi_dsub>
 801470a:	a36b      	add	r3, pc, #428	@ (adr r3, 80148b8 <_dtoa_r+0x2b8>)
 801470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014710:	f7eb ff7a 	bl	8000608 <__aeabi_dmul>
 8014714:	a36a      	add	r3, pc, #424	@ (adr r3, 80148c0 <_dtoa_r+0x2c0>)
 8014716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471a:	f7eb fdbf 	bl	800029c <__adddf3>
 801471e:	4604      	mov	r4, r0
 8014720:	4630      	mov	r0, r6
 8014722:	460d      	mov	r5, r1
 8014724:	f7eb ff06 	bl	8000534 <__aeabi_i2d>
 8014728:	a367      	add	r3, pc, #412	@ (adr r3, 80148c8 <_dtoa_r+0x2c8>)
 801472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472e:	f7eb ff6b 	bl	8000608 <__aeabi_dmul>
 8014732:	4602      	mov	r2, r0
 8014734:	460b      	mov	r3, r1
 8014736:	4620      	mov	r0, r4
 8014738:	4629      	mov	r1, r5
 801473a:	f7eb fdaf 	bl	800029c <__adddf3>
 801473e:	4604      	mov	r4, r0
 8014740:	460d      	mov	r5, r1
 8014742:	f7ec fa11 	bl	8000b68 <__aeabi_d2iz>
 8014746:	2200      	movs	r2, #0
 8014748:	4607      	mov	r7, r0
 801474a:	2300      	movs	r3, #0
 801474c:	4620      	mov	r0, r4
 801474e:	4629      	mov	r1, r5
 8014750:	f7ec f9cc 	bl	8000aec <__aeabi_dcmplt>
 8014754:	b140      	cbz	r0, 8014768 <_dtoa_r+0x168>
 8014756:	4638      	mov	r0, r7
 8014758:	f7eb feec 	bl	8000534 <__aeabi_i2d>
 801475c:	4622      	mov	r2, r4
 801475e:	462b      	mov	r3, r5
 8014760:	f7ec f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8014764:	b900      	cbnz	r0, 8014768 <_dtoa_r+0x168>
 8014766:	3f01      	subs	r7, #1
 8014768:	2f16      	cmp	r7, #22
 801476a:	d852      	bhi.n	8014812 <_dtoa_r+0x212>
 801476c:	4b5d      	ldr	r3, [pc, #372]	@ (80148e4 <_dtoa_r+0x2e4>)
 801476e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801477a:	f7ec f9b7 	bl	8000aec <__aeabi_dcmplt>
 801477e:	2800      	cmp	r0, #0
 8014780:	d049      	beq.n	8014816 <_dtoa_r+0x216>
 8014782:	3f01      	subs	r7, #1
 8014784:	2300      	movs	r3, #0
 8014786:	9310      	str	r3, [sp, #64]	@ 0x40
 8014788:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801478a:	1b9b      	subs	r3, r3, r6
 801478c:	1e5a      	subs	r2, r3, #1
 801478e:	bf45      	ittet	mi
 8014790:	f1c3 0301 	rsbmi	r3, r3, #1
 8014794:	9300      	strmi	r3, [sp, #0]
 8014796:	2300      	movpl	r3, #0
 8014798:	2300      	movmi	r3, #0
 801479a:	9206      	str	r2, [sp, #24]
 801479c:	bf54      	ite	pl
 801479e:	9300      	strpl	r3, [sp, #0]
 80147a0:	9306      	strmi	r3, [sp, #24]
 80147a2:	2f00      	cmp	r7, #0
 80147a4:	db39      	blt.n	801481a <_dtoa_r+0x21a>
 80147a6:	9b06      	ldr	r3, [sp, #24]
 80147a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80147aa:	443b      	add	r3, r7
 80147ac:	9306      	str	r3, [sp, #24]
 80147ae:	2300      	movs	r3, #0
 80147b0:	9308      	str	r3, [sp, #32]
 80147b2:	9b07      	ldr	r3, [sp, #28]
 80147b4:	2b09      	cmp	r3, #9
 80147b6:	d863      	bhi.n	8014880 <_dtoa_r+0x280>
 80147b8:	2b05      	cmp	r3, #5
 80147ba:	bfc4      	itt	gt
 80147bc:	3b04      	subgt	r3, #4
 80147be:	9307      	strgt	r3, [sp, #28]
 80147c0:	9b07      	ldr	r3, [sp, #28]
 80147c2:	f1a3 0302 	sub.w	r3, r3, #2
 80147c6:	bfcc      	ite	gt
 80147c8:	2400      	movgt	r4, #0
 80147ca:	2401      	movle	r4, #1
 80147cc:	2b03      	cmp	r3, #3
 80147ce:	d863      	bhi.n	8014898 <_dtoa_r+0x298>
 80147d0:	e8df f003 	tbb	[pc, r3]
 80147d4:	2b375452 	.word	0x2b375452
 80147d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80147dc:	441e      	add	r6, r3
 80147de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80147e2:	2b20      	cmp	r3, #32
 80147e4:	bfc1      	itttt	gt
 80147e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80147ea:	409f      	lslgt	r7, r3
 80147ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80147f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80147f4:	bfd6      	itet	le
 80147f6:	f1c3 0320 	rsble	r3, r3, #32
 80147fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80147fe:	fa04 f003 	lslle.w	r0, r4, r3
 8014802:	f7eb fe87 	bl	8000514 <__aeabi_ui2d>
 8014806:	2201      	movs	r2, #1
 8014808:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801480c:	3e01      	subs	r6, #1
 801480e:	9212      	str	r2, [sp, #72]	@ 0x48
 8014810:	e776      	b.n	8014700 <_dtoa_r+0x100>
 8014812:	2301      	movs	r3, #1
 8014814:	e7b7      	b.n	8014786 <_dtoa_r+0x186>
 8014816:	9010      	str	r0, [sp, #64]	@ 0x40
 8014818:	e7b6      	b.n	8014788 <_dtoa_r+0x188>
 801481a:	9b00      	ldr	r3, [sp, #0]
 801481c:	1bdb      	subs	r3, r3, r7
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	427b      	negs	r3, r7
 8014822:	9308      	str	r3, [sp, #32]
 8014824:	2300      	movs	r3, #0
 8014826:	930d      	str	r3, [sp, #52]	@ 0x34
 8014828:	e7c3      	b.n	80147b2 <_dtoa_r+0x1b2>
 801482a:	2301      	movs	r3, #1
 801482c:	9309      	str	r3, [sp, #36]	@ 0x24
 801482e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014830:	eb07 0b03 	add.w	fp, r7, r3
 8014834:	f10b 0301 	add.w	r3, fp, #1
 8014838:	2b01      	cmp	r3, #1
 801483a:	9303      	str	r3, [sp, #12]
 801483c:	bfb8      	it	lt
 801483e:	2301      	movlt	r3, #1
 8014840:	e006      	b.n	8014850 <_dtoa_r+0x250>
 8014842:	2301      	movs	r3, #1
 8014844:	9309      	str	r3, [sp, #36]	@ 0x24
 8014846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014848:	2b00      	cmp	r3, #0
 801484a:	dd28      	ble.n	801489e <_dtoa_r+0x29e>
 801484c:	469b      	mov	fp, r3
 801484e:	9303      	str	r3, [sp, #12]
 8014850:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8014854:	2100      	movs	r1, #0
 8014856:	2204      	movs	r2, #4
 8014858:	f102 0514 	add.w	r5, r2, #20
 801485c:	429d      	cmp	r5, r3
 801485e:	d926      	bls.n	80148ae <_dtoa_r+0x2ae>
 8014860:	6041      	str	r1, [r0, #4]
 8014862:	4648      	mov	r0, r9
 8014864:	f001 fb76 	bl	8015f54 <_Balloc>
 8014868:	4682      	mov	sl, r0
 801486a:	2800      	cmp	r0, #0
 801486c:	d142      	bne.n	80148f4 <_dtoa_r+0x2f4>
 801486e:	4b1e      	ldr	r3, [pc, #120]	@ (80148e8 <_dtoa_r+0x2e8>)
 8014870:	4602      	mov	r2, r0
 8014872:	f240 11af 	movw	r1, #431	@ 0x1af
 8014876:	e6da      	b.n	801462e <_dtoa_r+0x2e>
 8014878:	2300      	movs	r3, #0
 801487a:	e7e3      	b.n	8014844 <_dtoa_r+0x244>
 801487c:	2300      	movs	r3, #0
 801487e:	e7d5      	b.n	801482c <_dtoa_r+0x22c>
 8014880:	2401      	movs	r4, #1
 8014882:	2300      	movs	r3, #0
 8014884:	9307      	str	r3, [sp, #28]
 8014886:	9409      	str	r4, [sp, #36]	@ 0x24
 8014888:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801488c:	2200      	movs	r2, #0
 801488e:	f8cd b00c 	str.w	fp, [sp, #12]
 8014892:	2312      	movs	r3, #18
 8014894:	920c      	str	r2, [sp, #48]	@ 0x30
 8014896:	e7db      	b.n	8014850 <_dtoa_r+0x250>
 8014898:	2301      	movs	r3, #1
 801489a:	9309      	str	r3, [sp, #36]	@ 0x24
 801489c:	e7f4      	b.n	8014888 <_dtoa_r+0x288>
 801489e:	f04f 0b01 	mov.w	fp, #1
 80148a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80148a6:	465b      	mov	r3, fp
 80148a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80148ac:	e7d0      	b.n	8014850 <_dtoa_r+0x250>
 80148ae:	3101      	adds	r1, #1
 80148b0:	0052      	lsls	r2, r2, #1
 80148b2:	e7d1      	b.n	8014858 <_dtoa_r+0x258>
 80148b4:	f3af 8000 	nop.w
 80148b8:	636f4361 	.word	0x636f4361
 80148bc:	3fd287a7 	.word	0x3fd287a7
 80148c0:	8b60c8b3 	.word	0x8b60c8b3
 80148c4:	3fc68a28 	.word	0x3fc68a28
 80148c8:	509f79fb 	.word	0x509f79fb
 80148cc:	3fd34413 	.word	0x3fd34413
 80148d0:	080181c4 	.word	0x080181c4
 80148d4:	080181db 	.word	0x080181db
 80148d8:	7ff00000 	.word	0x7ff00000
 80148dc:	08018185 	.word	0x08018185
 80148e0:	3ff80000 	.word	0x3ff80000
 80148e4:	080184d8 	.word	0x080184d8
 80148e8:	08018233 	.word	0x08018233
 80148ec:	080181c0 	.word	0x080181c0
 80148f0:	08018184 	.word	0x08018184
 80148f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80148f8:	6018      	str	r0, [r3, #0]
 80148fa:	9b03      	ldr	r3, [sp, #12]
 80148fc:	2b0e      	cmp	r3, #14
 80148fe:	f200 80a1 	bhi.w	8014a44 <_dtoa_r+0x444>
 8014902:	2c00      	cmp	r4, #0
 8014904:	f000 809e 	beq.w	8014a44 <_dtoa_r+0x444>
 8014908:	2f00      	cmp	r7, #0
 801490a:	dd33      	ble.n	8014974 <_dtoa_r+0x374>
 801490c:	4b9c      	ldr	r3, [pc, #624]	@ (8014b80 <_dtoa_r+0x580>)
 801490e:	f007 020f 	and.w	r2, r7, #15
 8014912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014916:	ed93 7b00 	vldr	d7, [r3]
 801491a:	05f8      	lsls	r0, r7, #23
 801491c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014924:	d516      	bpl.n	8014954 <_dtoa_r+0x354>
 8014926:	4b97      	ldr	r3, [pc, #604]	@ (8014b84 <_dtoa_r+0x584>)
 8014928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801492c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014930:	f7eb ff94 	bl	800085c <__aeabi_ddiv>
 8014934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014938:	f004 040f 	and.w	r4, r4, #15
 801493c:	2603      	movs	r6, #3
 801493e:	4d91      	ldr	r5, [pc, #580]	@ (8014b84 <_dtoa_r+0x584>)
 8014940:	b954      	cbnz	r4, 8014958 <_dtoa_r+0x358>
 8014942:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801494a:	f7eb ff87 	bl	800085c <__aeabi_ddiv>
 801494e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014952:	e028      	b.n	80149a6 <_dtoa_r+0x3a6>
 8014954:	2602      	movs	r6, #2
 8014956:	e7f2      	b.n	801493e <_dtoa_r+0x33e>
 8014958:	07e1      	lsls	r1, r4, #31
 801495a:	d508      	bpl.n	801496e <_dtoa_r+0x36e>
 801495c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014964:	f7eb fe50 	bl	8000608 <__aeabi_dmul>
 8014968:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801496c:	3601      	adds	r6, #1
 801496e:	1064      	asrs	r4, r4, #1
 8014970:	3508      	adds	r5, #8
 8014972:	e7e5      	b.n	8014940 <_dtoa_r+0x340>
 8014974:	f000 80af 	beq.w	8014ad6 <_dtoa_r+0x4d6>
 8014978:	427c      	negs	r4, r7
 801497a:	4b81      	ldr	r3, [pc, #516]	@ (8014b80 <_dtoa_r+0x580>)
 801497c:	4d81      	ldr	r5, [pc, #516]	@ (8014b84 <_dtoa_r+0x584>)
 801497e:	f004 020f 	and.w	r2, r4, #15
 8014982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801498e:	f7eb fe3b 	bl	8000608 <__aeabi_dmul>
 8014992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014996:	1124      	asrs	r4, r4, #4
 8014998:	2300      	movs	r3, #0
 801499a:	2602      	movs	r6, #2
 801499c:	2c00      	cmp	r4, #0
 801499e:	f040 808f 	bne.w	8014ac0 <_dtoa_r+0x4c0>
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1d3      	bne.n	801494e <_dtoa_r+0x34e>
 80149a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80149a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	f000 8094 	beq.w	8014ada <_dtoa_r+0x4da>
 80149b2:	4b75      	ldr	r3, [pc, #468]	@ (8014b88 <_dtoa_r+0x588>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	4620      	mov	r0, r4
 80149b8:	4629      	mov	r1, r5
 80149ba:	f7ec f897 	bl	8000aec <__aeabi_dcmplt>
 80149be:	2800      	cmp	r0, #0
 80149c0:	f000 808b 	beq.w	8014ada <_dtoa_r+0x4da>
 80149c4:	9b03      	ldr	r3, [sp, #12]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	f000 8087 	beq.w	8014ada <_dtoa_r+0x4da>
 80149cc:	f1bb 0f00 	cmp.w	fp, #0
 80149d0:	dd34      	ble.n	8014a3c <_dtoa_r+0x43c>
 80149d2:	4620      	mov	r0, r4
 80149d4:	4b6d      	ldr	r3, [pc, #436]	@ (8014b8c <_dtoa_r+0x58c>)
 80149d6:	2200      	movs	r2, #0
 80149d8:	4629      	mov	r1, r5
 80149da:	f7eb fe15 	bl	8000608 <__aeabi_dmul>
 80149de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80149e2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80149e6:	3601      	adds	r6, #1
 80149e8:	465c      	mov	r4, fp
 80149ea:	4630      	mov	r0, r6
 80149ec:	f7eb fda2 	bl	8000534 <__aeabi_i2d>
 80149f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149f4:	f7eb fe08 	bl	8000608 <__aeabi_dmul>
 80149f8:	4b65      	ldr	r3, [pc, #404]	@ (8014b90 <_dtoa_r+0x590>)
 80149fa:	2200      	movs	r2, #0
 80149fc:	f7eb fc4e 	bl	800029c <__adddf3>
 8014a00:	4605      	mov	r5, r0
 8014a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014a06:	2c00      	cmp	r4, #0
 8014a08:	d16a      	bne.n	8014ae0 <_dtoa_r+0x4e0>
 8014a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a0e:	4b61      	ldr	r3, [pc, #388]	@ (8014b94 <_dtoa_r+0x594>)
 8014a10:	2200      	movs	r2, #0
 8014a12:	f7eb fc41 	bl	8000298 <__aeabi_dsub>
 8014a16:	4602      	mov	r2, r0
 8014a18:	460b      	mov	r3, r1
 8014a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014a1e:	462a      	mov	r2, r5
 8014a20:	4633      	mov	r3, r6
 8014a22:	f7ec f881 	bl	8000b28 <__aeabi_dcmpgt>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	f040 8298 	bne.w	8014f5c <_dtoa_r+0x95c>
 8014a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a30:	462a      	mov	r2, r5
 8014a32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014a36:	f7ec f859 	bl	8000aec <__aeabi_dcmplt>
 8014a3a:	bb38      	cbnz	r0, 8014a8c <_dtoa_r+0x48c>
 8014a3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8014a40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014a44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f2c0 8157 	blt.w	8014cfa <_dtoa_r+0x6fa>
 8014a4c:	2f0e      	cmp	r7, #14
 8014a4e:	f300 8154 	bgt.w	8014cfa <_dtoa_r+0x6fa>
 8014a52:	4b4b      	ldr	r3, [pc, #300]	@ (8014b80 <_dtoa_r+0x580>)
 8014a54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014a58:	ed93 7b00 	vldr	d7, [r3]
 8014a5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	ed8d 7b00 	vstr	d7, [sp]
 8014a64:	f280 80e5 	bge.w	8014c32 <_dtoa_r+0x632>
 8014a68:	9b03      	ldr	r3, [sp, #12]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	f300 80e1 	bgt.w	8014c32 <_dtoa_r+0x632>
 8014a70:	d10c      	bne.n	8014a8c <_dtoa_r+0x48c>
 8014a72:	4b48      	ldr	r3, [pc, #288]	@ (8014b94 <_dtoa_r+0x594>)
 8014a74:	2200      	movs	r2, #0
 8014a76:	ec51 0b17 	vmov	r0, r1, d7
 8014a7a:	f7eb fdc5 	bl	8000608 <__aeabi_dmul>
 8014a7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a82:	f7ec f847 	bl	8000b14 <__aeabi_dcmpge>
 8014a86:	2800      	cmp	r0, #0
 8014a88:	f000 8266 	beq.w	8014f58 <_dtoa_r+0x958>
 8014a8c:	2400      	movs	r4, #0
 8014a8e:	4625      	mov	r5, r4
 8014a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a92:	4656      	mov	r6, sl
 8014a94:	ea6f 0803 	mvn.w	r8, r3
 8014a98:	2700      	movs	r7, #0
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	4648      	mov	r0, r9
 8014a9e:	f001 fa99 	bl	8015fd4 <_Bfree>
 8014aa2:	2d00      	cmp	r5, #0
 8014aa4:	f000 80bd 	beq.w	8014c22 <_dtoa_r+0x622>
 8014aa8:	b12f      	cbz	r7, 8014ab6 <_dtoa_r+0x4b6>
 8014aaa:	42af      	cmp	r7, r5
 8014aac:	d003      	beq.n	8014ab6 <_dtoa_r+0x4b6>
 8014aae:	4639      	mov	r1, r7
 8014ab0:	4648      	mov	r0, r9
 8014ab2:	f001 fa8f 	bl	8015fd4 <_Bfree>
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	4648      	mov	r0, r9
 8014aba:	f001 fa8b 	bl	8015fd4 <_Bfree>
 8014abe:	e0b0      	b.n	8014c22 <_dtoa_r+0x622>
 8014ac0:	07e2      	lsls	r2, r4, #31
 8014ac2:	d505      	bpl.n	8014ad0 <_dtoa_r+0x4d0>
 8014ac4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ac8:	f7eb fd9e 	bl	8000608 <__aeabi_dmul>
 8014acc:	3601      	adds	r6, #1
 8014ace:	2301      	movs	r3, #1
 8014ad0:	1064      	asrs	r4, r4, #1
 8014ad2:	3508      	adds	r5, #8
 8014ad4:	e762      	b.n	801499c <_dtoa_r+0x39c>
 8014ad6:	2602      	movs	r6, #2
 8014ad8:	e765      	b.n	80149a6 <_dtoa_r+0x3a6>
 8014ada:	9c03      	ldr	r4, [sp, #12]
 8014adc:	46b8      	mov	r8, r7
 8014ade:	e784      	b.n	80149ea <_dtoa_r+0x3ea>
 8014ae0:	4b27      	ldr	r3, [pc, #156]	@ (8014b80 <_dtoa_r+0x580>)
 8014ae2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014ae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014ae8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014aec:	4454      	add	r4, sl
 8014aee:	2900      	cmp	r1, #0
 8014af0:	d054      	beq.n	8014b9c <_dtoa_r+0x59c>
 8014af2:	4929      	ldr	r1, [pc, #164]	@ (8014b98 <_dtoa_r+0x598>)
 8014af4:	2000      	movs	r0, #0
 8014af6:	f7eb feb1 	bl	800085c <__aeabi_ddiv>
 8014afa:	4633      	mov	r3, r6
 8014afc:	462a      	mov	r2, r5
 8014afe:	f7eb fbcb 	bl	8000298 <__aeabi_dsub>
 8014b02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014b06:	4656      	mov	r6, sl
 8014b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b0c:	f7ec f82c 	bl	8000b68 <__aeabi_d2iz>
 8014b10:	4605      	mov	r5, r0
 8014b12:	f7eb fd0f 	bl	8000534 <__aeabi_i2d>
 8014b16:	4602      	mov	r2, r0
 8014b18:	460b      	mov	r3, r1
 8014b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b1e:	f7eb fbbb 	bl	8000298 <__aeabi_dsub>
 8014b22:	3530      	adds	r5, #48	@ 0x30
 8014b24:	4602      	mov	r2, r0
 8014b26:	460b      	mov	r3, r1
 8014b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014b2c:	f806 5b01 	strb.w	r5, [r6], #1
 8014b30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014b34:	f7eb ffda 	bl	8000aec <__aeabi_dcmplt>
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	d172      	bne.n	8014c22 <_dtoa_r+0x622>
 8014b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b40:	4911      	ldr	r1, [pc, #68]	@ (8014b88 <_dtoa_r+0x588>)
 8014b42:	2000      	movs	r0, #0
 8014b44:	f7eb fba8 	bl	8000298 <__aeabi_dsub>
 8014b48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014b4c:	f7eb ffce 	bl	8000aec <__aeabi_dcmplt>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	f040 80b4 	bne.w	8014cbe <_dtoa_r+0x6be>
 8014b56:	42a6      	cmp	r6, r4
 8014b58:	f43f af70 	beq.w	8014a3c <_dtoa_r+0x43c>
 8014b5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014b60:	4b0a      	ldr	r3, [pc, #40]	@ (8014b8c <_dtoa_r+0x58c>)
 8014b62:	2200      	movs	r2, #0
 8014b64:	f7eb fd50 	bl	8000608 <__aeabi_dmul>
 8014b68:	4b08      	ldr	r3, [pc, #32]	@ (8014b8c <_dtoa_r+0x58c>)
 8014b6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014b6e:	2200      	movs	r2, #0
 8014b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b74:	f7eb fd48 	bl	8000608 <__aeabi_dmul>
 8014b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b7c:	e7c4      	b.n	8014b08 <_dtoa_r+0x508>
 8014b7e:	bf00      	nop
 8014b80:	080184d8 	.word	0x080184d8
 8014b84:	080184b0 	.word	0x080184b0
 8014b88:	3ff00000 	.word	0x3ff00000
 8014b8c:	40240000 	.word	0x40240000
 8014b90:	401c0000 	.word	0x401c0000
 8014b94:	40140000 	.word	0x40140000
 8014b98:	3fe00000 	.word	0x3fe00000
 8014b9c:	4631      	mov	r1, r6
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f7eb fd32 	bl	8000608 <__aeabi_dmul>
 8014ba4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014ba8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8014baa:	4656      	mov	r6, sl
 8014bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014bb0:	f7eb ffda 	bl	8000b68 <__aeabi_d2iz>
 8014bb4:	4605      	mov	r5, r0
 8014bb6:	f7eb fcbd 	bl	8000534 <__aeabi_i2d>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014bc2:	f7eb fb69 	bl	8000298 <__aeabi_dsub>
 8014bc6:	3530      	adds	r5, #48	@ 0x30
 8014bc8:	f806 5b01 	strb.w	r5, [r6], #1
 8014bcc:	4602      	mov	r2, r0
 8014bce:	460b      	mov	r3, r1
 8014bd0:	42a6      	cmp	r6, r4
 8014bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014bd6:	f04f 0200 	mov.w	r2, #0
 8014bda:	d124      	bne.n	8014c26 <_dtoa_r+0x626>
 8014bdc:	4baf      	ldr	r3, [pc, #700]	@ (8014e9c <_dtoa_r+0x89c>)
 8014bde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014be2:	f7eb fb5b 	bl	800029c <__adddf3>
 8014be6:	4602      	mov	r2, r0
 8014be8:	460b      	mov	r3, r1
 8014bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014bee:	f7eb ff9b 	bl	8000b28 <__aeabi_dcmpgt>
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	d163      	bne.n	8014cbe <_dtoa_r+0x6be>
 8014bf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014bfa:	49a8      	ldr	r1, [pc, #672]	@ (8014e9c <_dtoa_r+0x89c>)
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	f7eb fb4b 	bl	8000298 <__aeabi_dsub>
 8014c02:	4602      	mov	r2, r0
 8014c04:	460b      	mov	r3, r1
 8014c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c0a:	f7eb ff6f 	bl	8000aec <__aeabi_dcmplt>
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	f43f af14 	beq.w	8014a3c <_dtoa_r+0x43c>
 8014c14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014c16:	1e73      	subs	r3, r6, #1
 8014c18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014c1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014c1e:	2b30      	cmp	r3, #48	@ 0x30
 8014c20:	d0f8      	beq.n	8014c14 <_dtoa_r+0x614>
 8014c22:	4647      	mov	r7, r8
 8014c24:	e03b      	b.n	8014c9e <_dtoa_r+0x69e>
 8014c26:	4b9e      	ldr	r3, [pc, #632]	@ (8014ea0 <_dtoa_r+0x8a0>)
 8014c28:	f7eb fcee 	bl	8000608 <__aeabi_dmul>
 8014c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c30:	e7bc      	b.n	8014bac <_dtoa_r+0x5ac>
 8014c32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014c36:	4656      	mov	r6, sl
 8014c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	4629      	mov	r1, r5
 8014c40:	f7eb fe0c 	bl	800085c <__aeabi_ddiv>
 8014c44:	f7eb ff90 	bl	8000b68 <__aeabi_d2iz>
 8014c48:	4680      	mov	r8, r0
 8014c4a:	f7eb fc73 	bl	8000534 <__aeabi_i2d>
 8014c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c52:	f7eb fcd9 	bl	8000608 <__aeabi_dmul>
 8014c56:	4602      	mov	r2, r0
 8014c58:	460b      	mov	r3, r1
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	4629      	mov	r1, r5
 8014c5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8014c62:	f7eb fb19 	bl	8000298 <__aeabi_dsub>
 8014c66:	f806 4b01 	strb.w	r4, [r6], #1
 8014c6a:	9d03      	ldr	r5, [sp, #12]
 8014c6c:	eba6 040a 	sub.w	r4, r6, sl
 8014c70:	42a5      	cmp	r5, r4
 8014c72:	4602      	mov	r2, r0
 8014c74:	460b      	mov	r3, r1
 8014c76:	d133      	bne.n	8014ce0 <_dtoa_r+0x6e0>
 8014c78:	f7eb fb10 	bl	800029c <__adddf3>
 8014c7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c80:	4604      	mov	r4, r0
 8014c82:	460d      	mov	r5, r1
 8014c84:	f7eb ff50 	bl	8000b28 <__aeabi_dcmpgt>
 8014c88:	b9c0      	cbnz	r0, 8014cbc <_dtoa_r+0x6bc>
 8014c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c8e:	4620      	mov	r0, r4
 8014c90:	4629      	mov	r1, r5
 8014c92:	f7eb ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 8014c96:	b110      	cbz	r0, 8014c9e <_dtoa_r+0x69e>
 8014c98:	f018 0f01 	tst.w	r8, #1
 8014c9c:	d10e      	bne.n	8014cbc <_dtoa_r+0x6bc>
 8014c9e:	9902      	ldr	r1, [sp, #8]
 8014ca0:	4648      	mov	r0, r9
 8014ca2:	f001 f997 	bl	8015fd4 <_Bfree>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	7033      	strb	r3, [r6, #0]
 8014caa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014cac:	3701      	adds	r7, #1
 8014cae:	601f      	str	r7, [r3, #0]
 8014cb0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f000 824b 	beq.w	801514e <_dtoa_r+0xb4e>
 8014cb8:	601e      	str	r6, [r3, #0]
 8014cba:	e248      	b.n	801514e <_dtoa_r+0xb4e>
 8014cbc:	46b8      	mov	r8, r7
 8014cbe:	4633      	mov	r3, r6
 8014cc0:	461e      	mov	r6, r3
 8014cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014cc6:	2a39      	cmp	r2, #57	@ 0x39
 8014cc8:	d106      	bne.n	8014cd8 <_dtoa_r+0x6d8>
 8014cca:	459a      	cmp	sl, r3
 8014ccc:	d1f8      	bne.n	8014cc0 <_dtoa_r+0x6c0>
 8014cce:	2230      	movs	r2, #48	@ 0x30
 8014cd0:	f108 0801 	add.w	r8, r8, #1
 8014cd4:	f88a 2000 	strb.w	r2, [sl]
 8014cd8:	781a      	ldrb	r2, [r3, #0]
 8014cda:	3201      	adds	r2, #1
 8014cdc:	701a      	strb	r2, [r3, #0]
 8014cde:	e7a0      	b.n	8014c22 <_dtoa_r+0x622>
 8014ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8014ea0 <_dtoa_r+0x8a0>)
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	f7eb fc90 	bl	8000608 <__aeabi_dmul>
 8014ce8:	2200      	movs	r2, #0
 8014cea:	2300      	movs	r3, #0
 8014cec:	4604      	mov	r4, r0
 8014cee:	460d      	mov	r5, r1
 8014cf0:	f7eb fef2 	bl	8000ad8 <__aeabi_dcmpeq>
 8014cf4:	2800      	cmp	r0, #0
 8014cf6:	d09f      	beq.n	8014c38 <_dtoa_r+0x638>
 8014cf8:	e7d1      	b.n	8014c9e <_dtoa_r+0x69e>
 8014cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014cfc:	2a00      	cmp	r2, #0
 8014cfe:	f000 80ea 	beq.w	8014ed6 <_dtoa_r+0x8d6>
 8014d02:	9a07      	ldr	r2, [sp, #28]
 8014d04:	2a01      	cmp	r2, #1
 8014d06:	f300 80cd 	bgt.w	8014ea4 <_dtoa_r+0x8a4>
 8014d0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014d0c:	2a00      	cmp	r2, #0
 8014d0e:	f000 80c1 	beq.w	8014e94 <_dtoa_r+0x894>
 8014d12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014d16:	9c08      	ldr	r4, [sp, #32]
 8014d18:	9e00      	ldr	r6, [sp, #0]
 8014d1a:	9a00      	ldr	r2, [sp, #0]
 8014d1c:	441a      	add	r2, r3
 8014d1e:	9200      	str	r2, [sp, #0]
 8014d20:	9a06      	ldr	r2, [sp, #24]
 8014d22:	2101      	movs	r1, #1
 8014d24:	441a      	add	r2, r3
 8014d26:	4648      	mov	r0, r9
 8014d28:	9206      	str	r2, [sp, #24]
 8014d2a:	f001 fa51 	bl	80161d0 <__i2b>
 8014d2e:	4605      	mov	r5, r0
 8014d30:	b166      	cbz	r6, 8014d4c <_dtoa_r+0x74c>
 8014d32:	9b06      	ldr	r3, [sp, #24]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	dd09      	ble.n	8014d4c <_dtoa_r+0x74c>
 8014d38:	42b3      	cmp	r3, r6
 8014d3a:	9a00      	ldr	r2, [sp, #0]
 8014d3c:	bfa8      	it	ge
 8014d3e:	4633      	movge	r3, r6
 8014d40:	1ad2      	subs	r2, r2, r3
 8014d42:	9200      	str	r2, [sp, #0]
 8014d44:	9a06      	ldr	r2, [sp, #24]
 8014d46:	1af6      	subs	r6, r6, r3
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	9306      	str	r3, [sp, #24]
 8014d4c:	9b08      	ldr	r3, [sp, #32]
 8014d4e:	b30b      	cbz	r3, 8014d94 <_dtoa_r+0x794>
 8014d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f000 80c6 	beq.w	8014ee4 <_dtoa_r+0x8e4>
 8014d58:	2c00      	cmp	r4, #0
 8014d5a:	f000 80c0 	beq.w	8014ede <_dtoa_r+0x8de>
 8014d5e:	4629      	mov	r1, r5
 8014d60:	4622      	mov	r2, r4
 8014d62:	4648      	mov	r0, r9
 8014d64:	f001 faec 	bl	8016340 <__pow5mult>
 8014d68:	9a02      	ldr	r2, [sp, #8]
 8014d6a:	4601      	mov	r1, r0
 8014d6c:	4605      	mov	r5, r0
 8014d6e:	4648      	mov	r0, r9
 8014d70:	f001 fa44 	bl	80161fc <__multiply>
 8014d74:	9902      	ldr	r1, [sp, #8]
 8014d76:	4680      	mov	r8, r0
 8014d78:	4648      	mov	r0, r9
 8014d7a:	f001 f92b 	bl	8015fd4 <_Bfree>
 8014d7e:	9b08      	ldr	r3, [sp, #32]
 8014d80:	1b1b      	subs	r3, r3, r4
 8014d82:	9308      	str	r3, [sp, #32]
 8014d84:	f000 80b1 	beq.w	8014eea <_dtoa_r+0x8ea>
 8014d88:	9a08      	ldr	r2, [sp, #32]
 8014d8a:	4641      	mov	r1, r8
 8014d8c:	4648      	mov	r0, r9
 8014d8e:	f001 fad7 	bl	8016340 <__pow5mult>
 8014d92:	9002      	str	r0, [sp, #8]
 8014d94:	2101      	movs	r1, #1
 8014d96:	4648      	mov	r0, r9
 8014d98:	f001 fa1a 	bl	80161d0 <__i2b>
 8014d9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d9e:	4604      	mov	r4, r0
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	f000 81d8 	beq.w	8015156 <_dtoa_r+0xb56>
 8014da6:	461a      	mov	r2, r3
 8014da8:	4601      	mov	r1, r0
 8014daa:	4648      	mov	r0, r9
 8014dac:	f001 fac8 	bl	8016340 <__pow5mult>
 8014db0:	9b07      	ldr	r3, [sp, #28]
 8014db2:	2b01      	cmp	r3, #1
 8014db4:	4604      	mov	r4, r0
 8014db6:	f300 809f 	bgt.w	8014ef8 <_dtoa_r+0x8f8>
 8014dba:	9b04      	ldr	r3, [sp, #16]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	f040 8097 	bne.w	8014ef0 <_dtoa_r+0x8f0>
 8014dc2:	9b05      	ldr	r3, [sp, #20]
 8014dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f040 8093 	bne.w	8014ef4 <_dtoa_r+0x8f4>
 8014dce:	9b05      	ldr	r3, [sp, #20]
 8014dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014dd4:	0d1b      	lsrs	r3, r3, #20
 8014dd6:	051b      	lsls	r3, r3, #20
 8014dd8:	b133      	cbz	r3, 8014de8 <_dtoa_r+0x7e8>
 8014dda:	9b00      	ldr	r3, [sp, #0]
 8014ddc:	3301      	adds	r3, #1
 8014dde:	9300      	str	r3, [sp, #0]
 8014de0:	9b06      	ldr	r3, [sp, #24]
 8014de2:	3301      	adds	r3, #1
 8014de4:	9306      	str	r3, [sp, #24]
 8014de6:	2301      	movs	r3, #1
 8014de8:	9308      	str	r3, [sp, #32]
 8014dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	f000 81b8 	beq.w	8015162 <_dtoa_r+0xb62>
 8014df2:	6923      	ldr	r3, [r4, #16]
 8014df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014df8:	6918      	ldr	r0, [r3, #16]
 8014dfa:	f001 f99d 	bl	8016138 <__hi0bits>
 8014dfe:	f1c0 0020 	rsb	r0, r0, #32
 8014e02:	9b06      	ldr	r3, [sp, #24]
 8014e04:	4418      	add	r0, r3
 8014e06:	f010 001f 	ands.w	r0, r0, #31
 8014e0a:	f000 8082 	beq.w	8014f12 <_dtoa_r+0x912>
 8014e0e:	f1c0 0320 	rsb	r3, r0, #32
 8014e12:	2b04      	cmp	r3, #4
 8014e14:	dd73      	ble.n	8014efe <_dtoa_r+0x8fe>
 8014e16:	9b00      	ldr	r3, [sp, #0]
 8014e18:	f1c0 001c 	rsb	r0, r0, #28
 8014e1c:	4403      	add	r3, r0
 8014e1e:	9300      	str	r3, [sp, #0]
 8014e20:	9b06      	ldr	r3, [sp, #24]
 8014e22:	4403      	add	r3, r0
 8014e24:	4406      	add	r6, r0
 8014e26:	9306      	str	r3, [sp, #24]
 8014e28:	9b00      	ldr	r3, [sp, #0]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	dd05      	ble.n	8014e3a <_dtoa_r+0x83a>
 8014e2e:	9902      	ldr	r1, [sp, #8]
 8014e30:	461a      	mov	r2, r3
 8014e32:	4648      	mov	r0, r9
 8014e34:	f001 fade 	bl	80163f4 <__lshift>
 8014e38:	9002      	str	r0, [sp, #8]
 8014e3a:	9b06      	ldr	r3, [sp, #24]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	dd05      	ble.n	8014e4c <_dtoa_r+0x84c>
 8014e40:	4621      	mov	r1, r4
 8014e42:	461a      	mov	r2, r3
 8014e44:	4648      	mov	r0, r9
 8014e46:	f001 fad5 	bl	80163f4 <__lshift>
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d061      	beq.n	8014f16 <_dtoa_r+0x916>
 8014e52:	9802      	ldr	r0, [sp, #8]
 8014e54:	4621      	mov	r1, r4
 8014e56:	f001 fb39 	bl	80164cc <__mcmp>
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	da5b      	bge.n	8014f16 <_dtoa_r+0x916>
 8014e5e:	2300      	movs	r3, #0
 8014e60:	9902      	ldr	r1, [sp, #8]
 8014e62:	220a      	movs	r2, #10
 8014e64:	4648      	mov	r0, r9
 8014e66:	f001 f8d7 	bl	8016018 <__multadd>
 8014e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e6c:	9002      	str	r0, [sp, #8]
 8014e6e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	f000 8177 	beq.w	8015166 <_dtoa_r+0xb66>
 8014e78:	4629      	mov	r1, r5
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	220a      	movs	r2, #10
 8014e7e:	4648      	mov	r0, r9
 8014e80:	f001 f8ca 	bl	8016018 <__multadd>
 8014e84:	f1bb 0f00 	cmp.w	fp, #0
 8014e88:	4605      	mov	r5, r0
 8014e8a:	dc6f      	bgt.n	8014f6c <_dtoa_r+0x96c>
 8014e8c:	9b07      	ldr	r3, [sp, #28]
 8014e8e:	2b02      	cmp	r3, #2
 8014e90:	dc49      	bgt.n	8014f26 <_dtoa_r+0x926>
 8014e92:	e06b      	b.n	8014f6c <_dtoa_r+0x96c>
 8014e94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014e96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014e9a:	e73c      	b.n	8014d16 <_dtoa_r+0x716>
 8014e9c:	3fe00000 	.word	0x3fe00000
 8014ea0:	40240000 	.word	0x40240000
 8014ea4:	9b03      	ldr	r3, [sp, #12]
 8014ea6:	1e5c      	subs	r4, r3, #1
 8014ea8:	9b08      	ldr	r3, [sp, #32]
 8014eaa:	42a3      	cmp	r3, r4
 8014eac:	db09      	blt.n	8014ec2 <_dtoa_r+0x8c2>
 8014eae:	1b1c      	subs	r4, r3, r4
 8014eb0:	9b03      	ldr	r3, [sp, #12]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	f6bf af30 	bge.w	8014d18 <_dtoa_r+0x718>
 8014eb8:	9b00      	ldr	r3, [sp, #0]
 8014eba:	9a03      	ldr	r2, [sp, #12]
 8014ebc:	1a9e      	subs	r6, r3, r2
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	e72b      	b.n	8014d1a <_dtoa_r+0x71a>
 8014ec2:	9b08      	ldr	r3, [sp, #32]
 8014ec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ec6:	9408      	str	r4, [sp, #32]
 8014ec8:	1ae3      	subs	r3, r4, r3
 8014eca:	441a      	add	r2, r3
 8014ecc:	9e00      	ldr	r6, [sp, #0]
 8014ece:	9b03      	ldr	r3, [sp, #12]
 8014ed0:	920d      	str	r2, [sp, #52]	@ 0x34
 8014ed2:	2400      	movs	r4, #0
 8014ed4:	e721      	b.n	8014d1a <_dtoa_r+0x71a>
 8014ed6:	9c08      	ldr	r4, [sp, #32]
 8014ed8:	9e00      	ldr	r6, [sp, #0]
 8014eda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8014edc:	e728      	b.n	8014d30 <_dtoa_r+0x730>
 8014ede:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014ee2:	e751      	b.n	8014d88 <_dtoa_r+0x788>
 8014ee4:	9a08      	ldr	r2, [sp, #32]
 8014ee6:	9902      	ldr	r1, [sp, #8]
 8014ee8:	e750      	b.n	8014d8c <_dtoa_r+0x78c>
 8014eea:	f8cd 8008 	str.w	r8, [sp, #8]
 8014eee:	e751      	b.n	8014d94 <_dtoa_r+0x794>
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	e779      	b.n	8014de8 <_dtoa_r+0x7e8>
 8014ef4:	9b04      	ldr	r3, [sp, #16]
 8014ef6:	e777      	b.n	8014de8 <_dtoa_r+0x7e8>
 8014ef8:	2300      	movs	r3, #0
 8014efa:	9308      	str	r3, [sp, #32]
 8014efc:	e779      	b.n	8014df2 <_dtoa_r+0x7f2>
 8014efe:	d093      	beq.n	8014e28 <_dtoa_r+0x828>
 8014f00:	9a00      	ldr	r2, [sp, #0]
 8014f02:	331c      	adds	r3, #28
 8014f04:	441a      	add	r2, r3
 8014f06:	9200      	str	r2, [sp, #0]
 8014f08:	9a06      	ldr	r2, [sp, #24]
 8014f0a:	441a      	add	r2, r3
 8014f0c:	441e      	add	r6, r3
 8014f0e:	9206      	str	r2, [sp, #24]
 8014f10:	e78a      	b.n	8014e28 <_dtoa_r+0x828>
 8014f12:	4603      	mov	r3, r0
 8014f14:	e7f4      	b.n	8014f00 <_dtoa_r+0x900>
 8014f16:	9b03      	ldr	r3, [sp, #12]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	46b8      	mov	r8, r7
 8014f1c:	dc20      	bgt.n	8014f60 <_dtoa_r+0x960>
 8014f1e:	469b      	mov	fp, r3
 8014f20:	9b07      	ldr	r3, [sp, #28]
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	dd1e      	ble.n	8014f64 <_dtoa_r+0x964>
 8014f26:	f1bb 0f00 	cmp.w	fp, #0
 8014f2a:	f47f adb1 	bne.w	8014a90 <_dtoa_r+0x490>
 8014f2e:	4621      	mov	r1, r4
 8014f30:	465b      	mov	r3, fp
 8014f32:	2205      	movs	r2, #5
 8014f34:	4648      	mov	r0, r9
 8014f36:	f001 f86f 	bl	8016018 <__multadd>
 8014f3a:	4601      	mov	r1, r0
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	9802      	ldr	r0, [sp, #8]
 8014f40:	f001 fac4 	bl	80164cc <__mcmp>
 8014f44:	2800      	cmp	r0, #0
 8014f46:	f77f ada3 	ble.w	8014a90 <_dtoa_r+0x490>
 8014f4a:	4656      	mov	r6, sl
 8014f4c:	2331      	movs	r3, #49	@ 0x31
 8014f4e:	f806 3b01 	strb.w	r3, [r6], #1
 8014f52:	f108 0801 	add.w	r8, r8, #1
 8014f56:	e59f      	b.n	8014a98 <_dtoa_r+0x498>
 8014f58:	9c03      	ldr	r4, [sp, #12]
 8014f5a:	46b8      	mov	r8, r7
 8014f5c:	4625      	mov	r5, r4
 8014f5e:	e7f4      	b.n	8014f4a <_dtoa_r+0x94a>
 8014f60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8014f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	f000 8101 	beq.w	801516e <_dtoa_r+0xb6e>
 8014f6c:	2e00      	cmp	r6, #0
 8014f6e:	dd05      	ble.n	8014f7c <_dtoa_r+0x97c>
 8014f70:	4629      	mov	r1, r5
 8014f72:	4632      	mov	r2, r6
 8014f74:	4648      	mov	r0, r9
 8014f76:	f001 fa3d 	bl	80163f4 <__lshift>
 8014f7a:	4605      	mov	r5, r0
 8014f7c:	9b08      	ldr	r3, [sp, #32]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d05c      	beq.n	801503c <_dtoa_r+0xa3c>
 8014f82:	6869      	ldr	r1, [r5, #4]
 8014f84:	4648      	mov	r0, r9
 8014f86:	f000 ffe5 	bl	8015f54 <_Balloc>
 8014f8a:	4606      	mov	r6, r0
 8014f8c:	b928      	cbnz	r0, 8014f9a <_dtoa_r+0x99a>
 8014f8e:	4b82      	ldr	r3, [pc, #520]	@ (8015198 <_dtoa_r+0xb98>)
 8014f90:	4602      	mov	r2, r0
 8014f92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014f96:	f7ff bb4a 	b.w	801462e <_dtoa_r+0x2e>
 8014f9a:	692a      	ldr	r2, [r5, #16]
 8014f9c:	3202      	adds	r2, #2
 8014f9e:	0092      	lsls	r2, r2, #2
 8014fa0:	f105 010c 	add.w	r1, r5, #12
 8014fa4:	300c      	adds	r0, #12
 8014fa6:	f7ff fa83 	bl	80144b0 <memcpy>
 8014faa:	2201      	movs	r2, #1
 8014fac:	4631      	mov	r1, r6
 8014fae:	4648      	mov	r0, r9
 8014fb0:	f001 fa20 	bl	80163f4 <__lshift>
 8014fb4:	f10a 0301 	add.w	r3, sl, #1
 8014fb8:	9300      	str	r3, [sp, #0]
 8014fba:	eb0a 030b 	add.w	r3, sl, fp
 8014fbe:	9308      	str	r3, [sp, #32]
 8014fc0:	9b04      	ldr	r3, [sp, #16]
 8014fc2:	f003 0301 	and.w	r3, r3, #1
 8014fc6:	462f      	mov	r7, r5
 8014fc8:	9306      	str	r3, [sp, #24]
 8014fca:	4605      	mov	r5, r0
 8014fcc:	9b00      	ldr	r3, [sp, #0]
 8014fce:	9802      	ldr	r0, [sp, #8]
 8014fd0:	4621      	mov	r1, r4
 8014fd2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8014fd6:	f7ff fa89 	bl	80144ec <quorem>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	3330      	adds	r3, #48	@ 0x30
 8014fde:	9003      	str	r0, [sp, #12]
 8014fe0:	4639      	mov	r1, r7
 8014fe2:	9802      	ldr	r0, [sp, #8]
 8014fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fe6:	f001 fa71 	bl	80164cc <__mcmp>
 8014fea:	462a      	mov	r2, r5
 8014fec:	9004      	str	r0, [sp, #16]
 8014fee:	4621      	mov	r1, r4
 8014ff0:	4648      	mov	r0, r9
 8014ff2:	f001 fa87 	bl	8016504 <__mdiff>
 8014ff6:	68c2      	ldr	r2, [r0, #12]
 8014ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ffa:	4606      	mov	r6, r0
 8014ffc:	bb02      	cbnz	r2, 8015040 <_dtoa_r+0xa40>
 8014ffe:	4601      	mov	r1, r0
 8015000:	9802      	ldr	r0, [sp, #8]
 8015002:	f001 fa63 	bl	80164cc <__mcmp>
 8015006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015008:	4602      	mov	r2, r0
 801500a:	4631      	mov	r1, r6
 801500c:	4648      	mov	r0, r9
 801500e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015010:	9309      	str	r3, [sp, #36]	@ 0x24
 8015012:	f000 ffdf 	bl	8015fd4 <_Bfree>
 8015016:	9b07      	ldr	r3, [sp, #28]
 8015018:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801501a:	9e00      	ldr	r6, [sp, #0]
 801501c:	ea42 0103 	orr.w	r1, r2, r3
 8015020:	9b06      	ldr	r3, [sp, #24]
 8015022:	4319      	orrs	r1, r3
 8015024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015026:	d10d      	bne.n	8015044 <_dtoa_r+0xa44>
 8015028:	2b39      	cmp	r3, #57	@ 0x39
 801502a:	d027      	beq.n	801507c <_dtoa_r+0xa7c>
 801502c:	9a04      	ldr	r2, [sp, #16]
 801502e:	2a00      	cmp	r2, #0
 8015030:	dd01      	ble.n	8015036 <_dtoa_r+0xa36>
 8015032:	9b03      	ldr	r3, [sp, #12]
 8015034:	3331      	adds	r3, #49	@ 0x31
 8015036:	f88b 3000 	strb.w	r3, [fp]
 801503a:	e52e      	b.n	8014a9a <_dtoa_r+0x49a>
 801503c:	4628      	mov	r0, r5
 801503e:	e7b9      	b.n	8014fb4 <_dtoa_r+0x9b4>
 8015040:	2201      	movs	r2, #1
 8015042:	e7e2      	b.n	801500a <_dtoa_r+0xa0a>
 8015044:	9904      	ldr	r1, [sp, #16]
 8015046:	2900      	cmp	r1, #0
 8015048:	db04      	blt.n	8015054 <_dtoa_r+0xa54>
 801504a:	9807      	ldr	r0, [sp, #28]
 801504c:	4301      	orrs	r1, r0
 801504e:	9806      	ldr	r0, [sp, #24]
 8015050:	4301      	orrs	r1, r0
 8015052:	d120      	bne.n	8015096 <_dtoa_r+0xa96>
 8015054:	2a00      	cmp	r2, #0
 8015056:	ddee      	ble.n	8015036 <_dtoa_r+0xa36>
 8015058:	9902      	ldr	r1, [sp, #8]
 801505a:	9300      	str	r3, [sp, #0]
 801505c:	2201      	movs	r2, #1
 801505e:	4648      	mov	r0, r9
 8015060:	f001 f9c8 	bl	80163f4 <__lshift>
 8015064:	4621      	mov	r1, r4
 8015066:	9002      	str	r0, [sp, #8]
 8015068:	f001 fa30 	bl	80164cc <__mcmp>
 801506c:	2800      	cmp	r0, #0
 801506e:	9b00      	ldr	r3, [sp, #0]
 8015070:	dc02      	bgt.n	8015078 <_dtoa_r+0xa78>
 8015072:	d1e0      	bne.n	8015036 <_dtoa_r+0xa36>
 8015074:	07da      	lsls	r2, r3, #31
 8015076:	d5de      	bpl.n	8015036 <_dtoa_r+0xa36>
 8015078:	2b39      	cmp	r3, #57	@ 0x39
 801507a:	d1da      	bne.n	8015032 <_dtoa_r+0xa32>
 801507c:	2339      	movs	r3, #57	@ 0x39
 801507e:	f88b 3000 	strb.w	r3, [fp]
 8015082:	4633      	mov	r3, r6
 8015084:	461e      	mov	r6, r3
 8015086:	3b01      	subs	r3, #1
 8015088:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801508c:	2a39      	cmp	r2, #57	@ 0x39
 801508e:	d04e      	beq.n	801512e <_dtoa_r+0xb2e>
 8015090:	3201      	adds	r2, #1
 8015092:	701a      	strb	r2, [r3, #0]
 8015094:	e501      	b.n	8014a9a <_dtoa_r+0x49a>
 8015096:	2a00      	cmp	r2, #0
 8015098:	dd03      	ble.n	80150a2 <_dtoa_r+0xaa2>
 801509a:	2b39      	cmp	r3, #57	@ 0x39
 801509c:	d0ee      	beq.n	801507c <_dtoa_r+0xa7c>
 801509e:	3301      	adds	r3, #1
 80150a0:	e7c9      	b.n	8015036 <_dtoa_r+0xa36>
 80150a2:	9a00      	ldr	r2, [sp, #0]
 80150a4:	9908      	ldr	r1, [sp, #32]
 80150a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80150aa:	428a      	cmp	r2, r1
 80150ac:	d028      	beq.n	8015100 <_dtoa_r+0xb00>
 80150ae:	9902      	ldr	r1, [sp, #8]
 80150b0:	2300      	movs	r3, #0
 80150b2:	220a      	movs	r2, #10
 80150b4:	4648      	mov	r0, r9
 80150b6:	f000 ffaf 	bl	8016018 <__multadd>
 80150ba:	42af      	cmp	r7, r5
 80150bc:	9002      	str	r0, [sp, #8]
 80150be:	f04f 0300 	mov.w	r3, #0
 80150c2:	f04f 020a 	mov.w	r2, #10
 80150c6:	4639      	mov	r1, r7
 80150c8:	4648      	mov	r0, r9
 80150ca:	d107      	bne.n	80150dc <_dtoa_r+0xadc>
 80150cc:	f000 ffa4 	bl	8016018 <__multadd>
 80150d0:	4607      	mov	r7, r0
 80150d2:	4605      	mov	r5, r0
 80150d4:	9b00      	ldr	r3, [sp, #0]
 80150d6:	3301      	adds	r3, #1
 80150d8:	9300      	str	r3, [sp, #0]
 80150da:	e777      	b.n	8014fcc <_dtoa_r+0x9cc>
 80150dc:	f000 ff9c 	bl	8016018 <__multadd>
 80150e0:	4629      	mov	r1, r5
 80150e2:	4607      	mov	r7, r0
 80150e4:	2300      	movs	r3, #0
 80150e6:	220a      	movs	r2, #10
 80150e8:	4648      	mov	r0, r9
 80150ea:	f000 ff95 	bl	8016018 <__multadd>
 80150ee:	4605      	mov	r5, r0
 80150f0:	e7f0      	b.n	80150d4 <_dtoa_r+0xad4>
 80150f2:	f1bb 0f00 	cmp.w	fp, #0
 80150f6:	bfcc      	ite	gt
 80150f8:	465e      	movgt	r6, fp
 80150fa:	2601      	movle	r6, #1
 80150fc:	4456      	add	r6, sl
 80150fe:	2700      	movs	r7, #0
 8015100:	9902      	ldr	r1, [sp, #8]
 8015102:	9300      	str	r3, [sp, #0]
 8015104:	2201      	movs	r2, #1
 8015106:	4648      	mov	r0, r9
 8015108:	f001 f974 	bl	80163f4 <__lshift>
 801510c:	4621      	mov	r1, r4
 801510e:	9002      	str	r0, [sp, #8]
 8015110:	f001 f9dc 	bl	80164cc <__mcmp>
 8015114:	2800      	cmp	r0, #0
 8015116:	dcb4      	bgt.n	8015082 <_dtoa_r+0xa82>
 8015118:	d102      	bne.n	8015120 <_dtoa_r+0xb20>
 801511a:	9b00      	ldr	r3, [sp, #0]
 801511c:	07db      	lsls	r3, r3, #31
 801511e:	d4b0      	bmi.n	8015082 <_dtoa_r+0xa82>
 8015120:	4633      	mov	r3, r6
 8015122:	461e      	mov	r6, r3
 8015124:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015128:	2a30      	cmp	r2, #48	@ 0x30
 801512a:	d0fa      	beq.n	8015122 <_dtoa_r+0xb22>
 801512c:	e4b5      	b.n	8014a9a <_dtoa_r+0x49a>
 801512e:	459a      	cmp	sl, r3
 8015130:	d1a8      	bne.n	8015084 <_dtoa_r+0xa84>
 8015132:	2331      	movs	r3, #49	@ 0x31
 8015134:	f108 0801 	add.w	r8, r8, #1
 8015138:	f88a 3000 	strb.w	r3, [sl]
 801513c:	e4ad      	b.n	8014a9a <_dtoa_r+0x49a>
 801513e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015140:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801519c <_dtoa_r+0xb9c>
 8015144:	b11b      	cbz	r3, 801514e <_dtoa_r+0xb4e>
 8015146:	f10a 0308 	add.w	r3, sl, #8
 801514a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801514c:	6013      	str	r3, [r2, #0]
 801514e:	4650      	mov	r0, sl
 8015150:	b017      	add	sp, #92	@ 0x5c
 8015152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015156:	9b07      	ldr	r3, [sp, #28]
 8015158:	2b01      	cmp	r3, #1
 801515a:	f77f ae2e 	ble.w	8014dba <_dtoa_r+0x7ba>
 801515e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015160:	9308      	str	r3, [sp, #32]
 8015162:	2001      	movs	r0, #1
 8015164:	e64d      	b.n	8014e02 <_dtoa_r+0x802>
 8015166:	f1bb 0f00 	cmp.w	fp, #0
 801516a:	f77f aed9 	ble.w	8014f20 <_dtoa_r+0x920>
 801516e:	4656      	mov	r6, sl
 8015170:	9802      	ldr	r0, [sp, #8]
 8015172:	4621      	mov	r1, r4
 8015174:	f7ff f9ba 	bl	80144ec <quorem>
 8015178:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801517c:	f806 3b01 	strb.w	r3, [r6], #1
 8015180:	eba6 020a 	sub.w	r2, r6, sl
 8015184:	4593      	cmp	fp, r2
 8015186:	ddb4      	ble.n	80150f2 <_dtoa_r+0xaf2>
 8015188:	9902      	ldr	r1, [sp, #8]
 801518a:	2300      	movs	r3, #0
 801518c:	220a      	movs	r2, #10
 801518e:	4648      	mov	r0, r9
 8015190:	f000 ff42 	bl	8016018 <__multadd>
 8015194:	9002      	str	r0, [sp, #8]
 8015196:	e7eb      	b.n	8015170 <_dtoa_r+0xb70>
 8015198:	08018233 	.word	0x08018233
 801519c:	080181b7 	.word	0x080181b7

080151a0 <_free_r>:
 80151a0:	b538      	push	{r3, r4, r5, lr}
 80151a2:	4605      	mov	r5, r0
 80151a4:	2900      	cmp	r1, #0
 80151a6:	d041      	beq.n	801522c <_free_r+0x8c>
 80151a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151ac:	1f0c      	subs	r4, r1, #4
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	bfb8      	it	lt
 80151b2:	18e4      	addlt	r4, r4, r3
 80151b4:	f7fe f934 	bl	8013420 <__malloc_lock>
 80151b8:	4a1d      	ldr	r2, [pc, #116]	@ (8015230 <_free_r+0x90>)
 80151ba:	6813      	ldr	r3, [r2, #0]
 80151bc:	b933      	cbnz	r3, 80151cc <_free_r+0x2c>
 80151be:	6063      	str	r3, [r4, #4]
 80151c0:	6014      	str	r4, [r2, #0]
 80151c2:	4628      	mov	r0, r5
 80151c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151c8:	f7fe b930 	b.w	801342c <__malloc_unlock>
 80151cc:	42a3      	cmp	r3, r4
 80151ce:	d908      	bls.n	80151e2 <_free_r+0x42>
 80151d0:	6820      	ldr	r0, [r4, #0]
 80151d2:	1821      	adds	r1, r4, r0
 80151d4:	428b      	cmp	r3, r1
 80151d6:	bf01      	itttt	eq
 80151d8:	6819      	ldreq	r1, [r3, #0]
 80151da:	685b      	ldreq	r3, [r3, #4]
 80151dc:	1809      	addeq	r1, r1, r0
 80151de:	6021      	streq	r1, [r4, #0]
 80151e0:	e7ed      	b.n	80151be <_free_r+0x1e>
 80151e2:	461a      	mov	r2, r3
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	b10b      	cbz	r3, 80151ec <_free_r+0x4c>
 80151e8:	42a3      	cmp	r3, r4
 80151ea:	d9fa      	bls.n	80151e2 <_free_r+0x42>
 80151ec:	6811      	ldr	r1, [r2, #0]
 80151ee:	1850      	adds	r0, r2, r1
 80151f0:	42a0      	cmp	r0, r4
 80151f2:	d10b      	bne.n	801520c <_free_r+0x6c>
 80151f4:	6820      	ldr	r0, [r4, #0]
 80151f6:	4401      	add	r1, r0
 80151f8:	1850      	adds	r0, r2, r1
 80151fa:	4283      	cmp	r3, r0
 80151fc:	6011      	str	r1, [r2, #0]
 80151fe:	d1e0      	bne.n	80151c2 <_free_r+0x22>
 8015200:	6818      	ldr	r0, [r3, #0]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	6053      	str	r3, [r2, #4]
 8015206:	4408      	add	r0, r1
 8015208:	6010      	str	r0, [r2, #0]
 801520a:	e7da      	b.n	80151c2 <_free_r+0x22>
 801520c:	d902      	bls.n	8015214 <_free_r+0x74>
 801520e:	230c      	movs	r3, #12
 8015210:	602b      	str	r3, [r5, #0]
 8015212:	e7d6      	b.n	80151c2 <_free_r+0x22>
 8015214:	6820      	ldr	r0, [r4, #0]
 8015216:	1821      	adds	r1, r4, r0
 8015218:	428b      	cmp	r3, r1
 801521a:	bf04      	itt	eq
 801521c:	6819      	ldreq	r1, [r3, #0]
 801521e:	685b      	ldreq	r3, [r3, #4]
 8015220:	6063      	str	r3, [r4, #4]
 8015222:	bf04      	itt	eq
 8015224:	1809      	addeq	r1, r1, r0
 8015226:	6021      	streq	r1, [r4, #0]
 8015228:	6054      	str	r4, [r2, #4]
 801522a:	e7ca      	b.n	80151c2 <_free_r+0x22>
 801522c:	bd38      	pop	{r3, r4, r5, pc}
 801522e:	bf00      	nop
 8015230:	20002378 	.word	0x20002378

08015234 <rshift>:
 8015234:	6903      	ldr	r3, [r0, #16]
 8015236:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801523a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801523e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015242:	f100 0414 	add.w	r4, r0, #20
 8015246:	dd45      	ble.n	80152d4 <rshift+0xa0>
 8015248:	f011 011f 	ands.w	r1, r1, #31
 801524c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015250:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015254:	d10c      	bne.n	8015270 <rshift+0x3c>
 8015256:	f100 0710 	add.w	r7, r0, #16
 801525a:	4629      	mov	r1, r5
 801525c:	42b1      	cmp	r1, r6
 801525e:	d334      	bcc.n	80152ca <rshift+0x96>
 8015260:	1a9b      	subs	r3, r3, r2
 8015262:	009b      	lsls	r3, r3, #2
 8015264:	1eea      	subs	r2, r5, #3
 8015266:	4296      	cmp	r6, r2
 8015268:	bf38      	it	cc
 801526a:	2300      	movcc	r3, #0
 801526c:	4423      	add	r3, r4
 801526e:	e015      	b.n	801529c <rshift+0x68>
 8015270:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015274:	f1c1 0820 	rsb	r8, r1, #32
 8015278:	40cf      	lsrs	r7, r1
 801527a:	f105 0e04 	add.w	lr, r5, #4
 801527e:	46a1      	mov	r9, r4
 8015280:	4576      	cmp	r6, lr
 8015282:	46f4      	mov	ip, lr
 8015284:	d815      	bhi.n	80152b2 <rshift+0x7e>
 8015286:	1a9a      	subs	r2, r3, r2
 8015288:	0092      	lsls	r2, r2, #2
 801528a:	3a04      	subs	r2, #4
 801528c:	3501      	adds	r5, #1
 801528e:	42ae      	cmp	r6, r5
 8015290:	bf38      	it	cc
 8015292:	2200      	movcc	r2, #0
 8015294:	18a3      	adds	r3, r4, r2
 8015296:	50a7      	str	r7, [r4, r2]
 8015298:	b107      	cbz	r7, 801529c <rshift+0x68>
 801529a:	3304      	adds	r3, #4
 801529c:	1b1a      	subs	r2, r3, r4
 801529e:	42a3      	cmp	r3, r4
 80152a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80152a4:	bf08      	it	eq
 80152a6:	2300      	moveq	r3, #0
 80152a8:	6102      	str	r2, [r0, #16]
 80152aa:	bf08      	it	eq
 80152ac:	6143      	streq	r3, [r0, #20]
 80152ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152b2:	f8dc c000 	ldr.w	ip, [ip]
 80152b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80152ba:	ea4c 0707 	orr.w	r7, ip, r7
 80152be:	f849 7b04 	str.w	r7, [r9], #4
 80152c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80152c6:	40cf      	lsrs	r7, r1
 80152c8:	e7da      	b.n	8015280 <rshift+0x4c>
 80152ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80152ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80152d2:	e7c3      	b.n	801525c <rshift+0x28>
 80152d4:	4623      	mov	r3, r4
 80152d6:	e7e1      	b.n	801529c <rshift+0x68>

080152d8 <__hexdig_fun>:
 80152d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80152dc:	2b09      	cmp	r3, #9
 80152de:	d802      	bhi.n	80152e6 <__hexdig_fun+0xe>
 80152e0:	3820      	subs	r0, #32
 80152e2:	b2c0      	uxtb	r0, r0
 80152e4:	4770      	bx	lr
 80152e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80152ea:	2b05      	cmp	r3, #5
 80152ec:	d801      	bhi.n	80152f2 <__hexdig_fun+0x1a>
 80152ee:	3847      	subs	r0, #71	@ 0x47
 80152f0:	e7f7      	b.n	80152e2 <__hexdig_fun+0xa>
 80152f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80152f6:	2b05      	cmp	r3, #5
 80152f8:	d801      	bhi.n	80152fe <__hexdig_fun+0x26>
 80152fa:	3827      	subs	r0, #39	@ 0x27
 80152fc:	e7f1      	b.n	80152e2 <__hexdig_fun+0xa>
 80152fe:	2000      	movs	r0, #0
 8015300:	4770      	bx	lr
	...

08015304 <__gethex>:
 8015304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015308:	b085      	sub	sp, #20
 801530a:	468a      	mov	sl, r1
 801530c:	9302      	str	r3, [sp, #8]
 801530e:	680b      	ldr	r3, [r1, #0]
 8015310:	9001      	str	r0, [sp, #4]
 8015312:	4690      	mov	r8, r2
 8015314:	1c9c      	adds	r4, r3, #2
 8015316:	46a1      	mov	r9, r4
 8015318:	f814 0b01 	ldrb.w	r0, [r4], #1
 801531c:	2830      	cmp	r0, #48	@ 0x30
 801531e:	d0fa      	beq.n	8015316 <__gethex+0x12>
 8015320:	eba9 0303 	sub.w	r3, r9, r3
 8015324:	f1a3 0b02 	sub.w	fp, r3, #2
 8015328:	f7ff ffd6 	bl	80152d8 <__hexdig_fun>
 801532c:	4605      	mov	r5, r0
 801532e:	2800      	cmp	r0, #0
 8015330:	d168      	bne.n	8015404 <__gethex+0x100>
 8015332:	49a0      	ldr	r1, [pc, #640]	@ (80155b4 <__gethex+0x2b0>)
 8015334:	2201      	movs	r2, #1
 8015336:	4648      	mov	r0, r9
 8015338:	f7ff f866 	bl	8014408 <strncmp>
 801533c:	4607      	mov	r7, r0
 801533e:	2800      	cmp	r0, #0
 8015340:	d167      	bne.n	8015412 <__gethex+0x10e>
 8015342:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015346:	4626      	mov	r6, r4
 8015348:	f7ff ffc6 	bl	80152d8 <__hexdig_fun>
 801534c:	2800      	cmp	r0, #0
 801534e:	d062      	beq.n	8015416 <__gethex+0x112>
 8015350:	4623      	mov	r3, r4
 8015352:	7818      	ldrb	r0, [r3, #0]
 8015354:	2830      	cmp	r0, #48	@ 0x30
 8015356:	4699      	mov	r9, r3
 8015358:	f103 0301 	add.w	r3, r3, #1
 801535c:	d0f9      	beq.n	8015352 <__gethex+0x4e>
 801535e:	f7ff ffbb 	bl	80152d8 <__hexdig_fun>
 8015362:	fab0 f580 	clz	r5, r0
 8015366:	096d      	lsrs	r5, r5, #5
 8015368:	f04f 0b01 	mov.w	fp, #1
 801536c:	464a      	mov	r2, r9
 801536e:	4616      	mov	r6, r2
 8015370:	3201      	adds	r2, #1
 8015372:	7830      	ldrb	r0, [r6, #0]
 8015374:	f7ff ffb0 	bl	80152d8 <__hexdig_fun>
 8015378:	2800      	cmp	r0, #0
 801537a:	d1f8      	bne.n	801536e <__gethex+0x6a>
 801537c:	498d      	ldr	r1, [pc, #564]	@ (80155b4 <__gethex+0x2b0>)
 801537e:	2201      	movs	r2, #1
 8015380:	4630      	mov	r0, r6
 8015382:	f7ff f841 	bl	8014408 <strncmp>
 8015386:	2800      	cmp	r0, #0
 8015388:	d13f      	bne.n	801540a <__gethex+0x106>
 801538a:	b944      	cbnz	r4, 801539e <__gethex+0x9a>
 801538c:	1c74      	adds	r4, r6, #1
 801538e:	4622      	mov	r2, r4
 8015390:	4616      	mov	r6, r2
 8015392:	3201      	adds	r2, #1
 8015394:	7830      	ldrb	r0, [r6, #0]
 8015396:	f7ff ff9f 	bl	80152d8 <__hexdig_fun>
 801539a:	2800      	cmp	r0, #0
 801539c:	d1f8      	bne.n	8015390 <__gethex+0x8c>
 801539e:	1ba4      	subs	r4, r4, r6
 80153a0:	00a7      	lsls	r7, r4, #2
 80153a2:	7833      	ldrb	r3, [r6, #0]
 80153a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80153a8:	2b50      	cmp	r3, #80	@ 0x50
 80153aa:	d13e      	bne.n	801542a <__gethex+0x126>
 80153ac:	7873      	ldrb	r3, [r6, #1]
 80153ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80153b0:	d033      	beq.n	801541a <__gethex+0x116>
 80153b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80153b4:	d034      	beq.n	8015420 <__gethex+0x11c>
 80153b6:	1c71      	adds	r1, r6, #1
 80153b8:	2400      	movs	r4, #0
 80153ba:	7808      	ldrb	r0, [r1, #0]
 80153bc:	f7ff ff8c 	bl	80152d8 <__hexdig_fun>
 80153c0:	1e43      	subs	r3, r0, #1
 80153c2:	b2db      	uxtb	r3, r3
 80153c4:	2b18      	cmp	r3, #24
 80153c6:	d830      	bhi.n	801542a <__gethex+0x126>
 80153c8:	f1a0 0210 	sub.w	r2, r0, #16
 80153cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80153d0:	f7ff ff82 	bl	80152d8 <__hexdig_fun>
 80153d4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80153d8:	fa5f fc8c 	uxtb.w	ip, ip
 80153dc:	f1bc 0f18 	cmp.w	ip, #24
 80153e0:	f04f 030a 	mov.w	r3, #10
 80153e4:	d91e      	bls.n	8015424 <__gethex+0x120>
 80153e6:	b104      	cbz	r4, 80153ea <__gethex+0xe6>
 80153e8:	4252      	negs	r2, r2
 80153ea:	4417      	add	r7, r2
 80153ec:	f8ca 1000 	str.w	r1, [sl]
 80153f0:	b1ed      	cbz	r5, 801542e <__gethex+0x12a>
 80153f2:	f1bb 0f00 	cmp.w	fp, #0
 80153f6:	bf0c      	ite	eq
 80153f8:	2506      	moveq	r5, #6
 80153fa:	2500      	movne	r5, #0
 80153fc:	4628      	mov	r0, r5
 80153fe:	b005      	add	sp, #20
 8015400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015404:	2500      	movs	r5, #0
 8015406:	462c      	mov	r4, r5
 8015408:	e7b0      	b.n	801536c <__gethex+0x68>
 801540a:	2c00      	cmp	r4, #0
 801540c:	d1c7      	bne.n	801539e <__gethex+0x9a>
 801540e:	4627      	mov	r7, r4
 8015410:	e7c7      	b.n	80153a2 <__gethex+0x9e>
 8015412:	464e      	mov	r6, r9
 8015414:	462f      	mov	r7, r5
 8015416:	2501      	movs	r5, #1
 8015418:	e7c3      	b.n	80153a2 <__gethex+0x9e>
 801541a:	2400      	movs	r4, #0
 801541c:	1cb1      	adds	r1, r6, #2
 801541e:	e7cc      	b.n	80153ba <__gethex+0xb6>
 8015420:	2401      	movs	r4, #1
 8015422:	e7fb      	b.n	801541c <__gethex+0x118>
 8015424:	fb03 0002 	mla	r0, r3, r2, r0
 8015428:	e7ce      	b.n	80153c8 <__gethex+0xc4>
 801542a:	4631      	mov	r1, r6
 801542c:	e7de      	b.n	80153ec <__gethex+0xe8>
 801542e:	eba6 0309 	sub.w	r3, r6, r9
 8015432:	3b01      	subs	r3, #1
 8015434:	4629      	mov	r1, r5
 8015436:	2b07      	cmp	r3, #7
 8015438:	dc0a      	bgt.n	8015450 <__gethex+0x14c>
 801543a:	9801      	ldr	r0, [sp, #4]
 801543c:	f000 fd8a 	bl	8015f54 <_Balloc>
 8015440:	4604      	mov	r4, r0
 8015442:	b940      	cbnz	r0, 8015456 <__gethex+0x152>
 8015444:	4b5c      	ldr	r3, [pc, #368]	@ (80155b8 <__gethex+0x2b4>)
 8015446:	4602      	mov	r2, r0
 8015448:	21e4      	movs	r1, #228	@ 0xe4
 801544a:	485c      	ldr	r0, [pc, #368]	@ (80155bc <__gethex+0x2b8>)
 801544c:	f001 fc58 	bl	8016d00 <__assert_func>
 8015450:	3101      	adds	r1, #1
 8015452:	105b      	asrs	r3, r3, #1
 8015454:	e7ef      	b.n	8015436 <__gethex+0x132>
 8015456:	f100 0a14 	add.w	sl, r0, #20
 801545a:	2300      	movs	r3, #0
 801545c:	4655      	mov	r5, sl
 801545e:	469b      	mov	fp, r3
 8015460:	45b1      	cmp	r9, r6
 8015462:	d337      	bcc.n	80154d4 <__gethex+0x1d0>
 8015464:	f845 bb04 	str.w	fp, [r5], #4
 8015468:	eba5 050a 	sub.w	r5, r5, sl
 801546c:	10ad      	asrs	r5, r5, #2
 801546e:	6125      	str	r5, [r4, #16]
 8015470:	4658      	mov	r0, fp
 8015472:	f000 fe61 	bl	8016138 <__hi0bits>
 8015476:	016d      	lsls	r5, r5, #5
 8015478:	f8d8 6000 	ldr.w	r6, [r8]
 801547c:	1a2d      	subs	r5, r5, r0
 801547e:	42b5      	cmp	r5, r6
 8015480:	dd54      	ble.n	801552c <__gethex+0x228>
 8015482:	1bad      	subs	r5, r5, r6
 8015484:	4629      	mov	r1, r5
 8015486:	4620      	mov	r0, r4
 8015488:	f001 f9ed 	bl	8016866 <__any_on>
 801548c:	4681      	mov	r9, r0
 801548e:	b178      	cbz	r0, 80154b0 <__gethex+0x1ac>
 8015490:	1e6b      	subs	r3, r5, #1
 8015492:	1159      	asrs	r1, r3, #5
 8015494:	f003 021f 	and.w	r2, r3, #31
 8015498:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801549c:	f04f 0901 	mov.w	r9, #1
 80154a0:	fa09 f202 	lsl.w	r2, r9, r2
 80154a4:	420a      	tst	r2, r1
 80154a6:	d003      	beq.n	80154b0 <__gethex+0x1ac>
 80154a8:	454b      	cmp	r3, r9
 80154aa:	dc36      	bgt.n	801551a <__gethex+0x216>
 80154ac:	f04f 0902 	mov.w	r9, #2
 80154b0:	4629      	mov	r1, r5
 80154b2:	4620      	mov	r0, r4
 80154b4:	f7ff febe 	bl	8015234 <rshift>
 80154b8:	442f      	add	r7, r5
 80154ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80154be:	42bb      	cmp	r3, r7
 80154c0:	da42      	bge.n	8015548 <__gethex+0x244>
 80154c2:	9801      	ldr	r0, [sp, #4]
 80154c4:	4621      	mov	r1, r4
 80154c6:	f000 fd85 	bl	8015fd4 <_Bfree>
 80154ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80154cc:	2300      	movs	r3, #0
 80154ce:	6013      	str	r3, [r2, #0]
 80154d0:	25a3      	movs	r5, #163	@ 0xa3
 80154d2:	e793      	b.n	80153fc <__gethex+0xf8>
 80154d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80154d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80154da:	d012      	beq.n	8015502 <__gethex+0x1fe>
 80154dc:	2b20      	cmp	r3, #32
 80154de:	d104      	bne.n	80154ea <__gethex+0x1e6>
 80154e0:	f845 bb04 	str.w	fp, [r5], #4
 80154e4:	f04f 0b00 	mov.w	fp, #0
 80154e8:	465b      	mov	r3, fp
 80154ea:	7830      	ldrb	r0, [r6, #0]
 80154ec:	9303      	str	r3, [sp, #12]
 80154ee:	f7ff fef3 	bl	80152d8 <__hexdig_fun>
 80154f2:	9b03      	ldr	r3, [sp, #12]
 80154f4:	f000 000f 	and.w	r0, r0, #15
 80154f8:	4098      	lsls	r0, r3
 80154fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80154fe:	3304      	adds	r3, #4
 8015500:	e7ae      	b.n	8015460 <__gethex+0x15c>
 8015502:	45b1      	cmp	r9, r6
 8015504:	d8ea      	bhi.n	80154dc <__gethex+0x1d8>
 8015506:	492b      	ldr	r1, [pc, #172]	@ (80155b4 <__gethex+0x2b0>)
 8015508:	9303      	str	r3, [sp, #12]
 801550a:	2201      	movs	r2, #1
 801550c:	4630      	mov	r0, r6
 801550e:	f7fe ff7b 	bl	8014408 <strncmp>
 8015512:	9b03      	ldr	r3, [sp, #12]
 8015514:	2800      	cmp	r0, #0
 8015516:	d1e1      	bne.n	80154dc <__gethex+0x1d8>
 8015518:	e7a2      	b.n	8015460 <__gethex+0x15c>
 801551a:	1ea9      	subs	r1, r5, #2
 801551c:	4620      	mov	r0, r4
 801551e:	f001 f9a2 	bl	8016866 <__any_on>
 8015522:	2800      	cmp	r0, #0
 8015524:	d0c2      	beq.n	80154ac <__gethex+0x1a8>
 8015526:	f04f 0903 	mov.w	r9, #3
 801552a:	e7c1      	b.n	80154b0 <__gethex+0x1ac>
 801552c:	da09      	bge.n	8015542 <__gethex+0x23e>
 801552e:	1b75      	subs	r5, r6, r5
 8015530:	4621      	mov	r1, r4
 8015532:	9801      	ldr	r0, [sp, #4]
 8015534:	462a      	mov	r2, r5
 8015536:	f000 ff5d 	bl	80163f4 <__lshift>
 801553a:	1b7f      	subs	r7, r7, r5
 801553c:	4604      	mov	r4, r0
 801553e:	f100 0a14 	add.w	sl, r0, #20
 8015542:	f04f 0900 	mov.w	r9, #0
 8015546:	e7b8      	b.n	80154ba <__gethex+0x1b6>
 8015548:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801554c:	42bd      	cmp	r5, r7
 801554e:	dd6f      	ble.n	8015630 <__gethex+0x32c>
 8015550:	1bed      	subs	r5, r5, r7
 8015552:	42ae      	cmp	r6, r5
 8015554:	dc34      	bgt.n	80155c0 <__gethex+0x2bc>
 8015556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801555a:	2b02      	cmp	r3, #2
 801555c:	d022      	beq.n	80155a4 <__gethex+0x2a0>
 801555e:	2b03      	cmp	r3, #3
 8015560:	d024      	beq.n	80155ac <__gethex+0x2a8>
 8015562:	2b01      	cmp	r3, #1
 8015564:	d115      	bne.n	8015592 <__gethex+0x28e>
 8015566:	42ae      	cmp	r6, r5
 8015568:	d113      	bne.n	8015592 <__gethex+0x28e>
 801556a:	2e01      	cmp	r6, #1
 801556c:	d10b      	bne.n	8015586 <__gethex+0x282>
 801556e:	9a02      	ldr	r2, [sp, #8]
 8015570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015574:	6013      	str	r3, [r2, #0]
 8015576:	2301      	movs	r3, #1
 8015578:	6123      	str	r3, [r4, #16]
 801557a:	f8ca 3000 	str.w	r3, [sl]
 801557e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015580:	2562      	movs	r5, #98	@ 0x62
 8015582:	601c      	str	r4, [r3, #0]
 8015584:	e73a      	b.n	80153fc <__gethex+0xf8>
 8015586:	1e71      	subs	r1, r6, #1
 8015588:	4620      	mov	r0, r4
 801558a:	f001 f96c 	bl	8016866 <__any_on>
 801558e:	2800      	cmp	r0, #0
 8015590:	d1ed      	bne.n	801556e <__gethex+0x26a>
 8015592:	9801      	ldr	r0, [sp, #4]
 8015594:	4621      	mov	r1, r4
 8015596:	f000 fd1d 	bl	8015fd4 <_Bfree>
 801559a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801559c:	2300      	movs	r3, #0
 801559e:	6013      	str	r3, [r2, #0]
 80155a0:	2550      	movs	r5, #80	@ 0x50
 80155a2:	e72b      	b.n	80153fc <__gethex+0xf8>
 80155a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d1f3      	bne.n	8015592 <__gethex+0x28e>
 80155aa:	e7e0      	b.n	801556e <__gethex+0x26a>
 80155ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d1dd      	bne.n	801556e <__gethex+0x26a>
 80155b2:	e7ee      	b.n	8015592 <__gethex+0x28e>
 80155b4:	080181ad 	.word	0x080181ad
 80155b8:	08018233 	.word	0x08018233
 80155bc:	08018244 	.word	0x08018244
 80155c0:	1e6f      	subs	r7, r5, #1
 80155c2:	f1b9 0f00 	cmp.w	r9, #0
 80155c6:	d130      	bne.n	801562a <__gethex+0x326>
 80155c8:	b127      	cbz	r7, 80155d4 <__gethex+0x2d0>
 80155ca:	4639      	mov	r1, r7
 80155cc:	4620      	mov	r0, r4
 80155ce:	f001 f94a 	bl	8016866 <__any_on>
 80155d2:	4681      	mov	r9, r0
 80155d4:	117a      	asrs	r2, r7, #5
 80155d6:	2301      	movs	r3, #1
 80155d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80155dc:	f007 071f 	and.w	r7, r7, #31
 80155e0:	40bb      	lsls	r3, r7
 80155e2:	4213      	tst	r3, r2
 80155e4:	4629      	mov	r1, r5
 80155e6:	4620      	mov	r0, r4
 80155e8:	bf18      	it	ne
 80155ea:	f049 0902 	orrne.w	r9, r9, #2
 80155ee:	f7ff fe21 	bl	8015234 <rshift>
 80155f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80155f6:	1b76      	subs	r6, r6, r5
 80155f8:	2502      	movs	r5, #2
 80155fa:	f1b9 0f00 	cmp.w	r9, #0
 80155fe:	d047      	beq.n	8015690 <__gethex+0x38c>
 8015600:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015604:	2b02      	cmp	r3, #2
 8015606:	d015      	beq.n	8015634 <__gethex+0x330>
 8015608:	2b03      	cmp	r3, #3
 801560a:	d017      	beq.n	801563c <__gethex+0x338>
 801560c:	2b01      	cmp	r3, #1
 801560e:	d109      	bne.n	8015624 <__gethex+0x320>
 8015610:	f019 0f02 	tst.w	r9, #2
 8015614:	d006      	beq.n	8015624 <__gethex+0x320>
 8015616:	f8da 3000 	ldr.w	r3, [sl]
 801561a:	ea49 0903 	orr.w	r9, r9, r3
 801561e:	f019 0f01 	tst.w	r9, #1
 8015622:	d10e      	bne.n	8015642 <__gethex+0x33e>
 8015624:	f045 0510 	orr.w	r5, r5, #16
 8015628:	e032      	b.n	8015690 <__gethex+0x38c>
 801562a:	f04f 0901 	mov.w	r9, #1
 801562e:	e7d1      	b.n	80155d4 <__gethex+0x2d0>
 8015630:	2501      	movs	r5, #1
 8015632:	e7e2      	b.n	80155fa <__gethex+0x2f6>
 8015634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015636:	f1c3 0301 	rsb	r3, r3, #1
 801563a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801563c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801563e:	2b00      	cmp	r3, #0
 8015640:	d0f0      	beq.n	8015624 <__gethex+0x320>
 8015642:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015646:	f104 0314 	add.w	r3, r4, #20
 801564a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801564e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015652:	f04f 0c00 	mov.w	ip, #0
 8015656:	4618      	mov	r0, r3
 8015658:	f853 2b04 	ldr.w	r2, [r3], #4
 801565c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015660:	d01b      	beq.n	801569a <__gethex+0x396>
 8015662:	3201      	adds	r2, #1
 8015664:	6002      	str	r2, [r0, #0]
 8015666:	2d02      	cmp	r5, #2
 8015668:	f104 0314 	add.w	r3, r4, #20
 801566c:	d13c      	bne.n	80156e8 <__gethex+0x3e4>
 801566e:	f8d8 2000 	ldr.w	r2, [r8]
 8015672:	3a01      	subs	r2, #1
 8015674:	42b2      	cmp	r2, r6
 8015676:	d109      	bne.n	801568c <__gethex+0x388>
 8015678:	1171      	asrs	r1, r6, #5
 801567a:	2201      	movs	r2, #1
 801567c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015680:	f006 061f 	and.w	r6, r6, #31
 8015684:	fa02 f606 	lsl.w	r6, r2, r6
 8015688:	421e      	tst	r6, r3
 801568a:	d13a      	bne.n	8015702 <__gethex+0x3fe>
 801568c:	f045 0520 	orr.w	r5, r5, #32
 8015690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015692:	601c      	str	r4, [r3, #0]
 8015694:	9b02      	ldr	r3, [sp, #8]
 8015696:	601f      	str	r7, [r3, #0]
 8015698:	e6b0      	b.n	80153fc <__gethex+0xf8>
 801569a:	4299      	cmp	r1, r3
 801569c:	f843 cc04 	str.w	ip, [r3, #-4]
 80156a0:	d8d9      	bhi.n	8015656 <__gethex+0x352>
 80156a2:	68a3      	ldr	r3, [r4, #8]
 80156a4:	459b      	cmp	fp, r3
 80156a6:	db17      	blt.n	80156d8 <__gethex+0x3d4>
 80156a8:	6861      	ldr	r1, [r4, #4]
 80156aa:	9801      	ldr	r0, [sp, #4]
 80156ac:	3101      	adds	r1, #1
 80156ae:	f000 fc51 	bl	8015f54 <_Balloc>
 80156b2:	4681      	mov	r9, r0
 80156b4:	b918      	cbnz	r0, 80156be <__gethex+0x3ba>
 80156b6:	4b1a      	ldr	r3, [pc, #104]	@ (8015720 <__gethex+0x41c>)
 80156b8:	4602      	mov	r2, r0
 80156ba:	2184      	movs	r1, #132	@ 0x84
 80156bc:	e6c5      	b.n	801544a <__gethex+0x146>
 80156be:	6922      	ldr	r2, [r4, #16]
 80156c0:	3202      	adds	r2, #2
 80156c2:	f104 010c 	add.w	r1, r4, #12
 80156c6:	0092      	lsls	r2, r2, #2
 80156c8:	300c      	adds	r0, #12
 80156ca:	f7fe fef1 	bl	80144b0 <memcpy>
 80156ce:	4621      	mov	r1, r4
 80156d0:	9801      	ldr	r0, [sp, #4]
 80156d2:	f000 fc7f 	bl	8015fd4 <_Bfree>
 80156d6:	464c      	mov	r4, r9
 80156d8:	6923      	ldr	r3, [r4, #16]
 80156da:	1c5a      	adds	r2, r3, #1
 80156dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80156e0:	6122      	str	r2, [r4, #16]
 80156e2:	2201      	movs	r2, #1
 80156e4:	615a      	str	r2, [r3, #20]
 80156e6:	e7be      	b.n	8015666 <__gethex+0x362>
 80156e8:	6922      	ldr	r2, [r4, #16]
 80156ea:	455a      	cmp	r2, fp
 80156ec:	dd0b      	ble.n	8015706 <__gethex+0x402>
 80156ee:	2101      	movs	r1, #1
 80156f0:	4620      	mov	r0, r4
 80156f2:	f7ff fd9f 	bl	8015234 <rshift>
 80156f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80156fa:	3701      	adds	r7, #1
 80156fc:	42bb      	cmp	r3, r7
 80156fe:	f6ff aee0 	blt.w	80154c2 <__gethex+0x1be>
 8015702:	2501      	movs	r5, #1
 8015704:	e7c2      	b.n	801568c <__gethex+0x388>
 8015706:	f016 061f 	ands.w	r6, r6, #31
 801570a:	d0fa      	beq.n	8015702 <__gethex+0x3fe>
 801570c:	4453      	add	r3, sl
 801570e:	f1c6 0620 	rsb	r6, r6, #32
 8015712:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015716:	f000 fd0f 	bl	8016138 <__hi0bits>
 801571a:	42b0      	cmp	r0, r6
 801571c:	dbe7      	blt.n	80156ee <__gethex+0x3ea>
 801571e:	e7f0      	b.n	8015702 <__gethex+0x3fe>
 8015720:	08018233 	.word	0x08018233

08015724 <L_shift>:
 8015724:	f1c2 0208 	rsb	r2, r2, #8
 8015728:	0092      	lsls	r2, r2, #2
 801572a:	b570      	push	{r4, r5, r6, lr}
 801572c:	f1c2 0620 	rsb	r6, r2, #32
 8015730:	6843      	ldr	r3, [r0, #4]
 8015732:	6804      	ldr	r4, [r0, #0]
 8015734:	fa03 f506 	lsl.w	r5, r3, r6
 8015738:	432c      	orrs	r4, r5
 801573a:	40d3      	lsrs	r3, r2
 801573c:	6004      	str	r4, [r0, #0]
 801573e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015742:	4288      	cmp	r0, r1
 8015744:	d3f4      	bcc.n	8015730 <L_shift+0xc>
 8015746:	bd70      	pop	{r4, r5, r6, pc}

08015748 <__match>:
 8015748:	b530      	push	{r4, r5, lr}
 801574a:	6803      	ldr	r3, [r0, #0]
 801574c:	3301      	adds	r3, #1
 801574e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015752:	b914      	cbnz	r4, 801575a <__match+0x12>
 8015754:	6003      	str	r3, [r0, #0]
 8015756:	2001      	movs	r0, #1
 8015758:	bd30      	pop	{r4, r5, pc}
 801575a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801575e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015762:	2d19      	cmp	r5, #25
 8015764:	bf98      	it	ls
 8015766:	3220      	addls	r2, #32
 8015768:	42a2      	cmp	r2, r4
 801576a:	d0f0      	beq.n	801574e <__match+0x6>
 801576c:	2000      	movs	r0, #0
 801576e:	e7f3      	b.n	8015758 <__match+0x10>

08015770 <__hexnan>:
 8015770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015774:	680b      	ldr	r3, [r1, #0]
 8015776:	6801      	ldr	r1, [r0, #0]
 8015778:	115e      	asrs	r6, r3, #5
 801577a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801577e:	f013 031f 	ands.w	r3, r3, #31
 8015782:	b087      	sub	sp, #28
 8015784:	bf18      	it	ne
 8015786:	3604      	addne	r6, #4
 8015788:	2500      	movs	r5, #0
 801578a:	1f37      	subs	r7, r6, #4
 801578c:	4682      	mov	sl, r0
 801578e:	4690      	mov	r8, r2
 8015790:	9301      	str	r3, [sp, #4]
 8015792:	f846 5c04 	str.w	r5, [r6, #-4]
 8015796:	46b9      	mov	r9, r7
 8015798:	463c      	mov	r4, r7
 801579a:	9502      	str	r5, [sp, #8]
 801579c:	46ab      	mov	fp, r5
 801579e:	784a      	ldrb	r2, [r1, #1]
 80157a0:	1c4b      	adds	r3, r1, #1
 80157a2:	9303      	str	r3, [sp, #12]
 80157a4:	b342      	cbz	r2, 80157f8 <__hexnan+0x88>
 80157a6:	4610      	mov	r0, r2
 80157a8:	9105      	str	r1, [sp, #20]
 80157aa:	9204      	str	r2, [sp, #16]
 80157ac:	f7ff fd94 	bl	80152d8 <__hexdig_fun>
 80157b0:	2800      	cmp	r0, #0
 80157b2:	d151      	bne.n	8015858 <__hexnan+0xe8>
 80157b4:	9a04      	ldr	r2, [sp, #16]
 80157b6:	9905      	ldr	r1, [sp, #20]
 80157b8:	2a20      	cmp	r2, #32
 80157ba:	d818      	bhi.n	80157ee <__hexnan+0x7e>
 80157bc:	9b02      	ldr	r3, [sp, #8]
 80157be:	459b      	cmp	fp, r3
 80157c0:	dd13      	ble.n	80157ea <__hexnan+0x7a>
 80157c2:	454c      	cmp	r4, r9
 80157c4:	d206      	bcs.n	80157d4 <__hexnan+0x64>
 80157c6:	2d07      	cmp	r5, #7
 80157c8:	dc04      	bgt.n	80157d4 <__hexnan+0x64>
 80157ca:	462a      	mov	r2, r5
 80157cc:	4649      	mov	r1, r9
 80157ce:	4620      	mov	r0, r4
 80157d0:	f7ff ffa8 	bl	8015724 <L_shift>
 80157d4:	4544      	cmp	r4, r8
 80157d6:	d952      	bls.n	801587e <__hexnan+0x10e>
 80157d8:	2300      	movs	r3, #0
 80157da:	f1a4 0904 	sub.w	r9, r4, #4
 80157de:	f844 3c04 	str.w	r3, [r4, #-4]
 80157e2:	f8cd b008 	str.w	fp, [sp, #8]
 80157e6:	464c      	mov	r4, r9
 80157e8:	461d      	mov	r5, r3
 80157ea:	9903      	ldr	r1, [sp, #12]
 80157ec:	e7d7      	b.n	801579e <__hexnan+0x2e>
 80157ee:	2a29      	cmp	r2, #41	@ 0x29
 80157f0:	d157      	bne.n	80158a2 <__hexnan+0x132>
 80157f2:	3102      	adds	r1, #2
 80157f4:	f8ca 1000 	str.w	r1, [sl]
 80157f8:	f1bb 0f00 	cmp.w	fp, #0
 80157fc:	d051      	beq.n	80158a2 <__hexnan+0x132>
 80157fe:	454c      	cmp	r4, r9
 8015800:	d206      	bcs.n	8015810 <__hexnan+0xa0>
 8015802:	2d07      	cmp	r5, #7
 8015804:	dc04      	bgt.n	8015810 <__hexnan+0xa0>
 8015806:	462a      	mov	r2, r5
 8015808:	4649      	mov	r1, r9
 801580a:	4620      	mov	r0, r4
 801580c:	f7ff ff8a 	bl	8015724 <L_shift>
 8015810:	4544      	cmp	r4, r8
 8015812:	d936      	bls.n	8015882 <__hexnan+0x112>
 8015814:	f1a8 0204 	sub.w	r2, r8, #4
 8015818:	4623      	mov	r3, r4
 801581a:	f853 1b04 	ldr.w	r1, [r3], #4
 801581e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015822:	429f      	cmp	r7, r3
 8015824:	d2f9      	bcs.n	801581a <__hexnan+0xaa>
 8015826:	1b3b      	subs	r3, r7, r4
 8015828:	f023 0303 	bic.w	r3, r3, #3
 801582c:	3304      	adds	r3, #4
 801582e:	3401      	adds	r4, #1
 8015830:	3e03      	subs	r6, #3
 8015832:	42b4      	cmp	r4, r6
 8015834:	bf88      	it	hi
 8015836:	2304      	movhi	r3, #4
 8015838:	4443      	add	r3, r8
 801583a:	2200      	movs	r2, #0
 801583c:	f843 2b04 	str.w	r2, [r3], #4
 8015840:	429f      	cmp	r7, r3
 8015842:	d2fb      	bcs.n	801583c <__hexnan+0xcc>
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	b91b      	cbnz	r3, 8015850 <__hexnan+0xe0>
 8015848:	4547      	cmp	r7, r8
 801584a:	d128      	bne.n	801589e <__hexnan+0x12e>
 801584c:	2301      	movs	r3, #1
 801584e:	603b      	str	r3, [r7, #0]
 8015850:	2005      	movs	r0, #5
 8015852:	b007      	add	sp, #28
 8015854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015858:	3501      	adds	r5, #1
 801585a:	2d08      	cmp	r5, #8
 801585c:	f10b 0b01 	add.w	fp, fp, #1
 8015860:	dd06      	ble.n	8015870 <__hexnan+0x100>
 8015862:	4544      	cmp	r4, r8
 8015864:	d9c1      	bls.n	80157ea <__hexnan+0x7a>
 8015866:	2300      	movs	r3, #0
 8015868:	f844 3c04 	str.w	r3, [r4, #-4]
 801586c:	2501      	movs	r5, #1
 801586e:	3c04      	subs	r4, #4
 8015870:	6822      	ldr	r2, [r4, #0]
 8015872:	f000 000f 	and.w	r0, r0, #15
 8015876:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801587a:	6020      	str	r0, [r4, #0]
 801587c:	e7b5      	b.n	80157ea <__hexnan+0x7a>
 801587e:	2508      	movs	r5, #8
 8015880:	e7b3      	b.n	80157ea <__hexnan+0x7a>
 8015882:	9b01      	ldr	r3, [sp, #4]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d0dd      	beq.n	8015844 <__hexnan+0xd4>
 8015888:	f1c3 0320 	rsb	r3, r3, #32
 801588c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015890:	40da      	lsrs	r2, r3
 8015892:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015896:	4013      	ands	r3, r2
 8015898:	f846 3c04 	str.w	r3, [r6, #-4]
 801589c:	e7d2      	b.n	8015844 <__hexnan+0xd4>
 801589e:	3f04      	subs	r7, #4
 80158a0:	e7d0      	b.n	8015844 <__hexnan+0xd4>
 80158a2:	2004      	movs	r0, #4
 80158a4:	e7d5      	b.n	8015852 <__hexnan+0xe2>

080158a6 <__ssputs_r>:
 80158a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158aa:	688e      	ldr	r6, [r1, #8]
 80158ac:	461f      	mov	r7, r3
 80158ae:	42be      	cmp	r6, r7
 80158b0:	680b      	ldr	r3, [r1, #0]
 80158b2:	4682      	mov	sl, r0
 80158b4:	460c      	mov	r4, r1
 80158b6:	4690      	mov	r8, r2
 80158b8:	d82d      	bhi.n	8015916 <__ssputs_r+0x70>
 80158ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80158be:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80158c2:	d026      	beq.n	8015912 <__ssputs_r+0x6c>
 80158c4:	6965      	ldr	r5, [r4, #20]
 80158c6:	6909      	ldr	r1, [r1, #16]
 80158c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80158cc:	eba3 0901 	sub.w	r9, r3, r1
 80158d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80158d4:	1c7b      	adds	r3, r7, #1
 80158d6:	444b      	add	r3, r9
 80158d8:	106d      	asrs	r5, r5, #1
 80158da:	429d      	cmp	r5, r3
 80158dc:	bf38      	it	cc
 80158de:	461d      	movcc	r5, r3
 80158e0:	0553      	lsls	r3, r2, #21
 80158e2:	d527      	bpl.n	8015934 <__ssputs_r+0x8e>
 80158e4:	4629      	mov	r1, r5
 80158e6:	f7fd f981 	bl	8012bec <_malloc_r>
 80158ea:	4606      	mov	r6, r0
 80158ec:	b360      	cbz	r0, 8015948 <__ssputs_r+0xa2>
 80158ee:	6921      	ldr	r1, [r4, #16]
 80158f0:	464a      	mov	r2, r9
 80158f2:	f7fe fddd 	bl	80144b0 <memcpy>
 80158f6:	89a3      	ldrh	r3, [r4, #12]
 80158f8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80158fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015900:	81a3      	strh	r3, [r4, #12]
 8015902:	6126      	str	r6, [r4, #16]
 8015904:	6165      	str	r5, [r4, #20]
 8015906:	444e      	add	r6, r9
 8015908:	eba5 0509 	sub.w	r5, r5, r9
 801590c:	6026      	str	r6, [r4, #0]
 801590e:	60a5      	str	r5, [r4, #8]
 8015910:	463e      	mov	r6, r7
 8015912:	42be      	cmp	r6, r7
 8015914:	d900      	bls.n	8015918 <__ssputs_r+0x72>
 8015916:	463e      	mov	r6, r7
 8015918:	6820      	ldr	r0, [r4, #0]
 801591a:	4632      	mov	r2, r6
 801591c:	4641      	mov	r1, r8
 801591e:	f001 f96c 	bl	8016bfa <memmove>
 8015922:	68a3      	ldr	r3, [r4, #8]
 8015924:	1b9b      	subs	r3, r3, r6
 8015926:	60a3      	str	r3, [r4, #8]
 8015928:	6823      	ldr	r3, [r4, #0]
 801592a:	4433      	add	r3, r6
 801592c:	6023      	str	r3, [r4, #0]
 801592e:	2000      	movs	r0, #0
 8015930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015934:	462a      	mov	r2, r5
 8015936:	f000 fffa 	bl	801692e <_realloc_r>
 801593a:	4606      	mov	r6, r0
 801593c:	2800      	cmp	r0, #0
 801593e:	d1e0      	bne.n	8015902 <__ssputs_r+0x5c>
 8015940:	6921      	ldr	r1, [r4, #16]
 8015942:	4650      	mov	r0, sl
 8015944:	f7ff fc2c 	bl	80151a0 <_free_r>
 8015948:	230c      	movs	r3, #12
 801594a:	f8ca 3000 	str.w	r3, [sl]
 801594e:	89a3      	ldrh	r3, [r4, #12]
 8015950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015954:	81a3      	strh	r3, [r4, #12]
 8015956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801595a:	e7e9      	b.n	8015930 <__ssputs_r+0x8a>

0801595c <_svfiprintf_r>:
 801595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015960:	4698      	mov	r8, r3
 8015962:	898b      	ldrh	r3, [r1, #12]
 8015964:	061b      	lsls	r3, r3, #24
 8015966:	b09d      	sub	sp, #116	@ 0x74
 8015968:	4607      	mov	r7, r0
 801596a:	460d      	mov	r5, r1
 801596c:	4614      	mov	r4, r2
 801596e:	d510      	bpl.n	8015992 <_svfiprintf_r+0x36>
 8015970:	690b      	ldr	r3, [r1, #16]
 8015972:	b973      	cbnz	r3, 8015992 <_svfiprintf_r+0x36>
 8015974:	2140      	movs	r1, #64	@ 0x40
 8015976:	f7fd f939 	bl	8012bec <_malloc_r>
 801597a:	6028      	str	r0, [r5, #0]
 801597c:	6128      	str	r0, [r5, #16]
 801597e:	b930      	cbnz	r0, 801598e <_svfiprintf_r+0x32>
 8015980:	230c      	movs	r3, #12
 8015982:	603b      	str	r3, [r7, #0]
 8015984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015988:	b01d      	add	sp, #116	@ 0x74
 801598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801598e:	2340      	movs	r3, #64	@ 0x40
 8015990:	616b      	str	r3, [r5, #20]
 8015992:	2300      	movs	r3, #0
 8015994:	9309      	str	r3, [sp, #36]	@ 0x24
 8015996:	2320      	movs	r3, #32
 8015998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801599c:	f8cd 800c 	str.w	r8, [sp, #12]
 80159a0:	2330      	movs	r3, #48	@ 0x30
 80159a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015b40 <_svfiprintf_r+0x1e4>
 80159a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80159aa:	f04f 0901 	mov.w	r9, #1
 80159ae:	4623      	mov	r3, r4
 80159b0:	469a      	mov	sl, r3
 80159b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159b6:	b10a      	cbz	r2, 80159bc <_svfiprintf_r+0x60>
 80159b8:	2a25      	cmp	r2, #37	@ 0x25
 80159ba:	d1f9      	bne.n	80159b0 <_svfiprintf_r+0x54>
 80159bc:	ebba 0b04 	subs.w	fp, sl, r4
 80159c0:	d00b      	beq.n	80159da <_svfiprintf_r+0x7e>
 80159c2:	465b      	mov	r3, fp
 80159c4:	4622      	mov	r2, r4
 80159c6:	4629      	mov	r1, r5
 80159c8:	4638      	mov	r0, r7
 80159ca:	f7ff ff6c 	bl	80158a6 <__ssputs_r>
 80159ce:	3001      	adds	r0, #1
 80159d0:	f000 80a7 	beq.w	8015b22 <_svfiprintf_r+0x1c6>
 80159d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159d6:	445a      	add	r2, fp
 80159d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80159da:	f89a 3000 	ldrb.w	r3, [sl]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f000 809f 	beq.w	8015b22 <_svfiprintf_r+0x1c6>
 80159e4:	2300      	movs	r3, #0
 80159e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80159ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159ee:	f10a 0a01 	add.w	sl, sl, #1
 80159f2:	9304      	str	r3, [sp, #16]
 80159f4:	9307      	str	r3, [sp, #28]
 80159f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80159fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80159fc:	4654      	mov	r4, sl
 80159fe:	2205      	movs	r2, #5
 8015a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a04:	484e      	ldr	r0, [pc, #312]	@ (8015b40 <_svfiprintf_r+0x1e4>)
 8015a06:	f7ea fbeb 	bl	80001e0 <memchr>
 8015a0a:	9a04      	ldr	r2, [sp, #16]
 8015a0c:	b9d8      	cbnz	r0, 8015a46 <_svfiprintf_r+0xea>
 8015a0e:	06d0      	lsls	r0, r2, #27
 8015a10:	bf44      	itt	mi
 8015a12:	2320      	movmi	r3, #32
 8015a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015a18:	0711      	lsls	r1, r2, #28
 8015a1a:	bf44      	itt	mi
 8015a1c:	232b      	movmi	r3, #43	@ 0x2b
 8015a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015a22:	f89a 3000 	ldrb.w	r3, [sl]
 8015a26:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a28:	d015      	beq.n	8015a56 <_svfiprintf_r+0xfa>
 8015a2a:	9a07      	ldr	r2, [sp, #28]
 8015a2c:	4654      	mov	r4, sl
 8015a2e:	2000      	movs	r0, #0
 8015a30:	f04f 0c0a 	mov.w	ip, #10
 8015a34:	4621      	mov	r1, r4
 8015a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a3a:	3b30      	subs	r3, #48	@ 0x30
 8015a3c:	2b09      	cmp	r3, #9
 8015a3e:	d94b      	bls.n	8015ad8 <_svfiprintf_r+0x17c>
 8015a40:	b1b0      	cbz	r0, 8015a70 <_svfiprintf_r+0x114>
 8015a42:	9207      	str	r2, [sp, #28]
 8015a44:	e014      	b.n	8015a70 <_svfiprintf_r+0x114>
 8015a46:	eba0 0308 	sub.w	r3, r0, r8
 8015a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8015a4e:	4313      	orrs	r3, r2
 8015a50:	9304      	str	r3, [sp, #16]
 8015a52:	46a2      	mov	sl, r4
 8015a54:	e7d2      	b.n	80159fc <_svfiprintf_r+0xa0>
 8015a56:	9b03      	ldr	r3, [sp, #12]
 8015a58:	1d19      	adds	r1, r3, #4
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	9103      	str	r1, [sp, #12]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	bfbb      	ittet	lt
 8015a62:	425b      	neglt	r3, r3
 8015a64:	f042 0202 	orrlt.w	r2, r2, #2
 8015a68:	9307      	strge	r3, [sp, #28]
 8015a6a:	9307      	strlt	r3, [sp, #28]
 8015a6c:	bfb8      	it	lt
 8015a6e:	9204      	strlt	r2, [sp, #16]
 8015a70:	7823      	ldrb	r3, [r4, #0]
 8015a72:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a74:	d10a      	bne.n	8015a8c <_svfiprintf_r+0x130>
 8015a76:	7863      	ldrb	r3, [r4, #1]
 8015a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a7a:	d132      	bne.n	8015ae2 <_svfiprintf_r+0x186>
 8015a7c:	9b03      	ldr	r3, [sp, #12]
 8015a7e:	1d1a      	adds	r2, r3, #4
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	9203      	str	r2, [sp, #12]
 8015a84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015a88:	3402      	adds	r4, #2
 8015a8a:	9305      	str	r3, [sp, #20]
 8015a8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015b50 <_svfiprintf_r+0x1f4>
 8015a90:	7821      	ldrb	r1, [r4, #0]
 8015a92:	2203      	movs	r2, #3
 8015a94:	4650      	mov	r0, sl
 8015a96:	f7ea fba3 	bl	80001e0 <memchr>
 8015a9a:	b138      	cbz	r0, 8015aac <_svfiprintf_r+0x150>
 8015a9c:	9b04      	ldr	r3, [sp, #16]
 8015a9e:	eba0 000a 	sub.w	r0, r0, sl
 8015aa2:	2240      	movs	r2, #64	@ 0x40
 8015aa4:	4082      	lsls	r2, r0
 8015aa6:	4313      	orrs	r3, r2
 8015aa8:	3401      	adds	r4, #1
 8015aaa:	9304      	str	r3, [sp, #16]
 8015aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ab0:	4824      	ldr	r0, [pc, #144]	@ (8015b44 <_svfiprintf_r+0x1e8>)
 8015ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015ab6:	2206      	movs	r2, #6
 8015ab8:	f7ea fb92 	bl	80001e0 <memchr>
 8015abc:	2800      	cmp	r0, #0
 8015abe:	d036      	beq.n	8015b2e <_svfiprintf_r+0x1d2>
 8015ac0:	4b21      	ldr	r3, [pc, #132]	@ (8015b48 <_svfiprintf_r+0x1ec>)
 8015ac2:	bb1b      	cbnz	r3, 8015b0c <_svfiprintf_r+0x1b0>
 8015ac4:	9b03      	ldr	r3, [sp, #12]
 8015ac6:	3307      	adds	r3, #7
 8015ac8:	f023 0307 	bic.w	r3, r3, #7
 8015acc:	3308      	adds	r3, #8
 8015ace:	9303      	str	r3, [sp, #12]
 8015ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ad2:	4433      	add	r3, r6
 8015ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ad6:	e76a      	b.n	80159ae <_svfiprintf_r+0x52>
 8015ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8015adc:	460c      	mov	r4, r1
 8015ade:	2001      	movs	r0, #1
 8015ae0:	e7a8      	b.n	8015a34 <_svfiprintf_r+0xd8>
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	3401      	adds	r4, #1
 8015ae6:	9305      	str	r3, [sp, #20]
 8015ae8:	4619      	mov	r1, r3
 8015aea:	f04f 0c0a 	mov.w	ip, #10
 8015aee:	4620      	mov	r0, r4
 8015af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015af4:	3a30      	subs	r2, #48	@ 0x30
 8015af6:	2a09      	cmp	r2, #9
 8015af8:	d903      	bls.n	8015b02 <_svfiprintf_r+0x1a6>
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d0c6      	beq.n	8015a8c <_svfiprintf_r+0x130>
 8015afe:	9105      	str	r1, [sp, #20]
 8015b00:	e7c4      	b.n	8015a8c <_svfiprintf_r+0x130>
 8015b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b06:	4604      	mov	r4, r0
 8015b08:	2301      	movs	r3, #1
 8015b0a:	e7f0      	b.n	8015aee <_svfiprintf_r+0x192>
 8015b0c:	ab03      	add	r3, sp, #12
 8015b0e:	9300      	str	r3, [sp, #0]
 8015b10:	462a      	mov	r2, r5
 8015b12:	4b0e      	ldr	r3, [pc, #56]	@ (8015b4c <_svfiprintf_r+0x1f0>)
 8015b14:	a904      	add	r1, sp, #16
 8015b16:	4638      	mov	r0, r7
 8015b18:	f7fc fe0c 	bl	8012734 <_printf_float>
 8015b1c:	1c42      	adds	r2, r0, #1
 8015b1e:	4606      	mov	r6, r0
 8015b20:	d1d6      	bne.n	8015ad0 <_svfiprintf_r+0x174>
 8015b22:	89ab      	ldrh	r3, [r5, #12]
 8015b24:	065b      	lsls	r3, r3, #25
 8015b26:	f53f af2d 	bmi.w	8015984 <_svfiprintf_r+0x28>
 8015b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b2c:	e72c      	b.n	8015988 <_svfiprintf_r+0x2c>
 8015b2e:	ab03      	add	r3, sp, #12
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	462a      	mov	r2, r5
 8015b34:	4b05      	ldr	r3, [pc, #20]	@ (8015b4c <_svfiprintf_r+0x1f0>)
 8015b36:	a904      	add	r1, sp, #16
 8015b38:	4638      	mov	r0, r7
 8015b3a:	f7fd f945 	bl	8012dc8 <_printf_i>
 8015b3e:	e7ed      	b.n	8015b1c <_svfiprintf_r+0x1c0>
 8015b40:	080182a4 	.word	0x080182a4
 8015b44:	080182ae 	.word	0x080182ae
 8015b48:	08012735 	.word	0x08012735
 8015b4c:	080158a7 	.word	0x080158a7
 8015b50:	080182aa 	.word	0x080182aa

08015b54 <__sfputc_r>:
 8015b54:	6893      	ldr	r3, [r2, #8]
 8015b56:	3b01      	subs	r3, #1
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	b410      	push	{r4}
 8015b5c:	6093      	str	r3, [r2, #8]
 8015b5e:	da08      	bge.n	8015b72 <__sfputc_r+0x1e>
 8015b60:	6994      	ldr	r4, [r2, #24]
 8015b62:	42a3      	cmp	r3, r4
 8015b64:	db01      	blt.n	8015b6a <__sfputc_r+0x16>
 8015b66:	290a      	cmp	r1, #10
 8015b68:	d103      	bne.n	8015b72 <__sfputc_r+0x1e>
 8015b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b6e:	f000 bf0c 	b.w	801698a <__swbuf_r>
 8015b72:	6813      	ldr	r3, [r2, #0]
 8015b74:	1c58      	adds	r0, r3, #1
 8015b76:	6010      	str	r0, [r2, #0]
 8015b78:	7019      	strb	r1, [r3, #0]
 8015b7a:	4608      	mov	r0, r1
 8015b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b80:	4770      	bx	lr

08015b82 <__sfputs_r>:
 8015b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b84:	4606      	mov	r6, r0
 8015b86:	460f      	mov	r7, r1
 8015b88:	4614      	mov	r4, r2
 8015b8a:	18d5      	adds	r5, r2, r3
 8015b8c:	42ac      	cmp	r4, r5
 8015b8e:	d101      	bne.n	8015b94 <__sfputs_r+0x12>
 8015b90:	2000      	movs	r0, #0
 8015b92:	e007      	b.n	8015ba4 <__sfputs_r+0x22>
 8015b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b98:	463a      	mov	r2, r7
 8015b9a:	4630      	mov	r0, r6
 8015b9c:	f7ff ffda 	bl	8015b54 <__sfputc_r>
 8015ba0:	1c43      	adds	r3, r0, #1
 8015ba2:	d1f3      	bne.n	8015b8c <__sfputs_r+0xa>
 8015ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ba8 <_vfiprintf_r>:
 8015ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bac:	460d      	mov	r5, r1
 8015bae:	b09d      	sub	sp, #116	@ 0x74
 8015bb0:	4614      	mov	r4, r2
 8015bb2:	4698      	mov	r8, r3
 8015bb4:	4606      	mov	r6, r0
 8015bb6:	b118      	cbz	r0, 8015bc0 <_vfiprintf_r+0x18>
 8015bb8:	6a03      	ldr	r3, [r0, #32]
 8015bba:	b90b      	cbnz	r3, 8015bc0 <_vfiprintf_r+0x18>
 8015bbc:	f7fd fcea 	bl	8013594 <__sinit>
 8015bc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015bc2:	07d9      	lsls	r1, r3, #31
 8015bc4:	d405      	bmi.n	8015bd2 <_vfiprintf_r+0x2a>
 8015bc6:	89ab      	ldrh	r3, [r5, #12]
 8015bc8:	059a      	lsls	r2, r3, #22
 8015bca:	d402      	bmi.n	8015bd2 <_vfiprintf_r+0x2a>
 8015bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015bce:	f7fe fc68 	bl	80144a2 <__retarget_lock_acquire_recursive>
 8015bd2:	89ab      	ldrh	r3, [r5, #12]
 8015bd4:	071b      	lsls	r3, r3, #28
 8015bd6:	d501      	bpl.n	8015bdc <_vfiprintf_r+0x34>
 8015bd8:	692b      	ldr	r3, [r5, #16]
 8015bda:	b99b      	cbnz	r3, 8015c04 <_vfiprintf_r+0x5c>
 8015bdc:	4629      	mov	r1, r5
 8015bde:	4630      	mov	r0, r6
 8015be0:	f000 ff12 	bl	8016a08 <__swsetup_r>
 8015be4:	b170      	cbz	r0, 8015c04 <_vfiprintf_r+0x5c>
 8015be6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015be8:	07dc      	lsls	r4, r3, #31
 8015bea:	d504      	bpl.n	8015bf6 <_vfiprintf_r+0x4e>
 8015bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bf0:	b01d      	add	sp, #116	@ 0x74
 8015bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bf6:	89ab      	ldrh	r3, [r5, #12]
 8015bf8:	0598      	lsls	r0, r3, #22
 8015bfa:	d4f7      	bmi.n	8015bec <_vfiprintf_r+0x44>
 8015bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015bfe:	f7fe fc51 	bl	80144a4 <__retarget_lock_release_recursive>
 8015c02:	e7f3      	b.n	8015bec <_vfiprintf_r+0x44>
 8015c04:	2300      	movs	r3, #0
 8015c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c08:	2320      	movs	r3, #32
 8015c0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c12:	2330      	movs	r3, #48	@ 0x30
 8015c14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015dc4 <_vfiprintf_r+0x21c>
 8015c18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015c1c:	f04f 0901 	mov.w	r9, #1
 8015c20:	4623      	mov	r3, r4
 8015c22:	469a      	mov	sl, r3
 8015c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c28:	b10a      	cbz	r2, 8015c2e <_vfiprintf_r+0x86>
 8015c2a:	2a25      	cmp	r2, #37	@ 0x25
 8015c2c:	d1f9      	bne.n	8015c22 <_vfiprintf_r+0x7a>
 8015c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8015c32:	d00b      	beq.n	8015c4c <_vfiprintf_r+0xa4>
 8015c34:	465b      	mov	r3, fp
 8015c36:	4622      	mov	r2, r4
 8015c38:	4629      	mov	r1, r5
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f7ff ffa1 	bl	8015b82 <__sfputs_r>
 8015c40:	3001      	adds	r0, #1
 8015c42:	f000 80a7 	beq.w	8015d94 <_vfiprintf_r+0x1ec>
 8015c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c48:	445a      	add	r2, fp
 8015c4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	f000 809f 	beq.w	8015d94 <_vfiprintf_r+0x1ec>
 8015c56:	2300      	movs	r3, #0
 8015c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c60:	f10a 0a01 	add.w	sl, sl, #1
 8015c64:	9304      	str	r3, [sp, #16]
 8015c66:	9307      	str	r3, [sp, #28]
 8015c68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015c6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c6e:	4654      	mov	r4, sl
 8015c70:	2205      	movs	r2, #5
 8015c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c76:	4853      	ldr	r0, [pc, #332]	@ (8015dc4 <_vfiprintf_r+0x21c>)
 8015c78:	f7ea fab2 	bl	80001e0 <memchr>
 8015c7c:	9a04      	ldr	r2, [sp, #16]
 8015c7e:	b9d8      	cbnz	r0, 8015cb8 <_vfiprintf_r+0x110>
 8015c80:	06d1      	lsls	r1, r2, #27
 8015c82:	bf44      	itt	mi
 8015c84:	2320      	movmi	r3, #32
 8015c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c8a:	0713      	lsls	r3, r2, #28
 8015c8c:	bf44      	itt	mi
 8015c8e:	232b      	movmi	r3, #43	@ 0x2b
 8015c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c94:	f89a 3000 	ldrb.w	r3, [sl]
 8015c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c9a:	d015      	beq.n	8015cc8 <_vfiprintf_r+0x120>
 8015c9c:	9a07      	ldr	r2, [sp, #28]
 8015c9e:	4654      	mov	r4, sl
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	f04f 0c0a 	mov.w	ip, #10
 8015ca6:	4621      	mov	r1, r4
 8015ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015cac:	3b30      	subs	r3, #48	@ 0x30
 8015cae:	2b09      	cmp	r3, #9
 8015cb0:	d94b      	bls.n	8015d4a <_vfiprintf_r+0x1a2>
 8015cb2:	b1b0      	cbz	r0, 8015ce2 <_vfiprintf_r+0x13a>
 8015cb4:	9207      	str	r2, [sp, #28]
 8015cb6:	e014      	b.n	8015ce2 <_vfiprintf_r+0x13a>
 8015cb8:	eba0 0308 	sub.w	r3, r0, r8
 8015cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8015cc0:	4313      	orrs	r3, r2
 8015cc2:	9304      	str	r3, [sp, #16]
 8015cc4:	46a2      	mov	sl, r4
 8015cc6:	e7d2      	b.n	8015c6e <_vfiprintf_r+0xc6>
 8015cc8:	9b03      	ldr	r3, [sp, #12]
 8015cca:	1d19      	adds	r1, r3, #4
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	9103      	str	r1, [sp, #12]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	bfbb      	ittet	lt
 8015cd4:	425b      	neglt	r3, r3
 8015cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8015cda:	9307      	strge	r3, [sp, #28]
 8015cdc:	9307      	strlt	r3, [sp, #28]
 8015cde:	bfb8      	it	lt
 8015ce0:	9204      	strlt	r2, [sp, #16]
 8015ce2:	7823      	ldrb	r3, [r4, #0]
 8015ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ce6:	d10a      	bne.n	8015cfe <_vfiprintf_r+0x156>
 8015ce8:	7863      	ldrb	r3, [r4, #1]
 8015cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cec:	d132      	bne.n	8015d54 <_vfiprintf_r+0x1ac>
 8015cee:	9b03      	ldr	r3, [sp, #12]
 8015cf0:	1d1a      	adds	r2, r3, #4
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	9203      	str	r2, [sp, #12]
 8015cf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015cfa:	3402      	adds	r4, #2
 8015cfc:	9305      	str	r3, [sp, #20]
 8015cfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015dd4 <_vfiprintf_r+0x22c>
 8015d02:	7821      	ldrb	r1, [r4, #0]
 8015d04:	2203      	movs	r2, #3
 8015d06:	4650      	mov	r0, sl
 8015d08:	f7ea fa6a 	bl	80001e0 <memchr>
 8015d0c:	b138      	cbz	r0, 8015d1e <_vfiprintf_r+0x176>
 8015d0e:	9b04      	ldr	r3, [sp, #16]
 8015d10:	eba0 000a 	sub.w	r0, r0, sl
 8015d14:	2240      	movs	r2, #64	@ 0x40
 8015d16:	4082      	lsls	r2, r0
 8015d18:	4313      	orrs	r3, r2
 8015d1a:	3401      	adds	r4, #1
 8015d1c:	9304      	str	r3, [sp, #16]
 8015d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d22:	4829      	ldr	r0, [pc, #164]	@ (8015dc8 <_vfiprintf_r+0x220>)
 8015d24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015d28:	2206      	movs	r2, #6
 8015d2a:	f7ea fa59 	bl	80001e0 <memchr>
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	d03f      	beq.n	8015db2 <_vfiprintf_r+0x20a>
 8015d32:	4b26      	ldr	r3, [pc, #152]	@ (8015dcc <_vfiprintf_r+0x224>)
 8015d34:	bb1b      	cbnz	r3, 8015d7e <_vfiprintf_r+0x1d6>
 8015d36:	9b03      	ldr	r3, [sp, #12]
 8015d38:	3307      	adds	r3, #7
 8015d3a:	f023 0307 	bic.w	r3, r3, #7
 8015d3e:	3308      	adds	r3, #8
 8015d40:	9303      	str	r3, [sp, #12]
 8015d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d44:	443b      	add	r3, r7
 8015d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d48:	e76a      	b.n	8015c20 <_vfiprintf_r+0x78>
 8015d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d4e:	460c      	mov	r4, r1
 8015d50:	2001      	movs	r0, #1
 8015d52:	e7a8      	b.n	8015ca6 <_vfiprintf_r+0xfe>
 8015d54:	2300      	movs	r3, #0
 8015d56:	3401      	adds	r4, #1
 8015d58:	9305      	str	r3, [sp, #20]
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	f04f 0c0a 	mov.w	ip, #10
 8015d60:	4620      	mov	r0, r4
 8015d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d66:	3a30      	subs	r2, #48	@ 0x30
 8015d68:	2a09      	cmp	r2, #9
 8015d6a:	d903      	bls.n	8015d74 <_vfiprintf_r+0x1cc>
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d0c6      	beq.n	8015cfe <_vfiprintf_r+0x156>
 8015d70:	9105      	str	r1, [sp, #20]
 8015d72:	e7c4      	b.n	8015cfe <_vfiprintf_r+0x156>
 8015d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d78:	4604      	mov	r4, r0
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	e7f0      	b.n	8015d60 <_vfiprintf_r+0x1b8>
 8015d7e:	ab03      	add	r3, sp, #12
 8015d80:	9300      	str	r3, [sp, #0]
 8015d82:	462a      	mov	r2, r5
 8015d84:	4b12      	ldr	r3, [pc, #72]	@ (8015dd0 <_vfiprintf_r+0x228>)
 8015d86:	a904      	add	r1, sp, #16
 8015d88:	4630      	mov	r0, r6
 8015d8a:	f7fc fcd3 	bl	8012734 <_printf_float>
 8015d8e:	4607      	mov	r7, r0
 8015d90:	1c78      	adds	r0, r7, #1
 8015d92:	d1d6      	bne.n	8015d42 <_vfiprintf_r+0x19a>
 8015d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d96:	07d9      	lsls	r1, r3, #31
 8015d98:	d405      	bmi.n	8015da6 <_vfiprintf_r+0x1fe>
 8015d9a:	89ab      	ldrh	r3, [r5, #12]
 8015d9c:	059a      	lsls	r2, r3, #22
 8015d9e:	d402      	bmi.n	8015da6 <_vfiprintf_r+0x1fe>
 8015da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015da2:	f7fe fb7f 	bl	80144a4 <__retarget_lock_release_recursive>
 8015da6:	89ab      	ldrh	r3, [r5, #12]
 8015da8:	065b      	lsls	r3, r3, #25
 8015daa:	f53f af1f 	bmi.w	8015bec <_vfiprintf_r+0x44>
 8015dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015db0:	e71e      	b.n	8015bf0 <_vfiprintf_r+0x48>
 8015db2:	ab03      	add	r3, sp, #12
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	462a      	mov	r2, r5
 8015db8:	4b05      	ldr	r3, [pc, #20]	@ (8015dd0 <_vfiprintf_r+0x228>)
 8015dba:	a904      	add	r1, sp, #16
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	f7fd f803 	bl	8012dc8 <_printf_i>
 8015dc2:	e7e4      	b.n	8015d8e <_vfiprintf_r+0x1e6>
 8015dc4:	080182a4 	.word	0x080182a4
 8015dc8:	080182ae 	.word	0x080182ae
 8015dcc:	08012735 	.word	0x08012735
 8015dd0:	08015b83 	.word	0x08015b83
 8015dd4:	080182aa 	.word	0x080182aa

08015dd8 <__ascii_mbtowc>:
 8015dd8:	b082      	sub	sp, #8
 8015dda:	b901      	cbnz	r1, 8015dde <__ascii_mbtowc+0x6>
 8015ddc:	a901      	add	r1, sp, #4
 8015dde:	b142      	cbz	r2, 8015df2 <__ascii_mbtowc+0x1a>
 8015de0:	b14b      	cbz	r3, 8015df6 <__ascii_mbtowc+0x1e>
 8015de2:	7813      	ldrb	r3, [r2, #0]
 8015de4:	600b      	str	r3, [r1, #0]
 8015de6:	7812      	ldrb	r2, [r2, #0]
 8015de8:	1e10      	subs	r0, r2, #0
 8015dea:	bf18      	it	ne
 8015dec:	2001      	movne	r0, #1
 8015dee:	b002      	add	sp, #8
 8015df0:	4770      	bx	lr
 8015df2:	4610      	mov	r0, r2
 8015df4:	e7fb      	b.n	8015dee <__ascii_mbtowc+0x16>
 8015df6:	f06f 0001 	mvn.w	r0, #1
 8015dfa:	e7f8      	b.n	8015dee <__ascii_mbtowc+0x16>

08015dfc <__sflush_r>:
 8015dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e04:	0716      	lsls	r6, r2, #28
 8015e06:	4605      	mov	r5, r0
 8015e08:	460c      	mov	r4, r1
 8015e0a:	d454      	bmi.n	8015eb6 <__sflush_r+0xba>
 8015e0c:	684b      	ldr	r3, [r1, #4]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	dc02      	bgt.n	8015e18 <__sflush_r+0x1c>
 8015e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	dd48      	ble.n	8015eaa <__sflush_r+0xae>
 8015e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015e1a:	2e00      	cmp	r6, #0
 8015e1c:	d045      	beq.n	8015eaa <__sflush_r+0xae>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015e24:	682f      	ldr	r7, [r5, #0]
 8015e26:	6a21      	ldr	r1, [r4, #32]
 8015e28:	602b      	str	r3, [r5, #0]
 8015e2a:	d030      	beq.n	8015e8e <__sflush_r+0x92>
 8015e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015e2e:	89a3      	ldrh	r3, [r4, #12]
 8015e30:	0759      	lsls	r1, r3, #29
 8015e32:	d505      	bpl.n	8015e40 <__sflush_r+0x44>
 8015e34:	6863      	ldr	r3, [r4, #4]
 8015e36:	1ad2      	subs	r2, r2, r3
 8015e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015e3a:	b10b      	cbz	r3, 8015e40 <__sflush_r+0x44>
 8015e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015e3e:	1ad2      	subs	r2, r2, r3
 8015e40:	2300      	movs	r3, #0
 8015e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015e44:	6a21      	ldr	r1, [r4, #32]
 8015e46:	4628      	mov	r0, r5
 8015e48:	47b0      	blx	r6
 8015e4a:	1c43      	adds	r3, r0, #1
 8015e4c:	89a3      	ldrh	r3, [r4, #12]
 8015e4e:	d106      	bne.n	8015e5e <__sflush_r+0x62>
 8015e50:	6829      	ldr	r1, [r5, #0]
 8015e52:	291d      	cmp	r1, #29
 8015e54:	d82b      	bhi.n	8015eae <__sflush_r+0xb2>
 8015e56:	4a2a      	ldr	r2, [pc, #168]	@ (8015f00 <__sflush_r+0x104>)
 8015e58:	40ca      	lsrs	r2, r1
 8015e5a:	07d6      	lsls	r6, r2, #31
 8015e5c:	d527      	bpl.n	8015eae <__sflush_r+0xb2>
 8015e5e:	2200      	movs	r2, #0
 8015e60:	6062      	str	r2, [r4, #4]
 8015e62:	04d9      	lsls	r1, r3, #19
 8015e64:	6922      	ldr	r2, [r4, #16]
 8015e66:	6022      	str	r2, [r4, #0]
 8015e68:	d504      	bpl.n	8015e74 <__sflush_r+0x78>
 8015e6a:	1c42      	adds	r2, r0, #1
 8015e6c:	d101      	bne.n	8015e72 <__sflush_r+0x76>
 8015e6e:	682b      	ldr	r3, [r5, #0]
 8015e70:	b903      	cbnz	r3, 8015e74 <__sflush_r+0x78>
 8015e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8015e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015e76:	602f      	str	r7, [r5, #0]
 8015e78:	b1b9      	cbz	r1, 8015eaa <__sflush_r+0xae>
 8015e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015e7e:	4299      	cmp	r1, r3
 8015e80:	d002      	beq.n	8015e88 <__sflush_r+0x8c>
 8015e82:	4628      	mov	r0, r5
 8015e84:	f7ff f98c 	bl	80151a0 <_free_r>
 8015e88:	2300      	movs	r3, #0
 8015e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8015e8c:	e00d      	b.n	8015eaa <__sflush_r+0xae>
 8015e8e:	2301      	movs	r3, #1
 8015e90:	4628      	mov	r0, r5
 8015e92:	47b0      	blx	r6
 8015e94:	4602      	mov	r2, r0
 8015e96:	1c50      	adds	r0, r2, #1
 8015e98:	d1c9      	bne.n	8015e2e <__sflush_r+0x32>
 8015e9a:	682b      	ldr	r3, [r5, #0]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d0c6      	beq.n	8015e2e <__sflush_r+0x32>
 8015ea0:	2b1d      	cmp	r3, #29
 8015ea2:	d001      	beq.n	8015ea8 <__sflush_r+0xac>
 8015ea4:	2b16      	cmp	r3, #22
 8015ea6:	d11e      	bne.n	8015ee6 <__sflush_r+0xea>
 8015ea8:	602f      	str	r7, [r5, #0]
 8015eaa:	2000      	movs	r0, #0
 8015eac:	e022      	b.n	8015ef4 <__sflush_r+0xf8>
 8015eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015eb2:	b21b      	sxth	r3, r3
 8015eb4:	e01b      	b.n	8015eee <__sflush_r+0xf2>
 8015eb6:	690f      	ldr	r7, [r1, #16]
 8015eb8:	2f00      	cmp	r7, #0
 8015eba:	d0f6      	beq.n	8015eaa <__sflush_r+0xae>
 8015ebc:	0793      	lsls	r3, r2, #30
 8015ebe:	680e      	ldr	r6, [r1, #0]
 8015ec0:	bf08      	it	eq
 8015ec2:	694b      	ldreq	r3, [r1, #20]
 8015ec4:	600f      	str	r7, [r1, #0]
 8015ec6:	bf18      	it	ne
 8015ec8:	2300      	movne	r3, #0
 8015eca:	eba6 0807 	sub.w	r8, r6, r7
 8015ece:	608b      	str	r3, [r1, #8]
 8015ed0:	f1b8 0f00 	cmp.w	r8, #0
 8015ed4:	dde9      	ble.n	8015eaa <__sflush_r+0xae>
 8015ed6:	6a21      	ldr	r1, [r4, #32]
 8015ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015eda:	4643      	mov	r3, r8
 8015edc:	463a      	mov	r2, r7
 8015ede:	4628      	mov	r0, r5
 8015ee0:	47b0      	blx	r6
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	dc08      	bgt.n	8015ef8 <__sflush_r+0xfc>
 8015ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015eee:	81a3      	strh	r3, [r4, #12]
 8015ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ef8:	4407      	add	r7, r0
 8015efa:	eba8 0800 	sub.w	r8, r8, r0
 8015efe:	e7e7      	b.n	8015ed0 <__sflush_r+0xd4>
 8015f00:	20400001 	.word	0x20400001

08015f04 <_fflush_r>:
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	690b      	ldr	r3, [r1, #16]
 8015f08:	4605      	mov	r5, r0
 8015f0a:	460c      	mov	r4, r1
 8015f0c:	b913      	cbnz	r3, 8015f14 <_fflush_r+0x10>
 8015f0e:	2500      	movs	r5, #0
 8015f10:	4628      	mov	r0, r5
 8015f12:	bd38      	pop	{r3, r4, r5, pc}
 8015f14:	b118      	cbz	r0, 8015f1e <_fflush_r+0x1a>
 8015f16:	6a03      	ldr	r3, [r0, #32]
 8015f18:	b90b      	cbnz	r3, 8015f1e <_fflush_r+0x1a>
 8015f1a:	f7fd fb3b 	bl	8013594 <__sinit>
 8015f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d0f3      	beq.n	8015f0e <_fflush_r+0xa>
 8015f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015f28:	07d0      	lsls	r0, r2, #31
 8015f2a:	d404      	bmi.n	8015f36 <_fflush_r+0x32>
 8015f2c:	0599      	lsls	r1, r3, #22
 8015f2e:	d402      	bmi.n	8015f36 <_fflush_r+0x32>
 8015f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015f32:	f7fe fab6 	bl	80144a2 <__retarget_lock_acquire_recursive>
 8015f36:	4628      	mov	r0, r5
 8015f38:	4621      	mov	r1, r4
 8015f3a:	f7ff ff5f 	bl	8015dfc <__sflush_r>
 8015f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015f40:	07da      	lsls	r2, r3, #31
 8015f42:	4605      	mov	r5, r0
 8015f44:	d4e4      	bmi.n	8015f10 <_fflush_r+0xc>
 8015f46:	89a3      	ldrh	r3, [r4, #12]
 8015f48:	059b      	lsls	r3, r3, #22
 8015f4a:	d4e1      	bmi.n	8015f10 <_fflush_r+0xc>
 8015f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015f4e:	f7fe faa9 	bl	80144a4 <__retarget_lock_release_recursive>
 8015f52:	e7dd      	b.n	8015f10 <_fflush_r+0xc>

08015f54 <_Balloc>:
 8015f54:	b570      	push	{r4, r5, r6, lr}
 8015f56:	69c6      	ldr	r6, [r0, #28]
 8015f58:	4604      	mov	r4, r0
 8015f5a:	460d      	mov	r5, r1
 8015f5c:	b976      	cbnz	r6, 8015f7c <_Balloc+0x28>
 8015f5e:	2010      	movs	r0, #16
 8015f60:	f7fc fe12 	bl	8012b88 <malloc>
 8015f64:	4602      	mov	r2, r0
 8015f66:	61e0      	str	r0, [r4, #28]
 8015f68:	b920      	cbnz	r0, 8015f74 <_Balloc+0x20>
 8015f6a:	4b18      	ldr	r3, [pc, #96]	@ (8015fcc <_Balloc+0x78>)
 8015f6c:	4818      	ldr	r0, [pc, #96]	@ (8015fd0 <_Balloc+0x7c>)
 8015f6e:	216b      	movs	r1, #107	@ 0x6b
 8015f70:	f000 fec6 	bl	8016d00 <__assert_func>
 8015f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015f78:	6006      	str	r6, [r0, #0]
 8015f7a:	60c6      	str	r6, [r0, #12]
 8015f7c:	69e6      	ldr	r6, [r4, #28]
 8015f7e:	68f3      	ldr	r3, [r6, #12]
 8015f80:	b183      	cbz	r3, 8015fa4 <_Balloc+0x50>
 8015f82:	69e3      	ldr	r3, [r4, #28]
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015f8a:	b9b8      	cbnz	r0, 8015fbc <_Balloc+0x68>
 8015f8c:	2101      	movs	r1, #1
 8015f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8015f92:	1d72      	adds	r2, r6, #5
 8015f94:	0092      	lsls	r2, r2, #2
 8015f96:	4620      	mov	r0, r4
 8015f98:	f7fc fb06 	bl	80125a8 <_calloc_r>
 8015f9c:	b160      	cbz	r0, 8015fb8 <_Balloc+0x64>
 8015f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015fa2:	e00e      	b.n	8015fc2 <_Balloc+0x6e>
 8015fa4:	2221      	movs	r2, #33	@ 0x21
 8015fa6:	2104      	movs	r1, #4
 8015fa8:	4620      	mov	r0, r4
 8015faa:	f7fc fafd 	bl	80125a8 <_calloc_r>
 8015fae:	69e3      	ldr	r3, [r4, #28]
 8015fb0:	60f0      	str	r0, [r6, #12]
 8015fb2:	68db      	ldr	r3, [r3, #12]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d1e4      	bne.n	8015f82 <_Balloc+0x2e>
 8015fb8:	2000      	movs	r0, #0
 8015fba:	bd70      	pop	{r4, r5, r6, pc}
 8015fbc:	6802      	ldr	r2, [r0, #0]
 8015fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015fc8:	e7f7      	b.n	8015fba <_Balloc+0x66>
 8015fca:	bf00      	nop
 8015fcc:	080181c4 	.word	0x080181c4
 8015fd0:	080182b5 	.word	0x080182b5

08015fd4 <_Bfree>:
 8015fd4:	b570      	push	{r4, r5, r6, lr}
 8015fd6:	69c6      	ldr	r6, [r0, #28]
 8015fd8:	4605      	mov	r5, r0
 8015fda:	460c      	mov	r4, r1
 8015fdc:	b976      	cbnz	r6, 8015ffc <_Bfree+0x28>
 8015fde:	2010      	movs	r0, #16
 8015fe0:	f7fc fdd2 	bl	8012b88 <malloc>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	61e8      	str	r0, [r5, #28]
 8015fe8:	b920      	cbnz	r0, 8015ff4 <_Bfree+0x20>
 8015fea:	4b09      	ldr	r3, [pc, #36]	@ (8016010 <_Bfree+0x3c>)
 8015fec:	4809      	ldr	r0, [pc, #36]	@ (8016014 <_Bfree+0x40>)
 8015fee:	218f      	movs	r1, #143	@ 0x8f
 8015ff0:	f000 fe86 	bl	8016d00 <__assert_func>
 8015ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ff8:	6006      	str	r6, [r0, #0]
 8015ffa:	60c6      	str	r6, [r0, #12]
 8015ffc:	b13c      	cbz	r4, 801600e <_Bfree+0x3a>
 8015ffe:	69eb      	ldr	r3, [r5, #28]
 8016000:	6862      	ldr	r2, [r4, #4]
 8016002:	68db      	ldr	r3, [r3, #12]
 8016004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016008:	6021      	str	r1, [r4, #0]
 801600a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801600e:	bd70      	pop	{r4, r5, r6, pc}
 8016010:	080181c4 	.word	0x080181c4
 8016014:	080182b5 	.word	0x080182b5

08016018 <__multadd>:
 8016018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801601c:	690d      	ldr	r5, [r1, #16]
 801601e:	4607      	mov	r7, r0
 8016020:	460c      	mov	r4, r1
 8016022:	461e      	mov	r6, r3
 8016024:	f101 0c14 	add.w	ip, r1, #20
 8016028:	2000      	movs	r0, #0
 801602a:	f8dc 3000 	ldr.w	r3, [ip]
 801602e:	b299      	uxth	r1, r3
 8016030:	fb02 6101 	mla	r1, r2, r1, r6
 8016034:	0c1e      	lsrs	r6, r3, #16
 8016036:	0c0b      	lsrs	r3, r1, #16
 8016038:	fb02 3306 	mla	r3, r2, r6, r3
 801603c:	b289      	uxth	r1, r1
 801603e:	3001      	adds	r0, #1
 8016040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016044:	4285      	cmp	r5, r0
 8016046:	f84c 1b04 	str.w	r1, [ip], #4
 801604a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801604e:	dcec      	bgt.n	801602a <__multadd+0x12>
 8016050:	b30e      	cbz	r6, 8016096 <__multadd+0x7e>
 8016052:	68a3      	ldr	r3, [r4, #8]
 8016054:	42ab      	cmp	r3, r5
 8016056:	dc19      	bgt.n	801608c <__multadd+0x74>
 8016058:	6861      	ldr	r1, [r4, #4]
 801605a:	4638      	mov	r0, r7
 801605c:	3101      	adds	r1, #1
 801605e:	f7ff ff79 	bl	8015f54 <_Balloc>
 8016062:	4680      	mov	r8, r0
 8016064:	b928      	cbnz	r0, 8016072 <__multadd+0x5a>
 8016066:	4602      	mov	r2, r0
 8016068:	4b0c      	ldr	r3, [pc, #48]	@ (801609c <__multadd+0x84>)
 801606a:	480d      	ldr	r0, [pc, #52]	@ (80160a0 <__multadd+0x88>)
 801606c:	21ba      	movs	r1, #186	@ 0xba
 801606e:	f000 fe47 	bl	8016d00 <__assert_func>
 8016072:	6922      	ldr	r2, [r4, #16]
 8016074:	3202      	adds	r2, #2
 8016076:	f104 010c 	add.w	r1, r4, #12
 801607a:	0092      	lsls	r2, r2, #2
 801607c:	300c      	adds	r0, #12
 801607e:	f7fe fa17 	bl	80144b0 <memcpy>
 8016082:	4621      	mov	r1, r4
 8016084:	4638      	mov	r0, r7
 8016086:	f7ff ffa5 	bl	8015fd4 <_Bfree>
 801608a:	4644      	mov	r4, r8
 801608c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016090:	3501      	adds	r5, #1
 8016092:	615e      	str	r6, [r3, #20]
 8016094:	6125      	str	r5, [r4, #16]
 8016096:	4620      	mov	r0, r4
 8016098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801609c:	08018233 	.word	0x08018233
 80160a0:	080182b5 	.word	0x080182b5

080160a4 <__s2b>:
 80160a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160a8:	460c      	mov	r4, r1
 80160aa:	4615      	mov	r5, r2
 80160ac:	461f      	mov	r7, r3
 80160ae:	2209      	movs	r2, #9
 80160b0:	3308      	adds	r3, #8
 80160b2:	4606      	mov	r6, r0
 80160b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80160b8:	2100      	movs	r1, #0
 80160ba:	2201      	movs	r2, #1
 80160bc:	429a      	cmp	r2, r3
 80160be:	db09      	blt.n	80160d4 <__s2b+0x30>
 80160c0:	4630      	mov	r0, r6
 80160c2:	f7ff ff47 	bl	8015f54 <_Balloc>
 80160c6:	b940      	cbnz	r0, 80160da <__s2b+0x36>
 80160c8:	4602      	mov	r2, r0
 80160ca:	4b19      	ldr	r3, [pc, #100]	@ (8016130 <__s2b+0x8c>)
 80160cc:	4819      	ldr	r0, [pc, #100]	@ (8016134 <__s2b+0x90>)
 80160ce:	21d3      	movs	r1, #211	@ 0xd3
 80160d0:	f000 fe16 	bl	8016d00 <__assert_func>
 80160d4:	0052      	lsls	r2, r2, #1
 80160d6:	3101      	adds	r1, #1
 80160d8:	e7f0      	b.n	80160bc <__s2b+0x18>
 80160da:	9b08      	ldr	r3, [sp, #32]
 80160dc:	6143      	str	r3, [r0, #20]
 80160de:	2d09      	cmp	r5, #9
 80160e0:	f04f 0301 	mov.w	r3, #1
 80160e4:	6103      	str	r3, [r0, #16]
 80160e6:	dd16      	ble.n	8016116 <__s2b+0x72>
 80160e8:	f104 0909 	add.w	r9, r4, #9
 80160ec:	46c8      	mov	r8, r9
 80160ee:	442c      	add	r4, r5
 80160f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80160f4:	4601      	mov	r1, r0
 80160f6:	3b30      	subs	r3, #48	@ 0x30
 80160f8:	220a      	movs	r2, #10
 80160fa:	4630      	mov	r0, r6
 80160fc:	f7ff ff8c 	bl	8016018 <__multadd>
 8016100:	45a0      	cmp	r8, r4
 8016102:	d1f5      	bne.n	80160f0 <__s2b+0x4c>
 8016104:	f1a5 0408 	sub.w	r4, r5, #8
 8016108:	444c      	add	r4, r9
 801610a:	1b2d      	subs	r5, r5, r4
 801610c:	1963      	adds	r3, r4, r5
 801610e:	42bb      	cmp	r3, r7
 8016110:	db04      	blt.n	801611c <__s2b+0x78>
 8016112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016116:	340a      	adds	r4, #10
 8016118:	2509      	movs	r5, #9
 801611a:	e7f6      	b.n	801610a <__s2b+0x66>
 801611c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016120:	4601      	mov	r1, r0
 8016122:	3b30      	subs	r3, #48	@ 0x30
 8016124:	220a      	movs	r2, #10
 8016126:	4630      	mov	r0, r6
 8016128:	f7ff ff76 	bl	8016018 <__multadd>
 801612c:	e7ee      	b.n	801610c <__s2b+0x68>
 801612e:	bf00      	nop
 8016130:	08018233 	.word	0x08018233
 8016134:	080182b5 	.word	0x080182b5

08016138 <__hi0bits>:
 8016138:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801613c:	4603      	mov	r3, r0
 801613e:	bf36      	itet	cc
 8016140:	0403      	lslcc	r3, r0, #16
 8016142:	2000      	movcs	r0, #0
 8016144:	2010      	movcc	r0, #16
 8016146:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801614a:	bf3c      	itt	cc
 801614c:	021b      	lslcc	r3, r3, #8
 801614e:	3008      	addcc	r0, #8
 8016150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016154:	bf3c      	itt	cc
 8016156:	011b      	lslcc	r3, r3, #4
 8016158:	3004      	addcc	r0, #4
 801615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801615e:	bf3c      	itt	cc
 8016160:	009b      	lslcc	r3, r3, #2
 8016162:	3002      	addcc	r0, #2
 8016164:	2b00      	cmp	r3, #0
 8016166:	db05      	blt.n	8016174 <__hi0bits+0x3c>
 8016168:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801616c:	f100 0001 	add.w	r0, r0, #1
 8016170:	bf08      	it	eq
 8016172:	2020      	moveq	r0, #32
 8016174:	4770      	bx	lr

08016176 <__lo0bits>:
 8016176:	6803      	ldr	r3, [r0, #0]
 8016178:	4602      	mov	r2, r0
 801617a:	f013 0007 	ands.w	r0, r3, #7
 801617e:	d00b      	beq.n	8016198 <__lo0bits+0x22>
 8016180:	07d9      	lsls	r1, r3, #31
 8016182:	d421      	bmi.n	80161c8 <__lo0bits+0x52>
 8016184:	0798      	lsls	r0, r3, #30
 8016186:	bf49      	itett	mi
 8016188:	085b      	lsrmi	r3, r3, #1
 801618a:	089b      	lsrpl	r3, r3, #2
 801618c:	2001      	movmi	r0, #1
 801618e:	6013      	strmi	r3, [r2, #0]
 8016190:	bf5c      	itt	pl
 8016192:	6013      	strpl	r3, [r2, #0]
 8016194:	2002      	movpl	r0, #2
 8016196:	4770      	bx	lr
 8016198:	b299      	uxth	r1, r3
 801619a:	b909      	cbnz	r1, 80161a0 <__lo0bits+0x2a>
 801619c:	0c1b      	lsrs	r3, r3, #16
 801619e:	2010      	movs	r0, #16
 80161a0:	b2d9      	uxtb	r1, r3
 80161a2:	b909      	cbnz	r1, 80161a8 <__lo0bits+0x32>
 80161a4:	3008      	adds	r0, #8
 80161a6:	0a1b      	lsrs	r3, r3, #8
 80161a8:	0719      	lsls	r1, r3, #28
 80161aa:	bf04      	itt	eq
 80161ac:	091b      	lsreq	r3, r3, #4
 80161ae:	3004      	addeq	r0, #4
 80161b0:	0799      	lsls	r1, r3, #30
 80161b2:	bf04      	itt	eq
 80161b4:	089b      	lsreq	r3, r3, #2
 80161b6:	3002      	addeq	r0, #2
 80161b8:	07d9      	lsls	r1, r3, #31
 80161ba:	d403      	bmi.n	80161c4 <__lo0bits+0x4e>
 80161bc:	085b      	lsrs	r3, r3, #1
 80161be:	f100 0001 	add.w	r0, r0, #1
 80161c2:	d003      	beq.n	80161cc <__lo0bits+0x56>
 80161c4:	6013      	str	r3, [r2, #0]
 80161c6:	4770      	bx	lr
 80161c8:	2000      	movs	r0, #0
 80161ca:	4770      	bx	lr
 80161cc:	2020      	movs	r0, #32
 80161ce:	4770      	bx	lr

080161d0 <__i2b>:
 80161d0:	b510      	push	{r4, lr}
 80161d2:	460c      	mov	r4, r1
 80161d4:	2101      	movs	r1, #1
 80161d6:	f7ff febd 	bl	8015f54 <_Balloc>
 80161da:	4602      	mov	r2, r0
 80161dc:	b928      	cbnz	r0, 80161ea <__i2b+0x1a>
 80161de:	4b05      	ldr	r3, [pc, #20]	@ (80161f4 <__i2b+0x24>)
 80161e0:	4805      	ldr	r0, [pc, #20]	@ (80161f8 <__i2b+0x28>)
 80161e2:	f240 1145 	movw	r1, #325	@ 0x145
 80161e6:	f000 fd8b 	bl	8016d00 <__assert_func>
 80161ea:	2301      	movs	r3, #1
 80161ec:	6144      	str	r4, [r0, #20]
 80161ee:	6103      	str	r3, [r0, #16]
 80161f0:	bd10      	pop	{r4, pc}
 80161f2:	bf00      	nop
 80161f4:	08018233 	.word	0x08018233
 80161f8:	080182b5 	.word	0x080182b5

080161fc <__multiply>:
 80161fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016200:	4617      	mov	r7, r2
 8016202:	690a      	ldr	r2, [r1, #16]
 8016204:	693b      	ldr	r3, [r7, #16]
 8016206:	429a      	cmp	r2, r3
 8016208:	bfa8      	it	ge
 801620a:	463b      	movge	r3, r7
 801620c:	4689      	mov	r9, r1
 801620e:	bfa4      	itt	ge
 8016210:	460f      	movge	r7, r1
 8016212:	4699      	movge	r9, r3
 8016214:	693d      	ldr	r5, [r7, #16]
 8016216:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	6879      	ldr	r1, [r7, #4]
 801621e:	eb05 060a 	add.w	r6, r5, sl
 8016222:	42b3      	cmp	r3, r6
 8016224:	b085      	sub	sp, #20
 8016226:	bfb8      	it	lt
 8016228:	3101      	addlt	r1, #1
 801622a:	f7ff fe93 	bl	8015f54 <_Balloc>
 801622e:	b930      	cbnz	r0, 801623e <__multiply+0x42>
 8016230:	4602      	mov	r2, r0
 8016232:	4b41      	ldr	r3, [pc, #260]	@ (8016338 <__multiply+0x13c>)
 8016234:	4841      	ldr	r0, [pc, #260]	@ (801633c <__multiply+0x140>)
 8016236:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801623a:	f000 fd61 	bl	8016d00 <__assert_func>
 801623e:	f100 0414 	add.w	r4, r0, #20
 8016242:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016246:	4623      	mov	r3, r4
 8016248:	2200      	movs	r2, #0
 801624a:	4573      	cmp	r3, lr
 801624c:	d320      	bcc.n	8016290 <__multiply+0x94>
 801624e:	f107 0814 	add.w	r8, r7, #20
 8016252:	f109 0114 	add.w	r1, r9, #20
 8016256:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801625a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801625e:	9302      	str	r3, [sp, #8]
 8016260:	1beb      	subs	r3, r5, r7
 8016262:	3b15      	subs	r3, #21
 8016264:	f023 0303 	bic.w	r3, r3, #3
 8016268:	3304      	adds	r3, #4
 801626a:	3715      	adds	r7, #21
 801626c:	42bd      	cmp	r5, r7
 801626e:	bf38      	it	cc
 8016270:	2304      	movcc	r3, #4
 8016272:	9301      	str	r3, [sp, #4]
 8016274:	9b02      	ldr	r3, [sp, #8]
 8016276:	9103      	str	r1, [sp, #12]
 8016278:	428b      	cmp	r3, r1
 801627a:	d80c      	bhi.n	8016296 <__multiply+0x9a>
 801627c:	2e00      	cmp	r6, #0
 801627e:	dd03      	ble.n	8016288 <__multiply+0x8c>
 8016280:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016284:	2b00      	cmp	r3, #0
 8016286:	d055      	beq.n	8016334 <__multiply+0x138>
 8016288:	6106      	str	r6, [r0, #16]
 801628a:	b005      	add	sp, #20
 801628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016290:	f843 2b04 	str.w	r2, [r3], #4
 8016294:	e7d9      	b.n	801624a <__multiply+0x4e>
 8016296:	f8b1 a000 	ldrh.w	sl, [r1]
 801629a:	f1ba 0f00 	cmp.w	sl, #0
 801629e:	d01f      	beq.n	80162e0 <__multiply+0xe4>
 80162a0:	46c4      	mov	ip, r8
 80162a2:	46a1      	mov	r9, r4
 80162a4:	2700      	movs	r7, #0
 80162a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80162aa:	f8d9 3000 	ldr.w	r3, [r9]
 80162ae:	fa1f fb82 	uxth.w	fp, r2
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80162b8:	443b      	add	r3, r7
 80162ba:	f8d9 7000 	ldr.w	r7, [r9]
 80162be:	0c12      	lsrs	r2, r2, #16
 80162c0:	0c3f      	lsrs	r7, r7, #16
 80162c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80162c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80162d0:	4565      	cmp	r5, ip
 80162d2:	f849 3b04 	str.w	r3, [r9], #4
 80162d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80162da:	d8e4      	bhi.n	80162a6 <__multiply+0xaa>
 80162dc:	9b01      	ldr	r3, [sp, #4]
 80162de:	50e7      	str	r7, [r4, r3]
 80162e0:	9b03      	ldr	r3, [sp, #12]
 80162e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80162e6:	3104      	adds	r1, #4
 80162e8:	f1b9 0f00 	cmp.w	r9, #0
 80162ec:	d020      	beq.n	8016330 <__multiply+0x134>
 80162ee:	6823      	ldr	r3, [r4, #0]
 80162f0:	4647      	mov	r7, r8
 80162f2:	46a4      	mov	ip, r4
 80162f4:	f04f 0a00 	mov.w	sl, #0
 80162f8:	f8b7 b000 	ldrh.w	fp, [r7]
 80162fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016300:	fb09 220b 	mla	r2, r9, fp, r2
 8016304:	4452      	add	r2, sl
 8016306:	b29b      	uxth	r3, r3
 8016308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801630c:	f84c 3b04 	str.w	r3, [ip], #4
 8016310:	f857 3b04 	ldr.w	r3, [r7], #4
 8016314:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016318:	f8bc 3000 	ldrh.w	r3, [ip]
 801631c:	fb09 330a 	mla	r3, r9, sl, r3
 8016320:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016324:	42bd      	cmp	r5, r7
 8016326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801632a:	d8e5      	bhi.n	80162f8 <__multiply+0xfc>
 801632c:	9a01      	ldr	r2, [sp, #4]
 801632e:	50a3      	str	r3, [r4, r2]
 8016330:	3404      	adds	r4, #4
 8016332:	e79f      	b.n	8016274 <__multiply+0x78>
 8016334:	3e01      	subs	r6, #1
 8016336:	e7a1      	b.n	801627c <__multiply+0x80>
 8016338:	08018233 	.word	0x08018233
 801633c:	080182b5 	.word	0x080182b5

08016340 <__pow5mult>:
 8016340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016344:	4615      	mov	r5, r2
 8016346:	f012 0203 	ands.w	r2, r2, #3
 801634a:	4607      	mov	r7, r0
 801634c:	460e      	mov	r6, r1
 801634e:	d007      	beq.n	8016360 <__pow5mult+0x20>
 8016350:	4c25      	ldr	r4, [pc, #148]	@ (80163e8 <__pow5mult+0xa8>)
 8016352:	3a01      	subs	r2, #1
 8016354:	2300      	movs	r3, #0
 8016356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801635a:	f7ff fe5d 	bl	8016018 <__multadd>
 801635e:	4606      	mov	r6, r0
 8016360:	10ad      	asrs	r5, r5, #2
 8016362:	d03d      	beq.n	80163e0 <__pow5mult+0xa0>
 8016364:	69fc      	ldr	r4, [r7, #28]
 8016366:	b97c      	cbnz	r4, 8016388 <__pow5mult+0x48>
 8016368:	2010      	movs	r0, #16
 801636a:	f7fc fc0d 	bl	8012b88 <malloc>
 801636e:	4602      	mov	r2, r0
 8016370:	61f8      	str	r0, [r7, #28]
 8016372:	b928      	cbnz	r0, 8016380 <__pow5mult+0x40>
 8016374:	4b1d      	ldr	r3, [pc, #116]	@ (80163ec <__pow5mult+0xac>)
 8016376:	481e      	ldr	r0, [pc, #120]	@ (80163f0 <__pow5mult+0xb0>)
 8016378:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801637c:	f000 fcc0 	bl	8016d00 <__assert_func>
 8016380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016384:	6004      	str	r4, [r0, #0]
 8016386:	60c4      	str	r4, [r0, #12]
 8016388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801638c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016390:	b94c      	cbnz	r4, 80163a6 <__pow5mult+0x66>
 8016392:	f240 2171 	movw	r1, #625	@ 0x271
 8016396:	4638      	mov	r0, r7
 8016398:	f7ff ff1a 	bl	80161d0 <__i2b>
 801639c:	2300      	movs	r3, #0
 801639e:	f8c8 0008 	str.w	r0, [r8, #8]
 80163a2:	4604      	mov	r4, r0
 80163a4:	6003      	str	r3, [r0, #0]
 80163a6:	f04f 0900 	mov.w	r9, #0
 80163aa:	07eb      	lsls	r3, r5, #31
 80163ac:	d50a      	bpl.n	80163c4 <__pow5mult+0x84>
 80163ae:	4631      	mov	r1, r6
 80163b0:	4622      	mov	r2, r4
 80163b2:	4638      	mov	r0, r7
 80163b4:	f7ff ff22 	bl	80161fc <__multiply>
 80163b8:	4631      	mov	r1, r6
 80163ba:	4680      	mov	r8, r0
 80163bc:	4638      	mov	r0, r7
 80163be:	f7ff fe09 	bl	8015fd4 <_Bfree>
 80163c2:	4646      	mov	r6, r8
 80163c4:	106d      	asrs	r5, r5, #1
 80163c6:	d00b      	beq.n	80163e0 <__pow5mult+0xa0>
 80163c8:	6820      	ldr	r0, [r4, #0]
 80163ca:	b938      	cbnz	r0, 80163dc <__pow5mult+0x9c>
 80163cc:	4622      	mov	r2, r4
 80163ce:	4621      	mov	r1, r4
 80163d0:	4638      	mov	r0, r7
 80163d2:	f7ff ff13 	bl	80161fc <__multiply>
 80163d6:	6020      	str	r0, [r4, #0]
 80163d8:	f8c0 9000 	str.w	r9, [r0]
 80163dc:	4604      	mov	r4, r0
 80163de:	e7e4      	b.n	80163aa <__pow5mult+0x6a>
 80163e0:	4630      	mov	r0, r6
 80163e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163e6:	bf00      	nop
 80163e8:	080184a4 	.word	0x080184a4
 80163ec:	080181c4 	.word	0x080181c4
 80163f0:	080182b5 	.word	0x080182b5

080163f4 <__lshift>:
 80163f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f8:	460c      	mov	r4, r1
 80163fa:	6849      	ldr	r1, [r1, #4]
 80163fc:	6923      	ldr	r3, [r4, #16]
 80163fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016402:	68a3      	ldr	r3, [r4, #8]
 8016404:	4607      	mov	r7, r0
 8016406:	4691      	mov	r9, r2
 8016408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801640c:	f108 0601 	add.w	r6, r8, #1
 8016410:	42b3      	cmp	r3, r6
 8016412:	db0b      	blt.n	801642c <__lshift+0x38>
 8016414:	4638      	mov	r0, r7
 8016416:	f7ff fd9d 	bl	8015f54 <_Balloc>
 801641a:	4605      	mov	r5, r0
 801641c:	b948      	cbnz	r0, 8016432 <__lshift+0x3e>
 801641e:	4602      	mov	r2, r0
 8016420:	4b28      	ldr	r3, [pc, #160]	@ (80164c4 <__lshift+0xd0>)
 8016422:	4829      	ldr	r0, [pc, #164]	@ (80164c8 <__lshift+0xd4>)
 8016424:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016428:	f000 fc6a 	bl	8016d00 <__assert_func>
 801642c:	3101      	adds	r1, #1
 801642e:	005b      	lsls	r3, r3, #1
 8016430:	e7ee      	b.n	8016410 <__lshift+0x1c>
 8016432:	2300      	movs	r3, #0
 8016434:	f100 0114 	add.w	r1, r0, #20
 8016438:	f100 0210 	add.w	r2, r0, #16
 801643c:	4618      	mov	r0, r3
 801643e:	4553      	cmp	r3, sl
 8016440:	db33      	blt.n	80164aa <__lshift+0xb6>
 8016442:	6920      	ldr	r0, [r4, #16]
 8016444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016448:	f104 0314 	add.w	r3, r4, #20
 801644c:	f019 091f 	ands.w	r9, r9, #31
 8016450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016458:	d02b      	beq.n	80164b2 <__lshift+0xbe>
 801645a:	f1c9 0e20 	rsb	lr, r9, #32
 801645e:	468a      	mov	sl, r1
 8016460:	2200      	movs	r2, #0
 8016462:	6818      	ldr	r0, [r3, #0]
 8016464:	fa00 f009 	lsl.w	r0, r0, r9
 8016468:	4310      	orrs	r0, r2
 801646a:	f84a 0b04 	str.w	r0, [sl], #4
 801646e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016472:	459c      	cmp	ip, r3
 8016474:	fa22 f20e 	lsr.w	r2, r2, lr
 8016478:	d8f3      	bhi.n	8016462 <__lshift+0x6e>
 801647a:	ebac 0304 	sub.w	r3, ip, r4
 801647e:	3b15      	subs	r3, #21
 8016480:	f023 0303 	bic.w	r3, r3, #3
 8016484:	3304      	adds	r3, #4
 8016486:	f104 0015 	add.w	r0, r4, #21
 801648a:	4560      	cmp	r0, ip
 801648c:	bf88      	it	hi
 801648e:	2304      	movhi	r3, #4
 8016490:	50ca      	str	r2, [r1, r3]
 8016492:	b10a      	cbz	r2, 8016498 <__lshift+0xa4>
 8016494:	f108 0602 	add.w	r6, r8, #2
 8016498:	3e01      	subs	r6, #1
 801649a:	4638      	mov	r0, r7
 801649c:	612e      	str	r6, [r5, #16]
 801649e:	4621      	mov	r1, r4
 80164a0:	f7ff fd98 	bl	8015fd4 <_Bfree>
 80164a4:	4628      	mov	r0, r5
 80164a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80164ae:	3301      	adds	r3, #1
 80164b0:	e7c5      	b.n	801643e <__lshift+0x4a>
 80164b2:	3904      	subs	r1, #4
 80164b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80164b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80164bc:	459c      	cmp	ip, r3
 80164be:	d8f9      	bhi.n	80164b4 <__lshift+0xc0>
 80164c0:	e7ea      	b.n	8016498 <__lshift+0xa4>
 80164c2:	bf00      	nop
 80164c4:	08018233 	.word	0x08018233
 80164c8:	080182b5 	.word	0x080182b5

080164cc <__mcmp>:
 80164cc:	690a      	ldr	r2, [r1, #16]
 80164ce:	4603      	mov	r3, r0
 80164d0:	6900      	ldr	r0, [r0, #16]
 80164d2:	1a80      	subs	r0, r0, r2
 80164d4:	b530      	push	{r4, r5, lr}
 80164d6:	d10e      	bne.n	80164f6 <__mcmp+0x2a>
 80164d8:	3314      	adds	r3, #20
 80164da:	3114      	adds	r1, #20
 80164dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80164e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80164e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80164e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80164ec:	4295      	cmp	r5, r2
 80164ee:	d003      	beq.n	80164f8 <__mcmp+0x2c>
 80164f0:	d205      	bcs.n	80164fe <__mcmp+0x32>
 80164f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80164f6:	bd30      	pop	{r4, r5, pc}
 80164f8:	42a3      	cmp	r3, r4
 80164fa:	d3f3      	bcc.n	80164e4 <__mcmp+0x18>
 80164fc:	e7fb      	b.n	80164f6 <__mcmp+0x2a>
 80164fe:	2001      	movs	r0, #1
 8016500:	e7f9      	b.n	80164f6 <__mcmp+0x2a>
	...

08016504 <__mdiff>:
 8016504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016508:	4689      	mov	r9, r1
 801650a:	4606      	mov	r6, r0
 801650c:	4611      	mov	r1, r2
 801650e:	4648      	mov	r0, r9
 8016510:	4614      	mov	r4, r2
 8016512:	f7ff ffdb 	bl	80164cc <__mcmp>
 8016516:	1e05      	subs	r5, r0, #0
 8016518:	d112      	bne.n	8016540 <__mdiff+0x3c>
 801651a:	4629      	mov	r1, r5
 801651c:	4630      	mov	r0, r6
 801651e:	f7ff fd19 	bl	8015f54 <_Balloc>
 8016522:	4602      	mov	r2, r0
 8016524:	b928      	cbnz	r0, 8016532 <__mdiff+0x2e>
 8016526:	4b3f      	ldr	r3, [pc, #252]	@ (8016624 <__mdiff+0x120>)
 8016528:	f240 2137 	movw	r1, #567	@ 0x237
 801652c:	483e      	ldr	r0, [pc, #248]	@ (8016628 <__mdiff+0x124>)
 801652e:	f000 fbe7 	bl	8016d00 <__assert_func>
 8016532:	2301      	movs	r3, #1
 8016534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016538:	4610      	mov	r0, r2
 801653a:	b003      	add	sp, #12
 801653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016540:	bfbc      	itt	lt
 8016542:	464b      	movlt	r3, r9
 8016544:	46a1      	movlt	r9, r4
 8016546:	4630      	mov	r0, r6
 8016548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801654c:	bfba      	itte	lt
 801654e:	461c      	movlt	r4, r3
 8016550:	2501      	movlt	r5, #1
 8016552:	2500      	movge	r5, #0
 8016554:	f7ff fcfe 	bl	8015f54 <_Balloc>
 8016558:	4602      	mov	r2, r0
 801655a:	b918      	cbnz	r0, 8016564 <__mdiff+0x60>
 801655c:	4b31      	ldr	r3, [pc, #196]	@ (8016624 <__mdiff+0x120>)
 801655e:	f240 2145 	movw	r1, #581	@ 0x245
 8016562:	e7e3      	b.n	801652c <__mdiff+0x28>
 8016564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016568:	6926      	ldr	r6, [r4, #16]
 801656a:	60c5      	str	r5, [r0, #12]
 801656c:	f109 0310 	add.w	r3, r9, #16
 8016570:	f109 0514 	add.w	r5, r9, #20
 8016574:	f104 0e14 	add.w	lr, r4, #20
 8016578:	f100 0b14 	add.w	fp, r0, #20
 801657c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016580:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016584:	9301      	str	r3, [sp, #4]
 8016586:	46d9      	mov	r9, fp
 8016588:	f04f 0c00 	mov.w	ip, #0
 801658c:	9b01      	ldr	r3, [sp, #4]
 801658e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016592:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016596:	9301      	str	r3, [sp, #4]
 8016598:	fa1f f38a 	uxth.w	r3, sl
 801659c:	4619      	mov	r1, r3
 801659e:	b283      	uxth	r3, r0
 80165a0:	1acb      	subs	r3, r1, r3
 80165a2:	0c00      	lsrs	r0, r0, #16
 80165a4:	4463      	add	r3, ip
 80165a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80165aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80165b4:	4576      	cmp	r6, lr
 80165b6:	f849 3b04 	str.w	r3, [r9], #4
 80165ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80165be:	d8e5      	bhi.n	801658c <__mdiff+0x88>
 80165c0:	1b33      	subs	r3, r6, r4
 80165c2:	3b15      	subs	r3, #21
 80165c4:	f023 0303 	bic.w	r3, r3, #3
 80165c8:	3415      	adds	r4, #21
 80165ca:	3304      	adds	r3, #4
 80165cc:	42a6      	cmp	r6, r4
 80165ce:	bf38      	it	cc
 80165d0:	2304      	movcc	r3, #4
 80165d2:	441d      	add	r5, r3
 80165d4:	445b      	add	r3, fp
 80165d6:	461e      	mov	r6, r3
 80165d8:	462c      	mov	r4, r5
 80165da:	4544      	cmp	r4, r8
 80165dc:	d30e      	bcc.n	80165fc <__mdiff+0xf8>
 80165de:	f108 0103 	add.w	r1, r8, #3
 80165e2:	1b49      	subs	r1, r1, r5
 80165e4:	f021 0103 	bic.w	r1, r1, #3
 80165e8:	3d03      	subs	r5, #3
 80165ea:	45a8      	cmp	r8, r5
 80165ec:	bf38      	it	cc
 80165ee:	2100      	movcc	r1, #0
 80165f0:	440b      	add	r3, r1
 80165f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80165f6:	b191      	cbz	r1, 801661e <__mdiff+0x11a>
 80165f8:	6117      	str	r7, [r2, #16]
 80165fa:	e79d      	b.n	8016538 <__mdiff+0x34>
 80165fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8016600:	46e6      	mov	lr, ip
 8016602:	0c08      	lsrs	r0, r1, #16
 8016604:	fa1c fc81 	uxtah	ip, ip, r1
 8016608:	4471      	add	r1, lr
 801660a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801660e:	b289      	uxth	r1, r1
 8016610:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016614:	f846 1b04 	str.w	r1, [r6], #4
 8016618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801661c:	e7dd      	b.n	80165da <__mdiff+0xd6>
 801661e:	3f01      	subs	r7, #1
 8016620:	e7e7      	b.n	80165f2 <__mdiff+0xee>
 8016622:	bf00      	nop
 8016624:	08018233 	.word	0x08018233
 8016628:	080182b5 	.word	0x080182b5

0801662c <__ulp>:
 801662c:	b082      	sub	sp, #8
 801662e:	ed8d 0b00 	vstr	d0, [sp]
 8016632:	9a01      	ldr	r2, [sp, #4]
 8016634:	4b0f      	ldr	r3, [pc, #60]	@ (8016674 <__ulp+0x48>)
 8016636:	4013      	ands	r3, r2
 8016638:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801663c:	2b00      	cmp	r3, #0
 801663e:	dc08      	bgt.n	8016652 <__ulp+0x26>
 8016640:	425b      	negs	r3, r3
 8016642:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016646:	ea4f 5223 	mov.w	r2, r3, asr #20
 801664a:	da04      	bge.n	8016656 <__ulp+0x2a>
 801664c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016650:	4113      	asrs	r3, r2
 8016652:	2200      	movs	r2, #0
 8016654:	e008      	b.n	8016668 <__ulp+0x3c>
 8016656:	f1a2 0314 	sub.w	r3, r2, #20
 801665a:	2b1e      	cmp	r3, #30
 801665c:	bfda      	itte	le
 801665e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016662:	40da      	lsrle	r2, r3
 8016664:	2201      	movgt	r2, #1
 8016666:	2300      	movs	r3, #0
 8016668:	4619      	mov	r1, r3
 801666a:	4610      	mov	r0, r2
 801666c:	ec41 0b10 	vmov	d0, r0, r1
 8016670:	b002      	add	sp, #8
 8016672:	4770      	bx	lr
 8016674:	7ff00000 	.word	0x7ff00000

08016678 <__b2d>:
 8016678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801667c:	6906      	ldr	r6, [r0, #16]
 801667e:	f100 0814 	add.w	r8, r0, #20
 8016682:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016686:	1f37      	subs	r7, r6, #4
 8016688:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801668c:	4610      	mov	r0, r2
 801668e:	f7ff fd53 	bl	8016138 <__hi0bits>
 8016692:	f1c0 0320 	rsb	r3, r0, #32
 8016696:	280a      	cmp	r0, #10
 8016698:	600b      	str	r3, [r1, #0]
 801669a:	491b      	ldr	r1, [pc, #108]	@ (8016708 <__b2d+0x90>)
 801669c:	dc15      	bgt.n	80166ca <__b2d+0x52>
 801669e:	f1c0 0c0b 	rsb	ip, r0, #11
 80166a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80166a6:	45b8      	cmp	r8, r7
 80166a8:	ea43 0501 	orr.w	r5, r3, r1
 80166ac:	bf34      	ite	cc
 80166ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80166b2:	2300      	movcs	r3, #0
 80166b4:	3015      	adds	r0, #21
 80166b6:	fa02 f000 	lsl.w	r0, r2, r0
 80166ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80166be:	4303      	orrs	r3, r0
 80166c0:	461c      	mov	r4, r3
 80166c2:	ec45 4b10 	vmov	d0, r4, r5
 80166c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166ca:	45b8      	cmp	r8, r7
 80166cc:	bf3a      	itte	cc
 80166ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80166d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80166d6:	2300      	movcs	r3, #0
 80166d8:	380b      	subs	r0, #11
 80166da:	d012      	beq.n	8016702 <__b2d+0x8a>
 80166dc:	f1c0 0120 	rsb	r1, r0, #32
 80166e0:	fa23 f401 	lsr.w	r4, r3, r1
 80166e4:	4082      	lsls	r2, r0
 80166e6:	4322      	orrs	r2, r4
 80166e8:	4547      	cmp	r7, r8
 80166ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80166ee:	bf8c      	ite	hi
 80166f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80166f4:	2200      	movls	r2, #0
 80166f6:	4083      	lsls	r3, r0
 80166f8:	40ca      	lsrs	r2, r1
 80166fa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80166fe:	4313      	orrs	r3, r2
 8016700:	e7de      	b.n	80166c0 <__b2d+0x48>
 8016702:	ea42 0501 	orr.w	r5, r2, r1
 8016706:	e7db      	b.n	80166c0 <__b2d+0x48>
 8016708:	3ff00000 	.word	0x3ff00000

0801670c <__d2b>:
 801670c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016710:	460f      	mov	r7, r1
 8016712:	2101      	movs	r1, #1
 8016714:	ec59 8b10 	vmov	r8, r9, d0
 8016718:	4616      	mov	r6, r2
 801671a:	f7ff fc1b 	bl	8015f54 <_Balloc>
 801671e:	4604      	mov	r4, r0
 8016720:	b930      	cbnz	r0, 8016730 <__d2b+0x24>
 8016722:	4602      	mov	r2, r0
 8016724:	4b23      	ldr	r3, [pc, #140]	@ (80167b4 <__d2b+0xa8>)
 8016726:	4824      	ldr	r0, [pc, #144]	@ (80167b8 <__d2b+0xac>)
 8016728:	f240 310f 	movw	r1, #783	@ 0x30f
 801672c:	f000 fae8 	bl	8016d00 <__assert_func>
 8016730:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016734:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016738:	b10d      	cbz	r5, 801673e <__d2b+0x32>
 801673a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801673e:	9301      	str	r3, [sp, #4]
 8016740:	f1b8 0300 	subs.w	r3, r8, #0
 8016744:	d023      	beq.n	801678e <__d2b+0x82>
 8016746:	4668      	mov	r0, sp
 8016748:	9300      	str	r3, [sp, #0]
 801674a:	f7ff fd14 	bl	8016176 <__lo0bits>
 801674e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016752:	b1d0      	cbz	r0, 801678a <__d2b+0x7e>
 8016754:	f1c0 0320 	rsb	r3, r0, #32
 8016758:	fa02 f303 	lsl.w	r3, r2, r3
 801675c:	430b      	orrs	r3, r1
 801675e:	40c2      	lsrs	r2, r0
 8016760:	6163      	str	r3, [r4, #20]
 8016762:	9201      	str	r2, [sp, #4]
 8016764:	9b01      	ldr	r3, [sp, #4]
 8016766:	61a3      	str	r3, [r4, #24]
 8016768:	2b00      	cmp	r3, #0
 801676a:	bf0c      	ite	eq
 801676c:	2201      	moveq	r2, #1
 801676e:	2202      	movne	r2, #2
 8016770:	6122      	str	r2, [r4, #16]
 8016772:	b1a5      	cbz	r5, 801679e <__d2b+0x92>
 8016774:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016778:	4405      	add	r5, r0
 801677a:	603d      	str	r5, [r7, #0]
 801677c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016780:	6030      	str	r0, [r6, #0]
 8016782:	4620      	mov	r0, r4
 8016784:	b003      	add	sp, #12
 8016786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801678a:	6161      	str	r1, [r4, #20]
 801678c:	e7ea      	b.n	8016764 <__d2b+0x58>
 801678e:	a801      	add	r0, sp, #4
 8016790:	f7ff fcf1 	bl	8016176 <__lo0bits>
 8016794:	9b01      	ldr	r3, [sp, #4]
 8016796:	6163      	str	r3, [r4, #20]
 8016798:	3020      	adds	r0, #32
 801679a:	2201      	movs	r2, #1
 801679c:	e7e8      	b.n	8016770 <__d2b+0x64>
 801679e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80167a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80167a6:	6038      	str	r0, [r7, #0]
 80167a8:	6918      	ldr	r0, [r3, #16]
 80167aa:	f7ff fcc5 	bl	8016138 <__hi0bits>
 80167ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80167b2:	e7e5      	b.n	8016780 <__d2b+0x74>
 80167b4:	08018233 	.word	0x08018233
 80167b8:	080182b5 	.word	0x080182b5

080167bc <__ratio>:
 80167bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c0:	b085      	sub	sp, #20
 80167c2:	e9cd 1000 	strd	r1, r0, [sp]
 80167c6:	a902      	add	r1, sp, #8
 80167c8:	f7ff ff56 	bl	8016678 <__b2d>
 80167cc:	9800      	ldr	r0, [sp, #0]
 80167ce:	a903      	add	r1, sp, #12
 80167d0:	ec55 4b10 	vmov	r4, r5, d0
 80167d4:	f7ff ff50 	bl	8016678 <__b2d>
 80167d8:	9b01      	ldr	r3, [sp, #4]
 80167da:	6919      	ldr	r1, [r3, #16]
 80167dc:	9b00      	ldr	r3, [sp, #0]
 80167de:	691b      	ldr	r3, [r3, #16]
 80167e0:	1ac9      	subs	r1, r1, r3
 80167e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80167e6:	1a9b      	subs	r3, r3, r2
 80167e8:	ec5b ab10 	vmov	sl, fp, d0
 80167ec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	bfce      	itee	gt
 80167f4:	462a      	movgt	r2, r5
 80167f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80167fa:	465a      	movle	r2, fp
 80167fc:	462f      	mov	r7, r5
 80167fe:	46d9      	mov	r9, fp
 8016800:	bfcc      	ite	gt
 8016802:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016806:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801680a:	464b      	mov	r3, r9
 801680c:	4652      	mov	r2, sl
 801680e:	4620      	mov	r0, r4
 8016810:	4639      	mov	r1, r7
 8016812:	f7ea f823 	bl	800085c <__aeabi_ddiv>
 8016816:	ec41 0b10 	vmov	d0, r0, r1
 801681a:	b005      	add	sp, #20
 801681c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016820 <__copybits>:
 8016820:	3901      	subs	r1, #1
 8016822:	b570      	push	{r4, r5, r6, lr}
 8016824:	1149      	asrs	r1, r1, #5
 8016826:	6914      	ldr	r4, [r2, #16]
 8016828:	3101      	adds	r1, #1
 801682a:	f102 0314 	add.w	r3, r2, #20
 801682e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016832:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016836:	1f05      	subs	r5, r0, #4
 8016838:	42a3      	cmp	r3, r4
 801683a:	d30c      	bcc.n	8016856 <__copybits+0x36>
 801683c:	1aa3      	subs	r3, r4, r2
 801683e:	3b11      	subs	r3, #17
 8016840:	f023 0303 	bic.w	r3, r3, #3
 8016844:	3211      	adds	r2, #17
 8016846:	42a2      	cmp	r2, r4
 8016848:	bf88      	it	hi
 801684a:	2300      	movhi	r3, #0
 801684c:	4418      	add	r0, r3
 801684e:	2300      	movs	r3, #0
 8016850:	4288      	cmp	r0, r1
 8016852:	d305      	bcc.n	8016860 <__copybits+0x40>
 8016854:	bd70      	pop	{r4, r5, r6, pc}
 8016856:	f853 6b04 	ldr.w	r6, [r3], #4
 801685a:	f845 6f04 	str.w	r6, [r5, #4]!
 801685e:	e7eb      	b.n	8016838 <__copybits+0x18>
 8016860:	f840 3b04 	str.w	r3, [r0], #4
 8016864:	e7f4      	b.n	8016850 <__copybits+0x30>

08016866 <__any_on>:
 8016866:	f100 0214 	add.w	r2, r0, #20
 801686a:	6900      	ldr	r0, [r0, #16]
 801686c:	114b      	asrs	r3, r1, #5
 801686e:	4298      	cmp	r0, r3
 8016870:	b510      	push	{r4, lr}
 8016872:	db11      	blt.n	8016898 <__any_on+0x32>
 8016874:	dd0a      	ble.n	801688c <__any_on+0x26>
 8016876:	f011 011f 	ands.w	r1, r1, #31
 801687a:	d007      	beq.n	801688c <__any_on+0x26>
 801687c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016880:	fa24 f001 	lsr.w	r0, r4, r1
 8016884:	fa00 f101 	lsl.w	r1, r0, r1
 8016888:	428c      	cmp	r4, r1
 801688a:	d10b      	bne.n	80168a4 <__any_on+0x3e>
 801688c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016890:	4293      	cmp	r3, r2
 8016892:	d803      	bhi.n	801689c <__any_on+0x36>
 8016894:	2000      	movs	r0, #0
 8016896:	bd10      	pop	{r4, pc}
 8016898:	4603      	mov	r3, r0
 801689a:	e7f7      	b.n	801688c <__any_on+0x26>
 801689c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80168a0:	2900      	cmp	r1, #0
 80168a2:	d0f5      	beq.n	8016890 <__any_on+0x2a>
 80168a4:	2001      	movs	r0, #1
 80168a6:	e7f6      	b.n	8016896 <__any_on+0x30>

080168a8 <__sread>:
 80168a8:	b510      	push	{r4, lr}
 80168aa:	460c      	mov	r4, r1
 80168ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168b0:	f000 f9e0 	bl	8016c74 <_read_r>
 80168b4:	2800      	cmp	r0, #0
 80168b6:	bfab      	itete	ge
 80168b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80168ba:	89a3      	ldrhlt	r3, [r4, #12]
 80168bc:	181b      	addge	r3, r3, r0
 80168be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80168c2:	bfac      	ite	ge
 80168c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80168c6:	81a3      	strhlt	r3, [r4, #12]
 80168c8:	bd10      	pop	{r4, pc}

080168ca <__swrite>:
 80168ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ce:	461f      	mov	r7, r3
 80168d0:	898b      	ldrh	r3, [r1, #12]
 80168d2:	05db      	lsls	r3, r3, #23
 80168d4:	4605      	mov	r5, r0
 80168d6:	460c      	mov	r4, r1
 80168d8:	4616      	mov	r6, r2
 80168da:	d505      	bpl.n	80168e8 <__swrite+0x1e>
 80168dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168e0:	2302      	movs	r3, #2
 80168e2:	2200      	movs	r2, #0
 80168e4:	f000 f9b4 	bl	8016c50 <_lseek_r>
 80168e8:	89a3      	ldrh	r3, [r4, #12]
 80168ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80168f2:	81a3      	strh	r3, [r4, #12]
 80168f4:	4632      	mov	r2, r6
 80168f6:	463b      	mov	r3, r7
 80168f8:	4628      	mov	r0, r5
 80168fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168fe:	f000 b9cb 	b.w	8016c98 <_write_r>

08016902 <__sseek>:
 8016902:	b510      	push	{r4, lr}
 8016904:	460c      	mov	r4, r1
 8016906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801690a:	f000 f9a1 	bl	8016c50 <_lseek_r>
 801690e:	1c43      	adds	r3, r0, #1
 8016910:	89a3      	ldrh	r3, [r4, #12]
 8016912:	bf15      	itete	ne
 8016914:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801691a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801691e:	81a3      	strheq	r3, [r4, #12]
 8016920:	bf18      	it	ne
 8016922:	81a3      	strhne	r3, [r4, #12]
 8016924:	bd10      	pop	{r4, pc}

08016926 <__sclose>:
 8016926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801692a:	f000 b9c7 	b.w	8016cbc <_close_r>

0801692e <_realloc_r>:
 801692e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016932:	4607      	mov	r7, r0
 8016934:	4614      	mov	r4, r2
 8016936:	460d      	mov	r5, r1
 8016938:	b921      	cbnz	r1, 8016944 <_realloc_r+0x16>
 801693a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801693e:	4611      	mov	r1, r2
 8016940:	f7fc b954 	b.w	8012bec <_malloc_r>
 8016944:	b92a      	cbnz	r2, 8016952 <_realloc_r+0x24>
 8016946:	f7fe fc2b 	bl	80151a0 <_free_r>
 801694a:	4625      	mov	r5, r4
 801694c:	4628      	mov	r0, r5
 801694e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016952:	f000 f9f3 	bl	8016d3c <_malloc_usable_size_r>
 8016956:	4284      	cmp	r4, r0
 8016958:	4606      	mov	r6, r0
 801695a:	d802      	bhi.n	8016962 <_realloc_r+0x34>
 801695c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016960:	d8f4      	bhi.n	801694c <_realloc_r+0x1e>
 8016962:	4621      	mov	r1, r4
 8016964:	4638      	mov	r0, r7
 8016966:	f7fc f941 	bl	8012bec <_malloc_r>
 801696a:	4680      	mov	r8, r0
 801696c:	b908      	cbnz	r0, 8016972 <_realloc_r+0x44>
 801696e:	4645      	mov	r5, r8
 8016970:	e7ec      	b.n	801694c <_realloc_r+0x1e>
 8016972:	42b4      	cmp	r4, r6
 8016974:	4622      	mov	r2, r4
 8016976:	4629      	mov	r1, r5
 8016978:	bf28      	it	cs
 801697a:	4632      	movcs	r2, r6
 801697c:	f7fd fd98 	bl	80144b0 <memcpy>
 8016980:	4629      	mov	r1, r5
 8016982:	4638      	mov	r0, r7
 8016984:	f7fe fc0c 	bl	80151a0 <_free_r>
 8016988:	e7f1      	b.n	801696e <_realloc_r+0x40>

0801698a <__swbuf_r>:
 801698a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801698c:	460e      	mov	r6, r1
 801698e:	4614      	mov	r4, r2
 8016990:	4605      	mov	r5, r0
 8016992:	b118      	cbz	r0, 801699c <__swbuf_r+0x12>
 8016994:	6a03      	ldr	r3, [r0, #32]
 8016996:	b90b      	cbnz	r3, 801699c <__swbuf_r+0x12>
 8016998:	f7fc fdfc 	bl	8013594 <__sinit>
 801699c:	69a3      	ldr	r3, [r4, #24]
 801699e:	60a3      	str	r3, [r4, #8]
 80169a0:	89a3      	ldrh	r3, [r4, #12]
 80169a2:	071a      	lsls	r2, r3, #28
 80169a4:	d501      	bpl.n	80169aa <__swbuf_r+0x20>
 80169a6:	6923      	ldr	r3, [r4, #16]
 80169a8:	b943      	cbnz	r3, 80169bc <__swbuf_r+0x32>
 80169aa:	4621      	mov	r1, r4
 80169ac:	4628      	mov	r0, r5
 80169ae:	f000 f82b 	bl	8016a08 <__swsetup_r>
 80169b2:	b118      	cbz	r0, 80169bc <__swbuf_r+0x32>
 80169b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80169b8:	4638      	mov	r0, r7
 80169ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169bc:	6823      	ldr	r3, [r4, #0]
 80169be:	6922      	ldr	r2, [r4, #16]
 80169c0:	1a98      	subs	r0, r3, r2
 80169c2:	6963      	ldr	r3, [r4, #20]
 80169c4:	b2f6      	uxtb	r6, r6
 80169c6:	4283      	cmp	r3, r0
 80169c8:	4637      	mov	r7, r6
 80169ca:	dc05      	bgt.n	80169d8 <__swbuf_r+0x4e>
 80169cc:	4621      	mov	r1, r4
 80169ce:	4628      	mov	r0, r5
 80169d0:	f7ff fa98 	bl	8015f04 <_fflush_r>
 80169d4:	2800      	cmp	r0, #0
 80169d6:	d1ed      	bne.n	80169b4 <__swbuf_r+0x2a>
 80169d8:	68a3      	ldr	r3, [r4, #8]
 80169da:	3b01      	subs	r3, #1
 80169dc:	60a3      	str	r3, [r4, #8]
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	1c5a      	adds	r2, r3, #1
 80169e2:	6022      	str	r2, [r4, #0]
 80169e4:	701e      	strb	r6, [r3, #0]
 80169e6:	6962      	ldr	r2, [r4, #20]
 80169e8:	1c43      	adds	r3, r0, #1
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d004      	beq.n	80169f8 <__swbuf_r+0x6e>
 80169ee:	89a3      	ldrh	r3, [r4, #12]
 80169f0:	07db      	lsls	r3, r3, #31
 80169f2:	d5e1      	bpl.n	80169b8 <__swbuf_r+0x2e>
 80169f4:	2e0a      	cmp	r6, #10
 80169f6:	d1df      	bne.n	80169b8 <__swbuf_r+0x2e>
 80169f8:	4621      	mov	r1, r4
 80169fa:	4628      	mov	r0, r5
 80169fc:	f7ff fa82 	bl	8015f04 <_fflush_r>
 8016a00:	2800      	cmp	r0, #0
 8016a02:	d0d9      	beq.n	80169b8 <__swbuf_r+0x2e>
 8016a04:	e7d6      	b.n	80169b4 <__swbuf_r+0x2a>
	...

08016a08 <__swsetup_r>:
 8016a08:	b538      	push	{r3, r4, r5, lr}
 8016a0a:	4b29      	ldr	r3, [pc, #164]	@ (8016ab0 <__swsetup_r+0xa8>)
 8016a0c:	4605      	mov	r5, r0
 8016a0e:	6818      	ldr	r0, [r3, #0]
 8016a10:	460c      	mov	r4, r1
 8016a12:	b118      	cbz	r0, 8016a1c <__swsetup_r+0x14>
 8016a14:	6a03      	ldr	r3, [r0, #32]
 8016a16:	b90b      	cbnz	r3, 8016a1c <__swsetup_r+0x14>
 8016a18:	f7fc fdbc 	bl	8013594 <__sinit>
 8016a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a20:	0719      	lsls	r1, r3, #28
 8016a22:	d422      	bmi.n	8016a6a <__swsetup_r+0x62>
 8016a24:	06da      	lsls	r2, r3, #27
 8016a26:	d407      	bmi.n	8016a38 <__swsetup_r+0x30>
 8016a28:	2209      	movs	r2, #9
 8016a2a:	602a      	str	r2, [r5, #0]
 8016a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a30:	81a3      	strh	r3, [r4, #12]
 8016a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a36:	e033      	b.n	8016aa0 <__swsetup_r+0x98>
 8016a38:	0758      	lsls	r0, r3, #29
 8016a3a:	d512      	bpl.n	8016a62 <__swsetup_r+0x5a>
 8016a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a3e:	b141      	cbz	r1, 8016a52 <__swsetup_r+0x4a>
 8016a40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a44:	4299      	cmp	r1, r3
 8016a46:	d002      	beq.n	8016a4e <__swsetup_r+0x46>
 8016a48:	4628      	mov	r0, r5
 8016a4a:	f7fe fba9 	bl	80151a0 <_free_r>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a52:	89a3      	ldrh	r3, [r4, #12]
 8016a54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016a58:	81a3      	strh	r3, [r4, #12]
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	6063      	str	r3, [r4, #4]
 8016a5e:	6923      	ldr	r3, [r4, #16]
 8016a60:	6023      	str	r3, [r4, #0]
 8016a62:	89a3      	ldrh	r3, [r4, #12]
 8016a64:	f043 0308 	orr.w	r3, r3, #8
 8016a68:	81a3      	strh	r3, [r4, #12]
 8016a6a:	6923      	ldr	r3, [r4, #16]
 8016a6c:	b94b      	cbnz	r3, 8016a82 <__swsetup_r+0x7a>
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a78:	d003      	beq.n	8016a82 <__swsetup_r+0x7a>
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	f000 f84c 	bl	8016b1a <__smakebuf_r>
 8016a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a86:	f013 0201 	ands.w	r2, r3, #1
 8016a8a:	d00a      	beq.n	8016aa2 <__swsetup_r+0x9a>
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	60a2      	str	r2, [r4, #8]
 8016a90:	6962      	ldr	r2, [r4, #20]
 8016a92:	4252      	negs	r2, r2
 8016a94:	61a2      	str	r2, [r4, #24]
 8016a96:	6922      	ldr	r2, [r4, #16]
 8016a98:	b942      	cbnz	r2, 8016aac <__swsetup_r+0xa4>
 8016a9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016a9e:	d1c5      	bne.n	8016a2c <__swsetup_r+0x24>
 8016aa0:	bd38      	pop	{r3, r4, r5, pc}
 8016aa2:	0799      	lsls	r1, r3, #30
 8016aa4:	bf58      	it	pl
 8016aa6:	6962      	ldrpl	r2, [r4, #20]
 8016aa8:	60a2      	str	r2, [r4, #8]
 8016aaa:	e7f4      	b.n	8016a96 <__swsetup_r+0x8e>
 8016aac:	2000      	movs	r0, #0
 8016aae:	e7f7      	b.n	8016aa0 <__swsetup_r+0x98>
 8016ab0:	200001d4 	.word	0x200001d4

08016ab4 <__ascii_wctomb>:
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	4608      	mov	r0, r1
 8016ab8:	b141      	cbz	r1, 8016acc <__ascii_wctomb+0x18>
 8016aba:	2aff      	cmp	r2, #255	@ 0xff
 8016abc:	d904      	bls.n	8016ac8 <__ascii_wctomb+0x14>
 8016abe:	228a      	movs	r2, #138	@ 0x8a
 8016ac0:	601a      	str	r2, [r3, #0]
 8016ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ac6:	4770      	bx	lr
 8016ac8:	700a      	strb	r2, [r1, #0]
 8016aca:	2001      	movs	r0, #1
 8016acc:	4770      	bx	lr

08016ace <__swhatbuf_r>:
 8016ace:	b570      	push	{r4, r5, r6, lr}
 8016ad0:	460c      	mov	r4, r1
 8016ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad6:	2900      	cmp	r1, #0
 8016ad8:	b096      	sub	sp, #88	@ 0x58
 8016ada:	4615      	mov	r5, r2
 8016adc:	461e      	mov	r6, r3
 8016ade:	da0d      	bge.n	8016afc <__swhatbuf_r+0x2e>
 8016ae0:	89a3      	ldrh	r3, [r4, #12]
 8016ae2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016ae6:	f04f 0100 	mov.w	r1, #0
 8016aea:	bf14      	ite	ne
 8016aec:	2340      	movne	r3, #64	@ 0x40
 8016aee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016af2:	2000      	movs	r0, #0
 8016af4:	6031      	str	r1, [r6, #0]
 8016af6:	602b      	str	r3, [r5, #0]
 8016af8:	b016      	add	sp, #88	@ 0x58
 8016afa:	bd70      	pop	{r4, r5, r6, pc}
 8016afc:	466a      	mov	r2, sp
 8016afe:	f000 f8ed 	bl	8016cdc <_fstat_r>
 8016b02:	2800      	cmp	r0, #0
 8016b04:	dbec      	blt.n	8016ae0 <__swhatbuf_r+0x12>
 8016b06:	9901      	ldr	r1, [sp, #4]
 8016b08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016b0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016b10:	4259      	negs	r1, r3
 8016b12:	4159      	adcs	r1, r3
 8016b14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016b18:	e7eb      	b.n	8016af2 <__swhatbuf_r+0x24>

08016b1a <__smakebuf_r>:
 8016b1a:	898b      	ldrh	r3, [r1, #12]
 8016b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b1e:	079d      	lsls	r5, r3, #30
 8016b20:	4606      	mov	r6, r0
 8016b22:	460c      	mov	r4, r1
 8016b24:	d507      	bpl.n	8016b36 <__smakebuf_r+0x1c>
 8016b26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016b2a:	6023      	str	r3, [r4, #0]
 8016b2c:	6123      	str	r3, [r4, #16]
 8016b2e:	2301      	movs	r3, #1
 8016b30:	6163      	str	r3, [r4, #20]
 8016b32:	b003      	add	sp, #12
 8016b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b36:	ab01      	add	r3, sp, #4
 8016b38:	466a      	mov	r2, sp
 8016b3a:	f7ff ffc8 	bl	8016ace <__swhatbuf_r>
 8016b3e:	9f00      	ldr	r7, [sp, #0]
 8016b40:	4605      	mov	r5, r0
 8016b42:	4639      	mov	r1, r7
 8016b44:	4630      	mov	r0, r6
 8016b46:	f7fc f851 	bl	8012bec <_malloc_r>
 8016b4a:	b948      	cbnz	r0, 8016b60 <__smakebuf_r+0x46>
 8016b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b50:	059a      	lsls	r2, r3, #22
 8016b52:	d4ee      	bmi.n	8016b32 <__smakebuf_r+0x18>
 8016b54:	f023 0303 	bic.w	r3, r3, #3
 8016b58:	f043 0302 	orr.w	r3, r3, #2
 8016b5c:	81a3      	strh	r3, [r4, #12]
 8016b5e:	e7e2      	b.n	8016b26 <__smakebuf_r+0xc>
 8016b60:	89a3      	ldrh	r3, [r4, #12]
 8016b62:	6020      	str	r0, [r4, #0]
 8016b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b68:	81a3      	strh	r3, [r4, #12]
 8016b6a:	9b01      	ldr	r3, [sp, #4]
 8016b6c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016b70:	b15b      	cbz	r3, 8016b8a <__smakebuf_r+0x70>
 8016b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b76:	4630      	mov	r0, r6
 8016b78:	f000 f85a 	bl	8016c30 <_isatty_r>
 8016b7c:	b128      	cbz	r0, 8016b8a <__smakebuf_r+0x70>
 8016b7e:	89a3      	ldrh	r3, [r4, #12]
 8016b80:	f023 0303 	bic.w	r3, r3, #3
 8016b84:	f043 0301 	orr.w	r3, r3, #1
 8016b88:	81a3      	strh	r3, [r4, #12]
 8016b8a:	89a3      	ldrh	r3, [r4, #12]
 8016b8c:	431d      	orrs	r5, r3
 8016b8e:	81a5      	strh	r5, [r4, #12]
 8016b90:	e7cf      	b.n	8016b32 <__smakebuf_r+0x18>

08016b92 <_putc_r>:
 8016b92:	b570      	push	{r4, r5, r6, lr}
 8016b94:	460d      	mov	r5, r1
 8016b96:	4614      	mov	r4, r2
 8016b98:	4606      	mov	r6, r0
 8016b9a:	b118      	cbz	r0, 8016ba4 <_putc_r+0x12>
 8016b9c:	6a03      	ldr	r3, [r0, #32]
 8016b9e:	b90b      	cbnz	r3, 8016ba4 <_putc_r+0x12>
 8016ba0:	f7fc fcf8 	bl	8013594 <__sinit>
 8016ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ba6:	07d8      	lsls	r0, r3, #31
 8016ba8:	d405      	bmi.n	8016bb6 <_putc_r+0x24>
 8016baa:	89a3      	ldrh	r3, [r4, #12]
 8016bac:	0599      	lsls	r1, r3, #22
 8016bae:	d402      	bmi.n	8016bb6 <_putc_r+0x24>
 8016bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016bb2:	f7fd fc76 	bl	80144a2 <__retarget_lock_acquire_recursive>
 8016bb6:	68a3      	ldr	r3, [r4, #8]
 8016bb8:	3b01      	subs	r3, #1
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	60a3      	str	r3, [r4, #8]
 8016bbe:	da05      	bge.n	8016bcc <_putc_r+0x3a>
 8016bc0:	69a2      	ldr	r2, [r4, #24]
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	db12      	blt.n	8016bec <_putc_r+0x5a>
 8016bc6:	b2eb      	uxtb	r3, r5
 8016bc8:	2b0a      	cmp	r3, #10
 8016bca:	d00f      	beq.n	8016bec <_putc_r+0x5a>
 8016bcc:	6823      	ldr	r3, [r4, #0]
 8016bce:	1c5a      	adds	r2, r3, #1
 8016bd0:	6022      	str	r2, [r4, #0]
 8016bd2:	701d      	strb	r5, [r3, #0]
 8016bd4:	b2ed      	uxtb	r5, r5
 8016bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016bd8:	07da      	lsls	r2, r3, #31
 8016bda:	d405      	bmi.n	8016be8 <_putc_r+0x56>
 8016bdc:	89a3      	ldrh	r3, [r4, #12]
 8016bde:	059b      	lsls	r3, r3, #22
 8016be0:	d402      	bmi.n	8016be8 <_putc_r+0x56>
 8016be2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016be4:	f7fd fc5e 	bl	80144a4 <__retarget_lock_release_recursive>
 8016be8:	4628      	mov	r0, r5
 8016bea:	bd70      	pop	{r4, r5, r6, pc}
 8016bec:	4629      	mov	r1, r5
 8016bee:	4622      	mov	r2, r4
 8016bf0:	4630      	mov	r0, r6
 8016bf2:	f7ff feca 	bl	801698a <__swbuf_r>
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	e7ed      	b.n	8016bd6 <_putc_r+0x44>

08016bfa <memmove>:
 8016bfa:	4288      	cmp	r0, r1
 8016bfc:	b510      	push	{r4, lr}
 8016bfe:	eb01 0402 	add.w	r4, r1, r2
 8016c02:	d902      	bls.n	8016c0a <memmove+0x10>
 8016c04:	4284      	cmp	r4, r0
 8016c06:	4623      	mov	r3, r4
 8016c08:	d807      	bhi.n	8016c1a <memmove+0x20>
 8016c0a:	1e43      	subs	r3, r0, #1
 8016c0c:	42a1      	cmp	r1, r4
 8016c0e:	d008      	beq.n	8016c22 <memmove+0x28>
 8016c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016c18:	e7f8      	b.n	8016c0c <memmove+0x12>
 8016c1a:	4402      	add	r2, r0
 8016c1c:	4601      	mov	r1, r0
 8016c1e:	428a      	cmp	r2, r1
 8016c20:	d100      	bne.n	8016c24 <memmove+0x2a>
 8016c22:	bd10      	pop	{r4, pc}
 8016c24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016c28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016c2c:	e7f7      	b.n	8016c1e <memmove+0x24>
	...

08016c30 <_isatty_r>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4d06      	ldr	r5, [pc, #24]	@ (8016c4c <_isatty_r+0x1c>)
 8016c34:	2300      	movs	r3, #0
 8016c36:	4604      	mov	r4, r0
 8016c38:	4608      	mov	r0, r1
 8016c3a:	602b      	str	r3, [r5, #0]
 8016c3c:	f7f4 fbfc 	bl	800b438 <_isatty>
 8016c40:	1c43      	adds	r3, r0, #1
 8016c42:	d102      	bne.n	8016c4a <_isatty_r+0x1a>
 8016c44:	682b      	ldr	r3, [r5, #0]
 8016c46:	b103      	cbz	r3, 8016c4a <_isatty_r+0x1a>
 8016c48:	6023      	str	r3, [r4, #0]
 8016c4a:	bd38      	pop	{r3, r4, r5, pc}
 8016c4c:	200024bc 	.word	0x200024bc

08016c50 <_lseek_r>:
 8016c50:	b538      	push	{r3, r4, r5, lr}
 8016c52:	4d07      	ldr	r5, [pc, #28]	@ (8016c70 <_lseek_r+0x20>)
 8016c54:	4604      	mov	r4, r0
 8016c56:	4608      	mov	r0, r1
 8016c58:	4611      	mov	r1, r2
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	602a      	str	r2, [r5, #0]
 8016c5e:	461a      	mov	r2, r3
 8016c60:	f7f4 fbf5 	bl	800b44e <_lseek>
 8016c64:	1c43      	adds	r3, r0, #1
 8016c66:	d102      	bne.n	8016c6e <_lseek_r+0x1e>
 8016c68:	682b      	ldr	r3, [r5, #0]
 8016c6a:	b103      	cbz	r3, 8016c6e <_lseek_r+0x1e>
 8016c6c:	6023      	str	r3, [r4, #0]
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	200024bc 	.word	0x200024bc

08016c74 <_read_r>:
 8016c74:	b538      	push	{r3, r4, r5, lr}
 8016c76:	4d07      	ldr	r5, [pc, #28]	@ (8016c94 <_read_r+0x20>)
 8016c78:	4604      	mov	r4, r0
 8016c7a:	4608      	mov	r0, r1
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	2200      	movs	r2, #0
 8016c80:	602a      	str	r2, [r5, #0]
 8016c82:	461a      	mov	r2, r3
 8016c84:	f7f4 fb83 	bl	800b38e <_read>
 8016c88:	1c43      	adds	r3, r0, #1
 8016c8a:	d102      	bne.n	8016c92 <_read_r+0x1e>
 8016c8c:	682b      	ldr	r3, [r5, #0]
 8016c8e:	b103      	cbz	r3, 8016c92 <_read_r+0x1e>
 8016c90:	6023      	str	r3, [r4, #0]
 8016c92:	bd38      	pop	{r3, r4, r5, pc}
 8016c94:	200024bc 	.word	0x200024bc

08016c98 <_write_r>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	4d07      	ldr	r5, [pc, #28]	@ (8016cb8 <_write_r+0x20>)
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	4608      	mov	r0, r1
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	602a      	str	r2, [r5, #0]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	f7f4 fb8e 	bl	800b3c8 <_write>
 8016cac:	1c43      	adds	r3, r0, #1
 8016cae:	d102      	bne.n	8016cb6 <_write_r+0x1e>
 8016cb0:	682b      	ldr	r3, [r5, #0]
 8016cb2:	b103      	cbz	r3, 8016cb6 <_write_r+0x1e>
 8016cb4:	6023      	str	r3, [r4, #0]
 8016cb6:	bd38      	pop	{r3, r4, r5, pc}
 8016cb8:	200024bc 	.word	0x200024bc

08016cbc <_close_r>:
 8016cbc:	b538      	push	{r3, r4, r5, lr}
 8016cbe:	4d06      	ldr	r5, [pc, #24]	@ (8016cd8 <_close_r+0x1c>)
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	4604      	mov	r4, r0
 8016cc4:	4608      	mov	r0, r1
 8016cc6:	602b      	str	r3, [r5, #0]
 8016cc8:	f7f4 fb9a 	bl	800b400 <_close>
 8016ccc:	1c43      	adds	r3, r0, #1
 8016cce:	d102      	bne.n	8016cd6 <_close_r+0x1a>
 8016cd0:	682b      	ldr	r3, [r5, #0]
 8016cd2:	b103      	cbz	r3, 8016cd6 <_close_r+0x1a>
 8016cd4:	6023      	str	r3, [r4, #0]
 8016cd6:	bd38      	pop	{r3, r4, r5, pc}
 8016cd8:	200024bc 	.word	0x200024bc

08016cdc <_fstat_r>:
 8016cdc:	b538      	push	{r3, r4, r5, lr}
 8016cde:	4d07      	ldr	r5, [pc, #28]	@ (8016cfc <_fstat_r+0x20>)
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	4608      	mov	r0, r1
 8016ce6:	4611      	mov	r1, r2
 8016ce8:	602b      	str	r3, [r5, #0]
 8016cea:	f7f4 fb95 	bl	800b418 <_fstat>
 8016cee:	1c43      	adds	r3, r0, #1
 8016cf0:	d102      	bne.n	8016cf8 <_fstat_r+0x1c>
 8016cf2:	682b      	ldr	r3, [r5, #0]
 8016cf4:	b103      	cbz	r3, 8016cf8 <_fstat_r+0x1c>
 8016cf6:	6023      	str	r3, [r4, #0]
 8016cf8:	bd38      	pop	{r3, r4, r5, pc}
 8016cfa:	bf00      	nop
 8016cfc:	200024bc 	.word	0x200024bc

08016d00 <__assert_func>:
 8016d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d02:	4614      	mov	r4, r2
 8016d04:	461a      	mov	r2, r3
 8016d06:	4b09      	ldr	r3, [pc, #36]	@ (8016d2c <__assert_func+0x2c>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	68d8      	ldr	r0, [r3, #12]
 8016d0e:	b14c      	cbz	r4, 8016d24 <__assert_func+0x24>
 8016d10:	4b07      	ldr	r3, [pc, #28]	@ (8016d30 <__assert_func+0x30>)
 8016d12:	9100      	str	r1, [sp, #0]
 8016d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016d18:	4906      	ldr	r1, [pc, #24]	@ (8016d34 <__assert_func+0x34>)
 8016d1a:	462b      	mov	r3, r5
 8016d1c:	f000 f816 	bl	8016d4c <fiprintf>
 8016d20:	f000 f826 	bl	8016d70 <abort>
 8016d24:	4b04      	ldr	r3, [pc, #16]	@ (8016d38 <__assert_func+0x38>)
 8016d26:	461c      	mov	r4, r3
 8016d28:	e7f3      	b.n	8016d12 <__assert_func+0x12>
 8016d2a:	bf00      	nop
 8016d2c:	200001d4 	.word	0x200001d4
 8016d30:	0801830e 	.word	0x0801830e
 8016d34:	0801831b 	.word	0x0801831b
 8016d38:	08018349 	.word	0x08018349

08016d3c <_malloc_usable_size_r>:
 8016d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d40:	1f18      	subs	r0, r3, #4
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	bfbc      	itt	lt
 8016d46:	580b      	ldrlt	r3, [r1, r0]
 8016d48:	18c0      	addlt	r0, r0, r3
 8016d4a:	4770      	bx	lr

08016d4c <fiprintf>:
 8016d4c:	b40e      	push	{r1, r2, r3}
 8016d4e:	b503      	push	{r0, r1, lr}
 8016d50:	4601      	mov	r1, r0
 8016d52:	ab03      	add	r3, sp, #12
 8016d54:	4805      	ldr	r0, [pc, #20]	@ (8016d6c <fiprintf+0x20>)
 8016d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d5a:	6800      	ldr	r0, [r0, #0]
 8016d5c:	9301      	str	r3, [sp, #4]
 8016d5e:	f7fe ff23 	bl	8015ba8 <_vfiprintf_r>
 8016d62:	b002      	add	sp, #8
 8016d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d68:	b003      	add	sp, #12
 8016d6a:	4770      	bx	lr
 8016d6c:	200001d4 	.word	0x200001d4

08016d70 <abort>:
 8016d70:	b508      	push	{r3, lr}
 8016d72:	2006      	movs	r0, #6
 8016d74:	f000 f82c 	bl	8016dd0 <raise>
 8016d78:	2001      	movs	r0, #1
 8016d7a:	f7f4 fafd 	bl	800b378 <_exit>

08016d7e <_raise_r>:
 8016d7e:	291f      	cmp	r1, #31
 8016d80:	b538      	push	{r3, r4, r5, lr}
 8016d82:	4605      	mov	r5, r0
 8016d84:	460c      	mov	r4, r1
 8016d86:	d904      	bls.n	8016d92 <_raise_r+0x14>
 8016d88:	2316      	movs	r3, #22
 8016d8a:	6003      	str	r3, [r0, #0]
 8016d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d90:	bd38      	pop	{r3, r4, r5, pc}
 8016d92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016d94:	b112      	cbz	r2, 8016d9c <_raise_r+0x1e>
 8016d96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d9a:	b94b      	cbnz	r3, 8016db0 <_raise_r+0x32>
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	f000 f831 	bl	8016e04 <_getpid_r>
 8016da2:	4622      	mov	r2, r4
 8016da4:	4601      	mov	r1, r0
 8016da6:	4628      	mov	r0, r5
 8016da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016dac:	f000 b818 	b.w	8016de0 <_kill_r>
 8016db0:	2b01      	cmp	r3, #1
 8016db2:	d00a      	beq.n	8016dca <_raise_r+0x4c>
 8016db4:	1c59      	adds	r1, r3, #1
 8016db6:	d103      	bne.n	8016dc0 <_raise_r+0x42>
 8016db8:	2316      	movs	r3, #22
 8016dba:	6003      	str	r3, [r0, #0]
 8016dbc:	2001      	movs	r0, #1
 8016dbe:	e7e7      	b.n	8016d90 <_raise_r+0x12>
 8016dc0:	2100      	movs	r1, #0
 8016dc2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016dc6:	4620      	mov	r0, r4
 8016dc8:	4798      	blx	r3
 8016dca:	2000      	movs	r0, #0
 8016dcc:	e7e0      	b.n	8016d90 <_raise_r+0x12>
	...

08016dd0 <raise>:
 8016dd0:	4b02      	ldr	r3, [pc, #8]	@ (8016ddc <raise+0xc>)
 8016dd2:	4601      	mov	r1, r0
 8016dd4:	6818      	ldr	r0, [r3, #0]
 8016dd6:	f7ff bfd2 	b.w	8016d7e <_raise_r>
 8016dda:	bf00      	nop
 8016ddc:	200001d4 	.word	0x200001d4

08016de0 <_kill_r>:
 8016de0:	b538      	push	{r3, r4, r5, lr}
 8016de2:	4d07      	ldr	r5, [pc, #28]	@ (8016e00 <_kill_r+0x20>)
 8016de4:	2300      	movs	r3, #0
 8016de6:	4604      	mov	r4, r0
 8016de8:	4608      	mov	r0, r1
 8016dea:	4611      	mov	r1, r2
 8016dec:	602b      	str	r3, [r5, #0]
 8016dee:	f7f4 fab3 	bl	800b358 <_kill>
 8016df2:	1c43      	adds	r3, r0, #1
 8016df4:	d102      	bne.n	8016dfc <_kill_r+0x1c>
 8016df6:	682b      	ldr	r3, [r5, #0]
 8016df8:	b103      	cbz	r3, 8016dfc <_kill_r+0x1c>
 8016dfa:	6023      	str	r3, [r4, #0]
 8016dfc:	bd38      	pop	{r3, r4, r5, pc}
 8016dfe:	bf00      	nop
 8016e00:	200024bc 	.word	0x200024bc

08016e04 <_getpid_r>:
 8016e04:	f7f4 baa0 	b.w	800b348 <_getpid>

08016e08 <_init>:
 8016e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e0a:	bf00      	nop
 8016e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e0e:	bc08      	pop	{r3}
 8016e10:	469e      	mov	lr, r3
 8016e12:	4770      	bx	lr

08016e14 <_fini>:
 8016e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e16:	bf00      	nop
 8016e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e1a:	bc08      	pop	{r3}
 8016e1c:	469e      	mov	lr, r3
 8016e1e:	4770      	bx	lr
