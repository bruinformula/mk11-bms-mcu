
BroadMarket_Support_ADBMS6830.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165a0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001860  08016780  08016780  00017780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  08017fe0  08017fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000224  20000000  08017fe8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000229c  20000224  0801820c  00019224  2**2
                  ALLOC
  6 ._user_heap_stack 00000600  200024c0  0801820c  000194c0  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00019224  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002cdc8  00000000  00000000  00019254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00004c5d  00000000  00000000  0004601c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000021a0  00000000  00000000  0004ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00001a51  00000000  00000000  0004ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0002e574  00000000  00000000  0004e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002b619  00000000  00000000  0007cde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00128393  00000000  00000000  000a83fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000043  00000000  00000000  001d0791  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000a8e0  00000000  00000000  001d07d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 00000082  00000000  00000000  001db0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <Pec15_Calc>:
uint16_t Pec15_Calc
( 
uint8_t len, /* Number of bytes that will be used to calculate a PEC */
uint8_t *data /* Array of data that will be used to calculate  a PEC */								 
)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
  remainder = 16; /* initialize the PEC */
 800103c:	2310      	movs	r3, #16
 800103e:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001040:	2300      	movs	r3, #0
 8001042:	737b      	strb	r3, [r7, #13]
 8001044:	e019      	b.n	800107a <Pec15_Calc+0x4a>
  {
    addr = (((remainder>>7)^data[i])&0xff);/* calculate PEC table address */
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	09db      	lsrs	r3, r3, #7
 800104a:	b29b      	uxth	r3, r3
 800104c:	7b7a      	ldrb	r2, [r7, #13]
 800104e:	6839      	ldr	r1, [r7, #0]
 8001050:	440a      	add	r2, r1
 8001052:	7812      	ldrb	r2, [r2, #0]
 8001054:	4053      	eors	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	817b      	strh	r3, [r7, #10]
    remainder = ((remainder<<8)^Crc15Table[addr]);
 800105c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	897b      	ldrh	r3, [r7, #10]
 8001066:	490b      	ldr	r1, [pc, #44]	@ (8001094 <Pec15_Calc+0x64>)
 8001068:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4053      	eors	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i = 0; i<len; i++) /* loops for each byte in data array */
 8001074:	7b7b      	ldrb	r3, [r7, #13]
 8001076:	3301      	adds	r3, #1
 8001078:	737b      	strb	r3, [r7, #13]
 800107a:	7b7a      	ldrb	r2, [r7, #13]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3e1      	bcc.n	8001046 <Pec15_Calc+0x16>
  }
  return(remainder*2);/* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b29b      	uxth	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	08017860 	.word	0x08017860

08001098 <pec10_calc>:

uint16_t pec10_calc( bool bIsRxCmd, int nLength, uint8_t *pDataBuf)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	73fb      	strb	r3, [r7, #15]
    uint16_t nRemainder = 16u; /* PEC_SEED */
 80010a6:	2310      	movs	r3, #16
 80010a8:	82fb      	strh	r3, [r7, #22]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t nPolynomial = 0x8Fu;
 80010aa:	238f      	movs	r3, #143	@ 0x8f
 80010ac:	827b      	strh	r3, [r7, #18]
    uint8_t nByteIndex, nBitIndex;
  
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 80010ae:	2300      	movs	r3, #0
 80010b0:	757b      	strb	r3, [r7, #21]
 80010b2:	e024      	b.n	80010fe <pec10_calc+0x66>
  {
    /* Bring the next byte into the remainder. */
        nRemainder ^= (uint16_t)((uint16_t)pDataBuf[nByteIndex] << 2u);
 80010b4:	7d7b      	ldrb	r3, [r7, #21]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	b29a      	uxth	r2, r3
 80010c0:	8afb      	ldrh	r3, [r7, #22]
 80010c2:	4053      	eors	r3, r2
 80010c4:	82fb      	strh	r3, [r7, #22]
 
    /* Perform modulo-2 division, a bit at a time.*/
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010c6:	2308      	movs	r3, #8
 80010c8:	753b      	strb	r3, [r7, #20]
 80010ca:	e012      	b.n	80010f2 <pec10_calc+0x5a>
    {
      /* Try to divide the current data bit. */
            if ((nRemainder & 0x200u) > 0u)
 80010cc:	8afb      	ldrh	r3, [r7, #22]
 80010ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <pec10_calc+0x4e>
      {
                nRemainder = (uint16_t)((nRemainder << 1u));
 80010d6:	8afb      	ldrh	r3, [r7, #22]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	82fb      	strh	r3, [r7, #22]
                nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 80010dc:	8afa      	ldrh	r2, [r7, #22]
 80010de:	8a7b      	ldrh	r3, [r7, #18]
 80010e0:	4053      	eors	r3, r2
 80010e2:	82fb      	strh	r3, [r7, #22]
 80010e4:	e002      	b.n	80010ec <pec10_calc+0x54>
      }
      else
      {
                nRemainder = (uint16_t)(nRemainder << 1u);
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	82fb      	strh	r3, [r7, #22]
        for (nBitIndex = 8u; nBitIndex > 0u; --nBitIndex)
 80010ec:	7d3b      	ldrb	r3, [r7, #20]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	753b      	strb	r3, [r7, #20]
 80010f2:	7d3b      	ldrb	r3, [r7, #20]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e9      	bne.n	80010cc <pec10_calc+0x34>
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7b      	ldrb	r3, [r7, #21]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	429a      	cmp	r2, r3
 8001104:	dcd6      	bgt.n	80010b4 <pec10_calc+0x1c>
      }
    }
  }
 
    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == true)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00e      	beq.n	800112a <pec10_calc+0x92>
  {  
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b21b      	sxth	r3, r3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	b21b      	sxth	r3, r3
 800111a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
 800111e:	b21a      	sxth	r2, r3
 8001120:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001124:	4053      	eors	r3, r2
 8001126:	b21b      	sxth	r3, r3
 8001128:	82fb      	strh	r3, [r7, #22]
  }
  /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800112a:	2306      	movs	r3, #6
 800112c:	753b      	strb	r3, [r7, #20]
 800112e:	e012      	b.n	8001156 <pec10_calc+0xbe>
  {
    /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 8001130:	8afb      	ldrh	r3, [r7, #22]
 8001132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001136:	2b00      	cmp	r3, #0
 8001138:	d007      	beq.n	800114a <pec10_calc+0xb2>
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800113a:	8afb      	ldrh	r3, [r7, #22]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	82fb      	strh	r3, [r7, #22]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8001140:	8afa      	ldrh	r2, [r7, #22]
 8001142:	8a7b      	ldrh	r3, [r7, #18]
 8001144:	4053      	eors	r3, r2
 8001146:	82fb      	strh	r3, [r7, #22]
 8001148:	e002      	b.n	8001150 <pec10_calc+0xb8>
    }
    else
    {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800114a:	8afb      	ldrh	r3, [r7, #22]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	82fb      	strh	r3, [r7, #22]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8001150:	7d3b      	ldrb	r3, [r7, #20]
 8001152:	3b01      	subs	r3, #1
 8001154:	753b      	strb	r3, [r7, #20]
 8001156:	7d3b      	ldrb	r3, [r7, #20]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e9      	bne.n	8001130 <pec10_calc+0x98>
    }
  }
    return ((uint16_t)(nRemainder & 0x3FFu));
 800115c:	8afb      	ldrh	r3, [r7, #22]
 800115e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001162:	b29b      	uxth	r3, r3
}
 8001164:	4618      	mov	r0, r3
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <spiSendCmd>:
* @return None
*
*******************************************************************************
*/
void spiSendCmd(uint8_t tx_cmd[2])
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint16_t cmd_pec;	
  cmd[0] = tx_cmd[0];
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	723b      	strb	r3, [r7, #8]
  cmd[1] =  tx_cmd[1];
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	727b      	strb	r3, [r7, #9]
  cmd_pec = Pec15_Calc(2, cmd);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff ff50 	bl	8001030 <Pec15_Calc>
 8001190:	4603      	mov	r3, r0
 8001192:	81fb      	strh	r3, [r7, #14]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29b      	uxth	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 800119e:	89fb      	ldrh	r3, [r7, #14]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	72fb      	strb	r3, [r7, #11]
  adBmsCsLow();
 80011a4:	f005 ffdc 	bl	8007160 <adBmsCsLow>
  spiWriteBytes(4, &cmd[0]);
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	2004      	movs	r0, #4
 80011b0:	f005 ffee 	bl	8007190 <spiWriteBytes>
  adBmsCsHigh();
 80011b4:	f005 ffe0 	bl	8007178 <adBmsCsHigh>
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <spiReadData>:
uint8_t *rx_data,
uint8_t *pec_error,
uint8_t *cmd_cntr,
uint8_t regData_size
)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *data, *copyArray, src_address = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t cmd_pec, received_pec, calculated_pec;
  uint8_t BYTES_IN_REG = regData_size;
 80011d6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80011da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t RX_BUFFER = (regData_size * tIC);
 80011de:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	fb12 f303 	smulbb	r3, r2, r3
 80011e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  
  data = (uint8_t *)calloc(RX_BUFFER, sizeof(uint8_t));
 80011ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f010 fe7e 	bl	8011ef4 <calloc>
 80011f8:	4603      	mov	r3, r0
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  copyArray = (uint8_t *)calloc(BYTES_IN_REG, sizeof(uint8_t));
 80011fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f010 fe76 	bl	8011ef4 <calloc>
 8001208:	4603      	mov	r3, r0
 800120a:	623b      	str	r3, [r7, #32]
  if((data == NULL) || (copyArray == NULL))
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <spiReadData+0x58>
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <spiReadData+0x64>
  {
   #ifdef MBED     
    pc.printf(" Failed to allocate spi read data memory \n");
    #else
    printf(" Failed to allocate spi read data memory \n");
 8001218:	486c      	ldr	r0, [pc, #432]	@ (80013cc <spiReadData+0x20c>)
 800121a:	f012 fd95 	bl	8013d48 <puts>
    #endif	  
    exit(0);
 800121e:	2000      	movs	r0, #0
 8001220:	f010 fe84 	bl	8011f2c <exit>
  }
  else
  {
    uint8_t cmd[4];
    cmd[0] = tx_cmd[0];
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	753b      	strb	r3, [r7, #20]
    cmd[1] = tx_cmd[1];
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	757b      	strb	r3, [r7, #21]
    cmd_pec = Pec15_Calc(2, cmd);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff fefa 	bl	8001030 <Pec15_Calc>
 800123c:	4603      	mov	r3, r0
 800123e:	83fb      	strh	r3, [r7, #30]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001240:	8bfb      	ldrh	r3, [r7, #30]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	b29b      	uxth	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	75bb      	strb	r3, [r7, #22]
    cmd[3] = (uint8_t)(cmd_pec);
 800124a:	8bfb      	ldrh	r3, [r7, #30]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	75fb      	strb	r3, [r7, #23]
    adBmsWakeupIc(tIC);
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4618      	mov	r0, r3
 8001254:	f005 ffce 	bl	80071f4 <adBmsWakeupIc>
    adBmsCsLow();
 8001258:	f005 ff82 	bl	8007160 <adBmsCsLow>
    spiWriteReadBytes(&cmd[0], &data[0], RX_BUFFER);                 /* Read the configuration data of all ICs on the daisy chain into readdata array */
 800125c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001260:	b29a      	uxth	r2, r3
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001268:	4618      	mov	r0, r3
 800126a:	f005 ffa5 	bl	80071b8 <spiWriteReadBytes>
    adBmsCsHigh();
 800126e:	f005 ff83 	bl	8007178 <adBmsCsHigh>
    for (uint8_t current_ic = 0; current_ic < tIC; current_ic++)     /* executes for each ic in the daisy chain and packs the data */
 8001272:	2300      	movs	r3, #0
 8001274:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001278:	e097      	b.n	80013aa <spiReadData+0x1ea>
    {																																      /* Into the r_comm array as well as check the received data for any bit errors */
      for (uint8_t current_byte = 0; current_byte < (BYTES_IN_REG); current_byte++)
 800127a:	2300      	movs	r3, #0
 800127c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001280:	e01e      	b.n	80012c0 <spiReadData+0x100>
      {
        rx_data[(current_ic*BYTES_IN_REG)+current_byte] = data[current_byte + (current_ic*BYTES_IN_REG)];
 8001282:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001286:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800128a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800128e:	fb01 f303 	mul.w	r3, r1, r3
 8001292:	4413      	add	r3, r2
 8001294:	461a      	mov	r2, r3
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	441a      	add	r2, r3
 800129a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800129e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80012a2:	fb03 f101 	mul.w	r1, r3, r1
 80012a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012aa:	440b      	add	r3, r1
 80012ac:	4619      	mov	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	440b      	add	r3, r1
 80012b2:	7812      	ldrb	r2, [r2, #0]
 80012b4:	701a      	strb	r2, [r3, #0]
      for (uint8_t current_byte = 0; current_byte < (BYTES_IN_REG); current_byte++)
 80012b6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012ba:	3301      	adds	r3, #1
 80012bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80012c0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80012c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3da      	bcc.n	8001282 <spiReadData+0xc2>
      }
      /* Get command counter value */
      cmd_cntr[current_ic] = (data[(current_ic * BYTES_IN_REG) + (BYTES_IN_REG - 2)] >> 2);
 80012cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012d0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80012d4:	fb03 f202 	mul.w	r2, r3, r2
 80012d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012dc:	3b02      	subs	r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	4413      	add	r3, r2
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80012ee:	440b      	add	r3, r1
 80012f0:	0892      	lsrs	r2, r2, #2
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]
      /* Get received pec value from ic*/
      received_pec = (uint16_t)(((data[(current_ic * BYTES_IN_REG) + (BYTES_IN_REG - 2)] & 0x03) << 8) | data[(current_ic * BYTES_IN_REG) + (BYTES_IN_REG - 1)]);
 80012f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012fa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80012fe:	fb03 f202 	mul.w	r2, r3, r2
 8001302:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001306:	3b02      	subs	r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	461a      	mov	r2, r3
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21b      	sxth	r3, r3
 8001318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800131c:	b21a      	sxth	r2, r3
 800131e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001322:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001326:	fb03 f101 	mul.w	r1, r3, r1
 800132a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800132e:	3b01      	subs	r3, #1
 8001330:	440b      	add	r3, r1
 8001332:	4619      	mov	r1, r3
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	440b      	add	r3, r1
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	83bb      	strh	r3, [r7, #28]
      /* Copy each ic correspond data + pec value for calculate data pec */
      memcpy(&copyArray[0], &data[src_address], BYTES_IN_REG);
 8001342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001348:	4413      	add	r3, r2
 800134a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800134e:	4619      	mov	r1, r3
 8001350:	6a38      	ldr	r0, [r7, #32]
 8001352:	f012 fd5d 	bl	8013e10 <memcpy>
      src_address = ((current_ic+1) * (regData_size));
 8001356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800135a:	3301      	adds	r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001362:	fb12 f303 	smulbb	r3, r2, r3
 8001366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      /* Calculate data pec */
      calculated_pec = (uint16_t)pec10_calc(true, (BYTES_IN_REG-2), &copyArray[0]);
 800136a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800136e:	3b02      	subs	r3, #2
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	4619      	mov	r1, r3
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fe8f 	bl	8001098 <pec10_calc>
 800137a:	4603      	mov	r3, r0
 800137c:	837b      	strh	r3, [r7, #26]
      /* Match received pec with calculated pec */
      if (received_pec == calculated_pec){ pec_error[current_ic] = 0; }/* If no error is there value set to 0 */
 800137e:	8bba      	ldrh	r2, [r7, #28]
 8001380:	8b7b      	ldrh	r3, [r7, #26]
 8001382:	429a      	cmp	r2, r3
 8001384:	d106      	bne.n	8001394 <spiReadData+0x1d4>
 8001386:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e005      	b.n	80013a0 <spiReadData+0x1e0>
      else{ pec_error[current_ic] = 1; }                               /* If error is there value set to 1 */                         
 8001394:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4413      	add	r3, r2
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
    for (uint8_t current_ic = 0; current_ic < tIC; current_ic++)     /* executes for each ic in the daisy chain and packs the data */
 80013a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013a4:	3301      	adds	r3, #1
 80013a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80013aa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f4ff af62 	bcc.w	800127a <spiReadData+0xba>
    }
  }
  free(data);
 80013b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013b8:	f011 f89c 	bl	80124f4 <free>
  free(copyArray);
 80013bc:	6a38      	ldr	r0, [r7, #32]
 80013be:	f011 f899 	bl	80124f4 <free>
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08016780 	.word	0x08016780

080013d0 <adBmsReadData>:
* @return None 
*
*******************************************************************************
*/
void adBmsReadData(uint8_t tIC, cell_asic *ic, uint8_t cmd_arg[2], TYPE type, GRP group)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b090      	sub	sp, #64	@ 0x40
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	461a      	mov	r2, r3
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	4613      	mov	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
  uint16_t rBuff_size;
  uint8_t regData_size;
  if(group == ALL_GRP)
 80013e4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d142      	bne.n	8001472 <adBmsReadData+0xa2>
  {
    if(type == Rdcvall){rBuff_size = RDCVALL_SIZE; regData_size = RDCVALL_SIZE;}
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d105      	bne.n	80013fe <adBmsReadData+0x2e>
 80013f2:	2322      	movs	r3, #34	@ 0x22
 80013f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80013f6:	2322      	movs	r3, #34	@ 0x22
 80013f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80013fc:	e040      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdsall){rBuff_size = RDSALL_SIZE; regData_size = RDSALL_SIZE;}
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	2b0e      	cmp	r3, #14
 8001402:	d105      	bne.n	8001410 <adBmsReadData+0x40>
 8001404:	2322      	movs	r3, #34	@ 0x22
 8001406:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001408:	2322      	movs	r3, #34	@ 0x22
 800140a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800140e:	e037      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdacall){rBuff_size = RDACALL_SIZE; regData_size = RDACALL_SIZE;}
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	2b0d      	cmp	r3, #13
 8001414:	d105      	bne.n	8001422 <adBmsReadData+0x52>
 8001416:	2322      	movs	r3, #34	@ 0x22
 8001418:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800141a:	2322      	movs	r3, #34	@ 0x22
 800141c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001420:	e02e      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdfcall){rBuff_size = RDFCALL_SIZE; regData_size = RDFCALL_SIZE;}
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	2b11      	cmp	r3, #17
 8001426:	d105      	bne.n	8001434 <adBmsReadData+0x64>
 8001428:	2322      	movs	r3, #34	@ 0x22
 800142a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800142c:	2322      	movs	r3, #34	@ 0x22
 800142e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001432:	e025      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdcsall){rBuff_size = RDCSALL_SIZE; regData_size = RDCSALL_SIZE;}
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d105      	bne.n	8001446 <adBmsReadData+0x76>
 800143a:	2342      	movs	r3, #66	@ 0x42
 800143c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800143e:	2342      	movs	r3, #66	@ 0x42
 8001440:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001444:	e01c      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdasall){rBuff_size = RDASALL_SIZE; regData_size = RDASALL_SIZE;}
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	2b12      	cmp	r3, #18
 800144a:	d105      	bne.n	8001458 <adBmsReadData+0x88>
 800144c:	2346      	movs	r3, #70	@ 0x46
 800144e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001450:	2346      	movs	r3, #70	@ 0x46
 8001452:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001456:	e013      	b.n	8001480 <adBmsReadData+0xb0>
    else if(type == Rdacsall){rBuff_size = RDACSALL_SIZE; regData_size = RDACSALL_SIZE;}
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d105      	bne.n	800146a <adBmsReadData+0x9a>
 800145e:	2342      	movs	r3, #66	@ 0x42
 8001460:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001462:	2342      	movs	r3, #66	@ 0x42
 8001464:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001468:	e00a      	b.n	8001480 <adBmsReadData+0xb0>
    else{printf("Read All cmd wrong type select \n");}
 800146a:	48bc      	ldr	r0, [pc, #752]	@ (800175c <adBmsReadData+0x38c>)
 800146c:	f012 fc6c 	bl	8013d48 <puts>
 8001470:	e006      	b.n	8001480 <adBmsReadData+0xb0>
  }
  else{rBuff_size = (tIC * RX_DATA); regData_size = RX_DATA;}
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	b29b      	uxth	r3, r3
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800147a:	2308      	movs	r3, #8
 800147c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t *read_buffer, *pec_error, *cmd_count;
  read_buffer = (uint8_t *)calloc(rBuff_size, sizeof(uint8_t));
 8001480:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001482:	2101      	movs	r1, #1
 8001484:	4618      	mov	r0, r3
 8001486:	f010 fd35 	bl	8011ef4 <calloc>
 800148a:	4603      	mov	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]
  pec_error = (uint8_t *)calloc(tIC, sizeof(uint8_t)); 
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f010 fd2e 	bl	8011ef4 <calloc>
 8001498:	4603      	mov	r3, r0
 800149a:	617b      	str	r3, [r7, #20]
  cmd_count = (uint8_t *)calloc(tIC, sizeof(uint8_t));
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f010 fd27 	bl	8011ef4 <calloc>
 80014a6:	4603      	mov	r3, r0
 80014a8:	613b      	str	r3, [r7, #16]
  if((pec_error == NULL) || (cmd_count == NULL) || (read_buffer == NULL))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <adBmsReadData+0xec>
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <adBmsReadData+0xec>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <adBmsReadData+0xf8>
  {
#ifdef MBED
    pc.printf(" Failed to allocate memory \n");
#else
    printf(" Failed to allocate memory \n");
 80014bc:	48a8      	ldr	r0, [pc, #672]	@ (8001760 <adBmsReadData+0x390>)
 80014be:	f012 fc43 	bl	8013d48 <puts>
#endif
    exit(0);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f010 fd32 	bl	8011f2c <exit>
  }
  else
  {
    spiReadData(tIC, &cmd_arg[0], &read_buffer[0], &pec_error[0], &cmd_count[0], regData_size);
 80014c8:	7bf8      	ldrb	r0, [r7, #15]
 80014ca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	f7ff fe71 	bl	80011c0 <spiReadData>
    switch (type)
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	2b12      	cmp	r3, #18
 80014e2:	f200 849e 	bhi.w	8001e22 <adBmsReadData+0xa52>
 80014e6:	a201      	add	r2, pc, #4	@ (adr r2, 80014ec <adBmsReadData+0x11c>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	080015a3 	.word	0x080015a3
 80014f0:	08001745 	.word	0x08001745
 80014f4:	080017b7 	.word	0x080017b7
 80014f8:	0800181f 	.word	0x0800181f
 80014fc:	080018ed 	.word	0x080018ed
 8001500:	0800160d 	.word	0x0800160d
 8001504:	08001675 	.word	0x08001675
 8001508:	080016dd 	.word	0x080016dd
 800150c:	08001539 	.word	0x08001539
 8001510:	08001887 	.word	0x08001887
 8001514:	08001955 	.word	0x08001955
 8001518:	08001e23 	.word	0x08001e23
 800151c:	080019bb 	.word	0x080019bb
 8001520:	08001a23 	.word	0x08001a23
 8001524:	08001a8b 	.word	0x08001a8b
 8001528:	08001b5b 	.word	0x08001b5b
 800152c:	08001c2b 	.word	0x08001c2b
 8001530:	08001af3 	.word	0x08001af3
 8001534:	08001cfb 	.word	0x08001cfb
    {
    case Config:
      adBms6830ParseConfig(tIC, ic, group, &read_buffer[0]);
 8001538:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800153c:	7bf8      	ldrb	r0, [r7, #15]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	f001 f9a3 	bl	800288c <adBms6830ParseConfig>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800154c:	e022      	b.n	8001594 <adBmsReadData+0x1c4>
      {							
        ic[cic].cccrc.cfgr_pec = pec_error[cic];
 800154e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	441a      	add	r2, r3
 8001556:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800155a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	68b9      	ldr	r1, [r7, #8]
 8001564:	440b      	add	r3, r1
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 800156c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	441a      	add	r2, r3
 8001574:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001578:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	440b      	add	r3, r1
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800158a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800158e:	3301      	adds	r3, #1
 8001590:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001594:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3d7      	bcc.n	800154e <adBmsReadData+0x17e>
      }
      break;
 800159e:	f000 bc41 	b.w	8001e24 <adBmsReadData+0xa54>
      
    case Cell:
      adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 80015a2:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80015a6:	7bf8      	ldrb	r0, [r7, #15]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	f001 f990 	bl	80028d0 <adBms6830ParseCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015b6:	e022      	b.n	80015fe <adBmsReadData+0x22e>
      {							
        ic[cic].cccrc.cell_pec = pec_error[cic];
 80015b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	441a      	add	r2, r3
 80015c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	440b      	add	r3, r1
 80015d0:	7812      	ldrb	r2, [r2, #0]
 80015d2:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80015d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	441a      	add	r2, r3
 80015de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80015e6:	fb01 f303 	mul.w	r3, r1, r3
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	440b      	add	r3, r1
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015f8:	3301      	adds	r3, #1
 80015fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015fe:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3d7      	bcc.n	80015b8 <adBmsReadData+0x1e8>
//        printf("%X \n", pec_error[cic]);
//        printf("%X \n", cmd_count[cic]);
      }
      break;
 8001608:	f000 bc0c 	b.w	8001e24 <adBmsReadData+0xa54>
      
    case AvgCell:
      adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 800160c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001610:	7bf8      	ldrb	r0, [r7, #15]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	f001 fc37 	bl	8002e88 <adBms6830ParseAverageCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001620:	e022      	b.n	8001668 <adBmsReadData+0x298>
      {							
        ic[cic].cccrc.acell_pec = pec_error[cic];
 8001622:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	441a      	add	r2, r3
 800162a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800162e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	440b      	add	r3, r1
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001640:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	441a      	add	r2, r3
 8001648:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800164c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	440b      	add	r3, r1
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800165e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001662:	3301      	adds	r3, #1
 8001664:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001668:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	429a      	cmp	r2, r3
 8001670:	d3d7      	bcc.n	8001622 <adBmsReadData+0x252>
      }
      break;
 8001672:	e3d7      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case S_volt:
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[0]);
 8001674:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001678:	7bf8      	ldrb	r0, [r7, #15]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	f001 feff 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001688:	e022      	b.n	80016d0 <adBmsReadData+0x300>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 800168a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	441a      	add	r2, r3
 8001692:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001696:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	440b      	add	r3, r1
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80016a8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	441a      	add	r2, r3
 80016b0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016b4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	440b      	add	r3, r1
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80016c6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016ca:	3301      	adds	r3, #1
 80016cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80016d0:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3d7      	bcc.n	800168a <adBmsReadData+0x2ba>
      }
      break;
 80016da:	e3a3      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case F_volt:
      adBms6830ParseFCell(tIC, ic, group, &read_buffer[0]);
 80016dc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80016e0:	7bf8      	ldrb	r0, [r7, #15]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	f002 f9c7 	bl	8003a78 <adBms6830ParseFCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80016f0:	e022      	b.n	8001738 <adBmsReadData+0x368>
      {							
        ic[cic].cccrc.fcell_pec = pec_error[cic];
 80016f2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	441a      	add	r2, r3
 80016fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016fe:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	440b      	add	r3, r1
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001710:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	441a      	add	r2, r3
 8001718:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800171c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	440b      	add	r3, r1
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800172e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001732:	3301      	adds	r3, #1
 8001734:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001738:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3d7      	bcc.n	80016f2 <adBmsReadData+0x322>
      }
      break;
 8001742:	e36f      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Aux:
      adBms6830ParseAux(tIC, ic, group, &read_buffer[0]);
 8001744:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001748:	7bf8      	ldrb	r0, [r7, #15]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	f002 fc8f 	bl	8004070 <adBms6830ParseAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001752:	2300      	movs	r3, #0
 8001754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001758:	e027      	b.n	80017aa <adBmsReadData+0x3da>
 800175a:	bf00      	nop
 800175c:	080167ac 	.word	0x080167ac
 8001760:	080167cc 	.word	0x080167cc
      {
        ic[cic].cccrc.aux_pec = pec_error[cic];
 8001764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	441a      	add	r2, r3
 800176c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001770:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	440b      	add	r3, r1
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	441a      	add	r2, r3
 800178a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800178e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	440b      	add	r3, r1
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80017a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017a4:	3301      	adds	r3, #1
 80017a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3d7      	bcc.n	8001764 <adBmsReadData+0x394>
      }
      break;
 80017b4:	e336      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case RAux:
      adBms6830ParseRAux(tIC, ic, group, &read_buffer[0]);
 80017b6:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80017ba:	7bf8      	ldrb	r0, [r7, #15]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	f002 fea6 	bl	8004510 <adBms6830ParseRAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80017ca:	e022      	b.n	8001812 <adBmsReadData+0x442>
      {
        ic[cic].cccrc.raux_pec = pec_error[cic];
 80017cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	441a      	add	r2, r3
 80017d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017d8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	440b      	add	r3, r1
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80017ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	441a      	add	r2, r3
 80017f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017f6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	440b      	add	r3, r1
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800180c:	3301      	adds	r3, #1
 800180e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001812:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3d7      	bcc.n	80017cc <adBmsReadData+0x3fc>
      }
      break;
 800181c:	e302      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Status:
      adBms6830ParseStatus(tIC, ic, group, &read_buffer[0]);
 800181e:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001822:	7bf8      	ldrb	r0, [r7, #15]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	f003 ff44 	bl	80056b4 <adBms6830ParseStatus>
      for (uint8_t cic = 0; cic < tIC; cic++)
 800182c:	2300      	movs	r3, #0
 800182e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001832:	e022      	b.n	800187a <adBmsReadData+0x4aa>
      {
        ic[cic].cccrc.stat_pec = pec_error[cic];
 8001834:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	441a      	add	r2, r3
 800183c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001840:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	440b      	add	r3, r1
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001852:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	441a      	add	r2, r3
 800185a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800185e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	68b9      	ldr	r1, [r7, #8]
 8001868:	440b      	add	r3, r1
 800186a:	7812      	ldrb	r2, [r2, #0]
 800186c:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001870:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001874:	3301      	adds	r3, #1
 8001876:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800187a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	429a      	cmp	r2, r3
 8001882:	d3d7      	bcc.n	8001834 <adBmsReadData+0x464>
      }
      break;
 8001884:	e2ce      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Comm:
      adBms6830ParseComm(tIC, ic, &read_buffer[0]);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	4618      	mov	r0, r3
 800188e:	f003 ff8b 	bl	80057a8 <adBms6830ParseComm>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001892:	2300      	movs	r3, #0
 8001894:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001898:	e022      	b.n	80018e0 <adBmsReadData+0x510>
      {
        ic[cic].cccrc.comm_pec = pec_error[cic];
 800189a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	441a      	add	r2, r3
 80018a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018a6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	440b      	add	r3, r1
 80018b2:	7812      	ldrb	r2, [r2, #0]
 80018b4:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80018b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	441a      	add	r2, r3
 80018c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018c4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	440b      	add	r3, r1
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80018d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018da:	3301      	adds	r3, #1
 80018dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80018e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d3d7      	bcc.n	800189a <adBmsReadData+0x4ca>
      }
      break;
 80018ea:	e29b      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Pwm:
      adBms6830ParsePwm(tIC, ic, group, &read_buffer[0]);
 80018ec:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80018f0:	7bf8      	ldrb	r0, [r7, #15]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	f004 fa73 	bl	8005de0 <adBms6830ParsePwm>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001900:	e022      	b.n	8001948 <adBmsReadData+0x578>
      {
        ic[cic].cccrc.pwm_pec = pec_error[cic];
 8001902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	441a      	add	r2, r3
 800190a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800190e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	440b      	add	r3, r1
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	f883 2199 	strb.w	r2, [r3, #409]	@ 0x199
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001920:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	441a      	add	r2, r3
 8001928:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800192c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	440b      	add	r3, r1
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 800193e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001942:	3301      	adds	r3, #1
 8001944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001948:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3d7      	bcc.n	8001902 <adBmsReadData+0x532>
      }
      break;
 8001952:	e267      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Sid:
      adBms6830ParseSID(tIC, ic, &read_buffer[0]);
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f803 	bl	8005966 <adBms6830ParseSID>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001960:	2300      	movs	r3, #0
 8001962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001966:	e022      	b.n	80019ae <adBmsReadData+0x5de>
      {
        ic[cic].cccrc.sid_pec = pec_error[cic];
 8001968:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	441a      	add	r2, r3
 8001970:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001974:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	440b      	add	r3, r1
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001986:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	441a      	add	r2, r3
 800198e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001992:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	440b      	add	r3, r1
 800199e:	7812      	ldrb	r2, [r2, #0]
 80019a0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 80019a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80019a8:	3301      	adds	r3, #1
 80019aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80019ae:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3d7      	bcc.n	8001968 <adBmsReadData+0x598>
      }
      break;
 80019b8:	e234      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdcvall:
      /* 32 byte cell data + 2 byte pec */
      adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 80019ba:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80019be:	7bf8      	ldrb	r0, [r7, #15]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	f000 ff84 	bl	80028d0 <adBms6830ParseCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80019ce:	e022      	b.n	8001a16 <adBmsReadData+0x646>
      {							
        ic[cic].cccrc.cell_pec = pec_error[cic];
 80019d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	441a      	add	r2, r3
 80019d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019dc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	440b      	add	r3, r1
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 80019ee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	441a      	add	r2, r3
 80019f6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80019fa:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	440b      	add	r3, r1
 8001a06:	7812      	ldrb	r2, [r2, #0]
 8001a08:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001a10:	3301      	adds	r3, #1
 8001a12:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001a16:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3d7      	bcc.n	80019d0 <adBmsReadData+0x600>
      }
      break;
 8001a20:	e200      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdacall:
      /* 32 byte avg cell data + 2 byte pec */
      adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 8001a22:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001a26:	7bf8      	ldrb	r0, [r7, #15]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	f001 fa2c 	bl	8002e88 <adBms6830ParseAverageCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001a36:	e022      	b.n	8001a7e <adBmsReadData+0x6ae>
      {							
        ic[cic].cccrc.acell_pec = pec_error[cic];
 8001a38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	441a      	add	r2, r3
 8001a40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a44:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	440b      	add	r3, r1
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001a56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	441a      	add	r2, r3
 8001a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a62:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001a66:	fb01 f303 	mul.w	r3, r1, r3
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001a7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3d7      	bcc.n	8001a38 <adBmsReadData+0x668>
      }
      break;
 8001a88:	e1cc      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdsall:
      /* 32 byte scell volt data + 2 byte pec */
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[0]);
 8001a8a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001a8e:	7bf8      	ldrb	r0, [r7, #15]
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	f001 fcf4 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a9e:	e022      	b.n	8001ae6 <adBmsReadData+0x716>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 8001aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aac:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	440b      	add	r3, r1
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ae6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3d7      	bcc.n	8001aa0 <adBmsReadData+0x6d0>
      }
      break;
 8001af0:	e198      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdfcall:
      /* 32 byte fcell data + 2 byte pec */
      adBms6830ParseFCell(tIC, ic, group, &read_buffer[0]);
 8001af2:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001af6:	7bf8      	ldrb	r0, [r7, #15]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	f001 ffbc 	bl	8003a78 <adBms6830ParseFCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b06:	e022      	b.n	8001b4e <adBmsReadData+0x77e>
      {							
        ic[cic].cccrc.fcell_pec = pec_error[cic];
 8001b08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	441a      	add	r2, r3
 8001b10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b14:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b18:	fb01 f303 	mul.w	r3, r1, r3
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	440b      	add	r3, r1
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001b26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	441a      	add	r2, r3
 8001b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b32:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b4e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3d7      	bcc.n	8001b08 <adBmsReadData+0x738>
      }
      break;
 8001b58:	e164      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdcsall:
      /* 64 byte + 2 byte pec = 32 byte cell data + 32 byte scell volt data */
      adBms6830ParseCell(tIC, ic, group, &read_buffer[0]);
 8001b5a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001b5e:	7bf8      	ldrb	r0, [r7, #15]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	f000 feb4 	bl	80028d0 <adBms6830ParseCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001b6e:	e022      	b.n	8001bb6 <adBmsReadData+0x7e6>
      {							
        ic[cic].cccrc.cell_pec = pec_error[cic];
 8001b70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	441a      	add	r2, r3
 8001b78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b7c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	440b      	add	r3, r1
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001b8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	441a      	add	r2, r3
 8001b96:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001b9a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	7812      	ldrb	r2, [r2, #0]
 8001ba8:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001bac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001bb6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3d7      	bcc.n	8001b70 <adBmsReadData+0x7a0>
      }
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[32]);
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001bc8:	7bf8      	ldrb	r0, [r7, #15]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	f001 fc58 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001bd6:	e022      	b.n	8001c1e <adBmsReadData+0x84e>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 8001bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	441a      	add	r2, r3
 8001be0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001be4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	440b      	add	r3, r1
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c02:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001c14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001c1e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3d7      	bcc.n	8001bd8 <adBmsReadData+0x808>
      }
      break;
 8001c28:	e0fc      	b.n	8001e24 <adBmsReadData+0xa54>
      
    case Rdacsall:
      /* 64 byte + 2 byte pec = 32 byte avg cell data + 32 byte scell volt data */
      adBms6830ParseAverageCell(tIC, ic, group, &read_buffer[0]);
 8001c2a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001c2e:	7bf8      	ldrb	r0, [r7, #15]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	f001 f928 	bl	8002e88 <adBms6830ParseAverageCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001c3e:	e022      	b.n	8001c86 <adBmsReadData+0x8b6>
      {							
        ic[cic].cccrc.acell_pec = pec_error[cic];
 8001c40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	441a      	add	r2, r3
 8001c48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c4c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	440b      	add	r3, r1
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	f883 2192 	strb.w	r2, [r3, #402]	@ 0x192
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	441a      	add	r2, r3
 8001c66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c6a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	440b      	add	r3, r1
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c80:	3301      	adds	r3, #1
 8001c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001c86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3d7      	bcc.n	8001c40 <adBmsReadData+0x870>
      }
      adBms6830ParseSCell(tIC, ic, group, &read_buffer[32]);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	3320      	adds	r3, #32
 8001c94:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001c98:	7bf8      	ldrb	r0, [r7, #15]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	f001 fbf0 	bl	8003480 <adBms6830ParseSCell>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001ca6:	e022      	b.n	8001cee <adBmsReadData+0x91e>
      {							
        ic[cic].cccrc.scell_pec = pec_error[cic];
 8001ca8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	441a      	add	r2, r3
 8001cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cb4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	440b      	add	r3, r1
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	f883 2193 	strb.w	r2, [r3, #403]	@ 0x193
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001cc6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	441a      	add	r2, r3
 8001cce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001cd2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	440b      	add	r3, r1
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001ce4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001cee:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3d7      	bcc.n	8001ca8 <adBmsReadData+0x8d8>
      }
      break;
 8001cf8:	e094      	b.n	8001e24 <adBmsReadData+0xa54>
    case Rdasall:
      /* 68 byte + 2 byte pec: 
      24 byte gpio data + 20 byte Redundant gpio data +
      24 byte status A(6 byte), B(6 byte), C(4 byte), D(6 byte) & E(2 byte)
      */
      adBms6830ParseAux(tIC, ic, group, &read_buffer[0]);
 8001cfa:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001cfe:	7bf8      	ldrb	r0, [r7, #15]
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	f002 f9b4 	bl	8004070 <adBms6830ParseAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001d0e:	e022      	b.n	8001d56 <adBmsReadData+0x986>
      {
        ic[cic].cccrc.aux_pec = pec_error[cic];
 8001d10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	441a      	add	r2, r3
 8001d18:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d1c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	440b      	add	r3, r1
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001d2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	441a      	add	r2, r3
 8001d36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d3a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	440b      	add	r3, r1
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001d4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001d50:	3301      	adds	r3, #1
 8001d52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001d56:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d3d7      	bcc.n	8001d10 <adBmsReadData+0x940>
      }
      adBms6830ParseRAux(tIC, ic, group, &read_buffer[24]);
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	3318      	adds	r3, #24
 8001d64:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001d68:	7bf8      	ldrb	r0, [r7, #15]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	f002 fbd0 	bl	8004510 <adBms6830ParseRAux>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3020 	strb.w	r3, [r7, #32]
 8001d76:	e022      	b.n	8001dbe <adBmsReadData+0x9ee>
      {
        ic[cic].cccrc.raux_pec = pec_error[cic];
 8001d78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	441a      	add	r2, r3
 8001d80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d84:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	440b      	add	r3, r1
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001d96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001da2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	440b      	add	r3, r1
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001db4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001db8:	3301      	adds	r3, #1
 8001dba:	f887 3020 	strb.w	r3, [r7, #32]
 8001dbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3d7      	bcc.n	8001d78 <adBmsReadData+0x9a8>
      }
      adBms6830ParseStatus(tIC, ic, group, &read_buffer[44]);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	332c      	adds	r3, #44	@ 0x2c
 8001dcc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001dd0:	7bf8      	ldrb	r0, [r7, #15]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	f003 fc6e 	bl	80056b4 <adBms6830ParseStatus>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	77fb      	strb	r3, [r7, #31]
 8001ddc:	e01c      	b.n	8001e18 <adBmsReadData+0xa48>
      {
        ic[cic].cccrc.stat_pec = pec_error[cic];
 8001dde:	7ffb      	ldrb	r3, [r7, #31]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	441a      	add	r2, r3
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
 8001de6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	440b      	add	r3, r1
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
        ic[cic].cccrc.cmd_cntr = cmd_count[cic];
 8001df8:	7ffb      	ldrb	r3, [r7, #31]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	441a      	add	r2, r3
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8001e04:	fb01 f303 	mul.w	r3, r1, r3
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	f883 218f 	strb.w	r2, [r3, #399]	@ 0x18f
      for (uint8_t cic = 0; cic < tIC; cic++)
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
 8001e14:	3301      	adds	r3, #1
 8001e16:	77fb      	strb	r3, [r7, #31]
 8001e18:	7ffa      	ldrb	r2, [r7, #31]
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3de      	bcc.n	8001dde <adBmsReadData+0xa0e>
      }
      break;
 8001e20:	e000      	b.n	8001e24 <adBmsReadData+0xa54>
      
    default:
      break;
 8001e22:	bf00      	nop
    }
  }
  free(read_buffer);
 8001e24:	69b8      	ldr	r0, [r7, #24]
 8001e26:	f010 fb65 	bl	80124f4 <free>
  free(pec_error); 
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f010 fb62 	bl	80124f4 <free>
  free(cmd_count); 
 8001e30:	6938      	ldr	r0, [r7, #16]
 8001e32:	f010 fb5f 	bl	80124f4 <free>
}
 8001e36:	bf00      	nop
 8001e38:	3738      	adds	r7, #56	@ 0x38
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <spiWriteData>:
(
uint8_t tIC, 
uint8_t tx_cmd[2], 
uint8_t *data
)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	@ 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	73fb      	strb	r3, [r7, #15]
  uint8_t BYTES_IN_REG = TX_DATA;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t CMD_LEN = 4 + (RX_DATA * tIC);
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint16_t data_pec, cmd_pec;
  uint8_t *cmd, copyArray[TX_DATA], src_address = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t cmd_index;
  cmd = (uint8_t *)calloc(CMD_LEN, sizeof(uint8_t)); 
 8001e66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f010 f841 	bl	8011ef4 <calloc>
 8001e72:	4603      	mov	r3, r0
 8001e74:	61fb      	str	r3, [r7, #28]
  if(cmd == NULL)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d105      	bne.n	8001e88 <spiWriteData+0x48>
  {
#ifdef MBED
    pc.printf(" Failed to allocate cmd array memory \n");
#else
    printf(" Failed to allocate cmd array memory \n");
 8001e7c:	4851      	ldr	r0, [pc, #324]	@ (8001fc4 <spiWriteData+0x184>)
 8001e7e:	f011 ff63 	bl	8013d48 <puts>
#endif  
    exit(0);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f010 f852 	bl	8011f2c <exit>
  }
  else
  {
    cmd[0] = tx_cmd[0];
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	701a      	strb	r2, [r3, #0]
    cmd[1] = tx_cmd[1];
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3301      	adds	r3, #1
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	7852      	ldrb	r2, [r2, #1]
 8001e98:	701a      	strb	r2, [r3, #0]
    cmd_pec = Pec15_Calc(2, cmd);
 8001e9a:	69f9      	ldr	r1, [r7, #28]
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff f8c7 	bl	8001030 <Pec15_Calc>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	837b      	strh	r3, [r7, #26]
    cmd[2] = (uint8_t)(cmd_pec >> 8);
 8001ea6:	8b7b      	ldrh	r3, [r7, #26]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
    cmd[3] = (uint8_t)(cmd_pec);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3303      	adds	r3, #3
 8001eb8:	8b7a      	ldrh	r2, [r7, #26]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
    cmd_index = 4;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* executes for each LTC68xx, this loops starts with the last IC on the stack */
    for (uint8_t current_ic = tIC; current_ic > 0; current_ic--)                
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001eca:	e064      	b.n	8001f96 <spiWriteData+0x156>
    {                                                                         
      src_address = ((current_ic-1) * TX_DATA); 
 8001ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	0052      	lsls	r2, r2, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3b06      	subs	r3, #6
 8001edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      /* The first configuration written is received by the last IC in the daisy chain */
      for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001ee6:	e01d      	b.n	8001f24 <spiWriteData+0xe4>
      {
        cmd[cmd_index] = data[((current_ic-1)*6)+current_byte];
 8001ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	4613      	mov	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001efc:	4413      	add	r3, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	441a      	add	r2, r3
 8001f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f08:	69f9      	ldr	r1, [r7, #28]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	701a      	strb	r2, [r3, #0]
        cmd_index = cmd_index + 1;
 8001f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f14:	3301      	adds	r3, #1
 8001f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001f1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001f24:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001f28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3db      	bcc.n	8001ee8 <spiWriteData+0xa8>
      }
      /* Copy each ic correspond data + pec value for calculate data pec */
      memcpy(&copyArray[0], &data[src_address], TX_DATA); /* dst, src, size */
 8001f30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	18d1      	adds	r1, r2, r3
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	2206      	movs	r2, #6
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f011 ff66 	bl	8013e10 <memcpy>
      /* calculating the PEC for each Ics configuration register data */
      data_pec = (uint16_t)pec10_calc(false, BYTES_IN_REG, &copyArray[0]);  
 8001f44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f48:	f107 0210 	add.w	r2, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff f8a2 	bl	8001098 <pec10_calc>
 8001f54:	4603      	mov	r3, r0
 8001f56:	833b      	strh	r3, [r7, #24]
      cmd[cmd_index] = (uint8_t)(data_pec >> 8);
 8001f58:	8b3b      	ldrh	r3, [r7, #24]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	b299      	uxth	r1, r3
 8001f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8001f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      cmd[cmd_index] = (uint8_t)data_pec;
 8001f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	8b3a      	ldrh	r2, [r7, #24]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
      cmd_index = cmd_index + 1;
 8001f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f86:	3301      	adds	r3, #1
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for (uint8_t current_ic = tIC; current_ic > 0; current_ic--)                
 8001f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f90:	3b01      	subs	r3, #1
 8001f92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d196      	bne.n	8001ecc <spiWriteData+0x8c>
    }
    adBmsCsLow();
 8001f9e:	f005 f8df 	bl	8007160 <adBmsCsLow>
    spiWriteBytes(CMD_LEN, &cmd[0]);
 8001fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	69f9      	ldr	r1, [r7, #28]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 f8f0 	bl	8007190 <spiWriteBytes>
    adBmsCsHigh();
 8001fb0:	f005 f8e2 	bl	8007178 <adBmsCsHigh>
  }
  free(cmd); 
 8001fb4:	69f8      	ldr	r0, [r7, #28]
 8001fb6:	f010 fa9d 	bl	80124f4 <free>
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	@ 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	080167e8 	.word	0x080167e8

08001fc8 <adBmsWriteData>:
* @return None 
*
*******************************************************************************
*/
void adBmsWriteData(uint8_t tIC, cell_asic *ic, uint8_t cmd_arg[2], TYPE type, GRP group)
{	  
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	73bb      	strb	r3, [r7, #14]
  uint8_t data_len = TX_DATA, write_size = (TX_DATA * tIC);
 8001fdc:	2306      	movs	r3, #6
 8001fde:	76fb      	strb	r3, [r7, #27]
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	0052      	lsls	r2, r2, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	76bb      	strb	r3, [r7, #26]
  uint8_t *write_buffer = (uint8_t *)calloc(write_size, sizeof(uint8_t));
 8001fec:	7ebb      	ldrb	r3, [r7, #26]
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f00f ff7f 	bl	8011ef4 <calloc>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	617b      	str	r3, [r7, #20]
  if(write_buffer == NULL)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <adBmsWriteData+0x44>
  {
#ifdef MBED
    pc.printf(" Failed to allocate write_buffer array memory \n");
#else
    printf(" Failed to allocate write_buffer array memory \n");
 8002000:	48bb      	ldr	r0, [pc, #748]	@ (80022f0 <adBmsWriteData+0x328>)
 8002002:	f011 fea1 	bl	8013d48 <puts>
#endif
    exit(0);
 8002006:	2000      	movs	r0, #0
 8002008:	f00f ff90 	bl	8011f2c <exit>
  }
  else
  {
    switch (type)
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	3b04      	subs	r3, #4
 8002010:	2b07      	cmp	r3, #7
 8002012:	f200 816f 	bhi.w	80022f4 <adBmsWriteData+0x32c>
 8002016:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <adBmsWriteData+0x54>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	080021af 	.word	0x080021af
 8002020:	080022f5 	.word	0x080022f5
 8002024:	080022f5 	.word	0x080022f5
 8002028:	080022f5 	.word	0x080022f5
 800202c:	0800203d 	.word	0x0800203d
 8002030:	08002139 	.word	0x08002139
 8002034:	080022f5 	.word	0x080022f5
 8002038:	08002293 	.word	0x08002293
    {	   
    case Config:	
      switch (group)
 800203c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <adBmsWriteData+0x82>
 8002044:	2b02      	cmp	r3, #2
 8002046:	d03b      	beq.n	80020c0 <adBmsWriteData+0xf8>
          }		
        }
        break;

      default:
    	  break;
 8002048:	e075      	b.n	8002136 <adBmsWriteData+0x16e>
        adBms6830CreateConfiga(tIC, &ic[0]);
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fee7 	bl	8005e22 <adBms6830CreateConfiga>
        for (uint8_t cic = 0; cic < tIC; cic++)
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800205a:	e02b      	b.n	80020b4 <adBmsWriteData+0xec>
          for (uint8_t data = 0; data < data_len; data++)
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002062:	e01d      	b.n	80020a0 <adBmsWriteData+0xd8>
            write_buffer[(cic * data_len) + data] = ic[cic].configa.tx_data[data];
 8002064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002068:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	18d1      	adds	r1, r2, r3
 8002074:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800207c:	7ef8      	ldrb	r0, [r7, #27]
 800207e:	fb03 f000 	mul.w	r0, r3, r0
 8002082:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002086:	4403      	add	r3, r0
 8002088:	4618      	mov	r0, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	4403      	add	r3, r0
 800208e:	440a      	add	r2, r1
 8002090:	f892 211f 	ldrb.w	r2, [r2, #287]	@ 0x11f
 8002094:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 8002096:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800209a:	3301      	adds	r3, #1
 800209c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80020a4:	7efb      	ldrb	r3, [r7, #27]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3dc      	bcc.n	8002064 <adBmsWriteData+0x9c>
        for (uint8_t cic = 0; cic < tIC; cic++)
 80020aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020ae:	3301      	adds	r3, #1
 80020b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3ce      	bcc.n	800205c <adBmsWriteData+0x94>
        break;
 80020be:	e03a      	b.n	8002136 <adBmsWriteData+0x16e>
        adBms6830CreateConfigb(tIC, &ic[0]);
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 ffbc 	bl	8006042 <adBms6830CreateConfigb>
        for (uint8_t cic = 0; cic < tIC; cic++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80020d0:	e02b      	b.n	800212a <adBmsWriteData+0x162>
          for (uint8_t data = 0; data < data_len; data++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80020d8:	e01d      	b.n	8002116 <adBmsWriteData+0x14e>
            write_buffer[(cic * data_len) + data] = ic[cic].configb.tx_data[data];
 80020da:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020de:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	18d1      	adds	r1, r2, r3
 80020ea:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80020f2:	7ef8      	ldrb	r0, [r7, #27]
 80020f4:	fb03 f000 	mul.w	r0, r3, r0
 80020f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020fc:	4403      	add	r3, r0
 80020fe:	4618      	mov	r0, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4403      	add	r3, r0
 8002104:	440a      	add	r2, r1
 8002106:	f892 212d 	ldrb.w	r2, [r2, #301]	@ 0x12d
 800210a:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 800210c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002116:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800211a:	7efb      	ldrb	r3, [r7, #27]
 800211c:	429a      	cmp	r2, r3
 800211e:	d3dc      	bcc.n	80020da <adBmsWriteData+0x112>
        for (uint8_t cic = 0; cic < tIC; cic++)
 8002120:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002124:	3301      	adds	r3, #1
 8002126:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800212a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3ce      	bcc.n	80020d2 <adBmsWriteData+0x10a>
        break;
 8002134:	bf00      	nop
      }
      break;
 8002136:	e0de      	b.n	80022f6 <adBmsWriteData+0x32e>
      
    case Comm:
      adBms6830CreateComm(tIC, &ic[0]);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	4618      	mov	r0, r3
 800213e:	f004 f990 	bl	8006462 <adBms6830CreateComm>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8002142:	2300      	movs	r3, #0
 8002144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002148:	e02b      	b.n	80021a2 <adBmsWriteData+0x1da>
      {
        for (uint8_t data = 0; data < data_len; data++)
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002150:	e01d      	b.n	800218e <adBmsWriteData+0x1c6>
        {
          write_buffer[(cic * data_len) + data] = ic[cic].com.tx_data[data];
 8002152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002156:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	18d1      	adds	r1, r2, r3
 8002162:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002166:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800216a:	7ef8      	ldrb	r0, [r7, #27]
 800216c:	fb03 f000 	mul.w	r0, r3, r0
 8002170:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002174:	4403      	add	r3, r0
 8002176:	4618      	mov	r0, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4403      	add	r3, r0
 800217c:	440a      	add	r2, r1
 800217e:	f892 2157 	ldrb.w	r2, [r2, #343]	@ 0x157
 8002182:	701a      	strb	r2, [r3, #0]
        for (uint8_t data = 0; data < data_len; data++)
 8002184:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002188:	3301      	adds	r3, #1
 800218a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800218e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002192:	7efb      	ldrb	r3, [r7, #27]
 8002194:	429a      	cmp	r2, r3
 8002196:	d3dc      	bcc.n	8002152 <adBmsWriteData+0x18a>
      for (uint8_t cic = 0; cic < tIC; cic++)
 8002198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800219c:	3301      	adds	r3, #1
 800219e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021a2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d3ce      	bcc.n	800214a <adBmsWriteData+0x182>
        }	
      }
      break;
 80021ac:	e0a3      	b.n	80022f6 <adBmsWriteData+0x32e>
      
    case Pwm:
      switch (group)
 80021ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <adBmsWriteData+0x1f4>
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d03b      	beq.n	8002232 <adBmsWriteData+0x26a>
          }	
        }
        break;

      default:
    	  break;
 80021ba:	e069      	b.n	8002290 <adBmsWriteData+0x2c8>
        adBms6830CreatePwma(tIC, &ic[0]);
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f004 fa0b 	bl	80065dc <adBms6830CreatePwma>
        for (uint8_t cic = 0; cic < tIC; cic++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80021cc:	e02b      	b.n	8002226 <adBmsWriteData+0x25e>
          for (uint8_t data = 0; data < data_len; data++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3020 	strb.w	r3, [r7, #32]
 80021d4:	e01d      	b.n	8002212 <adBmsWriteData+0x24a>
            write_buffer[(cic * data_len) + data] = ic[cic].pwma.tx_data[data];
 80021d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80021da:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80021de:	fb02 f303 	mul.w	r3, r2, r3
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	18d1      	adds	r1, r2, r3
 80021e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80021ee:	7ef8      	ldrb	r0, [r7, #27]
 80021f0:	fb03 f000 	mul.w	r0, r3, r0
 80021f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021f8:	4403      	add	r3, r0
 80021fa:	4618      	mov	r0, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	4403      	add	r3, r0
 8002200:	440a      	add	r2, r1
 8002202:	f892 2165 	ldrb.w	r2, [r2, #357]	@ 0x165
 8002206:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 8002208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800220c:	3301      	adds	r3, #1
 800220e:	f887 3020 	strb.w	r3, [r7, #32]
 8002212:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002216:	7efb      	ldrb	r3, [r7, #27]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3dc      	bcc.n	80021d6 <adBmsWriteData+0x20e>
        for (uint8_t cic = 0; cic < tIC; cic++)
 800221c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002220:	3301      	adds	r3, #1
 8002222:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8002226:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3ce      	bcc.n	80021ce <adBmsWriteData+0x206>
        break;   
 8002230:	e02e      	b.n	8002290 <adBmsWriteData+0x2c8>
        adBms6830CreatePwmb(tIC, &ic[0]);
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fac6 	bl	80067c8 <adBms6830CreatePwmb>
        for (uint8_t cic = 0; cic < tIC; cic++)
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
 8002240:	e021      	b.n	8002286 <adBmsWriteData+0x2be>
          for (uint8_t data = 0; data < data_len; data++)
 8002242:	2300      	movs	r3, #0
 8002244:	77bb      	strb	r3, [r7, #30]
 8002246:	e017      	b.n	8002278 <adBmsWriteData+0x2b0>
            write_buffer[(cic * data_len) + data] = ic[cic].pwmb.tx_data[data];
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	18d1      	adds	r1, r2, r3
 8002256:	7fba      	ldrb	r2, [r7, #30]
 8002258:	7ffb      	ldrb	r3, [r7, #31]
 800225a:	7ef8      	ldrb	r0, [r7, #27]
 800225c:	fb03 f000 	mul.w	r0, r3, r0
 8002260:	7fbb      	ldrb	r3, [r7, #30]
 8002262:	4403      	add	r3, r0
 8002264:	4618      	mov	r0, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	4403      	add	r3, r0
 800226a:	440a      	add	r2, r1
 800226c:	f892 2173 	ldrb.w	r2, [r2, #371]	@ 0x173
 8002270:	701a      	strb	r2, [r3, #0]
          for (uint8_t data = 0; data < data_len; data++)
 8002272:	7fbb      	ldrb	r3, [r7, #30]
 8002274:	3301      	adds	r3, #1
 8002276:	77bb      	strb	r3, [r7, #30]
 8002278:	7fba      	ldrb	r2, [r7, #30]
 800227a:	7efb      	ldrb	r3, [r7, #27]
 800227c:	429a      	cmp	r2, r3
 800227e:	d3e3      	bcc.n	8002248 <adBmsWriteData+0x280>
        for (uint8_t cic = 0; cic < tIC; cic++)
 8002280:	7ffb      	ldrb	r3, [r7, #31]
 8002282:	3301      	adds	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	7ffa      	ldrb	r2, [r7, #31]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3d9      	bcc.n	8002242 <adBmsWriteData+0x27a>
        break;
 800228e:	bf00      	nop
      }
      break;
 8002290:	e031      	b.n	80022f6 <adBmsWriteData+0x32e>
      
    case Clrflag:	
      adBms6830CreateClrflagData(tIC, &ic[0]);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f003 ff95 	bl	80061c6 <adBms6830CreateClrflagData>
      for (uint8_t cic = 0; cic < tIC; cic++)
 800229c:	2300      	movs	r3, #0
 800229e:	777b      	strb	r3, [r7, #29]
 80022a0:	e021      	b.n	80022e6 <adBmsWriteData+0x31e>
      {
        for (uint8_t data = 0; data < data_len; data++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	773b      	strb	r3, [r7, #28]
 80022a6:	e017      	b.n	80022d8 <adBmsWriteData+0x310>
        {
          write_buffer[(cic * data_len) + data] = ic[cic].clrflag.tx_data[data];
 80022a8:	7f7b      	ldrb	r3, [r7, #29]
 80022aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	18d1      	adds	r1, r2, r3
 80022b6:	7f3a      	ldrb	r2, [r7, #28]
 80022b8:	7f7b      	ldrb	r3, [r7, #29]
 80022ba:	7ef8      	ldrb	r0, [r7, #27]
 80022bc:	fb03 f000 	mul.w	r0, r3, r0
 80022c0:	7f3b      	ldrb	r3, [r7, #28]
 80022c2:	4403      	add	r3, r0
 80022c4:	4618      	mov	r0, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	4403      	add	r3, r0
 80022ca:	440a      	add	r2, r1
 80022cc:	f892 213b 	ldrb.w	r2, [r2, #315]	@ 0x13b
 80022d0:	701a      	strb	r2, [r3, #0]
        for (uint8_t data = 0; data < data_len; data++)
 80022d2:	7f3b      	ldrb	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	773b      	strb	r3, [r7, #28]
 80022d8:	7f3a      	ldrb	r2, [r7, #28]
 80022da:	7efb      	ldrb	r3, [r7, #27]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3e3      	bcc.n	80022a8 <adBmsWriteData+0x2e0>
      for (uint8_t cic = 0; cic < tIC; cic++)
 80022e0:	7f7b      	ldrb	r3, [r7, #29]
 80022e2:	3301      	adds	r3, #1
 80022e4:	777b      	strb	r3, [r7, #29]
 80022e6:	7f7a      	ldrb	r2, [r7, #29]
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3d9      	bcc.n	80022a2 <adBmsWriteData+0x2da>
        }
      }
      break;
 80022ee:	e002      	b.n	80022f6 <adBmsWriteData+0x32e>
 80022f0:	08016810 	.word	0x08016810
      
    default:
      break;
 80022f4:	bf00      	nop
    }
  }
  adBmsWakeupIc(tIC);
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 ff7b 	bl	80071f4 <adBmsWakeupIc>
  spiWriteData(tIC, cmd_arg, &write_buffer[0]);	
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd9b 	bl	8001e40 <spiWriteData>
  free(write_buffer);
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f010 f8f2 	bl	80124f4 <free>
}
 8002310:	bf00      	nop
 8002312:	3728      	adds	r7, #40	@ 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <adBms6830_Adcv>:
CONT cont,
DCP dcp,
RSTF rstf,
OW_C_S owcs
)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	4604      	mov	r4, r0
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4623      	mov	r3, r4
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	4603      	mov	r3, r0
 800232c:	71bb      	strb	r3, [r7, #6]
 800232e:	460b      	mov	r3, r1
 8002330:	717b      	strb	r3, [r7, #5]
 8002332:	4613      	mov	r3, r2
 8002334:	713b      	strb	r3, [r7, #4]
  uint8_t cmd[2];
  cmd[0] = 0x02 + rd;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	3302      	adds	r3, #2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	733b      	strb	r3, [r7, #12]
  cmd[1] = (cont<<7)+(dcp<<4)+(rstf<<2)+(owcs & 0x03) + 0x60;
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	01db      	lsls	r3, r3, #7
 8002342:	b2da      	uxtb	r2, r3
 8002344:	797b      	ldrb	r3, [r7, #5]
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4413      	add	r3, r2
 800234c:	b2da      	uxtb	r2, r3
 800234e:	793b      	ldrb	r3, [r7, #4]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b2da      	uxtb	r2, r3
 8002358:	f897 3020 	ldrb.w	r3, [r7, #32]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4413      	add	r3, r2
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3360      	adds	r3, #96	@ 0x60
 8002368:	b2db      	uxtb	r3, r3
 800236a:	737b      	strb	r3, [r7, #13]
  spiSendCmd(cmd);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fefd 	bl	8001170 <spiSendCmd>
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}

0800237e <adBms6830_Snap>:
* @return None
*
*******************************************************************************
*/
void adBms6830_Snap()
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
  uint8_t cmd[2];
  cmd[0] = 0x00;
 8002384:	2300      	movs	r3, #0
 8002386:	713b      	strb	r3, [r7, #4]
  cmd[1] = 0x2D;
 8002388:	232d      	movs	r3, #45	@ 0x2d
 800238a:	717b      	strb	r3, [r7, #5]
  spiSendCmd(cmd);
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe feee 	bl	8001170 <spiSendCmd>
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <adBms6830_Unsnap>:
* @return None
*
*******************************************************************************
*/
void adBms6830_Unsnap()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  uint8_t cmd[2];
  cmd[0] = 0x00;
 80023a2:	2300      	movs	r3, #0
 80023a4:	713b      	strb	r3, [r7, #4]
  cmd[1] = 0x2F;
 80023a6:	232f      	movs	r3, #47	@ 0x2f
 80023a8:	717b      	strb	r3, [r7, #5]
  spiSendCmd(cmd);
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fedf 	bl	8001170 <spiSendCmd>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <adBms6830_Adax>:
(
OW_AUX owaux, 							
PUP pup,
CH ch
)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	460b      	mov	r3, r1
 80023c6:	71bb      	strb	r3, [r7, #6]
 80023c8:	4613      	mov	r3, r2
 80023ca:	717b      	strb	r3, [r7, #5]
  uint8_t cmd[2];
  cmd[0] = 0x04 + owaux;
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	3304      	adds	r3, #4
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	733b      	strb	r3, [r7, #12]
  cmd[1] = (pup << 7) + (((ch >>4)&0x01)<<6) + (ch & 0x0F) + 0x10;
 80023d4:	79bb      	ldrb	r3, [r7, #6]
 80023d6:	01db      	lsls	r3, r3, #7
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	797b      	ldrb	r3, [r7, #5]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	797b      	ldrb	r3, [r7, #5]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	3310      	adds	r3, #16
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	737b      	strb	r3, [r7, #13]
  spiSendCmd(cmd);
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe feb3 	bl	8001170 <spiSendCmd>
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <ConfigB_DccBits>:
 * @return uint16_t      Value suitable for the `dcc` field in Config-B.
 *
 *******************************************************************************
 */
uint16_t ConfigB_DccBits(uint16_t mask, DCC_BIT dccbit)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	460a      	mov	r2, r1
 800241c:	80fb      	strh	r3, [r7, #6]
 800241e:	4613      	mov	r3, r2
 8002420:	717b      	strb	r3, [r7, #5]
    if (dccbit == DCC_BIT_SET)
 8002422:	797b      	ldrb	r3, [r7, #5]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <ConfigB_DccBits+0x1a>
    {
        /* Enable the requested DCC bits */
        return mask;
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	e000      	b.n	800242e <ConfigB_DccBits+0x1c>
    }
    else
    {
        /* Clearing: caller should clear these bits with AND & ~mask */
        return 0;
 800242c:	2300      	movs	r3, #0
    }
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <adBms6830ParseConfiga>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfiga(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800244c:	2300      	movs	r3, #0
 800244e:	75bb      	strb	r3, [r7, #22]
 8002450:	e133      	b.n	80026ba <adBms6830ParseConfiga+0x280>
  {
    memcpy(&ic[curr_ic].configa.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8002452:	7dbb      	ldrb	r3, [r7, #22]
 8002454:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	4413      	add	r3, r2
 8002460:	f203 1025 	addw	r0, r3, #293	@ 0x125
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	2208      	movs	r2, #8
 800246c:	4619      	mov	r1, r3
 800246e:	f011 fccf 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8002472:	7dbb      	ldrb	r3, [r7, #22]
 8002474:	3301      	adds	r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	75fb      	strb	r3, [r7, #23]

    ic[curr_ic].rx_cfga.cth = (ic[curr_ic].configa.rx_data[0] & 0x07);
 800247c:	7dbb      	ldrb	r3, [r7, #22]
 800247e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	4413      	add	r3, r2
 800248a:	f893 1125 	ldrb.w	r1, [r3, #293]	@ 0x125
 800248e:	7dbb      	ldrb	r3, [r7, #22]
 8002490:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	441a      	add	r2, r3
 800249c:	460b      	mov	r3, r1
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	b2d9      	uxtb	r1, r3
 80024a4:	7993      	ldrb	r3, [r2, #6]
 80024a6:	f361 0343 	bfi	r3, r1, #1, #3
 80024aa:	7193      	strb	r3, [r2, #6]
    ic[curr_ic].rx_cfga.refon   = (ic[curr_ic].configa.rx_data[0] & 0x80) >> 7;
 80024ac:	7dbb      	ldrb	r3, [r7, #22]
 80024ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	4413      	add	r3, r2
 80024ba:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80024be:	09db      	lsrs	r3, r3, #7
 80024c0:	b2d9      	uxtb	r1, r3
 80024c2:	7dbb      	ldrb	r3, [r7, #22]
 80024c4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	441a      	add	r2, r3
 80024d0:	460b      	mov	r3, r1
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	7993      	ldrb	r3, [r2, #6]
 80024da:	f361 0300 	bfi	r3, r1, #0, #1
 80024de:	7193      	strb	r3, [r2, #6]

    ic[curr_ic].rx_cfga.flag_d  = (ic[curr_ic].configa.rx_data[1] & 0xFF);
 80024e0:	7dbb      	ldrb	r3, [r7, #22]
 80024e2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	441a      	add	r2, r3
 80024ee:	7dbb      	ldrb	r3, [r7, #22]
 80024f0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	440b      	add	r3, r1
 80024fc:	f892 2126 	ldrb.w	r2, [r2, #294]	@ 0x126
 8002500:	71da      	strb	r2, [r3, #7]

    ic[curr_ic].rx_cfga.soakon   = (ic[curr_ic].configa.rx_data[2] & 0x80) >> 7;
 8002502:	7dbb      	ldrb	r3, [r7, #22]
 8002504:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	4413      	add	r3, r2
 8002510:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 8002514:	09db      	lsrs	r3, r3, #7
 8002516:	b2d9      	uxtb	r1, r3
 8002518:	7dbb      	ldrb	r3, [r7, #22]
 800251a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	441a      	add	r2, r3
 8002526:	460b      	mov	r3, r1
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	b2d9      	uxtb	r1, r3
 800252e:	7a13      	ldrb	r3, [r2, #8]
 8002530:	f361 0300 	bfi	r3, r1, #0, #1
 8002534:	7213      	strb	r3, [r2, #8]
    ic[curr_ic].rx_cfga.owrng    = (((ic[curr_ic].configa.rx_data[2] & 0x40) >> 6));
 8002536:	7dbb      	ldrb	r3, [r7, #22]
 8002538:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	4413      	add	r3, r2
 8002544:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 8002548:	1199      	asrs	r1, r3, #6
 800254a:	7dbb      	ldrb	r3, [r7, #22]
 800254c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	441a      	add	r2, r3
 8002558:	460b      	mov	r3, r1
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	b2d9      	uxtb	r1, r3
 8002560:	7a13      	ldrb	r3, [r2, #8]
 8002562:	f361 0341 	bfi	r3, r1, #1, #1
 8002566:	7213      	strb	r3, [r2, #8]
    ic[curr_ic].rx_cfga.owa    = ( (ic[curr_ic].configa.rx_data[2] & 0x38) >> 3);
 8002568:	7dbb      	ldrb	r3, [r7, #22]
 800256a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 800257a:	10d9      	asrs	r1, r3, #3
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	441a      	add	r2, r3
 800258a:	460b      	mov	r3, r1
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	b2d9      	uxtb	r1, r3
 8002592:	7a13      	ldrb	r3, [r2, #8]
 8002594:	f361 0384 	bfi	r3, r1, #2, #3
 8002598:	7213      	strb	r3, [r2, #8]

    ic[curr_ic].rx_cfga.gpo        = ( (ic[curr_ic].configa.rx_data[3] & 0xFF)| ((ic[curr_ic].configa.rx_data[4] & 0x03) << 8) );
 800259a:	7dbb      	ldrb	r3, [r7, #22]
 800259c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	4413      	add	r3, r2
 80025a8:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	7dbb      	ldrb	r3, [r7, #22]
 80025b0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	440b      	add	r3, r1
 80025bc:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b219      	sxth	r1, r3
 80025d0:	7dbb      	ldrb	r3, [r7, #22]
 80025d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	441a      	add	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e4:	b299      	uxth	r1, r3
 80025e6:	8913      	ldrh	r3, [r2, #8]
 80025e8:	f361 134e 	bfi	r3, r1, #5, #10
 80025ec:	8113      	strh	r3, [r2, #8]

    ic[curr_ic].rx_cfga.snap   = ((ic[curr_ic].configa.rx_data[5] & 0x20) >> 5);
 80025ee:	7dbb      	ldrb	r3, [r7, #22]
 80025f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80025f4:	fb02 f303 	mul.w	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	4413      	add	r3, r2
 80025fc:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8002600:	1159      	asrs	r1, r3, #5
 8002602:	7dbb      	ldrb	r3, [r7, #22]
 8002604:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	441a      	add	r2, r3
 8002610:	460b      	mov	r3, r1
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	b2d9      	uxtb	r1, r3
 8002618:	7a53      	ldrb	r3, [r2, #9]
 800261a:	f361 13c7 	bfi	r3, r1, #7, #1
 800261e:	7253      	strb	r3, [r2, #9]
    ic[curr_ic].rx_cfga.mute_st   = ((ic[curr_ic].configa.rx_data[5] & 0x10) >> 4);
 8002620:	7dbb      	ldrb	r3, [r7, #22]
 8002622:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	4413      	add	r3, r2
 800262e:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8002632:	1119      	asrs	r1, r3, #4
 8002634:	7dbb      	ldrb	r3, [r7, #22]
 8002636:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	441a      	add	r2, r3
 8002642:	460b      	mov	r3, r1
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	b2d9      	uxtb	r1, r3
 800264a:	7a93      	ldrb	r3, [r2, #10]
 800264c:	f361 0300 	bfi	r3, r1, #0, #1
 8002650:	7293      	strb	r3, [r2, #10]
    ic[curr_ic].rx_cfga.comm_bk   = ((ic[curr_ic].configa.rx_data[5] & 0x08) >> 3);
 8002652:	7dbb      	ldrb	r3, [r7, #22]
 8002654:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	4413      	add	r3, r2
 8002660:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8002664:	10d9      	asrs	r1, r3, #3
 8002666:	7dbb      	ldrb	r3, [r7, #22]
 8002668:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800266c:	fb02 f303 	mul.w	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	441a      	add	r2, r3
 8002674:	460b      	mov	r3, r1
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	b2d9      	uxtb	r1, r3
 800267c:	7a93      	ldrb	r3, [r2, #10]
 800267e:	f361 0341 	bfi	r3, r1, #1, #1
 8002682:	7293      	strb	r3, [r2, #10]
    ic[curr_ic].rx_cfga.fc   = ((ic[curr_ic].configa.rx_data[5] & 0x07) >> 0);
 8002684:	7dbb      	ldrb	r3, [r7, #22]
 8002686:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4413      	add	r3, r2
 8002692:	f893 112a 	ldrb.w	r1, [r3, #298]	@ 0x12a
 8002696:	7dbb      	ldrb	r3, [r7, #22]
 8002698:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	441a      	add	r2, r3
 80026a4:	460b      	mov	r3, r1
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	b2d9      	uxtb	r1, r3
 80026ac:	7a93      	ldrb	r3, [r2, #10]
 80026ae:	f361 0384 	bfi	r3, r1, #2, #3
 80026b2:	7293      	strb	r3, [r2, #10]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80026b4:	7dbb      	ldrb	r3, [r7, #22]
 80026b6:	3301      	adds	r3, #1
 80026b8:	75bb      	strb	r3, [r7, #22]
 80026ba:	7dba      	ldrb	r2, [r7, #22]
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	429a      	cmp	r2, r3
 80026c0:	f4ff aec7 	bcc.w	8002452 <adBms6830ParseConfiga+0x18>
  }
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <adBms6830ParseConfigb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfigb(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	75bb      	strb	r3, [r7, #22]
 80026e4:	e0c8      	b.n	8002878 <adBms6830ParseConfigb+0x1aa>
  {
    memcpy(&ic[curr_ic].configb.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80026e6:	7dbb      	ldrb	r3, [r7, #22]
 80026e8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	4413      	add	r3, r2
 80026f4:	f203 1033 	addw	r0, r3, #307	@ 0x133
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	2208      	movs	r2, #8
 8002700:	4619      	mov	r1, r3
 8002702:	f011 fb85 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8002706:	7dbb      	ldrb	r3, [r7, #22]
 8002708:	3301      	adds	r3, #1
 800270a:	b2db      	uxtb	r3, r3
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	75fb      	strb	r3, [r7, #23]

    ic[curr_ic].rx_cfgb.vuv = ((ic[curr_ic].configb.rx_data[0])  | ((ic[curr_ic].configb.rx_data[1] & 0x0F) << 8));
 8002710:	7dbb      	ldrb	r3, [r7, #22]
 8002712:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4413      	add	r3, r2
 800271e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8002722:	b21a      	sxth	r2, r3
 8002724:	7dbb      	ldrb	r3, [r7, #22]
 8002726:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	440b      	add	r3, r1
 8002732:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8002736:	b21b      	sxth	r3, r3
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	b21b      	sxth	r3, r3
 800273c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b219      	sxth	r1, r3
 8002746:	7dbb      	ldrb	r3, [r7, #22]
 8002748:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	4413      	add	r3, r2
 8002754:	b28a      	uxth	r2, r1
 8002756:	829a      	strh	r2, [r3, #20]
    ic[curr_ic].rx_cfgb.vov  = (ic[curr_ic].configb.rx_data[2]<<4)+((ic[curr_ic].configb.rx_data[1] &0xF0)>>4)  ;
 8002758:	7dbb      	ldrb	r3, [r7, #22]
 800275a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	b29a      	uxth	r2, r3
 800276e:	7dbb      	ldrb	r3, [r7, #22]
 8002770:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	440b      	add	r3, r1
 800277c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	7dbb      	ldrb	r3, [r7, #22]
 8002788:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	440b      	add	r3, r1
 8002794:	4402      	add	r2, r0
 8002796:	b292      	uxth	r2, r2
 8002798:	82da      	strh	r2, [r3, #22]
    ic[curr_ic].rx_cfgb.dtmen = (((ic[curr_ic].configb.rx_data[3] & 0x80) >> 7));
 800279a:	7dbb      	ldrb	r3, [r7, #22]
 800279c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4413      	add	r3, r2
 80027a8:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80027ac:	09db      	lsrs	r3, r3, #7
 80027ae:	b2d9      	uxtb	r1, r3
 80027b0:	7dbb      	ldrb	r3, [r7, #22]
 80027b2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	441a      	add	r2, r3
 80027be:	460b      	mov	r3, r1
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2d9      	uxtb	r1, r3
 80027c6:	7e13      	ldrb	r3, [r2, #24]
 80027c8:	f361 0300 	bfi	r3, r1, #0, #1
 80027cc:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dtrng= ((ic[curr_ic].configb.rx_data[3] & 0x40) >> 6);
 80027ce:	7dbb      	ldrb	r3, [r7, #22]
 80027d0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4413      	add	r3, r2
 80027dc:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80027e0:	1199      	asrs	r1, r3, #6
 80027e2:	7dbb      	ldrb	r3, [r7, #22]
 80027e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	441a      	add	r2, r3
 80027f0:	460b      	mov	r3, r1
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2d9      	uxtb	r1, r3
 80027f8:	7e13      	ldrb	r3, [r2, #24]
 80027fa:	f361 0341 	bfi	r3, r1, #1, #1
 80027fe:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dcto   = ((ic[curr_ic].configb.rx_data[3] & 0x3F));
 8002800:	7dbb      	ldrb	r3, [r7, #22]
 8002802:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	f893 1136 	ldrb.w	r1, [r3, #310]	@ 0x136
 8002812:	7dbb      	ldrb	r3, [r7, #22]
 8002814:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	441a      	add	r2, r3
 8002820:	460b      	mov	r3, r1
 8002822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002826:	b2d9      	uxtb	r1, r3
 8002828:	7e13      	ldrb	r3, [r2, #24]
 800282a:	f361 0387 	bfi	r3, r1, #2, #6
 800282e:	7613      	strb	r3, [r2, #24]
    ic[curr_ic].rx_cfgb.dcc = ((ic[curr_ic].configb.rx_data[4]) | ((ic[curr_ic].configb.rx_data[5] & 0xFF) << 8));
 8002830:	7dbb      	ldrb	r3, [r7, #22]
 8002832:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4413      	add	r3, r2
 800283e:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 8002842:	b21a      	sxth	r2, r3
 8002844:	7dbb      	ldrb	r3, [r7, #22]
 8002846:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	440b      	add	r3, r1
 8002852:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8002856:	b21b      	sxth	r3, r3
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	b21b      	sxth	r3, r3
 800285c:	4313      	orrs	r3, r2
 800285e:	b219      	sxth	r1, r3
 8002860:	7dbb      	ldrb	r3, [r7, #22]
 8002862:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4413      	add	r3, r2
 800286e:	b28a      	uxth	r2, r1
 8002870:	835a      	strh	r2, [r3, #26]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002872:	7dbb      	ldrb	r3, [r7, #22]
 8002874:	3301      	adds	r3, #1
 8002876:	75bb      	strb	r3, [r7, #22]
 8002878:	7dba      	ldrb	r2, [r7, #22]
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	429a      	cmp	r2, r3
 800287e:	f4ff af32 	bcc.w	80026e6 <adBms6830ParseConfigb+0x18>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <adBms6830ParseConfig>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseConfig(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	4613      	mov	r3, r2
 800289c:	73bb      	strb	r3, [r7, #14]
  switch (grp)
 800289e:	7bbb      	ldrb	r3, [r7, #14]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d002      	beq.n	80028aa <adBms6830ParseConfig+0x1e>
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d007      	beq.n	80028b8 <adBms6830ParseConfig+0x2c>
  case B:
    adBms6830ParseConfigb(tIC, &ic[0], &data[0]);
    break;

  default:
    break;
 80028a8:	e00d      	b.n	80028c6 <adBms6830ParseConfig+0x3a>
    adBms6830ParseConfiga(tIC, &ic[0], &data[0]);
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fdc2 	bl	800243a <adBms6830ParseConfiga>
    break;
 80028b6:	e006      	b.n	80028c6 <adBms6830ParseConfig+0x3a>
    adBms6830ParseConfigb(tIC, &ic[0], &data[0]);
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff05 	bl	80026ce <adBms6830ParseConfigb>
    break;
 80028c4:	bf00      	nop
  }
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <adBms6830ParseCell>:
 *
 *******************************************************************************
*/
/* Parse cell voltages */
void adBms6830ParseCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *cv_data)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4603      	mov	r3, r0
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	4613      	mov	r3, r2
 80028e0:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDCVALL_SIZE;}
 80028e6:	7bbb      	ldrb	r3, [r7, #14]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <adBms6830ParseCell+0x22>
 80028ec:	2322      	movs	r3, #34	@ 0x22
 80028ee:	75fb      	strb	r3, [r7, #23]
 80028f0:	e001      	b.n	80028f6 <adBms6830ParseCell+0x26>
  else {data_size = RX_DATA;}
 80028f2:	2308      	movs	r3, #8
 80028f4:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	2101      	movs	r1, #1
 80028fa:	4618      	mov	r0, r3
 80028fc:	f00f fafa 	bl	8011ef4 <calloc>
 8002900:	4603      	mov	r3, r0
 8002902:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <adBms6830ParseCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse cell memory \n");
    #else
    printf(" Failed to allocate parse cell memory \n");
 800290a:	488e      	ldr	r0, [pc, #568]	@ (8002b44 <adBms6830ParseCell+0x274>)
 800290c:	f011 fa1c 	bl	8013d48 <puts>
    #endif
    exit(0);
 8002910:	2000      	movs	r0, #0
 8002912:	f00f fb0b 	bl	8011f2c <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002916:	2300      	movs	r3, #0
 8002918:	757b      	strb	r3, [r7, #21]
 800291a:	e2a9      	b.n	8002e70 <adBms6830ParseCell+0x5a0>
  {
    memcpy(&data[0], &cv_data[address], data_size); /* dst , src , size */
 800291c:	7dbb      	ldrb	r3, [r7, #22]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	7dfa      	ldrb	r2, [r7, #23]
 8002924:	4619      	mov	r1, r3
 8002926:	6938      	ldr	r0, [r7, #16]
 8002928:	f011 fa72 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (data_size));
 800292c:	7d7b      	ldrb	r3, [r7, #21]
 800292e:	3301      	adds	r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	7dfa      	ldrb	r2, [r7, #23]
 8002934:	fb12 f303 	smulbb	r3, r2, r3
 8002938:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 800293a:	7bbb      	ldrb	r3, [r7, #14]
 800293c:	2b06      	cmp	r3, #6
 800293e:	f200 8293 	bhi.w	8002e68 <adBms6830ParseCell+0x598>
 8002942:	a201      	add	r2, pc, #4	@ (adr r2, 8002948 <adBms6830ParseCell+0x78>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002be9 	.word	0x08002be9
 800294c:	08002965 	.word	0x08002965
 8002950:	080029dd 	.word	0x080029dd
 8002954:	08002a55 	.word	0x08002a55
 8002958:	08002acd 	.word	0x08002acd
 800295c:	08002b49 	.word	0x08002b49
 8002960:	08002bc1 	.word	0x08002bc1
    {
    case A: /* Cell Register group A */
      ic[curr_ic].cell.c_codes[0] = (data[0] + (data[1] << 8));
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3301      	adds	r3, #1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	b29b      	uxth	r3, r3
 8002974:	4413      	add	r3, r2
 8002976:	b299      	uxth	r1, r3
 8002978:	7d7b      	ldrb	r3, [r7, #21]
 800297a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4413      	add	r3, r2
 8002986:	b20a      	sxth	r2, r1
 8002988:	841a      	strh	r2, [r3, #32]
      ic[curr_ic].cell.c_codes[1] = (data[2] + (data[3] << 8));
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	3302      	adds	r3, #2
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	3303      	adds	r3, #3
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	b29b      	uxth	r3, r3
 800299c:	4413      	add	r3, r2
 800299e:	b299      	uxth	r1, r3
 80029a0:	7d7b      	ldrb	r3, [r7, #21]
 80029a2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4413      	add	r3, r2
 80029ae:	b20a      	sxth	r2, r1
 80029b0:	845a      	strh	r2, [r3, #34]	@ 0x22
      ic[curr_ic].cell.c_codes[2] = (data[4] + (data[5] << 8));
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3304      	adds	r3, #4
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	3305      	adds	r3, #5
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	b299      	uxth	r1, r3
 80029c8:	7d7b      	ldrb	r3, [r7, #21]
 80029ca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4413      	add	r3, r2
 80029d6:	b20a      	sxth	r2, r1
 80029d8:	849a      	strh	r2, [r3, #36]	@ 0x24
      break;
 80029da:	e246      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case B: /* Cell Register group B */
      ic[curr_ic].cell.c_codes[3] = (data[0] + (data[1] << 8));
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	3301      	adds	r3, #1
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	b299      	uxth	r1, r3
 80029f0:	7d7b      	ldrb	r3, [r7, #21]
 80029f2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4413      	add	r3, r2
 80029fe:	b20a      	sxth	r2, r1
 8002a00:	84da      	strh	r2, [r3, #38]	@ 0x26
      ic[curr_ic].cell.c_codes[4] = (data[2] + (data[3] << 8));
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	3302      	adds	r3, #2
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	3303      	adds	r3, #3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	b299      	uxth	r1, r3
 8002a18:	7d7b      	ldrb	r3, [r7, #21]
 8002a1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	b20a      	sxth	r2, r1
 8002a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      ic[curr_ic].cell.c_codes[5] = (data[4] + (data[5] << 8));
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	3305      	adds	r3, #5
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	7d7b      	ldrb	r3, [r7, #21]
 8002a42:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b20a      	sxth	r2, r1
 8002a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      break;
 8002a52:	e20a      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case C: /* Cell Register group C */
      ic[curr_ic].cell.c_codes[6] = (data[0] + (data[1] << 8));
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	b299      	uxth	r1, r3
 8002a68:	7d7b      	ldrb	r3, [r7, #21]
 8002a6a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	b20a      	sxth	r2, r1
 8002a78:	859a      	strh	r2, [r3, #44]	@ 0x2c
      ic[curr_ic].cell.c_codes[7] = (data[2] + (data[3] << 8));
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3303      	adds	r3, #3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	7d7b      	ldrb	r3, [r7, #21]
 8002a92:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b20a      	sxth	r2, r1
 8002aa0:	85da      	strh	r2, [r3, #46]	@ 0x2e
      ic[curr_ic].cell.c_codes[8] = (data[4] + (data[5] << 8));
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	3305      	adds	r3, #5
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b299      	uxth	r1, r3
 8002ab8:	7d7b      	ldrb	r3, [r7, #21]
 8002aba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b20a      	sxth	r2, r1
 8002ac8:	861a      	strh	r2, [r3, #48]	@ 0x30
      break;
 8002aca:	e1ce      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case D: /* Cell Register group D */
      ic[curr_ic].cell.c_codes[9] =  (data[0] + (data[1] << 8));
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	b299      	uxth	r1, r3
 8002ae0:	7d7b      	ldrb	r3, [r7, #21]
 8002ae2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	b20a      	sxth	r2, r1
 8002af0:	865a      	strh	r2, [r3, #50]	@ 0x32
      ic[curr_ic].cell.c_codes[10] = (data[2] + (data[3] << 8));
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3302      	adds	r3, #2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3303      	adds	r3, #3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	b299      	uxth	r1, r3
 8002b08:	7d7b      	ldrb	r3, [r7, #21]
 8002b0a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4413      	add	r3, r2
 8002b16:	b20a      	sxth	r2, r1
 8002b18:	869a      	strh	r2, [r3, #52]	@ 0x34
      ic[curr_ic].cell.c_codes[11] = (data[4] + (data[5] << 8));
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	3305      	adds	r3, #5
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	7d7b      	ldrb	r3, [r7, #21]
 8002b32:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b20a      	sxth	r2, r1
 8002b40:	86da      	strh	r2, [r3, #54]	@ 0x36
      break;
 8002b42:	e192      	b.n	8002e6a <adBms6830ParseCell+0x59a>
 8002b44:	08016840 	.word	0x08016840

    case E: /* Cell Register group E */
      ic[curr_ic].cell.c_codes[12] = (data[0] + (data[1] << 8));
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	3301      	adds	r3, #1
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	b299      	uxth	r1, r3
 8002b5c:	7d7b      	ldrb	r3, [r7, #21]
 8002b5e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4413      	add	r3, r2
 8002b6a:	b20a      	sxth	r2, r1
 8002b6c:	871a      	strh	r2, [r3, #56]	@ 0x38
      ic[curr_ic].cell.c_codes[13] = (data[2] + (data[3] << 8));
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3302      	adds	r3, #2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	3303      	adds	r3, #3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	b299      	uxth	r1, r3
 8002b84:	7d7b      	ldrb	r3, [r7, #21]
 8002b86:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	4413      	add	r3, r2
 8002b92:	b20a      	sxth	r2, r1
 8002b94:	875a      	strh	r2, [r3, #58]	@ 0x3a
      ic[curr_ic].cell.c_codes[14] = (data[4] + (data[5] << 8));
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	3305      	adds	r3, #5
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	b299      	uxth	r1, r3
 8002bac:	7d7b      	ldrb	r3, [r7, #21]
 8002bae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4413      	add	r3, r2
 8002bba:	b20a      	sxth	r2, r1
 8002bbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
      break;
 8002bbe:	e154      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case F: /* Cell Register group F */
      ic[curr_ic].cell.c_codes[15] = (data[0] + (data[1] << 8));
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b299      	uxth	r1, r3
 8002bd4:	7d7b      	ldrb	r3, [r7, #21]
 8002bd6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4413      	add	r3, r2
 8002be2:	b20a      	sxth	r2, r1
 8002be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      break;
 8002be6:	e140      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].cell.c_codes[0] = (data[0] + (data[1] << 8));
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b299      	uxth	r1, r3
 8002bfc:	7d7b      	ldrb	r3, [r7, #21]
 8002bfe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b20a      	sxth	r2, r1
 8002c0c:	841a      	strh	r2, [r3, #32]
      ic[curr_ic].cell.c_codes[1] = (data[2] + (data[3] << 8));
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	3302      	adds	r3, #2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	461a      	mov	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	3303      	adds	r3, #3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	b299      	uxth	r1, r3
 8002c24:	7d7b      	ldrb	r3, [r7, #21]
 8002c26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	b20a      	sxth	r2, r1
 8002c34:	845a      	strh	r2, [r3, #34]	@ 0x22
      ic[curr_ic].cell.c_codes[2] = (data[4] + (data[5] << 8));
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	3305      	adds	r3, #5
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	b299      	uxth	r1, r3
 8002c4c:	7d7b      	ldrb	r3, [r7, #21]
 8002c4e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b20a      	sxth	r2, r1
 8002c5c:	849a      	strh	r2, [r3, #36]	@ 0x24
      ic[curr_ic].cell.c_codes[3] = (data[6] + (data[7] << 8));
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	3306      	adds	r3, #6
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	3307      	adds	r3, #7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	b299      	uxth	r1, r3
 8002c74:	7d7b      	ldrb	r3, [r7, #21]
 8002c76:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	4413      	add	r3, r2
 8002c82:	b20a      	sxth	r2, r1
 8002c84:	84da      	strh	r2, [r3, #38]	@ 0x26
      ic[curr_ic].cell.c_codes[4] = (data[8] + (data[9] << 8));
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	3309      	adds	r3, #9
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	b299      	uxth	r1, r3
 8002c9c:	7d7b      	ldrb	r3, [r7, #21]
 8002c9e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b20a      	sxth	r2, r1
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      ic[curr_ic].cell.c_codes[5] = (data[10] + (data[11] << 8));
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	330a      	adds	r3, #10
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	330b      	adds	r3, #11
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b299      	uxth	r1, r3
 8002cc4:	7d7b      	ldrb	r3, [r7, #21]
 8002cc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b20a      	sxth	r2, r1
 8002cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      ic[curr_ic].cell.c_codes[6] = (data[12] + (data[13] << 8));
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	330d      	adds	r3, #13
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	b299      	uxth	r1, r3
 8002cec:	7d7b      	ldrb	r3, [r7, #21]
 8002cee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b20a      	sxth	r2, r1
 8002cfc:	859a      	strh	r2, [r3, #44]	@ 0x2c
      ic[curr_ic].cell.c_codes[7] = (data[14] + (data[15] << 8));
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	330e      	adds	r3, #14
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	330f      	adds	r3, #15
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	b299      	uxth	r1, r3
 8002d14:	7d7b      	ldrb	r3, [r7, #21]
 8002d16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4413      	add	r3, r2
 8002d22:	b20a      	sxth	r2, r1
 8002d24:	85da      	strh	r2, [r3, #46]	@ 0x2e
      ic[curr_ic].cell.c_codes[8] = (data[16] + (data[17] << 8));
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3310      	adds	r3, #16
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	3311      	adds	r3, #17
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	7d7b      	ldrb	r3, [r7, #21]
 8002d3e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	b20a      	sxth	r2, r1
 8002d4c:	861a      	strh	r2, [r3, #48]	@ 0x30
      ic[curr_ic].cell.c_codes[9] =  (data[18] + (data[19] << 8));
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3312      	adds	r3, #18
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	3313      	adds	r3, #19
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	b299      	uxth	r1, r3
 8002d64:	7d7b      	ldrb	r3, [r7, #21]
 8002d66:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4413      	add	r3, r2
 8002d72:	b20a      	sxth	r2, r1
 8002d74:	865a      	strh	r2, [r3, #50]	@ 0x32
      ic[curr_ic].cell.c_codes[10] = (data[20] + (data[21] << 8));
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	3315      	adds	r3, #21
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	b299      	uxth	r1, r3
 8002d8c:	7d7b      	ldrb	r3, [r7, #21]
 8002d8e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	b20a      	sxth	r2, r1
 8002d9c:	869a      	strh	r2, [r3, #52]	@ 0x34
      ic[curr_ic].cell.c_codes[11] = (data[22] + (data[23] << 8));
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	3316      	adds	r3, #22
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	3317      	adds	r3, #23
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	b299      	uxth	r1, r3
 8002db4:	7d7b      	ldrb	r3, [r7, #21]
 8002db6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b20a      	sxth	r2, r1
 8002dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
      ic[curr_ic].cell.c_codes[12] = (data[24] + (data[25] << 8));
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3319      	adds	r3, #25
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	b299      	uxth	r1, r3
 8002ddc:	7d7b      	ldrb	r3, [r7, #21]
 8002dde:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4413      	add	r3, r2
 8002dea:	b20a      	sxth	r2, r1
 8002dec:	871a      	strh	r2, [r3, #56]	@ 0x38
      ic[curr_ic].cell.c_codes[13] = (data[26] + (data[27] << 8));
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	331a      	adds	r3, #26
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	331b      	adds	r3, #27
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	b299      	uxth	r1, r3
 8002e04:	7d7b      	ldrb	r3, [r7, #21]
 8002e06:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	b20a      	sxth	r2, r1
 8002e14:	875a      	strh	r2, [r3, #58]	@ 0x3a
      ic[curr_ic].cell.c_codes[14] = (data[28] + (data[29] << 8));
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	331c      	adds	r3, #28
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	331d      	adds	r3, #29
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	b299      	uxth	r1, r3
 8002e2c:	7d7b      	ldrb	r3, [r7, #21]
 8002e2e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	b20a      	sxth	r2, r1
 8002e3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      ic[curr_ic].cell.c_codes[15] = (data[30] + (data[31] << 8));
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	331e      	adds	r3, #30
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	331f      	adds	r3, #31
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	b299      	uxth	r1, r3
 8002e54:	7d7b      	ldrb	r3, [r7, #21]
 8002e56:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	b20a      	sxth	r2, r1
 8002e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
      break;
 8002e66:	e000      	b.n	8002e6a <adBms6830ParseCell+0x59a>

    default:
      break;
 8002e68:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002e6a:	7d7b      	ldrb	r3, [r7, #21]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	757b      	strb	r3, [r7, #21]
 8002e70:	7d7a      	ldrb	r2, [r7, #21]
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f4ff ad51 	bcc.w	800291c <adBms6830ParseCell+0x4c>
    }
  }
  free(data);
 8002e7a:	6938      	ldr	r0, [r7, #16]
 8002e7c:	f00f fb3a 	bl	80124f4 <free>
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <adBms6830ParseAverageCell>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseAverageCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *acv_data)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	4603      	mov	r3, r0
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	4613      	mov	r3, r2
 8002e98:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDACALL_SIZE;}
 8002e9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <adBms6830ParseAverageCell+0x22>
 8002ea4:	2322      	movs	r3, #34	@ 0x22
 8002ea6:	75fb      	strb	r3, [r7, #23]
 8002ea8:	e001      	b.n	8002eae <adBms6830ParseAverageCell+0x26>
  else {data_size = RX_DATA;}
 8002eaa:	2308      	movs	r3, #8
 8002eac:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00f f81e 	bl	8011ef4 <calloc>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <adBms6830ParseAverageCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse avg cell memory \n");
    #else
    printf(" Failed to allocate parse avg cell memory \n");
 8002ec2:	4894      	ldr	r0, [pc, #592]	@ (8003114 <adBms6830ParseAverageCell+0x28c>)
 8002ec4:	f010 ff40 	bl	8013d48 <puts>
    #endif
    exit(0);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f00f f82f 	bl	8011f2c <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	757b      	strb	r3, [r7, #21]
 8002ed2:	e2c9      	b.n	8003468 <adBms6830ParseAverageCell+0x5e0>
  {
    memcpy(&data[0], &acv_data[address], data_size); /* dst , src , size */
 8002ed4:	7dbb      	ldrb	r3, [r7, #22]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	7dfa      	ldrb	r2, [r7, #23]
 8002edc:	4619      	mov	r1, r3
 8002ede:	6938      	ldr	r0, [r7, #16]
 8002ee0:	f010 ff96 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8002ee4:	7d7b      	ldrb	r3, [r7, #21]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	7dfa      	ldrb	r2, [r7, #23]
 8002eec:	fb12 f303 	smulbb	r3, r2, r3
 8002ef0:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8002ef2:	7bbb      	ldrb	r3, [r7, #14]
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	f200 82b3 	bhi.w	8003460 <adBms6830ParseAverageCell+0x5d8>
 8002efa:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <adBms6830ParseAverageCell+0x78>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	080031c1 	.word	0x080031c1
 8002f04:	08002f1d 	.word	0x08002f1d
 8002f08:	08002f9b 	.word	0x08002f9b
 8002f0c:	08003019 	.word	0x08003019
 8002f10:	08003097 	.word	0x08003097
 8002f14:	08003119 	.word	0x08003119
 8002f18:	08003197 	.word	0x08003197
    {
    case A: /* Cell Register group A */
      ic[curr_ic].acell.ac_codes[0] = (data[0] + (data[1] << 8));
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	3301      	adds	r3, #1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b299      	uxth	r1, r3
 8002f30:	7d7b      	ldrb	r3, [r7, #21]
 8002f32:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b20a      	sxth	r2, r1
 8002f40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      ic[curr_ic].acell.ac_codes[1] = (data[2] + (data[3] << 8));
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	3302      	adds	r3, #2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	3303      	adds	r3, #3
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	b299      	uxth	r1, r3
 8002f5a:	7d7b      	ldrb	r3, [r7, #21]
 8002f5c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	4413      	add	r3, r2
 8002f68:	b20a      	sxth	r2, r1
 8002f6a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      ic[curr_ic].acell.ac_codes[2] = (data[4] + (data[5] << 8));
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	3304      	adds	r3, #4
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	3305      	adds	r3, #5
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	b299      	uxth	r1, r3
 8002f84:	7d7b      	ldrb	r3, [r7, #21]
 8002f86:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	4413      	add	r3, r2
 8002f92:	b20a      	sxth	r2, r1
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      break;
 8002f98:	e263      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case B: /* Cell Register group B */
      ic[curr_ic].acell.ac_codes[3] = (data[0] + (data[1] << 8));
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	b299      	uxth	r1, r3
 8002fae:	7d7b      	ldrb	r3, [r7, #21]
 8002fb0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4413      	add	r3, r2
 8002fbc:	b20a      	sxth	r2, r1
 8002fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      ic[curr_ic].acell.ac_codes[4] = (data[2] + (data[3] << 8));
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3303      	adds	r3, #3
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	b299      	uxth	r1, r3
 8002fd8:	7d7b      	ldrb	r3, [r7, #21]
 8002fda:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	b20a      	sxth	r2, r1
 8002fe8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      ic[curr_ic].acell.ac_codes[5] = (data[4] + (data[5] << 8));
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3305      	adds	r3, #5
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	b299      	uxth	r1, r3
 8003002:	7d7b      	ldrb	r3, [r7, #21]
 8003004:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	4413      	add	r3, r2
 8003010:	b20a      	sxth	r2, r1
 8003012:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      break;
 8003016:	e224      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case C: /* Cell Register group C */
      ic[curr_ic].acell.ac_codes[6] = (data[0] + (data[1] << 8));
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3301      	adds	r3, #1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	b29b      	uxth	r3, r3
 8003028:	4413      	add	r3, r2
 800302a:	b299      	uxth	r1, r3
 800302c:	7d7b      	ldrb	r3, [r7, #21]
 800302e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4413      	add	r3, r2
 800303a:	b20a      	sxth	r2, r1
 800303c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
      ic[curr_ic].acell.ac_codes[7] = (data[2] + (data[3] << 8));
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3302      	adds	r3, #2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	3303      	adds	r3, #3
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b29b      	uxth	r3, r3
 8003052:	4413      	add	r3, r2
 8003054:	b299      	uxth	r1, r3
 8003056:	7d7b      	ldrb	r3, [r7, #21]
 8003058:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	4413      	add	r3, r2
 8003064:	b20a      	sxth	r2, r1
 8003066:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      ic[curr_ic].acell.ac_codes[8] = (data[4] + (data[5] << 8));
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	3304      	adds	r3, #4
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	3305      	adds	r3, #5
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b29b      	uxth	r3, r3
 800307c:	4413      	add	r3, r2
 800307e:	b299      	uxth	r1, r3
 8003080:	7d7b      	ldrb	r3, [r7, #21]
 8003082:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	4413      	add	r3, r2
 800308e:	b20a      	sxth	r2, r1
 8003090:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      break;
 8003094:	e1e5      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case D: /* Cell Register group D */
      ic[curr_ic].acell.ac_codes[9] =  (data[0] + (data[1] << 8));
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	3301      	adds	r3, #1
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	b299      	uxth	r1, r3
 80030aa:	7d7b      	ldrb	r3, [r7, #21]
 80030ac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	b20a      	sxth	r2, r1
 80030ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      ic[curr_ic].acell.ac_codes[10] = (data[2] + (data[3] << 8));
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3302      	adds	r3, #2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	3303      	adds	r3, #3
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	b299      	uxth	r1, r3
 80030d4:	7d7b      	ldrb	r3, [r7, #21]
 80030d6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	b20a      	sxth	r2, r1
 80030e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
      ic[curr_ic].acell.ac_codes[11] = (data[4] + (data[5] << 8));
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	3304      	adds	r3, #4
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	3305      	adds	r3, #5
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	b299      	uxth	r1, r3
 80030fe:	7d7b      	ldrb	r3, [r7, #21]
 8003100:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	b20a      	sxth	r2, r1
 800310e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
      break;
 8003112:	e1a6      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>
 8003114:	08016868 	.word	0x08016868

    case E: /* Cell Register group E */
      ic[curr_ic].acell.ac_codes[12] = (data[0] + (data[1] << 8));
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	3301      	adds	r3, #1
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b29b      	uxth	r3, r3
 8003128:	4413      	add	r3, r2
 800312a:	b299      	uxth	r1, r3
 800312c:	7d7b      	ldrb	r3, [r7, #21]
 800312e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	4413      	add	r3, r2
 800313a:	b20a      	sxth	r2, r1
 800313c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      ic[curr_ic].acell.ac_codes[13] = (data[2] + (data[3] << 8));
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	3302      	adds	r3, #2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3303      	adds	r3, #3
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	b29b      	uxth	r3, r3
 8003152:	4413      	add	r3, r2
 8003154:	b299      	uxth	r1, r3
 8003156:	7d7b      	ldrb	r3, [r7, #21]
 8003158:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4413      	add	r3, r2
 8003164:	b20a      	sxth	r2, r1
 8003166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      ic[curr_ic].acell.ac_codes[14] = (data[4] + (data[5] << 8));
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3304      	adds	r3, #4
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	3305      	adds	r3, #5
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b29b      	uxth	r3, r3
 800317c:	4413      	add	r3, r2
 800317e:	b299      	uxth	r1, r3
 8003180:	7d7b      	ldrb	r3, [r7, #21]
 8003182:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4413      	add	r3, r2
 800318e:	b20a      	sxth	r2, r1
 8003190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      break;
 8003194:	e165      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case F: /* Cell Register group F */
      ic[curr_ic].acell.ac_codes[15] = (data[0] + (data[1] << 8));
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	3301      	adds	r3, #1
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	b299      	uxth	r1, r3
 80031aa:	7d7b      	ldrb	r3, [r7, #21]
 80031ac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4413      	add	r3, r2
 80031b8:	b20a      	sxth	r2, r1
 80031ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      break;
 80031be:	e150      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].acell.ac_codes[0] = (data[0] + (data[1] << 8));
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3301      	adds	r3, #1
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	b299      	uxth	r1, r3
 80031d4:	7d7b      	ldrb	r3, [r7, #21]
 80031d6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	4413      	add	r3, r2
 80031e2:	b20a      	sxth	r2, r1
 80031e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      ic[curr_ic].acell.ac_codes[1] = (data[2] + (data[3] << 8));
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	3302      	adds	r3, #2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	3303      	adds	r3, #3
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	b299      	uxth	r1, r3
 80031fe:	7d7b      	ldrb	r3, [r7, #21]
 8003200:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	4413      	add	r3, r2
 800320c:	b20a      	sxth	r2, r1
 800320e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      ic[curr_ic].acell.ac_codes[2] = (data[4] + (data[5] << 8));
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	3304      	adds	r3, #4
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3305      	adds	r3, #5
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	b29b      	uxth	r3, r3
 8003224:	4413      	add	r3, r2
 8003226:	b299      	uxth	r1, r3
 8003228:	7d7b      	ldrb	r3, [r7, #21]
 800322a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4413      	add	r3, r2
 8003236:	b20a      	sxth	r2, r1
 8003238:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      ic[curr_ic].acell.ac_codes[3] = (data[6] + (data[7] << 8));
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	3306      	adds	r3, #6
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3307      	adds	r3, #7
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	b29b      	uxth	r3, r3
 800324e:	4413      	add	r3, r2
 8003250:	b299      	uxth	r1, r3
 8003252:	7d7b      	ldrb	r3, [r7, #21]
 8003254:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	4413      	add	r3, r2
 8003260:	b20a      	sxth	r2, r1
 8003262:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      ic[curr_ic].acell.ac_codes[4] = (data[8] + (data[9] << 8));
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3308      	adds	r3, #8
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3309      	adds	r3, #9
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	4413      	add	r3, r2
 800327a:	b299      	uxth	r1, r3
 800327c:	7d7b      	ldrb	r3, [r7, #21]
 800327e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	b20a      	sxth	r2, r1
 800328c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      ic[curr_ic].acell.ac_codes[5] = (data[10] + (data[11] << 8));
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	330a      	adds	r3, #10
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	330b      	adds	r3, #11
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	b299      	uxth	r1, r3
 80032a6:	7d7b      	ldrb	r3, [r7, #21]
 80032a8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80032ac:	fb02 f303 	mul.w	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4413      	add	r3, r2
 80032b4:	b20a      	sxth	r2, r1
 80032b6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      ic[curr_ic].acell.ac_codes[6] = (data[12] + (data[13] << 8));
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	330c      	adds	r3, #12
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	330d      	adds	r3, #13
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	b299      	uxth	r1, r3
 80032d0:	7d7b      	ldrb	r3, [r7, #21]
 80032d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	b20a      	sxth	r2, r1
 80032e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
      ic[curr_ic].acell.ac_codes[7] = (data[14] + (data[15] << 8));
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	330e      	adds	r3, #14
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	330f      	adds	r3, #15
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	b299      	uxth	r1, r3
 80032fa:	7d7b      	ldrb	r3, [r7, #21]
 80032fc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	4413      	add	r3, r2
 8003308:	b20a      	sxth	r2, r1
 800330a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      ic[curr_ic].acell.ac_codes[8] = (data[16] + (data[17] << 8));
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3310      	adds	r3, #16
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	3311      	adds	r3, #17
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	b29b      	uxth	r3, r3
 8003320:	4413      	add	r3, r2
 8003322:	b299      	uxth	r1, r3
 8003324:	7d7b      	ldrb	r3, [r7, #21]
 8003326:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4413      	add	r3, r2
 8003332:	b20a      	sxth	r2, r1
 8003334:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
      ic[curr_ic].acell.ac_codes[9] =  (data[18] + (data[19] << 8));
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3312      	adds	r3, #18
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	3313      	adds	r3, #19
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	4413      	add	r3, r2
 800334c:	b299      	uxth	r1, r3
 800334e:	7d7b      	ldrb	r3, [r7, #21]
 8003350:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	4413      	add	r3, r2
 800335c:	b20a      	sxth	r2, r1
 800335e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      ic[curr_ic].acell.ac_codes[10] = (data[20] + (data[21] << 8));
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	3314      	adds	r3, #20
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3315      	adds	r3, #21
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	b29b      	uxth	r3, r3
 8003374:	4413      	add	r3, r2
 8003376:	b299      	uxth	r1, r3
 8003378:	7d7b      	ldrb	r3, [r7, #21]
 800337a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	4413      	add	r3, r2
 8003386:	b20a      	sxth	r2, r1
 8003388:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
      ic[curr_ic].acell.ac_codes[11] = (data[22] + (data[23] << 8));
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	3316      	adds	r3, #22
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3317      	adds	r3, #23
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	4413      	add	r3, r2
 80033a0:	b299      	uxth	r1, r3
 80033a2:	7d7b      	ldrb	r3, [r7, #21]
 80033a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	4413      	add	r3, r2
 80033b0:	b20a      	sxth	r2, r1
 80033b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
      ic[curr_ic].acell.ac_codes[12] = (data[24] + (data[25] << 8));
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	3318      	adds	r3, #24
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	3319      	adds	r3, #25
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	b299      	uxth	r1, r3
 80033cc:	7d7b      	ldrb	r3, [r7, #21]
 80033ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4413      	add	r3, r2
 80033da:	b20a      	sxth	r2, r1
 80033dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      ic[curr_ic].acell.ac_codes[13] = (data[26] + (data[27] << 8));
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	331a      	adds	r3, #26
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	331b      	adds	r3, #27
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	b299      	uxth	r1, r3
 80033f6:	7d7b      	ldrb	r3, [r7, #21]
 80033f8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4413      	add	r3, r2
 8003404:	b20a      	sxth	r2, r1
 8003406:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      ic[curr_ic].acell.ac_codes[14] = (data[28] + (data[29] << 8));
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	331c      	adds	r3, #28
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	331d      	adds	r3, #29
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	b29b      	uxth	r3, r3
 800341c:	4413      	add	r3, r2
 800341e:	b299      	uxth	r1, r3
 8003420:	7d7b      	ldrb	r3, [r7, #21]
 8003422:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4413      	add	r3, r2
 800342e:	b20a      	sxth	r2, r1
 8003430:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      ic[curr_ic].acell.ac_codes[15] = (data[30] + (data[31] << 8));
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	331e      	adds	r3, #30
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	331f      	adds	r3, #31
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	b29b      	uxth	r3, r3
 8003446:	4413      	add	r3, r2
 8003448:	b299      	uxth	r1, r3
 800344a:	7d7b      	ldrb	r3, [r7, #21]
 800344c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4413      	add	r3, r2
 8003458:	b20a      	sxth	r2, r1
 800345a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      break;
 800345e:	e000      	b.n	8003462 <adBms6830ParseAverageCell+0x5da>

    default:
      break;
 8003460:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003462:	7d7b      	ldrb	r3, [r7, #21]
 8003464:	3301      	adds	r3, #1
 8003466:	757b      	strb	r3, [r7, #21]
 8003468:	7d7a      	ldrb	r2, [r7, #21]
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	429a      	cmp	r2, r3
 800346e:	f4ff ad31 	bcc.w	8002ed4 <adBms6830ParseAverageCell+0x4c>
    }
  }
  free(data);
 8003472:	6938      	ldr	r0, [r7, #16]
 8003474:	f00f f83e 	bl	80124f4 <free>
}
 8003478:	bf00      	nop
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <adBms6830ParseSCell>:
 *
 *******************************************************************************
*/
/* Parse S cell voltages */
void adBms6830ParseSCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *scv_data)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4603      	mov	r3, r0
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	4613      	mov	r3, r2
 8003490:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDSALL_SIZE;}
 8003496:	7bbb      	ldrb	r3, [r7, #14]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <adBms6830ParseSCell+0x22>
 800349c:	2322      	movs	r3, #34	@ 0x22
 800349e:	75fb      	strb	r3, [r7, #23]
 80034a0:	e001      	b.n	80034a6 <adBms6830ParseSCell+0x26>
  else {data_size = RX_DATA;}
 80034a2:	2308      	movs	r3, #8
 80034a4:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2101      	movs	r1, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	f00e fd22 	bl	8011ef4 <calloc>
 80034b0:	4603      	mov	r3, r0
 80034b2:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <adBms6830ParseSCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse scv memory \n");
    #else
    printf(" Failed to allocate parse scv memory \n");
 80034ba:	4894      	ldr	r0, [pc, #592]	@ (800370c <adBms6830ParseSCell+0x28c>)
 80034bc:	f010 fc44 	bl	8013d48 <puts>
    #endif
    exit(0);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f00e fd33 	bl	8011f2c <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	757b      	strb	r3, [r7, #21]
 80034ca:	e2c9      	b.n	8003a60 <adBms6830ParseSCell+0x5e0>
  {
    memcpy(&data[0], &scv_data[address], data_size); /* dst , src , size */
 80034cc:	7dbb      	ldrb	r3, [r7, #22]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	7dfa      	ldrb	r2, [r7, #23]
 80034d4:	4619      	mov	r1, r3
 80034d6:	6938      	ldr	r0, [r7, #16]
 80034d8:	f010 fc9a 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (data_size));
 80034dc:	7d7b      	ldrb	r3, [r7, #21]
 80034de:	3301      	adds	r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	7dfa      	ldrb	r2, [r7, #23]
 80034e4:	fb12 f303 	smulbb	r3, r2, r3
 80034e8:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 80034ea:	7bbb      	ldrb	r3, [r7, #14]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	f200 82b3 	bhi.w	8003a58 <adBms6830ParseSCell+0x5d8>
 80034f2:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <adBms6830ParseSCell+0x78>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	080037b9 	.word	0x080037b9
 80034fc:	08003515 	.word	0x08003515
 8003500:	08003593 	.word	0x08003593
 8003504:	08003611 	.word	0x08003611
 8003508:	0800368f 	.word	0x0800368f
 800350c:	08003711 	.word	0x08003711
 8003510:	0800378f 	.word	0x0800378f
    {
    case A: /* Cell Register group A */
      ic[curr_ic].scell.sc_codes[0] = (data[0] + (data[1] << 8));
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3301      	adds	r3, #1
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	b29b      	uxth	r3, r3
 8003524:	4413      	add	r3, r2
 8003526:	b299      	uxth	r1, r3
 8003528:	7d7b      	ldrb	r3, [r7, #21]
 800352a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4413      	add	r3, r2
 8003536:	b20a      	sxth	r2, r1
 8003538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      ic[curr_ic].scell.sc_codes[1] = (data[2] + (data[3] << 8));
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	3302      	adds	r3, #2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3303      	adds	r3, #3
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	b29b      	uxth	r3, r3
 800354e:	4413      	add	r3, r2
 8003550:	b299      	uxth	r1, r3
 8003552:	7d7b      	ldrb	r3, [r7, #21]
 8003554:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	4413      	add	r3, r2
 8003560:	b20a      	sxth	r2, r1
 8003562:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      ic[curr_ic].scell.sc_codes[2] = (data[4] + (data[5] << 8));
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3304      	adds	r3, #4
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	3305      	adds	r3, #5
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	b29b      	uxth	r3, r3
 8003578:	4413      	add	r3, r2
 800357a:	b299      	uxth	r1, r3
 800357c:	7d7b      	ldrb	r3, [r7, #21]
 800357e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	4413      	add	r3, r2
 800358a:	b20a      	sxth	r2, r1
 800358c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      break;
 8003590:	e263      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case B: /* Cell Register group B */
      ic[curr_ic].scell.sc_codes[3] = (data[0] + (data[1] << 8));
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3301      	adds	r3, #1
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	b299      	uxth	r1, r3
 80035a6:	7d7b      	ldrb	r3, [r7, #21]
 80035a8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	4413      	add	r3, r2
 80035b4:	b20a      	sxth	r2, r1
 80035b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
      ic[curr_ic].scell.sc_codes[4] = (data[2] + (data[3] << 8));
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3302      	adds	r3, #2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3303      	adds	r3, #3
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	b299      	uxth	r1, r3
 80035d0:	7d7b      	ldrb	r3, [r7, #21]
 80035d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4413      	add	r3, r2
 80035de:	b20a      	sxth	r2, r1
 80035e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      ic[curr_ic].scell.sc_codes[5] = (data[4] + (data[5] << 8));
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	3304      	adds	r3, #4
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	3305      	adds	r3, #5
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	b299      	uxth	r1, r3
 80035fa:	7d7b      	ldrb	r3, [r7, #21]
 80035fc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	4413      	add	r3, r2
 8003608:	b20a      	sxth	r2, r1
 800360a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      break;
 800360e:	e224      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case C: /* Cell Register group C */
      ic[curr_ic].scell.sc_codes[6] = (data[0] + (data[1] << 8));
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	3301      	adds	r3, #1
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	b29b      	uxth	r3, r3
 8003620:	4413      	add	r3, r2
 8003622:	b299      	uxth	r1, r3
 8003624:	7d7b      	ldrb	r3, [r7, #21]
 8003626:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4413      	add	r3, r2
 8003632:	b20a      	sxth	r2, r1
 8003634:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
      ic[curr_ic].scell.sc_codes[7] = (data[2] + (data[3] << 8));
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	3302      	adds	r3, #2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3303      	adds	r3, #3
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	b29b      	uxth	r3, r3
 800364a:	4413      	add	r3, r2
 800364c:	b299      	uxth	r1, r3
 800364e:	7d7b      	ldrb	r3, [r7, #21]
 8003650:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4413      	add	r3, r2
 800365c:	b20a      	sxth	r2, r1
 800365e:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
      ic[curr_ic].scell.sc_codes[8] = (data[4] + (data[5] << 8));
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3304      	adds	r3, #4
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3305      	adds	r3, #5
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b29b      	uxth	r3, r3
 8003674:	4413      	add	r3, r2
 8003676:	b299      	uxth	r1, r3
 8003678:	7d7b      	ldrb	r3, [r7, #21]
 800367a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	b20a      	sxth	r2, r1
 8003688:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      break;
 800368c:	e1e5      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case D: /* Cell Register group D */
      ic[curr_ic].scell.sc_codes[9] =  (data[0] + (data[1] << 8));
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	3301      	adds	r3, #1
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	b29b      	uxth	r3, r3
 800369e:	4413      	add	r3, r2
 80036a0:	b299      	uxth	r1, r3
 80036a2:	7d7b      	ldrb	r3, [r7, #21]
 80036a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4413      	add	r3, r2
 80036b0:	b20a      	sxth	r2, r1
 80036b2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      ic[curr_ic].scell.sc_codes[10] = (data[2] + (data[3] << 8));
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3302      	adds	r3, #2
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	3303      	adds	r3, #3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	b299      	uxth	r1, r3
 80036cc:	7d7b      	ldrb	r3, [r7, #21]
 80036ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	b20a      	sxth	r2, r1
 80036dc:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
      ic[curr_ic].scell.sc_codes[11] = (data[4] + (data[5] << 8));
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3304      	adds	r3, #4
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3305      	adds	r3, #5
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	b299      	uxth	r1, r3
 80036f6:	7d7b      	ldrb	r3, [r7, #21]
 80036f8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4413      	add	r3, r2
 8003704:	b20a      	sxth	r2, r1
 8003706:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
      break;
 800370a:	e1a6      	b.n	8003a5a <adBms6830ParseSCell+0x5da>
 800370c:	08016894 	.word	0x08016894

    case E: /* Cell Register group E */
      ic[curr_ic].scell.sc_codes[12] = (data[0] + (data[1] << 8));
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3301      	adds	r3, #1
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	b29b      	uxth	r3, r3
 8003720:	4413      	add	r3, r2
 8003722:	b299      	uxth	r1, r3
 8003724:	7d7b      	ldrb	r3, [r7, #21]
 8003726:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4413      	add	r3, r2
 8003732:	b20a      	sxth	r2, r1
 8003734:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
      ic[curr_ic].scell.sc_codes[13] = (data[2] + (data[3] << 8));
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3302      	adds	r3, #2
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3303      	adds	r3, #3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	b29b      	uxth	r3, r3
 800374a:	4413      	add	r3, r2
 800374c:	b299      	uxth	r1, r3
 800374e:	7d7b      	ldrb	r3, [r7, #21]
 8003750:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4413      	add	r3, r2
 800375c:	b20a      	sxth	r2, r1
 800375e:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
      ic[curr_ic].scell.sc_codes[14] = (data[4] + (data[5] << 8));
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3304      	adds	r3, #4
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3305      	adds	r3, #5
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	b29b      	uxth	r3, r3
 8003774:	4413      	add	r3, r2
 8003776:	b299      	uxth	r1, r3
 8003778:	7d7b      	ldrb	r3, [r7, #21]
 800377a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4413      	add	r3, r2
 8003786:	b20a      	sxth	r2, r1
 8003788:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
      break;
 800378c:	e165      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case F: /* Cell Register group F */
      ic[curr_ic].scell.sc_codes[15] = (data[0] + (data[1] << 8));
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	3301      	adds	r3, #1
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	b29b      	uxth	r3, r3
 800379e:	4413      	add	r3, r2
 80037a0:	b299      	uxth	r1, r3
 80037a2:	7d7b      	ldrb	r3, [r7, #21]
 80037a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4413      	add	r3, r2
 80037b0:	b20a      	sxth	r2, r1
 80037b2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      break;
 80037b6:	e150      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].scell.sc_codes[0] = (data[0] + (data[1] << 8));
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	b299      	uxth	r1, r3
 80037cc:	7d7b      	ldrb	r3, [r7, #21]
 80037ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4413      	add	r3, r2
 80037da:	b20a      	sxth	r2, r1
 80037dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      ic[curr_ic].scell.sc_codes[1] = (data[2] + (data[3] << 8));
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3302      	adds	r3, #2
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	b299      	uxth	r1, r3
 80037f6:	7d7b      	ldrb	r3, [r7, #21]
 80037f8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	4413      	add	r3, r2
 8003804:	b20a      	sxth	r2, r1
 8003806:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      ic[curr_ic].scell.sc_codes[2] = (data[4] + (data[5] << 8));
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3304      	adds	r3, #4
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3305      	adds	r3, #5
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	b29b      	uxth	r3, r3
 800381c:	4413      	add	r3, r2
 800381e:	b299      	uxth	r1, r3
 8003820:	7d7b      	ldrb	r3, [r7, #21]
 8003822:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4413      	add	r3, r2
 800382e:	b20a      	sxth	r2, r1
 8003830:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      ic[curr_ic].scell.sc_codes[3] = (data[6] + (data[7] << 8));
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3306      	adds	r3, #6
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3307      	adds	r3, #7
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	b29b      	uxth	r3, r3
 8003846:	4413      	add	r3, r2
 8003848:	b299      	uxth	r1, r3
 800384a:	7d7b      	ldrb	r3, [r7, #21]
 800384c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	4413      	add	r3, r2
 8003858:	b20a      	sxth	r2, r1
 800385a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
      ic[curr_ic].scell.sc_codes[4] = (data[8] + (data[9] << 8));
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3308      	adds	r3, #8
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3309      	adds	r3, #9
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	b29b      	uxth	r3, r3
 8003870:	4413      	add	r3, r2
 8003872:	b299      	uxth	r1, r3
 8003874:	7d7b      	ldrb	r3, [r7, #21]
 8003876:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4413      	add	r3, r2
 8003882:	b20a      	sxth	r2, r1
 8003884:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
      ic[curr_ic].scell.sc_codes[5] = (data[10] + (data[11] << 8));
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	330a      	adds	r3, #10
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	330b      	adds	r3, #11
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	b29b      	uxth	r3, r3
 800389a:	4413      	add	r3, r2
 800389c:	b299      	uxth	r1, r3
 800389e:	7d7b      	ldrb	r3, [r7, #21]
 80038a0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	4413      	add	r3, r2
 80038ac:	b20a      	sxth	r2, r1
 80038ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      ic[curr_ic].scell.sc_codes[6] = (data[12] + (data[13] << 8));
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	330c      	adds	r3, #12
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	330d      	adds	r3, #13
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	b299      	uxth	r1, r3
 80038c8:	7d7b      	ldrb	r3, [r7, #21]
 80038ca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4413      	add	r3, r2
 80038d6:	b20a      	sxth	r2, r1
 80038d8:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
      ic[curr_ic].scell.sc_codes[7] = (data[14] + (data[15] << 8));
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	330e      	adds	r3, #14
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	330f      	adds	r3, #15
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	b299      	uxth	r1, r3
 80038f2:	7d7b      	ldrb	r3, [r7, #21]
 80038f4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4413      	add	r3, r2
 8003900:	b20a      	sxth	r2, r1
 8003902:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
      ic[curr_ic].scell.sc_codes[8] = (data[16] + (data[17] << 8));
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3310      	adds	r3, #16
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3311      	adds	r3, #17
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	b29b      	uxth	r3, r3
 8003918:	4413      	add	r3, r2
 800391a:	b299      	uxth	r1, r3
 800391c:	7d7b      	ldrb	r3, [r7, #21]
 800391e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4413      	add	r3, r2
 800392a:	b20a      	sxth	r2, r1
 800392c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ic[curr_ic].scell.sc_codes[9] = (data[18] + (data[19] << 8));
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	3312      	adds	r3, #18
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	3313      	adds	r3, #19
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	b29b      	uxth	r3, r3
 8003942:	4413      	add	r3, r2
 8003944:	b299      	uxth	r1, r3
 8003946:	7d7b      	ldrb	r3, [r7, #21]
 8003948:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	4413      	add	r3, r2
 8003954:	b20a      	sxth	r2, r1
 8003956:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      ic[curr_ic].scell.sc_codes[10] = (data[20] + (data[21] << 8));
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3314      	adds	r3, #20
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	3315      	adds	r3, #21
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	b29b      	uxth	r3, r3
 800396c:	4413      	add	r3, r2
 800396e:	b299      	uxth	r1, r3
 8003970:	7d7b      	ldrb	r3, [r7, #21]
 8003972:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	b20a      	sxth	r2, r1
 8003980:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
      ic[curr_ic].scell.sc_codes[11] = (data[22] + (data[23] << 8));
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	3316      	adds	r3, #22
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	3317      	adds	r3, #23
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	b29b      	uxth	r3, r3
 8003996:	4413      	add	r3, r2
 8003998:	b299      	uxth	r1, r3
 800399a:	7d7b      	ldrb	r3, [r7, #21]
 800399c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4413      	add	r3, r2
 80039a8:	b20a      	sxth	r2, r1
 80039aa:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
      ic[curr_ic].scell.sc_codes[12] = (data[24] + (data[25] << 8));
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	3318      	adds	r3, #24
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3319      	adds	r3, #25
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	b299      	uxth	r1, r3
 80039c4:	7d7b      	ldrb	r3, [r7, #21]
 80039c6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	b20a      	sxth	r2, r1
 80039d4:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
      ic[curr_ic].scell.sc_codes[13] = (data[26] + (data[27] << 8));
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	331a      	adds	r3, #26
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	331b      	adds	r3, #27
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	b299      	uxth	r1, r3
 80039ee:	7d7b      	ldrb	r3, [r7, #21]
 80039f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	4413      	add	r3, r2
 80039fc:	b20a      	sxth	r2, r1
 80039fe:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
      ic[curr_ic].scell.sc_codes[14] = (data[28] + (data[29] << 8));
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	331c      	adds	r3, #28
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	331d      	adds	r3, #29
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	b299      	uxth	r1, r3
 8003a18:	7d7b      	ldrb	r3, [r7, #21]
 8003a1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	b20a      	sxth	r2, r1
 8003a28:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
      ic[curr_ic].scell.sc_codes[15] = (data[30] + (data[31] << 8));
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	331e      	adds	r3, #30
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	331f      	adds	r3, #31
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	b299      	uxth	r1, r3
 8003a42:	7d7b      	ldrb	r3, [r7, #21]
 8003a44:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	4413      	add	r3, r2
 8003a50:	b20a      	sxth	r2, r1
 8003a52:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      break;
 8003a56:	e000      	b.n	8003a5a <adBms6830ParseSCell+0x5da>

    default:
      break;
 8003a58:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003a5a:	7d7b      	ldrb	r3, [r7, #21]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	757b      	strb	r3, [r7, #21]
 8003a60:	7d7a      	ldrb	r2, [r7, #21]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f4ff ad31 	bcc.w	80034cc <adBms6830ParseSCell+0x4c>
    }
  }
  free(data);
 8003a6a:	6938      	ldr	r0, [r7, #16]
 8003a6c:	f00e fd42 	bl	80124f4 <free>
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <adBms6830ParseFCell>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseFCell(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *fcv_data)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	4603      	mov	r3, r0
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	4613      	mov	r3, r2
 8003a88:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = RDFCALL_SIZE;}
 8003a8e:	7bbb      	ldrb	r3, [r7, #14]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <adBms6830ParseFCell+0x22>
 8003a94:	2322      	movs	r3, #34	@ 0x22
 8003a96:	75fb      	strb	r3, [r7, #23]
 8003a98:	e001      	b.n	8003a9e <adBms6830ParseFCell+0x26>
  else {data_size = RX_DATA;}
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f00e fa26 	bl	8011ef4 <calloc>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <adBms6830ParseFCell+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse fcell memory \n");
    #else
    printf(" Failed to allocate parse fcell memory \n");
 8003ab2:	4894      	ldr	r0, [pc, #592]	@ (8003d04 <adBms6830ParseFCell+0x28c>)
 8003ab4:	f010 f948 	bl	8013d48 <puts>
    #endif
    exit(0);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f00e fa37 	bl	8011f2c <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	757b      	strb	r3, [r7, #21]
 8003ac2:	e2c9      	b.n	8004058 <adBms6830ParseFCell+0x5e0>
  {
    memcpy(&data[0], &fcv_data[address], data_size); /* dst , src , size */
 8003ac4:	7dbb      	ldrb	r3, [r7, #22]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	7dfa      	ldrb	r2, [r7, #23]
 8003acc:	4619      	mov	r1, r3
 8003ace:	6938      	ldr	r0, [r7, #16]
 8003ad0:	f010 f99e 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (data_size));
 8003ad4:	7d7b      	ldrb	r3, [r7, #21]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	7dfa      	ldrb	r2, [r7, #23]
 8003adc:	fb12 f303 	smulbb	r3, r2, r3
 8003ae0:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 8003ae2:	7bbb      	ldrb	r3, [r7, #14]
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	f200 82b3 	bhi.w	8004050 <adBms6830ParseFCell+0x5d8>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <adBms6830ParseFCell+0x78>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003db1 	.word	0x08003db1
 8003af4:	08003b0d 	.word	0x08003b0d
 8003af8:	08003b8b 	.word	0x08003b8b
 8003afc:	08003c09 	.word	0x08003c09
 8003b00:	08003c87 	.word	0x08003c87
 8003b04:	08003d09 	.word	0x08003d09
 8003b08:	08003d87 	.word	0x08003d87
    {
    case A: /* Cell Register group A */
      ic[curr_ic].fcell.fc_codes[0] = (data[0] + (data[1] << 8));
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3301      	adds	r3, #1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b299      	uxth	r1, r3
 8003b20:	7d7b      	ldrb	r3, [r7, #21]
 8003b22:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b20a      	sxth	r2, r1
 8003b30:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
      ic[curr_ic].fcell.fc_codes[1] = (data[2] + (data[3] << 8));
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3302      	adds	r3, #2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3303      	adds	r3, #3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	b299      	uxth	r1, r3
 8003b4a:	7d7b      	ldrb	r3, [r7, #21]
 8003b4c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4413      	add	r3, r2
 8003b58:	b20a      	sxth	r2, r1
 8003b5a:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
      ic[curr_ic].fcell.fc_codes[2] = (data[4] + (data[5] << 8));
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3304      	adds	r3, #4
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3305      	adds	r3, #5
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	b299      	uxth	r1, r3
 8003b74:	7d7b      	ldrb	r3, [r7, #21]
 8003b76:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	b20a      	sxth	r2, r1
 8003b84:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
      break;
 8003b88:	e263      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case B: /* Cell Register group B */
      ic[curr_ic].fcell.fc_codes[3] = (data[0] + (data[1] << 8));
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3301      	adds	r3, #1
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	7d7b      	ldrb	r3, [r7, #21]
 8003ba0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	4413      	add	r3, r2
 8003bac:	b20a      	sxth	r2, r1
 8003bae:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
      ic[curr_ic].fcell.fc_codes[4] = (data[2] + (data[3] << 8));
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3303      	adds	r3, #3
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	7d7b      	ldrb	r3, [r7, #21]
 8003bca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	b20a      	sxth	r2, r1
 8003bd8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      ic[curr_ic].fcell.fc_codes[5] = (data[4] + (data[5] << 8));
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	3304      	adds	r3, #4
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	3305      	adds	r3, #5
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4413      	add	r3, r2
 8003bf0:	b299      	uxth	r1, r3
 8003bf2:	7d7b      	ldrb	r3, [r7, #21]
 8003bf4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4413      	add	r3, r2
 8003c00:	b20a      	sxth	r2, r1
 8003c02:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      break;
 8003c06:	e224      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case C: /* Cell Register group C */
      ic[curr_ic].fcell.fc_codes[6] = (data[0] + (data[1] << 8));
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3301      	adds	r3, #1
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	b299      	uxth	r1, r3
 8003c1c:	7d7b      	ldrb	r3, [r7, #21]
 8003c1e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b20a      	sxth	r2, r1
 8003c2c:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      ic[curr_ic].fcell.fc_codes[7] = (data[2] + (data[3] << 8));
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3302      	adds	r3, #2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3303      	adds	r3, #3
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	b299      	uxth	r1, r3
 8003c46:	7d7b      	ldrb	r3, [r7, #21]
 8003c48:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4413      	add	r3, r2
 8003c54:	b20a      	sxth	r2, r1
 8003c56:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      ic[curr_ic].fcell.fc_codes[8] = (data[4] + (data[5] << 8));
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3305      	adds	r3, #5
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b299      	uxth	r1, r3
 8003c70:	7d7b      	ldrb	r3, [r7, #21]
 8003c72:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b20a      	sxth	r2, r1
 8003c80:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      break;
 8003c84:	e1e5      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case D: /* Cell Register group D */
      ic[curr_ic].fcell.fc_codes[9] =  (data[0] + (data[1] << 8));
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	b299      	uxth	r1, r3
 8003c9a:	7d7b      	ldrb	r3, [r7, #21]
 8003c9c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	b20a      	sxth	r2, r1
 8003caa:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
      ic[curr_ic].fcell.fc_codes[10] = (data[2] + (data[3] << 8));
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3303      	adds	r3, #3
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	b299      	uxth	r1, r3
 8003cc4:	7d7b      	ldrb	r3, [r7, #21]
 8003cc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	b20a      	sxth	r2, r1
 8003cd4:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
      ic[curr_ic].fcell.fc_codes[11] = (data[4] + (data[5] << 8));
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3305      	adds	r3, #5
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	b299      	uxth	r1, r3
 8003cee:	7d7b      	ldrb	r3, [r7, #21]
 8003cf0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b20a      	sxth	r2, r1
 8003cfe:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      break;
 8003d02:	e1a6      	b.n	8004052 <adBms6830ParseFCell+0x5da>
 8003d04:	080168bc 	.word	0x080168bc

    case E: /* Cell Register group E */
      ic[curr_ic].fcell.fc_codes[12] = (data[0] + (data[1] << 8));
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3301      	adds	r3, #1
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	b299      	uxth	r1, r3
 8003d1c:	7d7b      	ldrb	r3, [r7, #21]
 8003d1e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	b20a      	sxth	r2, r1
 8003d2c:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
      ic[curr_ic].fcell.fc_codes[13] = (data[2] + (data[3] << 8));
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	3302      	adds	r3, #2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3303      	adds	r3, #3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	b299      	uxth	r1, r3
 8003d46:	7d7b      	ldrb	r3, [r7, #21]
 8003d48:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	4413      	add	r3, r2
 8003d54:	b20a      	sxth	r2, r1
 8003d56:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      ic[curr_ic].fcell.fc_codes[14] = (data[4] + (data[5] << 8));
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	3305      	adds	r3, #5
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b299      	uxth	r1, r3
 8003d70:	7d7b      	ldrb	r3, [r7, #21]
 8003d72:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b20a      	sxth	r2, r1
 8003d80:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      break;
 8003d84:	e165      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case F: /* Cell Register group F */
      ic[curr_ic].fcell.fc_codes[15] = (data[0] + (data[1] << 8));
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	b299      	uxth	r1, r3
 8003d9a:	7d7b      	ldrb	r3, [r7, #21]
 8003d9c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	b20a      	sxth	r2, r1
 8003daa:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
      break;
 8003dae:	e150      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    case ALL_GRP: /* Cell Register group ALL */
      ic[curr_ic].fcell.fc_codes[0] = (data[0] + (data[1] << 8));
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	3301      	adds	r3, #1
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b299      	uxth	r1, r3
 8003dc4:	7d7b      	ldrb	r3, [r7, #21]
 8003dc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003dca:	fb02 f303 	mul.w	r3, r2, r3
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	b20a      	sxth	r2, r1
 8003dd4:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
      ic[curr_ic].fcell.fc_codes[1] = (data[2] + (data[3] << 8));
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3302      	adds	r3, #2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3303      	adds	r3, #3
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	b299      	uxth	r1, r3
 8003dee:	7d7b      	ldrb	r3, [r7, #21]
 8003df0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	b20a      	sxth	r2, r1
 8003dfe:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
      ic[curr_ic].fcell.fc_codes[2] = (data[4] + (data[5] << 8));
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3304      	adds	r3, #4
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3305      	adds	r3, #5
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	b299      	uxth	r1, r3
 8003e18:	7d7b      	ldrb	r3, [r7, #21]
 8003e1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4413      	add	r3, r2
 8003e26:	b20a      	sxth	r2, r1
 8003e28:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
      ic[curr_ic].fcell.fc_codes[3] = (data[6] + (data[7] << 8));
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3306      	adds	r3, #6
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3307      	adds	r3, #7
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	b299      	uxth	r1, r3
 8003e42:	7d7b      	ldrb	r3, [r7, #21]
 8003e44:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e48:	fb02 f303 	mul.w	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	4413      	add	r3, r2
 8003e50:	b20a      	sxth	r2, r1
 8003e52:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
      ic[curr_ic].fcell.fc_codes[4] = (data[8] + (data[9] << 8));
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3309      	adds	r3, #9
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	7d7b      	ldrb	r3, [r7, #21]
 8003e6e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	b20a      	sxth	r2, r1
 8003e7c:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      ic[curr_ic].fcell.fc_codes[5] = (data[10] + (data[11] << 8));
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	330a      	adds	r3, #10
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	330b      	adds	r3, #11
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	021b      	lsls	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	b299      	uxth	r1, r3
 8003e96:	7d7b      	ldrb	r3, [r7, #21]
 8003e98:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	b20a      	sxth	r2, r1
 8003ea6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      ic[curr_ic].fcell.fc_codes[6] = (data[12] + (data[13] << 8));
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	330c      	adds	r3, #12
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	330d      	adds	r3, #13
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	b299      	uxth	r1, r3
 8003ec0:	7d7b      	ldrb	r3, [r7, #21]
 8003ec2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4413      	add	r3, r2
 8003ece:	b20a      	sxth	r2, r1
 8003ed0:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      ic[curr_ic].fcell.fc_codes[7] = (data[14] + (data[15] << 8));
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	330e      	adds	r3, #14
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	330f      	adds	r3, #15
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	7d7b      	ldrb	r3, [r7, #21]
 8003eec:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b20a      	sxth	r2, r1
 8003efa:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
      ic[curr_ic].fcell.fc_codes[8] = (data[16] + (data[17] << 8));
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	3310      	adds	r3, #16
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3311      	adds	r3, #17
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	b299      	uxth	r1, r3
 8003f14:	7d7b      	ldrb	r3, [r7, #21]
 8003f16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4413      	add	r3, r2
 8003f22:	b20a      	sxth	r2, r1
 8003f24:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      ic[curr_ic].fcell.fc_codes[9] =  (data[18] + (data[19] << 8));
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	3312      	adds	r3, #18
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3313      	adds	r3, #19
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	b299      	uxth	r1, r3
 8003f3e:	7d7b      	ldrb	r3, [r7, #21]
 8003f40:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	b20a      	sxth	r2, r1
 8003f4e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
      ic[curr_ic].fcell.fc_codes[10] = (data[20] + (data[21] << 8));
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3314      	adds	r3, #20
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3315      	adds	r3, #21
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	b299      	uxth	r1, r3
 8003f68:	7d7b      	ldrb	r3, [r7, #21]
 8003f6a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	4413      	add	r3, r2
 8003f76:	b20a      	sxth	r2, r1
 8003f78:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
      ic[curr_ic].fcell.fc_codes[11] = (data[22] + (data[23] << 8));
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	3316      	adds	r3, #22
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	3317      	adds	r3, #23
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	b299      	uxth	r1, r3
 8003f92:	7d7b      	ldrb	r3, [r7, #21]
 8003f94:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	b20a      	sxth	r2, r1
 8003fa2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      ic[curr_ic].fcell.fc_codes[12] = (data[24] + (data[25] << 8));
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	3318      	adds	r3, #24
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	3319      	adds	r3, #25
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	b299      	uxth	r1, r3
 8003fbc:	7d7b      	ldrb	r3, [r7, #21]
 8003fbe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	b20a      	sxth	r2, r1
 8003fcc:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
      ic[curr_ic].fcell.fc_codes[13] = (data[26] + (data[27] << 8));
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	331a      	adds	r3, #26
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	331b      	adds	r3, #27
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b299      	uxth	r1, r3
 8003fe6:	7d7b      	ldrb	r3, [r7, #21]
 8003fe8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	b20a      	sxth	r2, r1
 8003ff6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      ic[curr_ic].fcell.fc_codes[14] = (data[28] + (data[29] << 8));
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	331c      	adds	r3, #28
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	331d      	adds	r3, #29
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b29b      	uxth	r3, r3
 800400c:	4413      	add	r3, r2
 800400e:	b299      	uxth	r1, r3
 8004010:	7d7b      	ldrb	r3, [r7, #21]
 8004012:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4413      	add	r3, r2
 800401e:	b20a      	sxth	r2, r1
 8004020:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      ic[curr_ic].fcell.fc_codes[15] = (data[30] + (data[31] << 8));
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	331e      	adds	r3, #30
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	331f      	adds	r3, #31
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	b29b      	uxth	r3, r3
 8004036:	4413      	add	r3, r2
 8004038:	b299      	uxth	r1, r3
 800403a:	7d7b      	ldrb	r3, [r7, #21]
 800403c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	4413      	add	r3, r2
 8004048:	b20a      	sxth	r2, r1
 800404a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
      break;
 800404e:	e000      	b.n	8004052 <adBms6830ParseFCell+0x5da>

    default:
      break;
 8004050:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004052:	7d7b      	ldrb	r3, [r7, #21]
 8004054:	3301      	adds	r3, #1
 8004056:	757b      	strb	r3, [r7, #21]
 8004058:	7d7a      	ldrb	r2, [r7, #21]
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	429a      	cmp	r2, r3
 800405e:	f4ff ad31 	bcc.w	8003ac4 <adBms6830ParseFCell+0x4c>
    }
  }
  free(data);
 8004062:	6938      	ldr	r0, [r7, #16]
 8004064:	f00e fa46 	bl	80124f4 <free>
}
 8004068:	bf00      	nop
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <adBms6830ParseAux>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseAux(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *aux_data)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	4613      	mov	r3, r2
 8004080:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = (RDASALL_SIZE-44);}  /* RDASALL_SIZE 68 byte - (RAUX 20 byte + STATUS 24 byte) */
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <adBms6830ParseAux+0x22>
 800408c:	231a      	movs	r3, #26
 800408e:	75fb      	strb	r3, [r7, #23]
 8004090:	e001      	b.n	8004096 <adBms6830ParseAux+0x26>
  else {data_size = RX_DATA;}
 8004092:	2308      	movs	r3, #8
 8004094:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f00d ff2a 	bl	8011ef4 <calloc>
 80040a0:	4603      	mov	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <adBms6830ParseAux+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse aux memory \n");
    #else
    printf(" Failed to allocate parse aux memory \n");
 80040aa:	4892      	ldr	r0, [pc, #584]	@ (80042f4 <adBms6830ParseAux+0x284>)
 80040ac:	f00f fe4c 	bl	8013d48 <puts>
    #endif
    exit(0);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f00d ff3b 	bl	8011f2c <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	757b      	strb	r3, [r7, #21]
 80040ba:	e21d      	b.n	80044f8 <adBms6830ParseAux+0x488>
  {
    memcpy(&data[0], &aux_data[address], data_size); /* dst , src , size */
 80040bc:	7dbb      	ldrb	r3, [r7, #22]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	7dfa      	ldrb	r2, [r7, #23]
 80040c4:	4619      	mov	r1, r3
 80040c6:	6938      	ldr	r0, [r7, #16]
 80040c8:	f00f fea2 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (data_size));
 80040cc:	7d7b      	ldrb	r3, [r7, #21]
 80040ce:	3301      	adds	r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	7dfa      	ldrb	r2, [r7, #23]
 80040d4:	fb12 f303 	smulbb	r3, r2, r3
 80040d8:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 80040da:	7bbb      	ldrb	r3, [r7, #14]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	f200 8207 	bhi.w	80044f0 <adBms6830ParseAux+0x480>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <adBms6830ParseAux+0x78>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080042f9 	.word	0x080042f9
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800417b 	.word	0x0800417b
 80040f4:	080041f9 	.word	0x080041f9
 80040f8:	08004277 	.word	0x08004277
    {
    case A: /* Aux Register group A */
      ic[curr_ic].aux.a_codes[0] = (data[0] + (data[1] << 8));
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3301      	adds	r3, #1
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	b29b      	uxth	r3, r3
 800410c:	4413      	add	r3, r2
 800410e:	b299      	uxth	r1, r3
 8004110:	7d7b      	ldrb	r3, [r7, #21]
 8004112:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	b20a      	sxth	r2, r1
 8004120:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      ic[curr_ic].aux.a_codes[1] = (data[2] + (data[3] << 8));
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	3302      	adds	r3, #2
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3303      	adds	r3, #3
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	b29b      	uxth	r3, r3
 8004136:	4413      	add	r3, r2
 8004138:	b299      	uxth	r1, r3
 800413a:	7d7b      	ldrb	r3, [r7, #21]
 800413c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	4413      	add	r3, r2
 8004148:	b20a      	sxth	r2, r1
 800414a:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
      ic[curr_ic].aux.a_codes[2] = (data[4] + (data[5] << 8));
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3304      	adds	r3, #4
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3305      	adds	r3, #5
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	b29b      	uxth	r3, r3
 8004160:	4413      	add	r3, r2
 8004162:	b299      	uxth	r1, r3
 8004164:	7d7b      	ldrb	r3, [r7, #21]
 8004166:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	4413      	add	r3, r2
 8004172:	b20a      	sxth	r2, r1
 8004174:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      break;
 8004178:	e1bb      	b.n	80044f2 <adBms6830ParseAux+0x482>

    case B: /* Aux Register group B */
      ic[curr_ic].aux.a_codes[3] = (data[0] + (data[1] << 8));
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	3301      	adds	r3, #1
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	b29b      	uxth	r3, r3
 800418a:	4413      	add	r3, r2
 800418c:	b299      	uxth	r1, r3
 800418e:	7d7b      	ldrb	r3, [r7, #21]
 8004190:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	4413      	add	r3, r2
 800419c:	b20a      	sxth	r2, r1
 800419e:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      ic[curr_ic].aux.a_codes[4] = (data[2] + (data[3] << 8));
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	3302      	adds	r3, #2
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	3303      	adds	r3, #3
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	b299      	uxth	r1, r3
 80041b8:	7d7b      	ldrb	r3, [r7, #21]
 80041ba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4413      	add	r3, r2
 80041c6:	b20a      	sxth	r2, r1
 80041c8:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
      ic[curr_ic].aux.a_codes[5] = (data[4] + (data[5] << 8));
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	3304      	adds	r3, #4
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	3305      	adds	r3, #5
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	b29b      	uxth	r3, r3
 80041de:	4413      	add	r3, r2
 80041e0:	b299      	uxth	r1, r3
 80041e2:	7d7b      	ldrb	r3, [r7, #21]
 80041e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	4413      	add	r3, r2
 80041f0:	b20a      	sxth	r2, r1
 80041f2:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
      break;
 80041f6:	e17c      	b.n	80044f2 <adBms6830ParseAux+0x482>

    case C: /* Aux Register group C */
      ic[curr_ic].aux.a_codes[6] = (data[0] + (data[1] << 8));
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	b29b      	uxth	r3, r3
 8004208:	4413      	add	r3, r2
 800420a:	b299      	uxth	r1, r3
 800420c:	7d7b      	ldrb	r3, [r7, #21]
 800420e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4413      	add	r3, r2
 800421a:	b20a      	sxth	r2, r1
 800421c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
      ic[curr_ic].aux.a_codes[7] = (data[2] + (data[3] << 8));
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3302      	adds	r3, #2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	3303      	adds	r3, #3
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	b29b      	uxth	r3, r3
 8004232:	4413      	add	r3, r2
 8004234:	b299      	uxth	r1, r3
 8004236:	7d7b      	ldrb	r3, [r7, #21]
 8004238:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4413      	add	r3, r2
 8004244:	b20a      	sxth	r2, r1
 8004246:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
      ic[curr_ic].aux.a_codes[8] = (data[4] + (data[5] << 8));
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3304      	adds	r3, #4
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	3305      	adds	r3, #5
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	b29b      	uxth	r3, r3
 800425c:	4413      	add	r3, r2
 800425e:	b299      	uxth	r1, r3
 8004260:	7d7b      	ldrb	r3, [r7, #21]
 8004262:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	b20a      	sxth	r2, r1
 8004270:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
      break;
 8004274:	e13d      	b.n	80044f2 <adBms6830ParseAux+0x482>

    case D: /* Aux Register group D */
      ic[curr_ic].aux.a_codes[9] =  (data[0] + (data[1] << 8));
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	3301      	adds	r3, #1
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	b29b      	uxth	r3, r3
 8004286:	4413      	add	r3, r2
 8004288:	b299      	uxth	r1, r3
 800428a:	7d7b      	ldrb	r3, [r7, #21]
 800428c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	4413      	add	r3, r2
 8004298:	b20a      	sxth	r2, r1
 800429a:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
      ic[curr_ic].aux.a_codes[10] =  (data[2] + (data[3] << 8));
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	3302      	adds	r3, #2
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3303      	adds	r3, #3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	b299      	uxth	r1, r3
 80042b4:	7d7b      	ldrb	r3, [r7, #21]
 80042b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4413      	add	r3, r2
 80042c2:	b20a      	sxth	r2, r1
 80042c4:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
      ic[curr_ic].aux.a_codes[11] =  (data[4] + (data[5] << 8));
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3304      	adds	r3, #4
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	3305      	adds	r3, #5
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4413      	add	r3, r2
 80042dc:	b299      	uxth	r1, r3
 80042de:	7d7b      	ldrb	r3, [r7, #21]
 80042e0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80042e4:	fb02 f303 	mul.w	r3, r2, r3
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4413      	add	r3, r2
 80042ec:	b20a      	sxth	r2, r1
 80042ee:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
      break;
 80042f2:	e0fe      	b.n	80044f2 <adBms6830ParseAux+0x482>
 80042f4:	080168e4 	.word	0x080168e4

   case ALL_GRP: /* Aux Register group ALL */
      ic[curr_ic].aux.a_codes[0]  = (data[0] + (data[1] << 8));
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3301      	adds	r3, #1
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	b29b      	uxth	r3, r3
 8004308:	4413      	add	r3, r2
 800430a:	b299      	uxth	r1, r3
 800430c:	7d7b      	ldrb	r3, [r7, #21]
 800430e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	b20a      	sxth	r2, r1
 800431c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      ic[curr_ic].aux.a_codes[1]  = (data[2] + (data[3] << 8));
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3302      	adds	r3, #2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3303      	adds	r3, #3
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	4413      	add	r3, r2
 8004334:	b299      	uxth	r1, r3
 8004336:	7d7b      	ldrb	r3, [r7, #21]
 8004338:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800433c:	fb02 f303 	mul.w	r3, r2, r3
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	4413      	add	r3, r2
 8004344:	b20a      	sxth	r2, r1
 8004346:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
      ic[curr_ic].aux.a_codes[2]  = (data[4] + (data[5] << 8));
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3304      	adds	r3, #4
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	3305      	adds	r3, #5
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	b29b      	uxth	r3, r3
 800435c:	4413      	add	r3, r2
 800435e:	b299      	uxth	r1, r3
 8004360:	7d7b      	ldrb	r3, [r7, #21]
 8004362:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	b20a      	sxth	r2, r1
 8004370:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      ic[curr_ic].aux.a_codes[3]  = (data[6] + (data[7] << 8));
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3306      	adds	r3, #6
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3307      	adds	r3, #7
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	b29b      	uxth	r3, r3
 8004386:	4413      	add	r3, r2
 8004388:	b299      	uxth	r1, r3
 800438a:	7d7b      	ldrb	r3, [r7, #21]
 800438c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	4413      	add	r3, r2
 8004398:	b20a      	sxth	r2, r1
 800439a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      ic[curr_ic].aux.a_codes[4]  = (data[8] + (data[9] << 8));
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	3308      	adds	r3, #8
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3309      	adds	r3, #9
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	b299      	uxth	r1, r3
 80043b4:	7d7b      	ldrb	r3, [r7, #21]
 80043b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	b20a      	sxth	r2, r1
 80043c4:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
      ic[curr_ic].aux.a_codes[5]  = (data[10] + (data[11] << 8));
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	330a      	adds	r3, #10
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	330b      	adds	r3, #11
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4413      	add	r3, r2
 80043dc:	b299      	uxth	r1, r3
 80043de:	7d7b      	ldrb	r3, [r7, #21]
 80043e0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4413      	add	r3, r2
 80043ec:	b20a      	sxth	r2, r1
 80043ee:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
      ic[curr_ic].aux.a_codes[6]  = (data[12] + (data[13] << 8));
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	330c      	adds	r3, #12
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	330d      	adds	r3, #13
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	b29b      	uxth	r3, r3
 8004404:	4413      	add	r3, r2
 8004406:	b299      	uxth	r1, r3
 8004408:	7d7b      	ldrb	r3, [r7, #21]
 800440a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4413      	add	r3, r2
 8004416:	b20a      	sxth	r2, r1
 8004418:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
      ic[curr_ic].aux.a_codes[7]  = (data[14] + (data[15] << 8));
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	330e      	adds	r3, #14
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	330f      	adds	r3, #15
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	b29b      	uxth	r3, r3
 800442e:	4413      	add	r3, r2
 8004430:	b299      	uxth	r1, r3
 8004432:	7d7b      	ldrb	r3, [r7, #21]
 8004434:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	4413      	add	r3, r2
 8004440:	b20a      	sxth	r2, r1
 8004442:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
      ic[curr_ic].aux.a_codes[8]  = (data[16] + (data[17] << 8));
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3310      	adds	r3, #16
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	3311      	adds	r3, #17
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	b29b      	uxth	r3, r3
 8004458:	4413      	add	r3, r2
 800445a:	b299      	uxth	r1, r3
 800445c:	7d7b      	ldrb	r3, [r7, #21]
 800445e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4413      	add	r3, r2
 800446a:	b20a      	sxth	r2, r1
 800446c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
      ic[curr_ic].aux.a_codes[9]  = (data[18] + (data[19] << 8));
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3312      	adds	r3, #18
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3313      	adds	r3, #19
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	b29b      	uxth	r3, r3
 8004482:	4413      	add	r3, r2
 8004484:	b299      	uxth	r1, r3
 8004486:	7d7b      	ldrb	r3, [r7, #21]
 8004488:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	4413      	add	r3, r2
 8004494:	b20a      	sxth	r2, r1
 8004496:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
      ic[curr_ic].aux.a_codes[10] = (data[20] + (data[21] << 8));
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3314      	adds	r3, #20
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3315      	adds	r3, #21
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	b299      	uxth	r1, r3
 80044b0:	7d7b      	ldrb	r3, [r7, #21]
 80044b2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	b20a      	sxth	r2, r1
 80044c0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
      ic[curr_ic].aux.a_codes[11] = (data[22] + (data[23] << 8));
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3316      	adds	r3, #22
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3317      	adds	r3, #23
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	b299      	uxth	r1, r3
 80044da:	7d7b      	ldrb	r3, [r7, #21]
 80044dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4413      	add	r3, r2
 80044e8:	b20a      	sxth	r2, r1
 80044ea:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
     break;
 80044ee:	e000      	b.n	80044f2 <adBms6830ParseAux+0x482>

    default:
      break;
 80044f0:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80044f2:	7d7b      	ldrb	r3, [r7, #21]
 80044f4:	3301      	adds	r3, #1
 80044f6:	757b      	strb	r3, [r7, #21]
 80044f8:	7d7a      	ldrb	r2, [r7, #21]
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f4ff addd 	bcc.w	80040bc <adBms6830ParseAux+0x4c>
    }
  }
  free(data);
 8004502:	6938      	ldr	r0, [r7, #16]
 8004504:	f00d fff6 	bl	80124f4 <free>
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <adBms6830ParseRAux>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseRAux(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *raux_data)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	4613      	mov	r3, r2
 8004520:	73bb      	strb	r3, [r7, #14]
  uint8_t *data, data_size, address = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	75bb      	strb	r3, [r7, #22]
  if(grp == ALL_GRP){data_size = (RDASALL_SIZE-48);}  /* RDASALL_SIZE 68 byte - (AUX 24 byte + STATUS 24 byte) */
 8004526:	7bbb      	ldrb	r3, [r7, #14]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <adBms6830ParseRAux+0x22>
 800452c:	2316      	movs	r3, #22
 800452e:	75fb      	strb	r3, [r7, #23]
 8004530:	e001      	b.n	8004536 <adBms6830ParseRAux+0x26>
  else {data_size = RX_DATA;}
 8004532:	2308      	movs	r3, #8
 8004534:	75fb      	strb	r3, [r7, #23]
  data = (uint8_t *)calloc(data_size, sizeof(uint8_t));
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f00d fcda 	bl	8011ef4 <calloc>
 8004540:	4603      	mov	r3, r0
 8004542:	613b      	str	r3, [r7, #16]
  if(data == NULL)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <adBms6830ParseRAux+0x46>
  {
    #ifdef MBED
    pc.printf(" Failed to allocate parse raux memory \n");
    #else
    printf(" Failed to allocate parse raux memory \n");
 800454a:	487d      	ldr	r0, [pc, #500]	@ (8004740 <adBms6830ParseRAux+0x230>)
 800454c:	f00f fbfc 	bl	8013d48 <puts>
    #endif
    exit(0);
 8004550:	2000      	movs	r0, #0
 8004552:	f00d fceb 	bl	8011f2c <exit>
  }
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004556:	2300      	movs	r3, #0
 8004558:	757b      	strb	r3, [r7, #21]
 800455a:	e1c9      	b.n	80048f0 <adBms6830ParseRAux+0x3e0>
  {
    memcpy(&data[0], &raux_data[address], data_size); /* dst , src , size */
 800455c:	7dbb      	ldrb	r3, [r7, #22]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	7dfa      	ldrb	r2, [r7, #23]
 8004564:	4619      	mov	r1, r3
 8004566:	6938      	ldr	r0, [r7, #16]
 8004568:	f00f fc52 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (data_size));
 800456c:	7d7b      	ldrb	r3, [r7, #21]
 800456e:	3301      	adds	r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	7dfa      	ldrb	r2, [r7, #23]
 8004574:	fb12 f303 	smulbb	r3, r2, r3
 8004578:	75bb      	strb	r3, [r7, #22]
    switch (grp)
 800457a:	7bbb      	ldrb	r3, [r7, #14]
 800457c:	2b04      	cmp	r3, #4
 800457e:	f200 81b3 	bhi.w	80048e8 <adBms6830ParseRAux+0x3d8>
 8004582:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <adBms6830ParseRAux+0x78>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	08004745 	.word	0x08004745
 800458c:	0800459d 	.word	0x0800459d
 8004590:	0800461b 	.word	0x0800461b
 8004594:	08004699 	.word	0x08004699
 8004598:	08004717 	.word	0x08004717
    {
    case A: /* RAux Register group A */
      ic[curr_ic].raux.ra_codes[0] = (data[0] + (data[1] << 8));
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	3301      	adds	r3, #1
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	4413      	add	r3, r2
 80045ae:	b299      	uxth	r1, r3
 80045b0:	7d7b      	ldrb	r3, [r7, #21]
 80045b2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	b20a      	sxth	r2, r1
 80045c0:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
      ic[curr_ic].raux.ra_codes[1] = (data[2] + (data[3] << 8));
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3302      	adds	r3, #2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	3303      	adds	r3, #3
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	b299      	uxth	r1, r3
 80045da:	7d7b      	ldrb	r3, [r7, #21]
 80045dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	4413      	add	r3, r2
 80045e8:	b20a      	sxth	r2, r1
 80045ea:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
      ic[curr_ic].raux.ra_codes[2] = (data[4] + (data[5] << 8));
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3304      	adds	r3, #4
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	3305      	adds	r3, #5
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4413      	add	r3, r2
 8004602:	b299      	uxth	r1, r3
 8004604:	7d7b      	ldrb	r3, [r7, #21]
 8004606:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4413      	add	r3, r2
 8004612:	b20a      	sxth	r2, r1
 8004614:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
      break;
 8004618:	e167      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    case B: /* RAux Register group B */
      ic[curr_ic].raux.ra_codes[3] = (data[0] + (data[1] << 8));
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	3301      	adds	r3, #1
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	b29b      	uxth	r3, r3
 800462a:	4413      	add	r3, r2
 800462c:	b299      	uxth	r1, r3
 800462e:	7d7b      	ldrb	r3, [r7, #21]
 8004630:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	4413      	add	r3, r2
 800463c:	b20a      	sxth	r2, r1
 800463e:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
      ic[curr_ic].raux.ra_codes[4] = (data[2] + (data[3] << 8));
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3302      	adds	r3, #2
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3303      	adds	r3, #3
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b29b      	uxth	r3, r3
 8004654:	4413      	add	r3, r2
 8004656:	b299      	uxth	r1, r3
 8004658:	7d7b      	ldrb	r3, [r7, #21]
 800465a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4413      	add	r3, r2
 8004666:	b20a      	sxth	r2, r1
 8004668:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
      ic[curr_ic].raux.ra_codes[5] = (data[4] + (data[5] << 8));
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3304      	adds	r3, #4
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	3305      	adds	r3, #5
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	b29b      	uxth	r3, r3
 800467e:	4413      	add	r3, r2
 8004680:	b299      	uxth	r1, r3
 8004682:	7d7b      	ldrb	r3, [r7, #21]
 8004684:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	4413      	add	r3, r2
 8004690:	b20a      	sxth	r2, r1
 8004692:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      break;
 8004696:	e128      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    case C: /* RAux Register group C */
      ic[curr_ic].raux.ra_codes[6] = (data[0] + (data[1] << 8));
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3301      	adds	r3, #1
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	b299      	uxth	r1, r3
 80046ac:	7d7b      	ldrb	r3, [r7, #21]
 80046ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	b20a      	sxth	r2, r1
 80046bc:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
      ic[curr_ic].raux.ra_codes[7] = (data[2] + (data[3] << 8));
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3302      	adds	r3, #2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	3303      	adds	r3, #3
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	b299      	uxth	r1, r3
 80046d6:	7d7b      	ldrb	r3, [r7, #21]
 80046d8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80046dc:	fb02 f303 	mul.w	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4413      	add	r3, r2
 80046e4:	b20a      	sxth	r2, r1
 80046e6:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
      ic[curr_ic].raux.ra_codes[8] = (data[4] + (data[5] << 8));
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	3304      	adds	r3, #4
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3305      	adds	r3, #5
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	b299      	uxth	r1, r3
 8004700:	7d7b      	ldrb	r3, [r7, #21]
 8004702:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	b20a      	sxth	r2, r1
 8004710:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
      break;
 8004714:	e0e9      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    case D: /* RAux Register group D */
      ic[curr_ic].raux.ra_codes[9] =  (data[0] + (data[1] << 8));
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3301      	adds	r3, #1
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b29b      	uxth	r3, r3
 8004726:	4413      	add	r3, r2
 8004728:	b299      	uxth	r1, r3
 800472a:	7d7b      	ldrb	r3, [r7, #21]
 800472c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	4413      	add	r3, r2
 8004738:	b20a      	sxth	r2, r1
 800473a:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
      break;
 800473e:	e0d4      	b.n	80048ea <adBms6830ParseRAux+0x3da>
 8004740:	0801690c 	.word	0x0801690c

    case ALL_GRP: /* RAux Register group ALL */
      ic[curr_ic].raux.ra_codes[0]  = (data[0] + (data[1] << 8));
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	b29b      	uxth	r3, r3
 8004754:	4413      	add	r3, r2
 8004756:	b299      	uxth	r1, r3
 8004758:	7d7b      	ldrb	r3, [r7, #21]
 800475a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4413      	add	r3, r2
 8004766:	b20a      	sxth	r2, r1
 8004768:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
      ic[curr_ic].raux.ra_codes[1]  = (data[2] + (data[3] << 8));
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	3302      	adds	r3, #2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3303      	adds	r3, #3
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	b29b      	uxth	r3, r3
 800477e:	4413      	add	r3, r2
 8004780:	b299      	uxth	r1, r3
 8004782:	7d7b      	ldrb	r3, [r7, #21]
 8004784:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004788:	fb02 f303 	mul.w	r3, r2, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	4413      	add	r3, r2
 8004790:	b20a      	sxth	r2, r1
 8004792:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
      ic[curr_ic].raux.ra_codes[2]  = (data[4] + (data[5] << 8));
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3304      	adds	r3, #4
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3305      	adds	r3, #5
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	b299      	uxth	r1, r3
 80047ac:	7d7b      	ldrb	r3, [r7, #21]
 80047ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4413      	add	r3, r2
 80047ba:	b20a      	sxth	r2, r1
 80047bc:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
      ic[curr_ic].raux.ra_codes[3]  = (data[6] + (data[7] << 8));
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	3306      	adds	r3, #6
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3307      	adds	r3, #7
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	b299      	uxth	r1, r3
 80047d6:	7d7b      	ldrb	r3, [r7, #21]
 80047d8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80047dc:	fb02 f303 	mul.w	r3, r2, r3
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	4413      	add	r3, r2
 80047e4:	b20a      	sxth	r2, r1
 80047e6:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
      ic[curr_ic].raux.ra_codes[4]  = (data[8] + (data[9] << 8));
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3308      	adds	r3, #8
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3309      	adds	r3, #9
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	b299      	uxth	r1, r3
 8004800:	7d7b      	ldrb	r3, [r7, #21]
 8004802:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4413      	add	r3, r2
 800480e:	b20a      	sxth	r2, r1
 8004810:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
      ic[curr_ic].raux.ra_codes[5]  = (data[10] + (data[11] << 8));
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	330a      	adds	r3, #10
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	330b      	adds	r3, #11
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	b29b      	uxth	r3, r3
 8004826:	4413      	add	r3, r2
 8004828:	b299      	uxth	r1, r3
 800482a:	7d7b      	ldrb	r3, [r7, #21]
 800482c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	4413      	add	r3, r2
 8004838:	b20a      	sxth	r2, r1
 800483a:	f8a3 20c2 	strh.w	r2, [r3, #194]	@ 0xc2
      ic[curr_ic].raux.ra_codes[6]  = (data[12] + (data[13] << 8));
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	330c      	adds	r3, #12
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	330d      	adds	r3, #13
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	b29b      	uxth	r3, r3
 8004850:	4413      	add	r3, r2
 8004852:	b299      	uxth	r1, r3
 8004854:	7d7b      	ldrb	r3, [r7, #21]
 8004856:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4413      	add	r3, r2
 8004862:	b20a      	sxth	r2, r1
 8004864:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
      ic[curr_ic].raux.ra_codes[7]  = (data[14] + (data[15] << 8));
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	330e      	adds	r3, #14
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	330f      	adds	r3, #15
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	b29b      	uxth	r3, r3
 800487a:	4413      	add	r3, r2
 800487c:	b299      	uxth	r1, r3
 800487e:	7d7b      	ldrb	r3, [r7, #21]
 8004880:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	4413      	add	r3, r2
 800488c:	b20a      	sxth	r2, r1
 800488e:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
      ic[curr_ic].raux.ra_codes[8]  = (data[16] + (data[17] << 8));
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3310      	adds	r3, #16
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3311      	adds	r3, #17
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	b299      	uxth	r1, r3
 80048a8:	7d7b      	ldrb	r3, [r7, #21]
 80048aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4413      	add	r3, r2
 80048b6:	b20a      	sxth	r2, r1
 80048b8:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
      ic[curr_ic].raux.ra_codes[9]  = (data[18] + (data[19] << 8));
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3312      	adds	r3, #18
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3313      	adds	r3, #19
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	b299      	uxth	r1, r3
 80048d2:	7d7b      	ldrb	r3, [r7, #21]
 80048d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	4413      	add	r3, r2
 80048e0:	b20a      	sxth	r2, r1
 80048e2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
     break;
 80048e6:	e000      	b.n	80048ea <adBms6830ParseRAux+0x3da>

    default:
      break;
 80048e8:	bf00      	nop
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80048ea:	7d7b      	ldrb	r3, [r7, #21]
 80048ec:	3301      	adds	r3, #1
 80048ee:	757b      	strb	r3, [r7, #21]
 80048f0:	7d7a      	ldrb	r2, [r7, #21]
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	f4ff ae31 	bcc.w	800455c <adBms6830ParseRAux+0x4c>
    }
  }
  free(data);
 80048fa:	6938      	ldr	r0, [r7, #16]
 80048fc:	f00d fdfa 	bl	80124f4 <free>
}
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <adBms6830ParseStatusA>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusA(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800491a:	2300      	movs	r3, #0
 800491c:	75bb      	strb	r3, [r7, #22]
 800491e:	e07d      	b.n	8004a1c <adBms6830ParseStatusA+0x114>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004920:	7dbb      	ldrb	r3, [r7, #22]
 8004922:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4413      	add	r3, r2
 800492e:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4413      	add	r3, r2
 8004938:	2208      	movs	r2, #8
 800493a:	4619      	mov	r1, r3
 800493c:	f00f fa68 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004940:	7dbb      	ldrb	r3, [r7, #22]
 8004942:	3301      	adds	r3, #1
 8004944:	b2db      	uxtb	r3, r3
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].stata.vref2   = (ic[curr_ic].stat.rx_data[0] | (ic[curr_ic].stat.rx_data[1] << 8));
 800494a:	7dbb      	ldrb	r3, [r7, #22]
 800494c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4413      	add	r3, r2
 8004958:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 800495c:	b21a      	sxth	r2, r3
 800495e:	7dbb      	ldrb	r3, [r7, #22]
 8004960:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	440b      	add	r3, r1
 800496c:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8004970:	b21b      	sxth	r3, r3
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	b21b      	sxth	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	b219      	sxth	r1, r3
 800497a:	7dbb      	ldrb	r3, [r7, #22]
 800497c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	4413      	add	r3, r2
 8004988:	b28a      	uxth	r2, r1
 800498a:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    ic[curr_ic].stata.itmp = (ic[curr_ic].stat.rx_data[2] | (ic[curr_ic].stat.rx_data[3] << 8));
 800498e:	7dbb      	ldrb	r3, [r7, #22]
 8004990:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	4413      	add	r3, r2
 800499c:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 80049a0:	b21a      	sxth	r2, r3
 80049a2:	7dbb      	ldrb	r3, [r7, #22]
 80049a4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	440b      	add	r3, r1
 80049b0:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80049b4:	b21b      	sxth	r3, r3
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	4313      	orrs	r3, r2
 80049bc:	b219      	sxth	r1, r3
 80049be:	7dbb      	ldrb	r3, [r7, #22]
 80049c0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4413      	add	r3, r2
 80049cc:	b28a      	uxth	r2, r1
 80049ce:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
    ic[curr_ic].stata.vref3   = (ic[curr_ic].stat.rx_data[4] | (ic[curr_ic].stat.rx_data[5] << 8));
 80049d2:	7dbb      	ldrb	r3, [r7, #22]
 80049d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	4413      	add	r3, r2
 80049e0:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 80049e4:	b21a      	sxth	r2, r3
 80049e6:	7dbb      	ldrb	r3, [r7, #22]
 80049e8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	440b      	add	r3, r1
 80049f4:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 80049f8:	b21b      	sxth	r3, r3
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	b21b      	sxth	r3, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	b219      	sxth	r1, r3
 8004a02:	7dbb      	ldrb	r3, [r7, #22]
 8004a04:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	4413      	add	r3, r2
 8004a10:	b28a      	uxth	r2, r1
 8004a12:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004a16:	7dbb      	ldrb	r3, [r7, #22]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	75bb      	strb	r3, [r7, #22]
 8004a1c:	7dba      	ldrb	r2, [r7, #22]
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	f4ff af7d 	bcc.w	8004920 <adBms6830ParseStatusA+0x18>
  }
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <adBms6830ParseStatusB>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusB(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	75bb      	strb	r3, [r7, #22]
 8004a46:	e077      	b.n	8004b38 <adBms6830ParseStatusB+0x108>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004a48:	7dbb      	ldrb	r3, [r7, #22]
 8004a4a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	2208      	movs	r2, #8
 8004a62:	4619      	mov	r1, r3
 8004a64:	f00f f9d4 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004a68:	7dbb      	ldrb	r3, [r7, #22]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].statb.vd   = (ic[curr_ic].stat.rx_data[0] + (ic[curr_ic].stat.rx_data[1] << 8));
 8004a72:	7dbb      	ldrb	r3, [r7, #22]
 8004a74:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a78:	fb02 f303 	mul.w	r3, r2, r3
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004a84:	4618      	mov	r0, r3
 8004a86:	7dbb      	ldrb	r3, [r7, #22]
 8004a88:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4413      	add	r3, r2
 8004a94:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	7dbb      	ldrb	r3, [r7, #22]
 8004a9e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	440b      	add	r3, r1
 8004aaa:	4402      	add	r2, r0
 8004aac:	b292      	uxth	r2, r2
 8004aae:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    ic[curr_ic].statb.va = (ic[curr_ic].stat.rx_data[2] + (ic[curr_ic].stat.rx_data[3] << 8));
 8004ab2:	7dbb      	ldrb	r3, [r7, #22]
 8004ab4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	7dbb      	ldrb	r3, [r7, #22]
 8004ac8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004acc:	fb02 f303 	mul.w	r3, r2, r3
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	7dbb      	ldrb	r3, [r7, #22]
 8004ade:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	440b      	add	r3, r1
 8004aea:	4402      	add	r2, r0
 8004aec:	b292      	uxth	r2, r2
 8004aee:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
    ic[curr_ic].statb.vr4k   = (ic[curr_ic].stat.rx_data[4] + (ic[curr_ic].stat.rx_data[5] << 8));
 8004af2:	7dbb      	ldrb	r3, [r7, #22]
 8004af4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	4413      	add	r3, r2
 8004b00:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004b04:	4618      	mov	r0, r3
 8004b06:	7dbb      	ldrb	r3, [r7, #22]
 8004b08:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4413      	add	r3, r2
 8004b14:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	7dbb      	ldrb	r3, [r7, #22]
 8004b1e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	440b      	add	r3, r1
 8004b2a:	4402      	add	r2, r0
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004b32:	7dbb      	ldrb	r3, [r7, #22]
 8004b34:	3301      	adds	r3, #1
 8004b36:	75bb      	strb	r3, [r7, #22]
 8004b38:	7dba      	ldrb	r2, [r7, #22]
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d383      	bcc.n	8004a48 <adBms6830ParseStatusB+0x18>
  }
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <adBms6830ParseStatusC>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusC(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	4603      	mov	r3, r0
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	75bb      	strb	r3, [r7, #22]
 8004b60:	e1e7      	b.n	8004f32 <adBms6830ParseStatusC+0x3e8>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004b62:	7dbb      	ldrb	r3, [r7, #22]
 8004b64:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f00f f947 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004b82:	7dbb      	ldrb	r3, [r7, #22]
 8004b84:	3301      	adds	r3, #1
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].statc.cs_flt   = (ic[curr_ic].stat.rx_data[0] + (ic[curr_ic].stat.rx_data[1] << 8));
 8004b8c:	7dbb      	ldrb	r3, [r7, #22]
 8004b8e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	7dbb      	ldrb	r3, [r7, #22]
 8004ba2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	7dbb      	ldrb	r3, [r7, #22]
 8004bb8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	440b      	add	r3, r1
 8004bc4:	4402      	add	r2, r0
 8004bc6:	b292      	uxth	r2, r2
 8004bc8:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
    ic[curr_ic].statc.otp2_med = (ic[curr_ic].stat.rx_data[4] & 0x01);
 8004bcc:	7dbb      	ldrb	r3, [r7, #22]
 8004bce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f893 1153 	ldrb.w	r1, [r3, #339]	@ 0x153
 8004bde:	7dbb      	ldrb	r3, [r7, #22]
 8004be0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004be4:	fb02 f303 	mul.w	r3, r2, r3
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	441a      	add	r2, r3
 8004bec:	460b      	mov	r3, r1
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	b2d9      	uxtb	r1, r3
 8004bf4:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004bf8:	f361 13c7 	bfi	r3, r1, #7, #1
 8004bfc:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.otp2_ed = ((ic[curr_ic].stat.rx_data[4] & 0x02) >> 1);
 8004c00:	7dbb      	ldrb	r3, [r7, #22]
 8004c02:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004c12:	1059      	asrs	r1, r3, #1
 8004c14:	7dbb      	ldrb	r3, [r7, #22]
 8004c16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	441a      	add	r2, r3
 8004c22:	460b      	mov	r3, r1
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	b2d9      	uxtb	r1, r3
 8004c2a:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004c2e:	f361 1386 	bfi	r3, r1, #6, #1
 8004c32:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.otp1_med = ((ic[curr_ic].stat.rx_data[4] & 0x04) >> 2);
 8004c36:	7dbb      	ldrb	r3, [r7, #22]
 8004c38:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	4413      	add	r3, r2
 8004c44:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004c48:	1099      	asrs	r1, r3, #2
 8004c4a:	7dbb      	ldrb	r3, [r7, #22]
 8004c4c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c50:	fb02 f303 	mul.w	r3, r2, r3
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	441a      	add	r2, r3
 8004c58:	460b      	mov	r3, r1
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2d9      	uxtb	r1, r3
 8004c60:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004c64:	f361 1345 	bfi	r3, r1, #5, #1
 8004c68:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.otp1_ed = ((ic[curr_ic].stat.rx_data[4] & 0x08) >> 3);
 8004c6c:	7dbb      	ldrb	r3, [r7, #22]
 8004c6e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004c7e:	10d9      	asrs	r1, r3, #3
 8004c80:	7dbb      	ldrb	r3, [r7, #22]
 8004c82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	460b      	mov	r3, r1
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	b2d9      	uxtb	r1, r3
 8004c96:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004c9a:	f361 1304 	bfi	r3, r1, #4, #1
 8004c9e:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.vd_uv  = ((ic[curr_ic].stat.rx_data[4] & 0x10) >> 4);
 8004ca2:	7dbb      	ldrb	r3, [r7, #22]
 8004ca4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004cb4:	1119      	asrs	r1, r3, #4
 8004cb6:	7dbb      	ldrb	r3, [r7, #22]
 8004cb8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	441a      	add	r2, r3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	b2d9      	uxtb	r1, r3
 8004ccc:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004cd0:	f361 03c3 	bfi	r3, r1, #3, #1
 8004cd4:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.vd_ov = ((ic[curr_ic].stat.rx_data[4] & 0x20) >> 5);
 8004cd8:	7dbb      	ldrb	r3, [r7, #22]
 8004cda:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004cea:	1159      	asrs	r1, r3, #5
 8004cec:	7dbb      	ldrb	r3, [r7, #22]
 8004cee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	b2d9      	uxtb	r1, r3
 8004d02:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004d06:	f361 0382 	bfi	r3, r1, #2, #1
 8004d0a:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.va_uv = ((ic[curr_ic].stat.rx_data[4] & 0x40) >> 6);
 8004d0e:	7dbb      	ldrb	r3, [r7, #22]
 8004d10:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004d20:	1199      	asrs	r1, r3, #6
 8004d22:	7dbb      	ldrb	r3, [r7, #22]
 8004d24:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	441a      	add	r2, r3
 8004d30:	460b      	mov	r3, r1
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	b2d9      	uxtb	r1, r3
 8004d38:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004d3c:	f361 0341 	bfi	r3, r1, #1, #1
 8004d40:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.va_ov = ((ic[curr_ic].stat.rx_data[4] & 0x80) >> 7);
 8004d44:	7dbb      	ldrb	r3, [r7, #22]
 8004d46:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	b2d9      	uxtb	r1, r3
 8004d5a:	7dbb      	ldrb	r3, [r7, #22]
 8004d5c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d60:	fb02 f303 	mul.w	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	441a      	add	r2, r3
 8004d68:	460b      	mov	r3, r1
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	b2d9      	uxtb	r1, r3
 8004d70:	f892 30da 	ldrb.w	r3, [r2, #218]	@ 0xda
 8004d74:	f361 0300 	bfi	r3, r1, #0, #1
 8004d78:	f882 30da 	strb.w	r3, [r2, #218]	@ 0xda
    ic[curr_ic].statc.oscchk = (ic[curr_ic].stat.rx_data[5] & 0x01);
 8004d7c:	7dbb      	ldrb	r3, [r7, #22]
 8004d7e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f893 1154 	ldrb.w	r1, [r3, #340]	@ 0x154
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	b2d9      	uxtb	r1, r3
 8004da4:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004da8:	f361 13c7 	bfi	r3, r1, #7, #1
 8004dac:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.tmodchk = ((ic[curr_ic].stat.rx_data[5] & 0x02) >> 1);
 8004db0:	7dbb      	ldrb	r3, [r7, #22]
 8004db2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004dc2:	1059      	asrs	r1, r3, #1
 8004dc4:	7dbb      	ldrb	r3, [r7, #22]
 8004dc6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	b2d9      	uxtb	r1, r3
 8004dda:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004dde:	f361 1386 	bfi	r3, r1, #6, #1
 8004de2:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.thsd = ((ic[curr_ic].stat.rx_data[5] & 0x04) >> 2);
 8004de6:	7dbb      	ldrb	r3, [r7, #22]
 8004de8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004dec:	fb02 f303 	mul.w	r3, r2, r3
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4413      	add	r3, r2
 8004df4:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004df8:	1099      	asrs	r1, r3, #2
 8004dfa:	7dbb      	ldrb	r3, [r7, #22]
 8004dfc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	441a      	add	r2, r3
 8004e08:	460b      	mov	r3, r1
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004e14:	f361 1345 	bfi	r3, r1, #5, #1
 8004e18:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.sleep = ((ic[curr_ic].stat.rx_data[5] & 0x08) >> 3);
 8004e1c:	7dbb      	ldrb	r3, [r7, #22]
 8004e1e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004e2e:	10d9      	asrs	r1, r3, #3
 8004e30:	7dbb      	ldrb	r3, [r7, #22]
 8004e32:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	441a      	add	r2, r3
 8004e3e:	460b      	mov	r3, r1
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	b2d9      	uxtb	r1, r3
 8004e46:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004e4a:	f361 1304 	bfi	r3, r1, #4, #1
 8004e4e:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.spiflt  = ((ic[curr_ic].stat.rx_data[5] & 0x10) >> 4);
 8004e52:	7dbb      	ldrb	r3, [r7, #22]
 8004e54:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004e64:	1119      	asrs	r1, r3, #4
 8004e66:	7dbb      	ldrb	r3, [r7, #22]
 8004e68:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	441a      	add	r2, r3
 8004e74:	460b      	mov	r3, r1
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	b2d9      	uxtb	r1, r3
 8004e7c:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004e80:	f361 03c3 	bfi	r3, r1, #3, #1
 8004e84:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.comp = ((ic[curr_ic].stat.rx_data[5] & 0x20) >> 5);
 8004e88:	7dbb      	ldrb	r3, [r7, #22]
 8004e8a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4413      	add	r3, r2
 8004e96:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004e9a:	1159      	asrs	r1, r3, #5
 8004e9c:	7dbb      	ldrb	r3, [r7, #22]
 8004e9e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	441a      	add	r2, r3
 8004eaa:	460b      	mov	r3, r1
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	b2d9      	uxtb	r1, r3
 8004eb2:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004eb6:	f361 0382 	bfi	r3, r1, #2, #1
 8004eba:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.vdel = ((ic[curr_ic].stat.rx_data[5] & 0x40) >> 6);
 8004ebe:	7dbb      	ldrb	r3, [r7, #22]
 8004ec0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004ed0:	1199      	asrs	r1, r3, #6
 8004ed2:	7dbb      	ldrb	r3, [r7, #22]
 8004ed4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004ed8:	fb02 f303 	mul.w	r3, r2, r3
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	441a      	add	r2, r3
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	b2d9      	uxtb	r1, r3
 8004ee8:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004eec:	f361 0341 	bfi	r3, r1, #1, #1
 8004ef0:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
    ic[curr_ic].statc.vde = ((ic[curr_ic].stat.rx_data[5] & 0x80) >> 7);
 8004ef4:	7dbb      	ldrb	r3, [r7, #22]
 8004ef6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4413      	add	r3, r2
 8004f02:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8004f06:	09db      	lsrs	r3, r3, #7
 8004f08:	b2d9      	uxtb	r1, r3
 8004f0a:	7dbb      	ldrb	r3, [r7, #22]
 8004f0c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004f10:	fb02 f303 	mul.w	r3, r2, r3
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	441a      	add	r2, r3
 8004f18:	460b      	mov	r3, r1
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	b2d9      	uxtb	r1, r3
 8004f20:	f892 30db 	ldrb.w	r3, [r2, #219]	@ 0xdb
 8004f24:	f361 0300 	bfi	r3, r1, #0, #1
 8004f28:	f882 30db 	strb.w	r3, [r2, #219]	@ 0xdb
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004f2c:	7dbb      	ldrb	r3, [r7, #22]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	75bb      	strb	r3, [r7, #22]
 8004f32:	7dba      	ldrb	r2, [r7, #22]
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	f4ff ae13 	bcc.w	8004b62 <adBms6830ParseStatusC+0x18>
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <adBms6830ParseStatusD>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusD(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	75bb      	strb	r3, [r7, #22]
 8004f5c:	e32b      	b.n	80055b6 <adBms6830ParseStatusD+0x670>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8004f5e:	7dbb      	ldrb	r3, [r7, #22]
 8004f60:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	2208      	movs	r2, #8
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f00e ff49 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8004f7e:	7dbb      	ldrb	r3, [r7, #22]
 8004f80:	3301      	adds	r3, #1
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	75fb      	strb	r3, [r7, #23]
    /* uv, ov bits 1 to 4 status bits */
    ic[curr_ic].statd.c_uv[0] = (ic[curr_ic].stat.rx_data[0] & 0x01);
 8004f88:	7dbb      	ldrb	r3, [r7, #22]
 8004f8a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	f893 214f 	ldrb.w	r2, [r3, #335]	@ 0x14f
 8004f9a:	7dbb      	ldrb	r3, [r7, #22]
 8004f9c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f002 0201 	and.w	r2, r2, #1
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    ic[curr_ic].statd.c_ov[0] = ((ic[curr_ic].stat.rx_data[0] & 0x02) >> 1);
 8004fb2:	7dbb      	ldrb	r3, [r7, #22]
 8004fb4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004fc4:	105b      	asrs	r3, r3, #1
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	7dbb      	ldrb	r3, [r7, #22]
 8004fca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004fce:	fb01 f303 	mul.w	r3, r1, r3
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f002 0201 	and.w	r2, r2, #1
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    ic[curr_ic].statd.c_uv[1] = ((ic[curr_ic].stat.rx_data[0] & 0x04) >> 2);
 8004fe0:	7dbb      	ldrb	r3, [r7, #22]
 8004fe2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	4413      	add	r3, r2
 8004fee:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8004ff2:	109b      	asrs	r3, r3, #2
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	7dbb      	ldrb	r3, [r7, #22]
 8004ff8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8004ffc:	fb01 f303 	mul.w	r3, r1, r3
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	440b      	add	r3, r1
 8005004:	f002 0201 	and.w	r2, r2, #1
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    ic[curr_ic].statd.c_ov[1] = ((ic[curr_ic].stat.rx_data[0] & 0x08) >> 3);
 800500e:	7dbb      	ldrb	r3, [r7, #22]
 8005010:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	4413      	add	r3, r2
 800501c:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 8005020:	10db      	asrs	r3, r3, #3
 8005022:	b2da      	uxtb	r2, r3
 8005024:	7dbb      	ldrb	r3, [r7, #22]
 8005026:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	440b      	add	r3, r1
 8005032:	f002 0201 	and.w	r2, r2, #1
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    ic[curr_ic].statd.c_uv[2] = ((ic[curr_ic].stat.rx_data[0] & 0x10) >> 4);
 800503c:	7dbb      	ldrb	r3, [r7, #22]
 800503e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4413      	add	r3, r2
 800504a:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 800504e:	111b      	asrs	r3, r3, #4
 8005050:	b2da      	uxtb	r2, r3
 8005052:	7dbb      	ldrb	r3, [r7, #22]
 8005054:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	440b      	add	r3, r1
 8005060:	f002 0201 	and.w	r2, r2, #1
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
    ic[curr_ic].statd.c_ov[2] = ((ic[curr_ic].stat.rx_data[0] & 0x20) >> 5);
 800506a:	7dbb      	ldrb	r3, [r7, #22]
 800506c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	4413      	add	r3, r2
 8005078:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 800507c:	115b      	asrs	r3, r3, #5
 800507e:	b2da      	uxtb	r2, r3
 8005080:	7dbb      	ldrb	r3, [r7, #22]
 8005082:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	440b      	add	r3, r1
 800508e:	f002 0201 	and.w	r2, r2, #1
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	f883 20de 	strb.w	r2, [r3, #222]	@ 0xde
    ic[curr_ic].statd.c_uv[3] = ((ic[curr_ic].stat.rx_data[0] & 0x40) >> 6);
 8005098:	7dbb      	ldrb	r3, [r7, #22]
 800509a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	4413      	add	r3, r2
 80050a6:	f893 314f 	ldrb.w	r3, [r3, #335]	@ 0x14f
 80050aa:	119b      	asrs	r3, r3, #6
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	7dbb      	ldrb	r3, [r7, #22]
 80050b0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	440b      	add	r3, r1
 80050bc:	f002 0201 	and.w	r2, r2, #1
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
    ic[curr_ic].statd.c_ov[3] = ((ic[curr_ic].stat.rx_data[0] & 0x80) >> 7);
 80050c6:	7dbb      	ldrb	r3, [r7, #22]
 80050c8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	4413      	add	r3, r2
 80050d4:	f893 214f 	ldrb.w	r2, [r3, #335]	@ 0x14f
 80050d8:	7dbb      	ldrb	r3, [r7, #22]
 80050da:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	440b      	add	r3, r1
 80050e6:	09d2      	lsrs	r2, r2, #7
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	f883 20df 	strb.w	r2, [r3, #223]	@ 0xdf
    /* uv, ov bits 5 to 8 status bits */
    ic[curr_ic].statd.c_uv[4] = (ic[curr_ic].stat.rx_data[1] & 0x01);
 80050ee:	7dbb      	ldrb	r3, [r7, #22]
 80050f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4413      	add	r3, r2
 80050fc:	f893 2150 	ldrb.w	r2, [r3, #336]	@ 0x150
 8005100:	7dbb      	ldrb	r3, [r7, #22]
 8005102:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005106:	fb01 f303 	mul.w	r3, r1, r3
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	440b      	add	r3, r1
 800510e:	f002 0201 	and.w	r2, r2, #1
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    ic[curr_ic].statd.c_ov[4] = ((ic[curr_ic].stat.rx_data[1] & 0x02) >> 1);
 8005118:	7dbb      	ldrb	r3, [r7, #22]
 800511a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	4413      	add	r3, r2
 8005126:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800512a:	105b      	asrs	r3, r3, #1
 800512c:	b2da      	uxtb	r2, r3
 800512e:	7dbb      	ldrb	r3, [r7, #22]
 8005130:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	440b      	add	r3, r1
 800513c:	f002 0201 	and.w	r2, r2, #1
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    ic[curr_ic].statd.c_uv[5] = ((ic[curr_ic].stat.rx_data[1] & 0x04) >> 2);
 8005146:	7dbb      	ldrb	r3, [r7, #22]
 8005148:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	4413      	add	r3, r2
 8005154:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8005158:	109b      	asrs	r3, r3, #2
 800515a:	b2da      	uxtb	r2, r3
 800515c:	7dbb      	ldrb	r3, [r7, #22]
 800515e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	440b      	add	r3, r1
 800516a:	f002 0201 	and.w	r2, r2, #1
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
    ic[curr_ic].statd.c_ov[5] = ((ic[curr_ic].stat.rx_data[1] & 0x08) >> 3);
 8005174:	7dbb      	ldrb	r3, [r7, #22]
 8005176:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4413      	add	r3, r2
 8005182:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8005186:	10db      	asrs	r3, r3, #3
 8005188:	b2da      	uxtb	r2, r3
 800518a:	7dbb      	ldrb	r3, [r7, #22]
 800518c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	440b      	add	r3, r1
 8005198:	f002 0201 	and.w	r2, r2, #1
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	f883 20e1 	strb.w	r2, [r3, #225]	@ 0xe1
    ic[curr_ic].statd.c_uv[6] = ((ic[curr_ic].stat.rx_data[1] & 0x10) >> 4);
 80051a2:	7dbb      	ldrb	r3, [r7, #22]
 80051a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	4413      	add	r3, r2
 80051b0:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80051b4:	111b      	asrs	r3, r3, #4
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	7dbb      	ldrb	r3, [r7, #22]
 80051ba:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	440b      	add	r3, r1
 80051c6:	f002 0201 	and.w	r2, r2, #1
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
    ic[curr_ic].statd.c_ov[6] = ((ic[curr_ic].stat.rx_data[1] & 0x20) >> 5);
 80051d0:	7dbb      	ldrb	r3, [r7, #22]
 80051d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80051e2:	115b      	asrs	r3, r3, #5
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	7dbb      	ldrb	r3, [r7, #22]
 80051e8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	440b      	add	r3, r1
 80051f4:	f002 0201 	and.w	r2, r2, #1
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    ic[curr_ic].statd.c_uv[7] = ((ic[curr_ic].stat.rx_data[1] & 0x40) >> 6);
 80051fe:	7dbb      	ldrb	r3, [r7, #22]
 8005200:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	4413      	add	r3, r2
 800520c:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8005210:	119b      	asrs	r3, r3, #6
 8005212:	b2da      	uxtb	r2, r3
 8005214:	7dbb      	ldrb	r3, [r7, #22]
 8005216:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	440b      	add	r3, r1
 8005222:	f002 0201 	and.w	r2, r2, #1
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	f883 20f3 	strb.w	r2, [r3, #243]	@ 0xf3
    ic[curr_ic].statd.c_ov[7] = ((ic[curr_ic].stat.rx_data[1] & 0x80) >> 7);
 800522c:	7dbb      	ldrb	r3, [r7, #22]
 800522e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	4413      	add	r3, r2
 800523a:	f893 2150 	ldrb.w	r2, [r3, #336]	@ 0x150
 800523e:	7dbb      	ldrb	r3, [r7, #22]
 8005240:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	440b      	add	r3, r1
 800524c:	09d2      	lsrs	r2, r2, #7
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
    /* uv, ov bits 9 to 12 status bits */
    ic[curr_ic].statd.c_uv[8] = (ic[curr_ic].stat.rx_data[2] & 0x01);
 8005254:	7dbb      	ldrb	r3, [r7, #22]
 8005256:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	f893 2151 	ldrb.w	r2, [r3, #337]	@ 0x151
 8005266:	7dbb      	ldrb	r3, [r7, #22]
 8005268:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	440b      	add	r3, r1
 8005274:	f002 0201 	and.w	r2, r2, #1
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
    ic[curr_ic].statd.c_ov[8] = ((ic[curr_ic].stat.rx_data[2] & 0x02) >> 1);
 800527e:	7dbb      	ldrb	r3, [r7, #22]
 8005280:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	4413      	add	r3, r2
 800528c:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8005290:	105b      	asrs	r3, r3, #1
 8005292:	b2da      	uxtb	r2, r3
 8005294:	7dbb      	ldrb	r3, [r7, #22]
 8005296:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800529a:	fb01 f303 	mul.w	r3, r1, r3
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	440b      	add	r3, r1
 80052a2:	f002 0201 	and.w	r2, r2, #1
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
    ic[curr_ic].statd.c_uv[9] = ((ic[curr_ic].stat.rx_data[2] & 0x04) >> 2);
 80052ac:	7dbb      	ldrb	r3, [r7, #22]
 80052ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4413      	add	r3, r2
 80052ba:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 80052be:	109b      	asrs	r3, r3, #2
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	7dbb      	ldrb	r3, [r7, #22]
 80052c4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	440b      	add	r3, r1
 80052d0:	f002 0201 	and.w	r2, r2, #1
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	f883 20f5 	strb.w	r2, [r3, #245]	@ 0xf5
    ic[curr_ic].statd.c_ov[9] = ((ic[curr_ic].stat.rx_data[2] & 0x08) >> 3);
 80052da:	7dbb      	ldrb	r3, [r7, #22]
 80052dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4413      	add	r3, r2
 80052e8:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 80052ec:	10db      	asrs	r3, r3, #3
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	7dbb      	ldrb	r3, [r7, #22]
 80052f2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	440b      	add	r3, r1
 80052fe:	f002 0201 	and.w	r2, r2, #1
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
    ic[curr_ic].statd.c_uv[10] = ((ic[curr_ic].stat.rx_data[2] & 0x10) >> 4);
 8005308:	7dbb      	ldrb	r3, [r7, #22]
 800530a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 800531a:	111b      	asrs	r3, r3, #4
 800531c:	b2da      	uxtb	r2, r3
 800531e:	7dbb      	ldrb	r3, [r7, #22]
 8005320:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	440b      	add	r3, r1
 800532c:	f002 0201 	and.w	r2, r2, #1
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
    ic[curr_ic].statd.c_ov[10] = ((ic[curr_ic].stat.rx_data[2] & 0x20) >> 5);
 8005336:	7dbb      	ldrb	r3, [r7, #22]
 8005338:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	4413      	add	r3, r2
 8005344:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8005348:	115b      	asrs	r3, r3, #5
 800534a:	b2da      	uxtb	r2, r3
 800534c:	7dbb      	ldrb	r3, [r7, #22]
 800534e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	440b      	add	r3, r1
 800535a:	f002 0201 	and.w	r2, r2, #1
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    ic[curr_ic].statd.c_uv[11] = ((ic[curr_ic].stat.rx_data[2] & 0x40) >> 6);
 8005364:	7dbb      	ldrb	r3, [r7, #22]
 8005366:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	f893 3151 	ldrb.w	r3, [r3, #337]	@ 0x151
 8005376:	119b      	asrs	r3, r3, #6
 8005378:	b2da      	uxtb	r2, r3
 800537a:	7dbb      	ldrb	r3, [r7, #22]
 800537c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	440b      	add	r3, r1
 8005388:	f002 0201 	and.w	r2, r2, #1
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	f883 20f7 	strb.w	r2, [r3, #247]	@ 0xf7
    ic[curr_ic].statd.c_ov[11] = ((ic[curr_ic].stat.rx_data[2] & 0x80) >> 7);
 8005392:	7dbb      	ldrb	r3, [r7, #22]
 8005394:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4413      	add	r3, r2
 80053a0:	f893 2151 	ldrb.w	r2, [r3, #337]	@ 0x151
 80053a4:	7dbb      	ldrb	r3, [r7, #22]
 80053a6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	440b      	add	r3, r1
 80053b2:	09d2      	lsrs	r2, r2, #7
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    /* uv, ov bits 13 to 16 status bits */
    ic[curr_ic].statd.c_uv[12] = (ic[curr_ic].stat.rx_data[3] & 0x01);
 80053ba:	7dbb      	ldrb	r3, [r7, #22]
 80053bc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4413      	add	r3, r2
 80053c8:	f893 2152 	ldrb.w	r2, [r3, #338]	@ 0x152
 80053cc:	7dbb      	ldrb	r3, [r7, #22]
 80053ce:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	440b      	add	r3, r1
 80053da:	f002 0201 	and.w	r2, r2, #1
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
    ic[curr_ic].statd.c_ov[12] = ((ic[curr_ic].stat.rx_data[3] & 0x02) >> 1);
 80053e4:	7dbb      	ldrb	r3, [r7, #22]
 80053e6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4413      	add	r3, r2
 80053f2:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80053f6:	105b      	asrs	r3, r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	7dbb      	ldrb	r3, [r7, #22]
 80053fc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	440b      	add	r3, r1
 8005408:	f002 0201 	and.w	r2, r2, #1
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
    ic[curr_ic].statd.c_uv[13] = ((ic[curr_ic].stat.rx_data[3] & 0x04) >> 2);
 8005412:	7dbb      	ldrb	r3, [r7, #22]
 8005414:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	4413      	add	r3, r2
 8005420:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8005424:	109b      	asrs	r3, r3, #2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	7dbb      	ldrb	r3, [r7, #22]
 800542a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800542e:	fb01 f303 	mul.w	r3, r1, r3
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	440b      	add	r3, r1
 8005436:	f002 0201 	and.w	r2, r2, #1
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
    ic[curr_ic].statd.c_ov[13] = ((ic[curr_ic].stat.rx_data[3] & 0x08) >> 3);
 8005440:	7dbb      	ldrb	r3, [r7, #22]
 8005442:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8005452:	10db      	asrs	r3, r3, #3
 8005454:	b2da      	uxtb	r2, r3
 8005456:	7dbb      	ldrb	r3, [r7, #22]
 8005458:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	440b      	add	r3, r1
 8005464:	f002 0201 	and.w	r2, r2, #1
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    ic[curr_ic].statd.c_uv[14] = ((ic[curr_ic].stat.rx_data[3] & 0x10) >> 4);
 800546e:	7dbb      	ldrb	r3, [r7, #22]
 8005470:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4413      	add	r3, r2
 800547c:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 8005480:	111b      	asrs	r3, r3, #4
 8005482:	b2da      	uxtb	r2, r3
 8005484:	7dbb      	ldrb	r3, [r7, #22]
 8005486:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800548a:	fb01 f303 	mul.w	r3, r1, r3
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	440b      	add	r3, r1
 8005492:	f002 0201 	and.w	r2, r2, #1
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
    ic[curr_ic].statd.c_ov[14] = ((ic[curr_ic].stat.rx_data[3] & 0x20) >> 5);
 800549c:	7dbb      	ldrb	r3, [r7, #22]
 800549e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4413      	add	r3, r2
 80054aa:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80054ae:	115b      	asrs	r3, r3, #5
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	7dbb      	ldrb	r3, [r7, #22]
 80054b4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	440b      	add	r3, r1
 80054c0:	f002 0201 	and.w	r2, r2, #1
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
    ic[curr_ic].statd.c_uv[15] = ((ic[curr_ic].stat.rx_data[3] & 0x40) >> 6);
 80054ca:	7dbb      	ldrb	r3, [r7, #22]
 80054cc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80054d0:	fb02 f303 	mul.w	r3, r2, r3
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	4413      	add	r3, r2
 80054d8:	f893 3152 	ldrb.w	r3, [r3, #338]	@ 0x152
 80054dc:	119b      	asrs	r3, r3, #6
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	7dbb      	ldrb	r3, [r7, #22]
 80054e2:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	440b      	add	r3, r1
 80054ee:	f002 0201 	and.w	r2, r2, #1
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
    ic[curr_ic].statd.c_ov[15] = ((ic[curr_ic].stat.rx_data[3] & 0x80) >> 7);
 80054f8:	7dbb      	ldrb	r3, [r7, #22]
 80054fa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	f893 2152 	ldrb.w	r2, [r3, #338]	@ 0x152
 800550a:	7dbb      	ldrb	r3, [r7, #22]
 800550c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	440b      	add	r3, r1
 8005518:	09d2      	lsrs	r2, r2, #7
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
    /* ct and cts */
    ic[curr_ic].statd.cts = (ic[curr_ic].stat.rx_data[4] & 0x03);
 8005520:	7dbb      	ldrb	r3, [r7, #22]
 8005522:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4413      	add	r3, r2
 800552e:	f893 1153 	ldrb.w	r1, [r3, #339]	@ 0x153
 8005532:	7dbb      	ldrb	r3, [r7, #22]
 8005534:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	441a      	add	r2, r3
 8005540:	460b      	mov	r3, r1
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	b2d9      	uxtb	r1, r3
 8005548:	f892 30fc 	ldrb.w	r3, [r2, #252]	@ 0xfc
 800554c:	f361 1387 	bfi	r3, r1, #6, #2
 8005550:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc
    ic[curr_ic].statd.ct = ((ic[curr_ic].stat.rx_data[4] & 0xFC) >> 2);
 8005554:	7dbb      	ldrb	r3, [r7, #22]
 8005556:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	4413      	add	r3, r2
 8005562:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8005566:	089b      	lsrs	r3, r3, #2
 8005568:	b2d9      	uxtb	r1, r3
 800556a:	7dbb      	ldrb	r3, [r7, #22]
 800556c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	441a      	add	r2, r3
 8005578:	460b      	mov	r3, r1
 800557a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800557e:	b2d9      	uxtb	r1, r3
 8005580:	f892 30fc 	ldrb.w	r3, [r2, #252]	@ 0xfc
 8005584:	f361 0305 	bfi	r3, r1, #0, #6
 8005588:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc
    /* oc_cntr */
    ic[curr_ic].statd.oc_cntr = (ic[curr_ic].stat.rx_data[5] & 0xFF);
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	441a      	add	r2, r3
 800559a:	7dbb      	ldrb	r3, [r7, #22]
 800559c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	440b      	add	r3, r1
 80055a8:	f892 2154 	ldrb.w	r2, [r2, #340]	@ 0x154
 80055ac:	f883 20fd 	strb.w	r2, [r3, #253]	@ 0xfd
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80055b0:	7dbb      	ldrb	r3, [r7, #22]
 80055b2:	3301      	adds	r3, #1
 80055b4:	75bb      	strb	r3, [r7, #22]
 80055b6:	7dba      	ldrb	r2, [r7, #22]
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f4ff accf 	bcc.w	8004f5e <adBms6830ParseStatusD+0x18>
  }
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <adBms6830ParseStatusE>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatusE(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b086      	sub	sp, #24
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	4603      	mov	r3, r0
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80055dc:	2300      	movs	r3, #0
 80055de:	75bb      	strb	r3, [r7, #22]
 80055e0:	e05e      	b.n	80056a0 <adBms6830ParseStatusE+0xd6>
  {
    memcpy(&ic[curr_ic].stat.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80055e2:	7dbb      	ldrb	r3, [r7, #22]
 80055e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 104f 	addw	r0, r3, #335	@ 0x14f
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	2208      	movs	r2, #8
 80055fc:	4619      	mov	r1, r3
 80055fe:	f00e fc07 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005602:	7dbb      	ldrb	r3, [r7, #22]
 8005604:	3301      	adds	r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].state.gpi   = ((ic[curr_ic].stat.rx_data[4] + ((ic[curr_ic].stat.rx_data[5] & 0x03) << 8)));
 800560c:	7dbb      	ldrb	r3, [r7, #22]
 800560e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4413      	add	r3, r2
 800561a:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 800561e:	4619      	mov	r1, r3
 8005620:	7dbb      	ldrb	r3, [r7, #22]
 8005622:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	b29b      	uxth	r3, r3
 8005636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563a:	b29b      	uxth	r3, r3
 800563c:	440b      	add	r3, r1
 800563e:	b299      	uxth	r1, r3
 8005640:	7dbb      	ldrb	r3, [r7, #22]
 8005642:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	441a      	add	r2, r3
 800564e:	460b      	mov	r3, r1
 8005650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005654:	b299      	uxth	r1, r3
 8005656:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	@ 0xfe
 800565a:	f361 0309 	bfi	r3, r1, #0, #10
 800565e:	f8a2 30fe 	strh.w	r3, [r2, #254]	@ 0xfe
    ic[curr_ic].state.rev = ((ic[curr_ic].stat.rx_data[5] & 0xF0) >> 4);
 8005662:	7dbb      	ldrb	r3, [r7, #22]
 8005664:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	4413      	add	r3, r2
 8005670:	f893 3154 	ldrb.w	r3, [r3, #340]	@ 0x154
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	b2d9      	uxtb	r1, r3
 8005678:	7dbb      	ldrb	r3, [r7, #22]
 800567a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	441a      	add	r2, r3
 8005686:	460b      	mov	r3, r1
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	b2d9      	uxtb	r1, r3
 800568e:	f892 30ff 	ldrb.w	r3, [r2, #255]	@ 0xff
 8005692:	f361 0385 	bfi	r3, r1, #2, #4
 8005696:	f882 30ff 	strb.w	r3, [r2, #255]	@ 0xff
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800569a:	7dbb      	ldrb	r3, [r7, #22]
 800569c:	3301      	adds	r3, #1
 800569e:	75bb      	strb	r3, [r7, #22]
 80056a0:	7dba      	ldrb	r2, [r7, #22]
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d39c      	bcc.n	80055e2 <adBms6830ParseStatusE+0x18>
  }
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <adBms6830ParseStatus>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseStatus(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
 80056c2:	4613      	mov	r3, r2
 80056c4:	73bb      	strb	r3, [r7, #14]
  uint8_t statc[RX_DATA], state[RX_DATA];
  switch (grp)
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d868      	bhi.n	800579e <adBms6830ParseStatus+0xea>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <adBms6830ParseStatus+0x20>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	08005733 	.word	0x08005733
 80056d8:	080056ed 	.word	0x080056ed
 80056dc:	080056fb 	.word	0x080056fb
 80056e0:	08005709 	.word	0x08005709
 80056e4:	08005717 	.word	0x08005717
 80056e8:	08005725 	.word	0x08005725
  {
    case A: /* Status Register group A */
      adBms6830ParseStatusA(tIC, &ic[0], &data[0]);
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff f908 	bl	8004908 <adBms6830ParseStatusA>
      break;
 80056f8:	e052      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case B: /* Status Register group B */
      adBms6830ParseStatusB(tIC, &ic[0], &data[0]);
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff f995 	bl	8004a30 <adBms6830ParseStatusB>
      break;
 8005706:	e04b      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case C: /* Status Register group C */
      adBms6830ParseStatusC(tIC, &ic[0], &data[0]);
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fa1b 	bl	8004b4a <adBms6830ParseStatusC>
      break;
 8005714:	e044      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case D: /* Status Register group D */
      adBms6830ParseStatusD(tIC, &ic[0], &data[0]);
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fc12 	bl	8004f46 <adBms6830ParseStatusD>
      break;
 8005722:	e03d      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case E: /* Status Register group E */
      adBms6830ParseStatusE(tIC, &ic[0], &data[0]);
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff ff4d 	bl	80055ca <adBms6830ParseStatusE>
      break;
 8005730:	e036      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    case ALL_GRP: /* Status Register group ALL */
      /* Status A base address data[0] index */
      adBms6830ParseStatusA(tIC, &ic[0], &data[0]);
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff f8e5 	bl	8004908 <adBms6830ParseStatusA>
      /* Status B base address data[6] index */
      adBms6830ParseStatusB(tIC, &ic[0], &data[6]);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	1d9a      	adds	r2, r3, #6
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff f972 	bl	8004a30 <adBms6830ParseStatusB>
      /* Status C base address data[12] index */
      statc[0] = data[12];
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7b1b      	ldrb	r3, [r3, #12]
 8005750:	763b      	strb	r3, [r7, #24]
      statc[1] = data[13];
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7b5b      	ldrb	r3, [r3, #13]
 8005756:	767b      	strb	r3, [r7, #25]
      statc[4] = data[14];
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7b9b      	ldrb	r3, [r3, #14]
 800575c:	773b      	strb	r3, [r7, #28]
      statc[5] = data[15];
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	7bdb      	ldrb	r3, [r3, #15]
 8005762:	777b      	strb	r3, [r7, #29]
      adBms6830ParseStatusC(tIC, &ic[0], &statc[0]);
 8005764:	f107 0218 	add.w	r2, r7, #24
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff f9ec 	bl	8004b4a <adBms6830ParseStatusC>
      /* Status D base address data[16] index */
      adBms6830ParseStatusD(tIC, &ic[0], &data[16]);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f103 0210 	add.w	r2, r3, #16
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fbe2 	bl	8004f46 <adBms6830ParseStatusD>
      /* Status E base address data[22] index */
      state[4] = data[22];
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7d9b      	ldrb	r3, [r3, #22]
 8005786:	753b      	strb	r3, [r7, #20]
      state[5] = data[23];
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7ddb      	ldrb	r3, [r3, #23]
 800578c:	757b      	strb	r3, [r7, #21]
      adBms6830ParseStatusE(tIC, &ic[0], &state[0]);
 800578e:	f107 0210 	add.w	r2, r7, #16
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff ff17 	bl	80055ca <adBms6830ParseStatusE>
     break;
 800579c:	e000      	b.n	80057a0 <adBms6830ParseStatus+0xec>

    default:
      break;
 800579e:	bf00      	nop
  }
}
 80057a0:	bf00      	nop
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <adBms6830ParseComm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseComm(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	75bb      	strb	r3, [r7, #22]
 80057be:	e0c8      	b.n	8005952 <adBms6830ParseComm+0x1aa>
  {
    memcpy(&ic[curr_ic].com.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 80057c0:	7dbb      	ldrb	r3, [r7, #22]
 80057c2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4413      	add	r3, r2
 80057ce:	f203 105d 	addw	r0, r3, #349	@ 0x15d
 80057d2:	7dfb      	ldrb	r3, [r7, #23]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	2208      	movs	r2, #8
 80057da:	4619      	mov	r1, r3
 80057dc:	f00e fb18 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 80057e0:	7dbb      	ldrb	r3, [r7, #22]
 80057e2:	3301      	adds	r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].comm.icomm[0] = ((ic[curr_ic].com.rx_data[0] & 0xF0) >> 4);
 80057ea:	7dbb      	ldrb	r3, [r7, #22]
 80057ec:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	4413      	add	r3, r2
 80057f8:	f893 215d 	ldrb.w	r2, [r3, #349]	@ 0x15d
 80057fc:	7dbb      	ldrb	r3, [r7, #22]
 80057fe:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	440b      	add	r3, r1
 800580a:	0912      	lsrs	r2, r2, #4
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    ic[curr_ic].comm.fcomm[0] = (ic[curr_ic].com.rx_data[0] & 0x0F);
 8005812:	7dbb      	ldrb	r3, [r7, #22]
 8005814:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	4413      	add	r3, r2
 8005820:	f893 215d 	ldrb.w	r2, [r3, #349]	@ 0x15d
 8005824:	7dbb      	ldrb	r3, [r7, #22]
 8005826:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	440b      	add	r3, r1
 8005832:	f002 020f 	and.w	r2, r2, #15
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    ic[curr_ic].comm.data[0] = (ic[curr_ic].com.rx_data[1]);
 800583c:	7dbb      	ldrb	r3, [r7, #22]
 800583e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005842:	fb02 f303 	mul.w	r3, r2, r3
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	441a      	add	r2, r3
 800584a:	7dbb      	ldrb	r3, [r7, #22]
 800584c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	440b      	add	r3, r1
 8005858:	f892 215e 	ldrb.w	r2, [r2, #350]	@ 0x15e
 800585c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
    ic[curr_ic].comm.icomm[1] = ((ic[curr_ic].com.rx_data[2] & 0xF0) >> 4);
 8005860:	7dbb      	ldrb	r3, [r7, #22]
 8005862:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	f893 215f 	ldrb.w	r2, [r3, #351]	@ 0x15f
 8005872:	7dbb      	ldrb	r3, [r7, #22]
 8005874:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	440b      	add	r3, r1
 8005880:	0912      	lsrs	r2, r2, #4
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    ic[curr_ic].comm.data[1] = (ic[curr_ic].com.rx_data[3]);
 8005888:	7dbb      	ldrb	r3, [r7, #22]
 800588a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	441a      	add	r2, r3
 8005896:	7dbb      	ldrb	r3, [r7, #22]
 8005898:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	440b      	add	r3, r1
 80058a4:	f892 2160 	ldrb.w	r2, [r2, #352]	@ 0x160
 80058a8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    ic[curr_ic].comm.fcomm[1] = (ic[curr_ic].com.rx_data[2] & 0x0F);
 80058ac:	7dbb      	ldrb	r3, [r7, #22]
 80058ae:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	4413      	add	r3, r2
 80058ba:	f893 215f 	ldrb.w	r2, [r3, #351]	@ 0x15f
 80058be:	7dbb      	ldrb	r3, [r7, #22]
 80058c0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	440b      	add	r3, r1
 80058cc:	f002 020f 	and.w	r2, r2, #15
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
    ic[curr_ic].comm.icomm[2] = ((ic[curr_ic].com.rx_data[4] & 0xF0) >> 4);
 80058d6:	7dbb      	ldrb	r3, [r7, #22]
 80058d8:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80058dc:	fb02 f303 	mul.w	r3, r2, r3
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	f893 2161 	ldrb.w	r2, [r3, #353]	@ 0x161
 80058e8:	7dbb      	ldrb	r3, [r7, #22]
 80058ea:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	440b      	add	r3, r1
 80058f6:	0912      	lsrs	r2, r2, #4
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
    ic[curr_ic].comm.data[2] = (ic[curr_ic].com.rx_data[5]);
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	441a      	add	r2, r3
 800590c:	7dbb      	ldrb	r3, [r7, #22]
 800590e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	440b      	add	r3, r1
 800591a:	f892 2162 	ldrb.w	r2, [r2, #354]	@ 0x162
 800591e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
    ic[curr_ic].comm.fcomm[2] = (ic[curr_ic].com.rx_data[4] & 0x0F);
 8005922:	7dbb      	ldrb	r3, [r7, #22]
 8005924:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	4413      	add	r3, r2
 8005930:	f893 2161 	ldrb.w	r2, [r3, #353]	@ 0x161
 8005934:	7dbb      	ldrb	r3, [r7, #22]
 8005936:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	440b      	add	r3, r1
 8005942:	f002 020f 	and.w	r2, r2, #15
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800594c:	7dbb      	ldrb	r3, [r7, #22]
 800594e:	3301      	adds	r3, #1
 8005950:	75bb      	strb	r3, [r7, #22]
 8005952:	7dba      	ldrb	r2, [r7, #22]
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	429a      	cmp	r2, r3
 8005958:	f4ff af32 	bcc.w	80057c0 <adBms6830ParseComm+0x18>
  }
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <adBms6830ParseSID>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParseSID(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	4603      	mov	r3, r0
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005978:	2300      	movs	r3, #0
 800597a:	75bb      	strb	r3, [r7, #22]
 800597c:	e083      	b.n	8005a86 <adBms6830ParseSID+0x120>
  {
    memcpy(&ic[curr_ic].rsid.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 800597e:	7dbb      	ldrb	r3, [r7, #22]
 8005980:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005984:	fb02 f303 	mul.w	r3, r2, r3
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	4413      	add	r3, r2
 800598c:	f203 1087 	addw	r0, r3, #391	@ 0x187
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	2208      	movs	r2, #8
 8005998:	4619      	mov	r1, r3
 800599a:	f00e fa39 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 800599e:	7dbb      	ldrb	r3, [r7, #22]
 80059a0:	3301      	adds	r3, #1
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].sid.sid[0] = ic[curr_ic].rsid.rx_data[0];
 80059a8:	7dbb      	ldrb	r3, [r7, #22]
 80059aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	441a      	add	r2, r3
 80059b6:	7dbb      	ldrb	r3, [r7, #22]
 80059b8:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	440b      	add	r3, r1
 80059c4:	f892 2187 	ldrb.w	r2, [r2, #391]	@ 0x187
 80059c8:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
    ic[curr_ic].sid.sid[1] = ic[curr_ic].rsid.rx_data[1];
 80059cc:	7dbb      	ldrb	r3, [r7, #22]
 80059ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	441a      	add	r2, r3
 80059da:	7dbb      	ldrb	r3, [r7, #22]
 80059dc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	440b      	add	r3, r1
 80059e8:	f892 2188 	ldrb.w	r2, [r2, #392]	@ 0x188
 80059ec:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    ic[curr_ic].sid.sid[2] = ic[curr_ic].rsid.rx_data[2];
 80059f0:	7dbb      	ldrb	r3, [r7, #22]
 80059f2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	441a      	add	r2, r3
 80059fe:	7dbb      	ldrb	r3, [r7, #22]
 8005a00:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f892 2189 	ldrb.w	r2, [r2, #393]	@ 0x189
 8005a10:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    ic[curr_ic].sid.sid[3] = ic[curr_ic].rsid.rx_data[3];
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	441a      	add	r2, r3
 8005a22:	7dbb      	ldrb	r3, [r7, #22]
 8005a24:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	440b      	add	r3, r1
 8005a30:	f892 218a 	ldrb.w	r2, [r2, #394]	@ 0x18a
 8005a34:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    ic[curr_ic].sid.sid[4] = ic[curr_ic].rsid.rx_data[4];
 8005a38:	7dbb      	ldrb	r3, [r7, #22]
 8005a3a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	441a      	add	r2, r3
 8005a46:	7dbb      	ldrb	r3, [r7, #22]
 8005a48:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a4c:	fb01 f303 	mul.w	r3, r1, r3
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	440b      	add	r3, r1
 8005a54:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 8005a58:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    ic[curr_ic].sid.sid[5] = ic[curr_ic].rsid.rx_data[5];
 8005a5c:	7dbb      	ldrb	r3, [r7, #22]
 8005a5e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	441a      	add	r2, r3
 8005a6a:	7dbb      	ldrb	r3, [r7, #22]
 8005a6c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	440b      	add	r3, r1
 8005a78:	f892 218c 	ldrb.w	r2, [r2, #396]	@ 0x18c
 8005a7c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005a80:	7dbb      	ldrb	r3, [r7, #22]
 8005a82:	3301      	adds	r3, #1
 8005a84:	75bb      	strb	r3, [r7, #22]
 8005a86:	7dba      	ldrb	r2, [r7, #22]
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f4ff af77 	bcc.w	800597e <adBms6830ParseSID+0x18>
  }
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <adBms6830ParsePwma>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwma(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005aac:	2300      	movs	r3, #0
 8005aae:	75bb      	strb	r3, [r7, #22]
 8005ab0:	e10d      	b.n	8005cce <adBms6830ParsePwma+0x234>
  {
    memcpy(&ic[curr_ic].pwma.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005ab2:	7dbb      	ldrb	r3, [r7, #22]
 8005ab4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f203 106b 	addw	r0, r3, #363	@ 0x16b
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	2208      	movs	r2, #8
 8005acc:	4619      	mov	r1, r3
 8005ace:	f00e f99f 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005ad2:	7dbb      	ldrb	r3, [r7, #22]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].PwmA.pwma[0] = (ic[curr_ic].pwma.rx_data[0] & 0x0F);
 8005adc:	7dbb      	ldrb	r3, [r7, #22]
 8005ade:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	440b      	add	r3, r1
 8005afc:	f002 020f 	and.w	r2, r2, #15
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    ic[curr_ic].PwmA.pwma[1] = ((ic[curr_ic].pwma.rx_data[0] & 0xF0) >> 4);
 8005b06:	7dbb      	ldrb	r3, [r7, #22]
 8005b08:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4413      	add	r3, r2
 8005b14:	f893 216b 	ldrb.w	r2, [r3, #363]	@ 0x16b
 8005b18:	7dbb      	ldrb	r3, [r7, #22]
 8005b1a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	440b      	add	r3, r1
 8005b26:	0912      	lsrs	r2, r2, #4
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
    ic[curr_ic].PwmA.pwma[2] = (ic[curr_ic].pwma.rx_data[1] & 0x0F);
 8005b2e:	7dbb      	ldrb	r3, [r7, #22]
 8005b30:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8005b40:	7dbb      	ldrb	r3, [r7, #22]
 8005b42:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	440b      	add	r3, r1
 8005b4e:	f002 020f 	and.w	r2, r2, #15
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
    ic[curr_ic].PwmA.pwma[3] = ((ic[curr_ic].pwma.rx_data[1] & 0xF0) >> 4);
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4413      	add	r3, r2
 8005b66:	f893 216c 	ldrb.w	r2, [r3, #364]	@ 0x16c
 8005b6a:	7dbb      	ldrb	r3, [r7, #22]
 8005b6c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	440b      	add	r3, r1
 8005b78:	0912      	lsrs	r2, r2, #4
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
    ic[curr_ic].PwmA.pwma[4] = (ic[curr_ic].pwma.rx_data[2] & 0x0F);
 8005b80:	7dbb      	ldrb	r3, [r7, #22]
 8005b82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f893 216d 	ldrb.w	r2, [r3, #365]	@ 0x16d
 8005b92:	7dbb      	ldrb	r3, [r7, #22]
 8005b94:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f002 020f 	and.w	r2, r2, #15
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
    ic[curr_ic].PwmA.pwma[5] = ((ic[curr_ic].pwma.rx_data[2] & 0xF0) >> 4);
 8005baa:	7dbb      	ldrb	r3, [r7, #22]
 8005bac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f893 216d 	ldrb.w	r2, [r3, #365]	@ 0x16d
 8005bbc:	7dbb      	ldrb	r3, [r7, #22]
 8005bbe:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	440b      	add	r3, r1
 8005bca:	0912      	lsrs	r2, r2, #4
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    ic[curr_ic].PwmA.pwma[6] = (ic[curr_ic].pwma.rx_data[3] & 0x0F);
 8005bd2:	7dbb      	ldrb	r3, [r7, #22]
 8005bd4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005bd8:	fb02 f303 	mul.w	r3, r2, r3
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	4413      	add	r3, r2
 8005be0:	f893 216e 	ldrb.w	r2, [r3, #366]	@ 0x16e
 8005be4:	7dbb      	ldrb	r3, [r7, #22]
 8005be6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f002 020f 	and.w	r2, r2, #15
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
    ic[curr_ic].PwmA.pwma[7] = ((ic[curr_ic].pwma.rx_data[3] & 0xF0) >> 4);
 8005bfc:	7dbb      	ldrb	r3, [r7, #22]
 8005bfe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f893 216e 	ldrb.w	r2, [r3, #366]	@ 0x16e
 8005c0e:	7dbb      	ldrb	r3, [r7, #22]
 8005c10:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c14:	fb01 f303 	mul.w	r3, r1, r3
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	440b      	add	r3, r1
 8005c1c:	0912      	lsrs	r2, r2, #4
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    ic[curr_ic].PwmA.pwma[8] = (ic[curr_ic].pwma.rx_data[4] & 0x0F);
 8005c24:	7dbb      	ldrb	r3, [r7, #22]
 8005c26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	f893 216f 	ldrb.w	r2, [r3, #367]	@ 0x16f
 8005c36:	7dbb      	ldrb	r3, [r7, #22]
 8005c38:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	440b      	add	r3, r1
 8005c44:	f002 020f 	and.w	r2, r2, #15
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
    ic[curr_ic].PwmA.pwma[9] = ((ic[curr_ic].pwma.rx_data[4] & 0xF0) >> 4);
 8005c4e:	7dbb      	ldrb	r3, [r7, #22]
 8005c50:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f893 216f 	ldrb.w	r2, [r3, #367]	@ 0x16f
 8005c60:	7dbb      	ldrb	r3, [r7, #22]
 8005c62:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	440b      	add	r3, r1
 8005c6e:	0912      	lsrs	r2, r2, #4
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    ic[curr_ic].PwmA.pwma[10] = (ic[curr_ic].pwma.rx_data[5] & 0x0F);
 8005c76:	7dbb      	ldrb	r3, [r7, #22]
 8005c78:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4413      	add	r3, r2
 8005c84:	f893 2170 	ldrb.w	r2, [r3, #368]	@ 0x170
 8005c88:	7dbb      	ldrb	r3, [r7, #22]
 8005c8a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	440b      	add	r3, r1
 8005c96:	f002 020f 	and.w	r2, r2, #15
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
    ic[curr_ic].PwmA.pwma[11] = ((ic[curr_ic].pwma.rx_data[5] & 0xF0) >> 4);
 8005ca0:	7dbb      	ldrb	r3, [r7, #22]
 8005ca2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	4413      	add	r3, r2
 8005cae:	f893 2170 	ldrb.w	r2, [r3, #368]	@ 0x170
 8005cb2:	7dbb      	ldrb	r3, [r7, #22]
 8005cb4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	440b      	add	r3, r1
 8005cc0:	0912      	lsrs	r2, r2, #4
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005cc8:	7dbb      	ldrb	r3, [r7, #22]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	75bb      	strb	r3, [r7, #22]
 8005cce:	7dba      	ldrb	r2, [r7, #22]
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	f4ff aeed 	bcc.w	8005ab2 <adBms6830ParsePwma+0x18>
  }
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <adBms6830ParsePwmb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwmb(uint8_t tIC, cell_asic *ic, uint8_t *data)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	4603      	mov	r3, r0
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	73fb      	strb	r3, [r7, #15]
  uint8_t address = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	75fb      	strb	r3, [r7, #23]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75bb      	strb	r3, [r7, #22]
 8005cf8:	e069      	b.n	8005dce <adBms6830ParsePwmb+0xec>
  {
    memcpy(&ic[curr_ic].pwmb.rx_data[0], &data[address], RX_DATA); /* dst , src , size */
 8005cfa:	7dbb      	ldrb	r3, [r7, #22]
 8005cfc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d00:	fb02 f303 	mul.w	r3, r2, r3
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4413      	add	r3, r2
 8005d08:	f203 1079 	addw	r0, r3, #377	@ 0x179
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	2208      	movs	r2, #8
 8005d14:	4619      	mov	r1, r3
 8005d16:	f00e f87b 	bl	8013e10 <memcpy>
    address = ((curr_ic+1) * (RX_DATA));
 8005d1a:	7dbb      	ldrb	r3, [r7, #22]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	75fb      	strb	r3, [r7, #23]
    ic[curr_ic].PwmB.pwmb[0] = (ic[curr_ic].pwmb.rx_data[0] & 0x0F);
 8005d24:	7dbb      	ldrb	r3, [r7, #22]
 8005d26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 8005d36:	7dbb      	ldrb	r3, [r7, #22]
 8005d38:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	440b      	add	r3, r1
 8005d44:	f002 020f 	and.w	r2, r2, #15
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    ic[curr_ic].PwmB.pwmb[1] = ((ic[curr_ic].pwmb.rx_data[0] & 0xF0) >> 4);
 8005d4e:	7dbb      	ldrb	r3, [r7, #22]
 8005d50:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f893 2179 	ldrb.w	r2, [r3, #377]	@ 0x179
 8005d60:	7dbb      	ldrb	r3, [r7, #22]
 8005d62:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	440b      	add	r3, r1
 8005d6e:	0912      	lsrs	r2, r2, #4
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
    ic[curr_ic].PwmB.pwmb[2] = (ic[curr_ic].pwmb.rx_data[1] & 0x0F);
 8005d76:	7dbb      	ldrb	r3, [r7, #22]
 8005d78:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4413      	add	r3, r2
 8005d84:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 8005d88:	7dbb      	ldrb	r3, [r7, #22]
 8005d8a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	440b      	add	r3, r1
 8005d96:	f002 020f 	and.w	r2, r2, #15
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
    ic[curr_ic].PwmB.pwmb[3] = ((ic[curr_ic].pwmb.rx_data[1] & 0xF0) >> 4);
 8005da0:	7dbb      	ldrb	r3, [r7, #22]
 8005da2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	4413      	add	r3, r2
 8005dae:	f893 217a 	ldrb.w	r2, [r3, #378]	@ 0x17a
 8005db2:	7dbb      	ldrb	r3, [r7, #22]
 8005db4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	440b      	add	r3, r1
 8005dc0:	0912      	lsrs	r2, r2, #4
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005dc8:	7dbb      	ldrb	r3, [r7, #22]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	75bb      	strb	r3, [r7, #22]
 8005dce:	7dba      	ldrb	r2, [r7, #22]
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d391      	bcc.n	8005cfa <adBms6830ParsePwmb+0x18>
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <adBms6830ParsePwm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830ParsePwm(uint8_t tIC, cell_asic *ic, GRP grp, uint8_t *data)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]
 8005dee:	4613      	mov	r3, r2
 8005df0:	73bb      	strb	r3, [r7, #14]
  switch (grp)
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d002      	beq.n	8005dfe <adBms6830ParsePwm+0x1e>
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d007      	beq.n	8005e0c <adBms6830ParsePwm+0x2c>
    case B:
      adBms6830ParsePwmb(tIC, &ic[0], &data[0]);
      break;

    default:
      break;
 8005dfc:	e00d      	b.n	8005e1a <adBms6830ParsePwm+0x3a>
      adBms6830ParsePwma(tIC, &ic[0], &data[0]);
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fe48 	bl	8005a9a <adBms6830ParsePwma>
      break;
 8005e0a:	e006      	b.n	8005e1a <adBms6830ParsePwm+0x3a>
      adBms6830ParsePwmb(tIC, &ic[0], &data[0]);
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff ff65 	bl	8005ce2 <adBms6830ParsePwmb>
      break;
 8005e18:	bf00      	nop
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <adBms6830CreateConfiga>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateConfiga(uint8_t tIC, cell_asic *ic)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4603      	mov	r3, r0
 8005e2a:	6039      	str	r1, [r7, #0]
 8005e2c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e0fa      	b.n	800602a <adBms6830CreateConfiga+0x208>
  {
    ic[curr_ic].configa.tx_data[0] = (((ic[curr_ic].tx_cfga.refon & 0x01) << 7) | (ic[curr_ic].tx_cfga.cth & 0x07));
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	4413      	add	r3, r2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	01db      	lsls	r3, r3, #7
 8005e4e:	b25a      	sxtb	r2, r3
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	440b      	add	r3, r1
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b259      	sxtb	r1, r3
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	4413      	add	r3, r2
 8005e80:	b2ca      	uxtb	r2, r1
 8005e82:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
    ic[curr_ic].configa.tx_data[1] = (ic[curr_ic].tx_cfga.flag_d & 0xFF);
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005e8c:	fb02 f303 	mul.w	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	441a      	add	r2, r3
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	440b      	add	r3, r1
 8005ea2:	7852      	ldrb	r2, [r2, #1]
 8005ea4:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    ic[curr_ic].configa.tx_data[2] = (((ic[curr_ic].tx_cfga.soakon & 0x01) << 7) | ((ic[curr_ic].tx_cfga.owrng & 0x01) << 6) | ((ic[curr_ic].tx_cfga.owa & 0x07) << 3));
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	789b      	ldrb	r3, [r3, #2]
 8005eb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	01db      	lsls	r3, r3, #7
 8005ec2:	b25a      	sxtb	r2, r3
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	440b      	add	r3, r1
 8005ed2:	789b      	ldrb	r3, [r3, #2]
 8005ed4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	b25b      	sxtb	r3, r3
 8005edc:	019b      	lsls	r3, r3, #6
 8005ede:	b25b      	sxtb	r3, r3
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	b25b      	sxtb	r3, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	b25a      	sxtb	r2, r3
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	440b      	add	r3, r1
 8005ef8:	789b      	ldrb	r3, [r3, #2]
 8005efa:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	00db      	lsls	r3, r3, #3
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f0a:	b25b      	sxtb	r3, r3
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	b259      	sxtb	r1, r3
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	b2ca      	uxtb	r2, r1
 8005f20:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    ic[curr_ic].configa.tx_data[3] = ((ic[curr_ic].tx_cfga.gpo & 0x00FF));
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	4413      	add	r3, r2
 8005f32:	885b      	ldrh	r3, [r3, #2]
 8005f34:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8005f38:	b299      	uxth	r1, r3
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	4413      	add	r3, r2
 8005f48:	b2ca      	uxtb	r2, r1
 8005f4a:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    ic[curr_ic].configa.tx_data[4] = ((ic[curr_ic].tx_cfga.gpo & 0x0300)>>8);
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f54:	fb02 f303 	mul.w	r3, r2, r3
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	f3c3 1349 	ubfx	r3, r3, #5, #10
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	121b      	asrs	r3, r3, #8
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	440b      	add	r3, r1
 8005f76:	f002 0203 	and.w	r2, r2, #3
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    ic[curr_ic].configa.tx_data[5] = (((ic[curr_ic].tx_cfga.snap & 0x01) << 5) | ((ic[curr_ic].tx_cfga.mute_st & 0x01) << 4) | ((ic[curr_ic].tx_cfga.comm_bk & 0x01) << 3) | (ic[curr_ic].tx_cfga.fc & 0x07));
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	78db      	ldrb	r3, [r3, #3]
 8005f90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	015b      	lsls	r3, r3, #5
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	b25a      	sxtb	r2, r3
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	440b      	add	r3, r1
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	b25b      	sxtb	r3, r3
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b25a      	sxtb	r2, r3
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	440b      	add	r3, r1
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	b25b      	sxtb	r3, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b25a      	sxtb	r2, r3
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	440b      	add	r3, r1
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006002:	b2db      	uxtb	r3, r3
 8006004:	b25b      	sxtb	r3, r3
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	b25b      	sxtb	r3, r3
 800600c:	4313      	orrs	r3, r2
 800600e:	b259      	sxtb	r1, r3
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	4413      	add	r3, r2
 800601e:	b2ca      	uxtb	r2, r1
 8006020:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	3301      	adds	r3, #1
 8006028:	73fb      	strb	r3, [r7, #15]
 800602a:	7bfa      	ldrb	r2, [r7, #15]
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	429a      	cmp	r2, r3
 8006030:	f4ff af00 	bcc.w	8005e34 <adBms6830CreateConfiga+0x12>
  }
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <adBms6830CreateConfigb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateConfigb(uint8_t tIC, cell_asic *ic)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	6039      	str	r1, [r7, #0]
 800604c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	e0ac      	b.n	80061ae <adBms6830CreateConfigb+0x16c>
  {
    ic[curr_ic].configb.tx_data[0] = ((ic[curr_ic].tx_cfgb.vuv ));
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	4413      	add	r3, r2
 8006062:	8999      	ldrh	r1, [r3, #12]
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	4413      	add	r3, r2
 8006072:	b2ca      	uxtb	r2, r1
 8006074:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
    ic[curr_ic].configb.tx_data[1] = (((ic[curr_ic].tx_cfgb.vov & 0x000F) << 4) | ((ic[curr_ic].tx_cfgb.vuv ) >> 8));
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	4413      	add	r3, r2
 8006086:	89db      	ldrh	r3, [r3, #14]
 8006088:	b25b      	sxtb	r3, r3
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	b25a      	sxtb	r2, r3
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	440b      	add	r3, r1
 800609c:	899b      	ldrh	r3, [r3, #12]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b25b      	sxtb	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b259      	sxtb	r1, r3
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4413      	add	r3, r2
 80060b6:	b2ca      	uxtb	r2, r1
 80060b8:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    ic[curr_ic].configb.tx_data[2] = ((ic[curr_ic].tx_cfgb.vov >>4)&0x0FF);
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	89db      	ldrh	r3, [r3, #14]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	b299      	uxth	r1, r3
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	4413      	add	r3, r2
 80060de:	b2ca      	uxtb	r2, r1
 80060e0:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
    ic[curr_ic].configb.tx_data[3] = (((ic[curr_ic].tx_cfgb.dtmen & 0x01) << 7) | ((ic[curr_ic].tx_cfgb.dtrng & 0x01) << 6) | ((ic[curr_ic].tx_cfgb.dcto & 0x3F) << 0));
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	4413      	add	r3, r2
 80060f2:	7c1b      	ldrb	r3, [r3, #16]
 80060f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	01db      	lsls	r3, r3, #7
 80060fe:	b25a      	sxtb	r2, r3
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	440b      	add	r3, r1
 800610e:	7c1b      	ldrb	r3, [r3, #16]
 8006110:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	b25b      	sxtb	r3, r3
 8006118:	019b      	lsls	r3, r3, #6
 800611a:	b25b      	sxtb	r3, r3
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	b25b      	sxtb	r3, r3
 8006122:	4313      	orrs	r3, r2
 8006124:	b25a      	sxtb	r2, r3
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	440b      	add	r3, r1
 8006134:	7c1b      	ldrb	r3, [r3, #16]
 8006136:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800613a:	b2db      	uxtb	r3, r3
 800613c:	b25b      	sxtb	r3, r3
 800613e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006142:	b25b      	sxtb	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b259      	sxtb	r1, r3
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4413      	add	r3, r2
 8006156:	b2ca      	uxtb	r2, r1
 8006158:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    ic[curr_ic].configb.tx_data[4] = ((ic[curr_ic].tx_cfgb.dcc & 0xFF));
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	4413      	add	r3, r2
 800616a:	8a59      	ldrh	r1, [r3, #18]
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4413      	add	r3, r2
 800617a:	b2ca      	uxtb	r2, r1
 800617c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    ic[curr_ic].configb.tx_data[5] = ((ic[curr_ic].tx_cfgb.dcc >>8 ));
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4413      	add	r3, r2
 800618e:	8a5b      	ldrh	r3, [r3, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	b299      	uxth	r1, r3
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	4413      	add	r3, r2
 80061a2:	b2ca      	uxtb	r2, r1
 80061a4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3301      	adds	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	f4ff af4e 	bcc.w	8006054 <adBms6830CreateConfigb+0x12>
  }
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <adBms6830CreateClrflagData>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateClrflagData(uint8_t tIC, cell_asic *ic)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	4603      	mov	r3, r0
 80061ce:	6039      	str	r1, [r7, #0]
 80061d0:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	73fb      	strb	r3, [r7, #15]
 80061d6:	e138      	b.n	800644a <adBms6830CreateClrflagData+0x284>
  {
    ic[curr_ic].clrflag.tx_data[0] = (ic[curr_ic].clflag.cl_csflt & 0x00FF);
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	8b99      	ldrh	r1, [r3, #28]
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	b2ca      	uxtb	r2, r1
 80061f8:	f883 213b 	strb.w	r2, [r3, #315]	@ 0x13b
    ic[curr_ic].clrflag.tx_data[1] = ((ic[curr_ic].clflag.cl_csflt & 0xFF00) >> 8);
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006202:	fb02 f303 	mul.w	r3, r2, r3
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	4413      	add	r3, r2
 800620a:	8b9b      	ldrh	r3, [r3, #28]
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	b299      	uxth	r1, r3
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	4413      	add	r3, r2
 800621e:	b2ca      	uxtb	r2, r1
 8006220:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
    ic[curr_ic].clrflag.tx_data[2] = 0x00;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	4413      	add	r3, r2
 8006232:	2200      	movs	r2, #0
 8006234:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
    ic[curr_ic].clrflag.tx_data[3] = 0x00;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	2200      	movs	r2, #0
 8006248:	f883 213e 	strb.w	r2, [r3, #318]	@ 0x13e
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4413      	add	r3, r2
 800625a:	7f9b      	ldrb	r3, [r3, #30]
 800625c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	b25b      	sxtb	r3, r3
 8006264:	01db      	lsls	r3, r3, #7
 8006266:	b25a      	sxtb	r2, r3
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800626e:	fb01 f303 	mul.w	r3, r1, r3
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	440b      	add	r3, r1
 8006276:	7f9b      	ldrb	r3, [r3, #30]
 8006278:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800627c:	b2db      	uxtb	r3, r3
 800627e:	b25b      	sxtb	r3, r3
 8006280:	019b      	lsls	r3, r3, #6
 8006282:	b25b      	sxtb	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b25a      	sxtb	r2, r3
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	440b      	add	r3, r1
 8006296:	7f9b      	ldrb	r3, [r3, #30]
 8006298:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800629c:	b2db      	uxtb	r3, r3
 800629e:	b25b      	sxtb	r3, r3
 80062a0:	015b      	lsls	r3, r3, #5
 80062a2:	b25b      	sxtb	r3, r3
 80062a4:	4313      	orrs	r3, r2
 80062a6:	b25a      	sxtb	r2, r3
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80062ae:	fb01 f303 	mul.w	r3, r1, r3
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	440b      	add	r3, r1
 80062b6:	7f9b      	ldrb	r3, [r3, #30]
 80062b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	b25a      	sxtb	r2, r3
                                      |(ic[curr_ic].clflag.cl_ced << 3)| (ic[curr_ic].clflag.cl_cmed << 2) | (ic[curr_ic].clflag.cl_sed << 1) | (ic[curr_ic].clflag.cl_smed));
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	6839      	ldr	r1, [r7, #0]
 80062d4:	440b      	add	r3, r1
 80062d6:	7f9b      	ldrb	r3, [r3, #30]
 80062d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b25a      	sxtb	r2, r3
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	440b      	add	r3, r1
 80062f6:	7f9b      	ldrb	r3, [r3, #30]
 80062f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	b25b      	sxtb	r3, r3
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	b25b      	sxtb	r3, r3
 8006304:	4313      	orrs	r3, r2
 8006306:	b25a      	sxtb	r2, r3
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	440b      	add	r3, r1
 8006316:	7f9b      	ldrb	r3, [r3, #30]
 8006318:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	b25b      	sxtb	r3, r3
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	b25b      	sxtb	r3, r3
 8006324:	4313      	orrs	r3, r2
 8006326:	b25a      	sxtb	r2, r3
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	440b      	add	r3, r1
 8006336:	7f9b      	ldrb	r3, [r3, #30]
 8006338:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	b25b      	sxtb	r3, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	b259      	sxtb	r1, r3
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 8006344:	7bfb      	ldrb	r3, [r7, #15]
 8006346:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800634a:	fb02 f303 	mul.w	r3, r2, r3
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	4413      	add	r3, r2
                                      |(ic[curr_ic].clflag.cl_ced << 3)| (ic[curr_ic].clflag.cl_cmed << 2) | (ic[curr_ic].clflag.cl_sed << 1) | (ic[curr_ic].clflag.cl_smed));
 8006352:	b2ca      	uxtb	r2, r1
    ic[curr_ic].clrflag.tx_data[4] = ((ic[curr_ic].clflag.cl_vaov << 7) | (ic[curr_ic].clflag.cl_vauv << 6) | (ic[curr_ic].clflag.cl_vdov << 5) | (ic[curr_ic].clflag.cl_vduv << 4)
 8006354:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	4413      	add	r3, r2
 8006366:	7fdb      	ldrb	r3, [r3, #31]
 8006368:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	b25b      	sxtb	r3, r3
 8006370:	01db      	lsls	r3, r3, #7
 8006372:	b25a      	sxtb	r2, r3
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800637a:	fb01 f303 	mul.w	r3, r1, r3
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	440b      	add	r3, r1
 8006382:	7fdb      	ldrb	r3, [r3, #31]
 8006384:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	b25b      	sxtb	r3, r3
 800638c:	019b      	lsls	r3, r3, #6
 800638e:	b25b      	sxtb	r3, r3
 8006390:	4313      	orrs	r3, r2
 8006392:	b25a      	sxtb	r2, r3
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	440b      	add	r3, r1
 80063a2:	7fdb      	ldrb	r3, [r3, #31]
 80063a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	b25b      	sxtb	r3, r3
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b25a      	sxtb	r2, r3
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	440b      	add	r3, r1
 80063c2:	7fdb      	ldrb	r3, [r3, #31]
 80063c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	4313      	orrs	r3, r2
 80063d2:	b25a      	sxtb	r2, r3
                                      | (ic[curr_ic].clflag.cl_thsd << 2) | (ic[curr_ic].clflag.cl_tmode << 1) | (ic[curr_ic].clflag.cl_oscchk));
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	440b      	add	r3, r1
 80063e2:	7fdb      	ldrb	r3, [r3, #31]
 80063e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	4313      	orrs	r3, r2
 80063f2:	b25a      	sxtb	r2, r3
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	440b      	add	r3, r1
 8006402:	7fdb      	ldrb	r3, [r3, #31]
 8006404:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	b25b      	sxtb	r3, r3
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	b25b      	sxtb	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b25a      	sxtb	r2, r3
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	440b      	add	r3, r1
 8006422:	7fdb      	ldrb	r3, [r3, #31]
 8006424:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	b25b      	sxtb	r3, r3
 800642c:	4313      	orrs	r3, r2
 800642e:	b259      	sxtb	r1, r3
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	4413      	add	r3, r2
                                      | (ic[curr_ic].clflag.cl_thsd << 2) | (ic[curr_ic].clflag.cl_tmode << 1) | (ic[curr_ic].clflag.cl_oscchk));
 800643e:	b2ca      	uxtb	r2, r1
    ic[curr_ic].clrflag.tx_data[5] = ((ic[curr_ic].clflag.cl_vde << 7) | (ic[curr_ic].clflag.cl_vdel << 6) | (ic[curr_ic].clflag.cl_spiflt << 4) |(ic[curr_ic].clflag.cl_sleep << 3)
 8006440:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	3301      	adds	r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
 800644a:	7bfa      	ldrb	r2, [r7, #15]
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	429a      	cmp	r2, r3
 8006450:	f4ff aec2 	bcc.w	80061d8 <adBms6830CreateClrflagData+0x12>
  }
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <adBms6830CreateComm>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreateComm(uint8_t tIC, cell_asic *ic)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	4603      	mov	r3, r0
 800646a:	6039      	str	r1, [r7, #0]
 800646c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
 8006472:	e0a7      	b.n	80065c4 <adBms6830CreateComm+0x162>
  {
    ic[curr_ic].com.tx_data[0] = ((ic[curr_ic].comm.icomm[0] & 0x0F)  << 4  | (ic[curr_ic].comm.fcomm[0]   & 0x0F));
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	4413      	add	r3, r2
 8006482:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8006486:	b25b      	sxtb	r3, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	b25a      	sxtb	r2, r3
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	440b      	add	r3, r1
 800649a:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 800649e:	b25b      	sxtb	r3, r3
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	b25b      	sxtb	r3, r3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b259      	sxtb	r1, r3
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	4413      	add	r3, r2
 80064b8:	b2ca      	uxtb	r2, r1
 80064ba:	f883 2157 	strb.w	r2, [r3, #343]	@ 0x157
    ic[curr_ic].com.tx_data[1] = ((ic[curr_ic].comm.data[0] ));
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80064c4:	fb02 f303 	mul.w	r3, r2, r3
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	441a      	add	r2, r3
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	440b      	add	r3, r1
 80064da:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80064de:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
    ic[curr_ic].com.tx_data[2] = ((ic[curr_ic].comm.icomm[1] & 0x0F)  << 4 ) | (ic[curr_ic].comm.fcomm[1]   & 0x0F);
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80064e8:	fb02 f303 	mul.w	r3, r2, r3
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80064f4:	b25b      	sxtb	r3, r3
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	b25a      	sxtb	r2, r3
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	440b      	add	r3, r1
 8006508:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 800650c:	b25b      	sxtb	r3, r3
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	b25b      	sxtb	r3, r3
 8006514:	4313      	orrs	r3, r2
 8006516:	b259      	sxtb	r1, r3
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	4413      	add	r3, r2
 8006526:	b2ca      	uxtb	r2, r1
 8006528:	f883 2159 	strb.w	r2, [r3, #345]	@ 0x159
    ic[curr_ic].com.tx_data[3] = ((ic[curr_ic].comm.data[1]));
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	441a      	add	r2, r3
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	440b      	add	r3, r1
 8006548:	f892 2107 	ldrb.w	r2, [r2, #263]	@ 0x107
 800654c:	f883 215a 	strb.w	r2, [r3, #346]	@ 0x15a
    ic[curr_ic].com.tx_data[4] = ((ic[curr_ic].comm.icomm[2] & 0x0F)  << 4  | (ic[curr_ic].comm.fcomm[2]   & 0x0F));
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4413      	add	r3, r2
 800655e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8006562:	b25b      	sxtb	r3, r3
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	b25a      	sxtb	r2, r3
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800656e:	fb01 f303 	mul.w	r3, r1, r3
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	440b      	add	r3, r1
 8006576:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800657a:	b25b      	sxtb	r3, r3
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	b25b      	sxtb	r3, r3
 8006582:	4313      	orrs	r3, r2
 8006584:	b259      	sxtb	r1, r3
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	4413      	add	r3, r2
 8006594:	b2ca      	uxtb	r2, r1
 8006596:	f883 215b 	strb.w	r2, [r3, #347]	@ 0x15b
    ic[curr_ic].com.tx_data[5] = ((ic[curr_ic].comm.data[2]));
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80065a0:	fb02 f303 	mul.w	r3, r2, r3
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	441a      	add	r2, r3
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	440b      	add	r3, r1
 80065b6:	f892 2108 	ldrb.w	r2, [r2, #264]	@ 0x108
 80065ba:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	3301      	adds	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
 80065c4:	7bfa      	ldrb	r2, [r7, #15]
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	f4ff af53 	bcc.w	8006474 <adBms6830CreateComm+0x12>
  }
}
 80065ce:	bf00      	nop
 80065d0:	bf00      	nop
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <adBms6830CreatePwma>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreatePwma(uint8_t tIC, cell_asic *ic)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	6039      	str	r1, [r7, #0]
 80065e6:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e0e0      	b.n	80067b0 <adBms6830CreatePwma+0x1d4>
  {
    ic[curr_ic].pwma.tx_data[0] = ((ic[curr_ic].PwmA.pwma[1] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[0] & 0x0F));
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80065f4:	fb02 f303 	mul.w	r3, r2, r3
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8006600:	b25b      	sxtb	r3, r3
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	b25a      	sxtb	r2, r3
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	440b      	add	r3, r1
 8006614:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8006618:	b25b      	sxtb	r3, r3
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	b25b      	sxtb	r3, r3
 8006620:	4313      	orrs	r3, r2
 8006622:	b259      	sxtb	r1, r3
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4413      	add	r3, r2
 8006632:	b2ca      	uxtb	r2, r1
 8006634:	f883 2165 	strb.w	r2, [r3, #357]	@ 0x165
    ic[curr_ic].pwma.tx_data[1] = ((ic[curr_ic].PwmA.pwma[3] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[2] & 0x0F));
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	4413      	add	r3, r2
 8006646:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800664a:	b25b      	sxtb	r3, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	b25a      	sxtb	r2, r3
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	440b      	add	r3, r1
 800665e:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8006662:	b25b      	sxtb	r3, r3
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	b25b      	sxtb	r3, r3
 800666a:	4313      	orrs	r3, r2
 800666c:	b259      	sxtb	r1, r3
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006674:	fb02 f303 	mul.w	r3, r2, r3
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4413      	add	r3, r2
 800667c:	b2ca      	uxtb	r2, r1
 800667e:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
    ic[curr_ic].pwma.tx_data[2] = ((ic[curr_ic].PwmA.pwma[5] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[4] & 0x0F));
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006688:	fb02 f303 	mul.w	r3, r2, r3
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	4413      	add	r3, r2
 8006690:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8006694:	b25b      	sxtb	r3, r3
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	b25a      	sxtb	r2, r3
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	440b      	add	r3, r1
 80066a8:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	b25b      	sxtb	r3, r3
 80066b4:	4313      	orrs	r3, r2
 80066b6:	b259      	sxtb	r1, r3
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	4413      	add	r3, r2
 80066c6:	b2ca      	uxtb	r2, r1
 80066c8:	f883 2167 	strb.w	r2, [r3, #359]	@ 0x167
    ic[curr_ic].pwma.tx_data[3] = ((ic[curr_ic].PwmA.pwma[7] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[6] & 0x0F));
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4413      	add	r3, r2
 80066da:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80066de:	b25b      	sxtb	r3, r3
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	b25a      	sxtb	r2, r3
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	440b      	add	r3, r1
 80066f2:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b259      	sxtb	r1, r3
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006708:	fb02 f303 	mul.w	r3, r2, r3
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	4413      	add	r3, r2
 8006710:	b2ca      	uxtb	r2, r1
 8006712:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
    ic[curr_ic].pwma.tx_data[4] = ((ic[curr_ic].PwmA.pwma[9] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[8] & 0x0F));
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800671c:	fb02 f303 	mul.w	r3, r2, r3
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	4413      	add	r3, r2
 8006724:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8006728:	b25b      	sxtb	r3, r3
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	b25a      	sxtb	r2, r3
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006734:	fb01 f303 	mul.w	r3, r1, r3
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	440b      	add	r3, r1
 800673c:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8006740:	b25b      	sxtb	r3, r3
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	b25b      	sxtb	r3, r3
 8006748:	4313      	orrs	r3, r2
 800674a:	b259      	sxtb	r1, r3
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	4413      	add	r3, r2
 800675a:	b2ca      	uxtb	r2, r1
 800675c:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
    ic[curr_ic].pwma.tx_data[5] = ((ic[curr_ic].PwmA.pwma[11] & 0x0F) << 4 | (ic[curr_ic].PwmA.pwma[10] & 0x0F));
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	4413      	add	r3, r2
 800676e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8006772:	b25b      	sxtb	r3, r3
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	b25a      	sxtb	r2, r3
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	440b      	add	r3, r1
 8006786:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b25b      	sxtb	r3, r3
 8006792:	4313      	orrs	r3, r2
 8006794:	b259      	sxtb	r1, r3
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	4413      	add	r3, r2
 80067a4:	b2ca      	uxtb	r2, r1
 80067a6:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	3301      	adds	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	7bfa      	ldrb	r2, [r7, #15]
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	f4ff af1a 	bcc.w	80065ee <adBms6830CreatePwma+0x12>
  }
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <adBms6830CreatePwmb>:
 * @return None
 *
 *******************************************************************************
*/
void adBms6830CreatePwmb(uint8_t tIC, cell_asic *ic)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	71fb      	strb	r3, [r7, #7]
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
 80067d8:	e04c      	b.n	8006874 <adBms6830CreatePwmb+0xac>
  {
    ic[curr_ic].pwmb.tx_data[0] = ((ic[curr_ic].PwmB.pwmb[1] & 0x0F) << 4 | (ic[curr_ic].PwmB.pwmb[0] & 0x0F));
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80067e0:	fb02 f303 	mul.w	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	4413      	add	r3, r2
 80067e8:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	b25a      	sxtb	r2, r3
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	440b      	add	r3, r1
 8006800:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8006804:	b25b      	sxtb	r3, r3
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	b25b      	sxtb	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b259      	sxtb	r1, r3
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	4413      	add	r3, r2
 800681e:	b2ca      	uxtb	r2, r1
 8006820:	f883 2173 	strb.w	r2, [r3, #371]	@ 0x173
    ic[curr_ic].pwmb.tx_data[1] = ((ic[curr_ic].PwmB.pwmb[3] & 0x0F) << 4 | (ic[curr_ic].PwmB.pwmb[2] & 0x0F));
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	4413      	add	r3, r2
 8006832:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8006836:	b25b      	sxtb	r3, r3
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	b25a      	sxtb	r2, r3
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	f44f 7128 	mov.w	r1, #672	@ 0x2a0
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	440b      	add	r3, r1
 800684a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 800684e:	b25b      	sxtb	r3, r3
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	b25b      	sxtb	r3, r3
 8006856:	4313      	orrs	r3, r2
 8006858:	b259      	sxtb	r1, r3
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006860:	fb02 f303 	mul.w	r3, r2, r3
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	4413      	add	r3, r2
 8006868:	b2ca      	uxtb	r2, r1
 800686a:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
  for(uint8_t curr_ic = 0; curr_ic < tIC; curr_ic++)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	3301      	adds	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	7bfa      	ldrb	r2, [r7, #15]
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3ae      	bcc.n	80067da <adBms6830CreatePwmb+0x12>
  }
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <adbms_main>:
uint16_t multiMask = 0;
uint16_t tick = 0;


void adbms_main(int command, FDCAN_HandleTypeDef *hfdcan,
		FDCAN_BMS_CONTEXT *ctx, TIM_HandleTypeDef *htimPWM) {
 800688c:	b5b0      	push	{r4, r5, r7, lr}
 800688e:	b08a      	sub	sp, #40	@ 0x28
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
	//     user_command = command;
	//     // printf("Received: %c\n", user_command);
	//     // printf("Enter cmd:%d\n", user_command);
	// #endif
	// run_command(user_command);
	if (accy_status == -1 || accy_status == 0) {
 800689a:	4b7e      	ldr	r3, [pc, #504]	@ (8006a94 <adbms_main+0x208>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a2:	d003      	beq.n	80068ac <adbms_main+0x20>
 80068a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006a94 <adbms_main+0x208>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <adbms_main+0x24>
		// If the accessory is not in charge or ready state, set the accumulator status
		user_adBms6830_getAccyStatus(); // Determine whether the accy is in charge or ready state
 80068ac:	f002 fb30 	bl	8008f10 <user_adBms6830_getAccyStatus>
	}

	readSegment += IC_CHUNK;
 80068b0:	4b79      	ldr	r3, [pc, #484]	@ (8006a98 <adbms_main+0x20c>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b77      	ldr	r3, [pc, #476]	@ (8006a98 <adbms_main+0x20c>)
 80068ba:	701a      	strb	r2, [r3, #0]
	if (readSegment >= TOTAL_IC) {
 80068bc:	4b76      	ldr	r3, [pc, #472]	@ (8006a98 <adbms_main+0x20c>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d902      	bls.n	80068ca <adbms_main+0x3e>
		readSegment = 0;
 80068c4:	4b74      	ldr	r3, [pc, #464]	@ (8006a98 <adbms_main+0x20c>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
	//	TEMP_IC[1] = IC[(readSegment*2)+1];

//	    populateIC(TEMP_IC, 2);
//	populateIC(&IC[0], TOTAL_IC);

	populateIC(&IC[readSegment], IC_CHUNK);
 80068ca:	4b73      	ldr	r3, [pc, #460]	@ (8006a98 <adbms_main+0x20c>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80068d4:	fb02 f303 	mul.w	r3, r2, r3
 80068d8:	4a70      	ldr	r2, [pc, #448]	@ (8006a9c <adbms_main+0x210>)
 80068da:	4413      	add	r3, r2
 80068dc:	2101      	movs	r1, #1
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 ffea 	bl	80088b8 <populateIC>

	if (accy_status == READY_POWER && !cell_fault && !temp_fault) {
 80068e4:	4b6e      	ldr	r3, [pc, #440]	@ (8006aa0 <adbms_main+0x214>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006a94 <adbms_main+0x208>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d144      	bne.n	800697c <adbms_main+0xf0>
 80068f2:	4b6c      	ldr	r3, [pc, #432]	@ (8006aa4 <adbms_main+0x218>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d140      	bne.n	800697c <adbms_main+0xf0>
 80068fa:	4b6b      	ldr	r3, [pc, #428]	@ (8006aa8 <adbms_main+0x21c>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d13c      	bne.n	800697c <adbms_main+0xf0>
		user_adBms6830_setFaults(); // Check for faults and set GPIO pins accordingly
 8006902:	f002 fa81 	bl	8008e08 <user_adBms6830_setFaults>
		getPackVoltage(TOTAL_IC, &IC[0]); // Get the pack voltage
 8006906:	4965      	ldr	r1, [pc, #404]	@ (8006a9c <adbms_main+0x210>)
 8006908:	200a      	movs	r0, #10
 800690a:	f002 fcb5 	bl	8009278 <getPackVoltage>
		// getCurrentSensorData();               // Get the current sensor data  ==> moved into populateIC
		updateSOC();  // Get the state of charge (SOC) based on the pack voltage
 800690e:	f002 fd27 	bl	8009360 <updateSOC>
		ccl = calcCCL();                      // get charge current limit
 8006912:	f003 f875 	bl	8009a00 <calcCCL>
 8006916:	eef0 7a40 	vmov.f32	s15, s0
 800691a:	4b64      	ldr	r3, [pc, #400]	@ (8006aac <adbms_main+0x220>)
 800691c:	edc3 7a00 	vstr	s15, [r3]
		dcl = calcDCL();                      // get discharge current limit
 8006920:	f003 f856 	bl	80099d0 <calcDCL>
 8006924:	eef0 7a40 	vmov.f32	s15, s0
 8006928:	4b61      	ldr	r3, [pc, #388]	@ (8006ab0 <adbms_main+0x224>)
 800692a:	edc3 7a00 	vstr	s15, [r3]
		fanPWMControl(highest_temp, htimPWM); // Control the fan based on the highest temperature
 800692e:	4b61      	ldr	r3, [pc, #388]	@ (8006ab4 <adbms_main+0x228>)
 8006930:	edd3 7a00 	vldr	s15, [r3]
 8006934:	6838      	ldr	r0, [r7, #0]
 8006936:	eeb0 0a67 	vmov.f32	s0, s15
 800693a:	f002 fe31 	bl	80095a0 <fanPWMControl>

		populate_CAN1(&ctx->msg_6b0, &IC[0], TOTAL_IC); // Populate CAN frames with data (TODO: check with justin)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	336c      	adds	r3, #108	@ 0x6c
 8006942:	220a      	movs	r2, #10
 8006944:	4955      	ldr	r1, [pc, #340]	@ (8006a9c <adbms_main+0x210>)
 8006946:	4618      	mov	r0, r3
 8006948:	f001 fa5a 	bl	8007e00 <populate_CAN1>
		populate_CAN2(&ctx->msg_6b1, &IC[0], TOTAL_IC);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3374      	adds	r3, #116	@ 0x74
 8006950:	220a      	movs	r2, #10
 8006952:	4952      	ldr	r1, [pc, #328]	@ (8006a9c <adbms_main+0x210>)
 8006954:	4618      	mov	r0, r3
 8006956:	f001 fb0b 	bl	8007f70 <populate_CAN2>
		populate_CAN3(&ctx->msg_6b2, &IC[0], TOTAL_IC);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	337c      	adds	r3, #124	@ 0x7c
 800695e:	220a      	movs	r2, #10
 8006960:	494e      	ldr	r1, [pc, #312]	@ (8006a9c <adbms_main+0x210>)
 8006962:	4618      	mov	r0, r3
 8006964:	f001 fb88 	bl	8008078 <populate_CAN3>
		uint32_t now = HAL_GetTick();
 8006968:	f004 fb02 	bl	800af70 <HAL_GetTick>
 800696c:	61f8      	str	r0, [r7, #28]
		FDCAN_BMS_Mailman(hfdcan, ctx, now, 0);
 800696e:	2300      	movs	r3, #0
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	f001 fd0b 	bl	8008390 <FDCAN_BMS_Mailman>
	if (accy_status == READY_POWER && !cell_fault && !temp_fault) {
 800697a:	e0f1      	b.n	8006b60 <adbms_main+0x2d4>
	} else if (accy_status == CHARGE_POWER && !cell_fault && !temp_fault) {
 800697c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ab8 <adbms_main+0x22c>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	4b44      	ldr	r3, [pc, #272]	@ (8006a94 <adbms_main+0x208>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d150      	bne.n	8006a2c <adbms_main+0x1a0>
 800698a:	4b46      	ldr	r3, [pc, #280]	@ (8006aa4 <adbms_main+0x218>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d14c      	bne.n	8006a2c <adbms_main+0x1a0>
 8006992:	4b45      	ldr	r3, [pc, #276]	@ (8006aa8 <adbms_main+0x21c>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d148      	bne.n	8006a2c <adbms_main+0x1a0>
		uint32_t timingshits = HAL_GetTick();
 800699a:	f004 fae9 	bl	800af70 <HAL_GetTick>
 800699e:	61b8      	str	r0, [r7, #24]
		if (PRINT_ON) printf("time to read once: %.2f", HAL_GetTick() - timingshits);
 80069a0:	f004 fae6 	bl	800af70 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	4843      	ldr	r0, [pc, #268]	@ (8006abc <adbms_main+0x230>)
 80069ae:	f00d f95b 	bl	8013c68 <iprintf>

		user_adBms6830_setFaults(); // Check for faults and set GPIO pins accordingly
 80069b2:	f002 fa29 	bl	8008e08 <user_adBms6830_setFaults>
		getPackVoltage(TOTAL_IC, &IC[0]); // Get the pack voltage
 80069b6:	4939      	ldr	r1, [pc, #228]	@ (8006a9c <adbms_main+0x210>)
 80069b8:	200a      	movs	r0, #10
 80069ba:	f002 fc5d 	bl	8009278 <getPackVoltage>
		// getCurrentSensorData();               // Get the current sensor data   ==> moved into populateIC
		updateSOC();  // Get the state of charge (SOC) based on the pack voltage
 80069be:	f002 fccf 	bl	8009360 <updateSOC>
		ccl = calcCCL();                      // get charge current limit
 80069c2:	f003 f81d 	bl	8009a00 <calcCCL>
 80069c6:	eef0 7a40 	vmov.f32	s15, s0
 80069ca:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <adbms_main+0x220>)
 80069cc:	edc3 7a00 	vstr	s15, [r3]
		dcl = calcDCL();                      // get discharge current limit
 80069d0:	f002 fffe 	bl	80099d0 <calcDCL>
 80069d4:	eef0 7a40 	vmov.f32	s15, s0
 80069d8:	4b35      	ldr	r3, [pc, #212]	@ (8006ab0 <adbms_main+0x224>)
 80069da:	edc3 7a00 	vstr	s15, [r3]
		//    fanPWMControl(highest_temp, htimPWM); // Control the fan based on the highest temperature

		populate_CAN1(&ctx->msg_6b0, &IC[0], TOTAL_IC); // Populate CAN frames with data (TODO: check with justin)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	336c      	adds	r3, #108	@ 0x6c
 80069e2:	220a      	movs	r2, #10
 80069e4:	492d      	ldr	r1, [pc, #180]	@ (8006a9c <adbms_main+0x210>)
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 fa0a 	bl	8007e00 <populate_CAN1>
		populate_CAN2(&ctx->msg_6b1, &IC[0], TOTAL_IC);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3374      	adds	r3, #116	@ 0x74
 80069f0:	220a      	movs	r2, #10
 80069f2:	492a      	ldr	r1, [pc, #168]	@ (8006a9c <adbms_main+0x210>)
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 fabb 	bl	8007f70 <populate_CAN2>
		populate_CAN3(&ctx->msg_6b2, &IC[0], TOTAL_IC);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	337c      	adds	r3, #124	@ 0x7c
 80069fe:	220a      	movs	r2, #10
 8006a00:	4926      	ldr	r1, [pc, #152]	@ (8006a9c <adbms_main+0x210>)
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fb38 	bl	8008078 <populate_CAN3>
		populate_charge_CAN(&ctx->CAN_CHGCONTEXT, &IC[0], TOTAL_IC);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3390      	adds	r3, #144	@ 0x90
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	4923      	ldr	r1, [pc, #140]	@ (8006a9c <adbms_main+0x210>)
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fb85 	bl	8008120 <populate_charge_CAN>
		uint32_t now = HAL_GetTick();
 8006a16:	f004 faab 	bl	800af70 <HAL_GetTick>
 8006a1a:	6178      	str	r0, [r7, #20]
		FDCAN_BMS_Mailman(hfdcan, ctx, now, is_charging);
 8006a1c:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <adbms_main+0x234>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	68b8      	ldr	r0, [r7, #8]
 8006a26:	f001 fcb3 	bl	8008390 <FDCAN_BMS_Mailman>
	} else if (accy_status == CHARGE_POWER && !cell_fault && !temp_fault) {
 8006a2a:	e099      	b.n	8006b60 <adbms_main+0x2d4>
	} else {
		if (PRINT_ON) printf("Fan Status: %.2f\n", fan_status);
 8006a2c:	4b25      	ldr	r3, [pc, #148]	@ (8006ac4 <adbms_main+0x238>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7f9 fd91 	bl	8000558 <__aeabi_f2d>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4823      	ldr	r0, [pc, #140]	@ (8006ac8 <adbms_main+0x23c>)
 8006a3c:	f00d f914 	bl	8013c68 <iprintf>
		// fanPWMControl(42.0f, htimPWM);
		ccl = calcCCL();                      // get charge current limit
 8006a40:	f002 ffde 	bl	8009a00 <calcCCL>
 8006a44:	eef0 7a40 	vmov.f32	s15, s0
 8006a48:	4b18      	ldr	r3, [pc, #96]	@ (8006aac <adbms_main+0x220>)
 8006a4a:	edc3 7a00 	vstr	s15, [r3]
		dcl = calcDCL();
 8006a4e:	f002 ffbf 	bl	80099d0 <calcDCL>
 8006a52:	eef0 7a40 	vmov.f32	s15, s0
 8006a56:	4b16      	ldr	r3, [pc, #88]	@ (8006ab0 <adbms_main+0x224>)
 8006a58:	edc3 7a00 	vstr	s15, [r3]
		user_adBms6830_setFaults(); // Check for faults and set GPIO pins accordingly
 8006a5c:	f002 f9d4 	bl	8008e08 <user_adBms6830_setFaults>
		getPackVoltage(TOTAL_IC, &IC[0]); // Get the pack voltage
 8006a60:	490e      	ldr	r1, [pc, #56]	@ (8006a9c <adbms_main+0x210>)
 8006a62:	200a      	movs	r0, #10
 8006a64:	f002 fc08 	bl	8009278 <getPackVoltage>
		// getCurrentSensorData();           // Get the current sensor data   ==> moved into populateIC
		updateSOC(); // Get the state of charge (SOC) based on the pack voltage
 8006a68:	f002 fc7a 	bl	8009360 <updateSOC>

		if (!cell_fault && !temp_fault && balancing == 1) {
 8006a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa4 <adbms_main+0x218>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d12d      	bne.n	8006ad0 <adbms_main+0x244>
 8006a74:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <adbms_main+0x21c>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d129      	bne.n	8006ad0 <adbms_main+0x244>
 8006a7c:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <adbms_main+0x240>)
 8006a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d124      	bne.n	8006ad0 <adbms_main+0x244>
			// If there are no faults, balance the cells
			balanceCells(TOTAL_IC, IC, PWM_100_0_PCT); // TODO: Set the duty cycle for balancing
 8006a86:	220f      	movs	r2, #15
 8006a88:	4904      	ldr	r1, [pc, #16]	@ (8006a9c <adbms_main+0x210>)
 8006a8a:	200a      	movs	r0, #10
 8006a8c:	f000 fa00 	bl	8006e90 <balanceCells>
 8006a90:	e02a      	b.n	8006ae8 <adbms_main+0x25c>
 8006a92:	bf00      	nop
 8006a94:	20001c70 	.word	0x20001c70
 8006a98:	20001c65 	.word	0x20001c65
 8006a9c:	20000224 	.word	0x20000224
 8006aa0:	08017a60 	.word	0x08017a60
 8006aa4:	20001c6a 	.word	0x20001c6a
 8006aa8:	20001c6b 	.word	0x20001c6b
 8006aac:	20001c90 	.word	0x20001c90
 8006ab0:	20001c94 	.word	0x20001c94
 8006ab4:	20001c9c 	.word	0x20001c9c
 8006ab8:	08017a61 	.word	0x08017a61
 8006abc:	08016934 	.word	0x08016934
 8006ac0:	20001c8c 	.word	0x20001c8c
 8006ac4:	20001cac 	.word	0x20001cac
 8006ac8:	0801694c 	.word	0x0801694c
 8006acc:	20001c64 	.word	0x20001c64
		} else if (balancing == 1) {
 8006ad0:	4b60      	ldr	r3, [pc, #384]	@ (8006c54 <adbms_main+0x3c8>)
 8006ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d106      	bne.n	8006ae8 <adbms_main+0x25c>
			balancing = 0;               // Stop balancing if there are faults
 8006ada:	4b5e      	ldr	r3, [pc, #376]	@ (8006c54 <adbms_main+0x3c8>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
			stopBalancing(TOTAL_IC, IC); // Stop balancing if there are faults
 8006ae0:	495d      	ldr	r1, [pc, #372]	@ (8006c58 <adbms_main+0x3cc>)
 8006ae2:	200a      	movs	r0, #10
 8006ae4:	f000 fac2 	bl	800706c <stopBalancing>
		}

		if (PRINT_ON) printReadPwmDutyCycle(TOTAL_IC, IC, PWMA, ALL_GRP);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	220c      	movs	r2, #12
 8006aec:	495a      	ldr	r1, [pc, #360]	@ (8006c58 <adbms_main+0x3cc>)
 8006aee:	200a      	movs	r0, #10
 8006af0:	f000 fede 	bl	80078b0 <printReadPwmDutyCycle>
		if (PRINT_ON) printWritePwmDutyCycle(TOTAL_IC, IC, PWMA, ALL_GRP); // Print the PWM duty cycle for debugging
 8006af4:	2300      	movs	r3, #0
 8006af6:	220c      	movs	r2, #12
 8006af8:	4957      	ldr	r1, [pc, #348]	@ (8006c58 <adbms_main+0x3cc>)
 8006afa:	200a      	movs	r0, #10
 8006afc:	f000 fdbc 	bl	8007678 <printWritePwmDutyCycle>

		// printPwmRegisters(TOTAL_IC, IC); // Print the PWM registers for debugging

		fanPWMControl(42.0f, htimPWM); // Control the fan based on the highest temperature
 8006b00:	6838      	ldr	r0, [r7, #0]
 8006b02:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8006c5c <adbms_main+0x3d0>
 8006b06:	f002 fd4b 	bl	80095a0 <fanPWMControl>

		tick++;
 8006b0a:	4b55      	ldr	r3, [pc, #340]	@ (8006c60 <adbms_main+0x3d4>)
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	4b53      	ldr	r3, [pc, #332]	@ (8006c60 <adbms_main+0x3d4>)
 8006b14:	801a      	strh	r2, [r3, #0]

		populate_CAN1(&ctx->msg_6b0, &IC[0], TOTAL_IC); // Populate CAN frames with data (TODO: check with justin)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	336c      	adds	r3, #108	@ 0x6c
 8006b1a:	220a      	movs	r2, #10
 8006b1c:	494e      	ldr	r1, [pc, #312]	@ (8006c58 <adbms_main+0x3cc>)
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f96e 	bl	8007e00 <populate_CAN1>
		populate_CAN2(&ctx->msg_6b1, &IC[0], TOTAL_IC);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3374      	adds	r3, #116	@ 0x74
 8006b28:	220a      	movs	r2, #10
 8006b2a:	494b      	ldr	r1, [pc, #300]	@ (8006c58 <adbms_main+0x3cc>)
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 fa1f 	bl	8007f70 <populate_CAN2>
		populate_CAN3(&ctx->msg_6b2, &IC[0], TOTAL_IC);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	337c      	adds	r3, #124	@ 0x7c
 8006b36:	220a      	movs	r2, #10
 8006b38:	4947      	ldr	r1, [pc, #284]	@ (8006c58 <adbms_main+0x3cc>)
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 fa9c 	bl	8008078 <populate_CAN3>
		populate_charge_CAN(&ctx->CAN_CHGCONTEXT, &IC[0], TOTAL_IC);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3390      	adds	r3, #144	@ 0x90
 8006b44:	220a      	movs	r2, #10
 8006b46:	4944      	ldr	r1, [pc, #272]	@ (8006c58 <adbms_main+0x3cc>)
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fae9 	bl	8008120 <populate_charge_CAN>

		uint32_t now = HAL_GetTick();
 8006b4e:	f004 fa0f 	bl	800af70 <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]
		FDCAN_BMS_Mailman(hfdcan, ctx, now, 1);
 8006b54:	2301      	movs	r3, #1
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	6879      	ldr	r1, [r7, #4]
 8006b5a:	68b8      	ldr	r0, [r7, #8]
 8006b5c:	f001 fc18 	bl	8008390 <FDCAN_BMS_Mailman>
	}

	if (PRINT_ON) {
		printVoltages(TOTAL_IC, &IC[0], Cell);
 8006b60:	2200      	movs	r2, #0
 8006b62:	493d      	ldr	r1, [pc, #244]	@ (8006c58 <adbms_main+0x3cc>)
 8006b64:	200a      	movs	r0, #10
 8006b66:	f000 fb63 	bl	8007230 <printVoltages>

		printf("accy_status: %d, balancing: %d\n", accy_status, balancing);
 8006b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c64 <adbms_main+0x3d8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a39      	ldr	r2, [pc, #228]	@ (8006c54 <adbms_main+0x3c8>)
 8006b70:	f992 2000 	ldrsb.w	r2, [r2]
 8006b74:	4619      	mov	r1, r3
 8006b76:	483c      	ldr	r0, [pc, #240]	@ (8006c68 <adbms_main+0x3dc>)
 8006b78:	f00d f876 	bl	8013c68 <iprintf>
		printf("Pack Voltage: %.2fV, SOC: %.2f\n",
				getPackVoltage(TOTAL_IC, &IC[0]), soc);
 8006b7c:	4936      	ldr	r1, [pc, #216]	@ (8006c58 <adbms_main+0x3cc>)
 8006b7e:	200a      	movs	r0, #10
 8006b80:	f002 fb7a 	bl	8009278 <getPackVoltage>
 8006b84:	ee10 3a10 	vmov	r3, s0
		printf("Pack Voltage: %.2fV, SOC: %.2f\n",
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7f9 fce5 	bl	8000558 <__aeabi_f2d>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	4b36      	ldr	r3, [pc, #216]	@ (8006c6c <adbms_main+0x3e0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7f9 fcde 	bl	8000558 <__aeabi_f2d>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	e9cd 2300 	strd	r2, r3, [sp]
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	4831      	ldr	r0, [pc, #196]	@ (8006c70 <adbms_main+0x3e4>)
 8006baa:	f00d f85d 	bl	8013c68 <iprintf>
		printf("Lowest V: %.2fV, ", lowest_cell);
 8006bae:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <adbms_main+0x3e8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fcd0 	bl	8000558 <__aeabi_f2d>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	482e      	ldr	r0, [pc, #184]	@ (8006c78 <adbms_main+0x3ec>)
 8006bbe:	f00d f853 	bl	8013c68 <iprintf>
		printf("Highest V: %.2fV, ", highest_cell);
 8006bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8006c7c <adbms_main+0x3f0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7f9 fcc6 	bl	8000558 <__aeabi_f2d>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	482b      	ldr	r0, [pc, #172]	@ (8006c80 <adbms_main+0x3f4>)
 8006bd2:	f00d f849 	bl	8013c68 <iprintf>
		printf("Average V: %.2fV, ", avg_cell);
 8006bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c84 <adbms_main+0x3f8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7f9 fcbc 	bl	8000558 <__aeabi_f2d>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4828      	ldr	r0, [pc, #160]	@ (8006c88 <adbms_main+0x3fc>)
 8006be6:	f00d f83f 	bl	8013c68 <iprintf>
		printf("Target lowest V: %.2fV\n", target_lowest_cell);
 8006bea:	4b28      	ldr	r3, [pc, #160]	@ (8006c8c <adbms_main+0x400>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7f9 fcb2 	bl	8000558 <__aeabi_f2d>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4825      	ldr	r0, [pc, #148]	@ (8006c90 <adbms_main+0x404>)
 8006bfa:	f00d f835 	bl	8013c68 <iprintf>
		printf("Lowest temp: %.2fC, ID: %d", lowest_temp, lowest_temp_ID);
 8006bfe:	4b25      	ldr	r3, [pc, #148]	@ (8006c94 <adbms_main+0x408>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7f9 fca8 	bl	8000558 <__aeabi_f2d>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4922      	ldr	r1, [pc, #136]	@ (8006c98 <adbms_main+0x40c>)
 8006c0e:	6809      	ldr	r1, [r1, #0]
 8006c10:	9100      	str	r1, [sp, #0]
 8006c12:	4822      	ldr	r0, [pc, #136]	@ (8006c9c <adbms_main+0x410>)
 8006c14:	f00d f828 	bl	8013c68 <iprintf>
		printf("Highest temp: %.2fC, ID: %d", highest_temp, highest_temp_ID);
 8006c18:	4b21      	ldr	r3, [pc, #132]	@ (8006ca0 <adbms_main+0x414>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7f9 fc9b 	bl	8000558 <__aeabi_f2d>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	491f      	ldr	r1, [pc, #124]	@ (8006ca4 <adbms_main+0x418>)
 8006c28:	6809      	ldr	r1, [r1, #0]
 8006c2a:	9100      	str	r1, [sp, #0]
 8006c2c:	481e      	ldr	r0, [pc, #120]	@ (8006ca8 <adbms_main+0x41c>)
 8006c2e:	f00d f81b 	bl	8013c68 <iprintf>
		printf("Average temp: %.2fC\n\n", avg_temp);
 8006c32:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <adbms_main+0x420>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7f9 fc8e 	bl	8000558 <__aeabi_f2d>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	481b      	ldr	r0, [pc, #108]	@ (8006cb0 <adbms_main+0x424>)
 8006c42:	f00d f811 	bl	8013c68 <iprintf>
		print_fault_summary(); // Print the fault summary
 8006c46:	f001 fd8b 	bl	8008760 <print_fault_summary>
	//    // Transmit via mailman
	//    uint32_t now = HAL_GetTick();
	//    FDCAN_BMS_Mailman(hfdcan, ctx, now);

	//    getCurrentSensorData();
}
 8006c4a:	bf00      	nop
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bdb0      	pop	{r4, r5, r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20001c64 	.word	0x20001c64
 8006c58:	20000224 	.word	0x20000224
 8006c5c:	42280000 	.word	0x42280000
 8006c60:	20001c68 	.word	0x20001c68
 8006c64:	20001c70 	.word	0x20001c70
 8006c68:	08016960 	.word	0x08016960
 8006c6c:	20001c78 	.word	0x20001c78
 8006c70:	08016980 	.word	0x08016980
 8006c74:	20001c7c 	.word	0x20001c7c
 8006c78:	080169a0 	.word	0x080169a0
 8006c7c:	20001c80 	.word	0x20001c80
 8006c80:	080169b4 	.word	0x080169b4
 8006c84:	20001c84 	.word	0x20001c84
 8006c88:	080169c8 	.word	0x080169c8
 8006c8c:	2000003c 	.word	0x2000003c
 8006c90:	080169dc 	.word	0x080169dc
 8006c94:	20001c98 	.word	0x20001c98
 8006c98:	20001ca0 	.word	0x20001ca0
 8006c9c:	080169f4 	.word	0x080169f4
 8006ca0:	20001c9c 	.word	0x20001c9c
 8006ca4:	20001ca4 	.word	0x20001ca4
 8006ca8:	08016a10 	.word	0x08016a10
 8006cac:	20001ca8 	.word	0x20001ca8
 8006cb0:	08016a2c 	.word	0x08016a2c

08006cb4 <adBms6830_start_adc_cell_voltage_measurment>:
/**
 *******************************************************************************
 * @brief Start ADC Cell Voltage Measurement
 *******************************************************************************
 */
void adBms6830_start_adc_cell_voltage_measurment(uint8_t tIC) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	4603      	mov	r3, r0
 8006cbc:	71fb      	strb	r3, [r7, #7]
	adBmsWakeupIc(tIC);
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fa97 	bl	80071f4 <adBmsWakeupIc>
	adBms6830_Adcv(RD_ON, CONTINUOUS, DCP_OFF, RSTF_OFF, OW_OFF_ALL_CH);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2101      	movs	r1, #1
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f7fb fb21 	bl	8002318 <adBms6830_Adcv>
#ifdef MBED
	// pc.printf("Cell conversion completed\n");
#else
	// printf("Cell conversion completed\n");
#endif
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <adBms6830_read_cell_voltages>:
/**
 *******************************************************************************
 * @brief Read Cell Voltages
 *******************************************************************************
 */
void adBms6830_read_cell_voltages(uint8_t tIC, cell_asic *ic) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	6039      	str	r1, [r7, #0]
 8006cea:	71fb      	strb	r3, [r7, #7]
	adBmsWakeupIc(tIC);
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fa80 	bl	80071f4 <adBmsWakeupIc>
	adBms6830_Adcv(RD_ON, CONTINUOUS, DCP_OFF, RSTF_OFF, OW_OFF_ALL_CH);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f7fb fb0a 	bl	8002318 <adBms6830_Adcv>
	adBms6830_Snap();
 8006d04:	f7fb fb3b 	bl	800237e <adBms6830_Snap>
	adBmsReadData(tIC, &ic[0], RDCVA, Cell, A);
 8006d08:	79f8      	ldrb	r0, [r7, #7]
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4a18      	ldr	r2, [pc, #96]	@ (8006d74 <adBms6830_read_cell_voltages+0x94>)
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	f7fa fb5c 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVB, Cell, B);
 8006d18:	79f8      	ldrb	r0, [r7, #7]
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4a15      	ldr	r2, [pc, #84]	@ (8006d78 <adBms6830_read_cell_voltages+0x98>)
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	f7fa fb54 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVC, Cell, C);
 8006d28:	79f8      	ldrb	r0, [r7, #7]
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4a12      	ldr	r2, [pc, #72]	@ (8006d7c <adBms6830_read_cell_voltages+0x9c>)
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	f7fa fb4c 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVD, Cell, D);
 8006d38:	79f8      	ldrb	r0, [r7, #7]
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4a0f      	ldr	r2, [pc, #60]	@ (8006d80 <adBms6830_read_cell_voltages+0xa0>)
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	f7fa fb44 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVE, Cell, E);
 8006d48:	79f8      	ldrb	r0, [r7, #7]
 8006d4a:	2305      	movs	r3, #5
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4a0c      	ldr	r2, [pc, #48]	@ (8006d84 <adBms6830_read_cell_voltages+0xa4>)
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	f7fa fb3c 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDCVF, Cell, F);
 8006d58:	79f8      	ldrb	r0, [r7, #7]
 8006d5a:	2306      	movs	r3, #6
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4a09      	ldr	r2, [pc, #36]	@ (8006d88 <adBms6830_read_cell_voltages+0xa8>)
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	f7fa fb34 	bl	80013d0 <adBmsReadData>
	adBms6830_Unsnap();
 8006d68:	f7fb fb18 	bl	800239c <adBms6830_Unsnap>

}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000008 	.word	0x20000008
 8006d78:	2000000c 	.word	0x2000000c
 8006d7c:	20000010 	.word	0x20000010
 8006d80:	20000014 	.word	0x20000014
 8006d84:	20000018 	.word	0x20000018
 8006d88:	2000001c 	.word	0x2000001c

08006d8c <adBms6830_start_aux_voltage_measurment>:
/**
 *******************************************************************************
 * @brief Start AUX, VMV, V+ Voltages Measurement
 *******************************************************************************
 */
void adBms6830_start_aux_voltage_measurment(uint8_t tIC, cell_asic *ic) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	4603      	mov	r3, r0
 8006d94:	6039      	str	r1, [r7, #0]
 8006d96:	71fb      	strb	r3, [r7, #7]
	for (uint8_t cic = 0; cic < tIC; cic++) {
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
 8006d9c:	e01a      	b.n	8006dd4 <adBms6830_start_aux_voltage_measurment+0x48>
		/* Init config A */
		ic[cic].tx_cfga.refon = PWR_UP;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	441a      	add	r2, r3
 8006dac:	7813      	ldrb	r3, [r2, #0]
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	7013      	strb	r3, [r2, #0]
		ic[cic].tx_cfga.gpo = 0X3FF; /* All GPIO pull down off */
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	441a      	add	r2, r3
 8006dc2:	8853      	ldrh	r3, [r2, #2]
 8006dc4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006dc8:	f361 134e 	bfi	r3, r1, #5, #10
 8006dcc:	8053      	strh	r3, [r2, #2]
	for (uint8_t cic = 0; cic < tIC; cic++) {
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d3e0      	bcc.n	8006d9e <adBms6830_start_aux_voltage_measurment+0x12>
	}
	adBmsWakeupIc(tIC);
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fa08 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRCFGA, Config, A);
 8006de4:	79f8      	ldrb	r0, [r7, #7]
 8006de6:	2301      	movs	r3, #1
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2308      	movs	r3, #8
 8006dec:	4a06      	ldr	r2, [pc, #24]	@ (8006e08 <adBms6830_start_aux_voltage_measurment+0x7c>)
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	f7fb f8ea 	bl	8001fc8 <adBmsWriteData>
	adBms6830_Adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 8006df4:	2200      	movs	r2, #0
 8006df6:	2100      	movs	r1, #0
 8006df8:	2000      	movs	r0, #0
 8006dfa:	f7fb fade 	bl	80023ba <adBms6830_Adax>
#ifdef MBED
	// pc.printf("Aux voltage conversion completed\n");
#else
	// printf("Aux voltage conversion completed\n");
#endif
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000000 	.word	0x20000000

08006e0c <adBms6830_read_aux_voltages>:
/**
 *******************************************************************************
 * @brief Read AUX, VMV, V+ Voltages
 *******************************************************************************
 */
void adBms6830_read_aux_voltages(uint8_t tIC, cell_asic *ic) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	71fb      	strb	r3, [r7, #7]
	adBmsWakeupIc(tIC);
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f9ea 	bl	80071f4 <adBmsWakeupIc>
	adBms6830_Adax(AUX_OW_OFF, PUP_DOWN, AUX_ALL);
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7fb fac8 	bl	80023ba <adBms6830_Adax>
	adBmsReadData(tIC, &ic[0], RDAUXA, Aux, A);
 8006e2a:	79f8      	ldrb	r0, [r7, #7]
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2301      	movs	r3, #1
 8006e32:	4a13      	ldr	r2, [pc, #76]	@ (8006e80 <adBms6830_read_aux_voltages+0x74>)
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	f7fa facb 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDAUXB, Aux, B);
 8006e3a:	79f8      	ldrb	r0, [r7, #7]
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	2301      	movs	r3, #1
 8006e42:	4a10      	ldr	r2, [pc, #64]	@ (8006e84 <adBms6830_read_aux_voltages+0x78>)
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	f7fa fac3 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDAUXC, Aux, C);
 8006e4a:	79f8      	ldrb	r0, [r7, #7]
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2301      	movs	r3, #1
 8006e52:	4a0d      	ldr	r2, [pc, #52]	@ (8006e88 <adBms6830_read_aux_voltages+0x7c>)
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	f7fa fabb 	bl	80013d0 <adBmsReadData>
	adBmsReadData(tIC, &ic[0], RDAUXD, Aux, D);
 8006e5a:	79f8      	ldrb	r0, [r7, #7]
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	2301      	movs	r3, #1
 8006e62:	4a0a      	ldr	r2, [pc, #40]	@ (8006e8c <adBms6830_read_aux_voltages+0x80>)
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	f7fa fab3 	bl	80013d0 <adBmsReadData>
	printVoltages(tIC, &ic[0], Aux);
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 f9dd 	bl	8007230 <printVoltages>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000020 	.word	0x20000020
 8006e84:	20000024 	.word	0x20000024
 8006e88:	20000028 	.word	0x20000028
 8006e8c:	2000002c 	.word	0x2000002c

08006e90 <balanceCells>:
#else
	// printf("Fcell Registers Cleared\n\n");
#endif
}

void balanceCells(uint8_t tIC, cell_asic *ic, PWM_DUTY duty_cycle) {
 8006e90:	b5b0      	push	{r4, r5, r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	71bb      	strb	r3, [r7, #6]
	// Reset after max duration to prevent overheating
	if (tick > 200) {
 8006ea0:	4b69      	ldr	r3, [pc, #420]	@ (8007048 <balanceCells+0x1b8>)
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ea6:	d90c      	bls.n	8006ec2 <balanceCells+0x32>
		stopBalancing(tIC, ic);
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f8dd 	bl	800706c <stopBalancing>
		tick = 0;
 8006eb2:	4b65      	ldr	r3, [pc, #404]	@ (8007048 <balanceCells+0x1b8>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	801a      	strh	r2, [r3, #0]
		// Consider updating target voltage after each cycle
		target_lowest_cell = lowest_cell;
 8006eb8:	4b64      	ldr	r3, [pc, #400]	@ (800704c <balanceCells+0x1bc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a64      	ldr	r2, [pc, #400]	@ (8007050 <balanceCells+0x1c0>)
 8006ebe:	6013      	str	r3, [r2, #0]
		return;
 8006ec0:	e0b9      	b.n	8007036 <balanceCells+0x1a6>
	}

	// Initialize target when first called
	if (target_lowest_cell == -1) {
 8006ec2:	4b63      	ldr	r3, [pc, #396]	@ (8007050 <balanceCells+0x1c0>)
 8006ec4:	edd3 7a00 	vldr	s15, [r3]
 8006ec8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006ecc:	eef4 7a47 	vcmp.f32	s15, s14
 8006ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed4:	d103      	bne.n	8006ede <balanceCells+0x4e>
		target_lowest_cell = lowest_cell;
 8006ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800704c <balanceCells+0x1bc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a5d      	ldr	r2, [pc, #372]	@ (8007050 <balanceCells+0x1c0>)
 8006edc:	6013      	str	r3, [r2, #0]
	}

	// Only update balancing configuration periodically
	if (tick == 10) {
 8006ede:	4b5a      	ldr	r3, [pc, #360]	@ (8007048 <balanceCells+0x1b8>)
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	2b0a      	cmp	r3, #10
 8006ee4:	d17c      	bne.n	8006fe0 <balanceCells+0x150>
		// Clear balance mask for new calculation
		multiMask = 0;
 8006ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8007054 <balanceCells+0x1c4>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	801a      	strh	r2, [r3, #0]

		for (uint8_t dev = 0; dev < tIC; ++dev) {
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	e072      	b.n	8006fd8 <balanceCells+0x148>
			// Start with all balance switches off
			ic[dev].tx_cfgb.dcc = 0;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	825a      	strh	r2, [r3, #18]

			for (uint8_t ch = 0; ch < cell_count; ++ch) {
 8006f04:	2300      	movs	r3, #0
 8006f06:	73bb      	strb	r3, [r7, #14]
 8006f08:	e050      	b.n	8006fac <balanceCells+0x11c>
				float v = getVoltage(ic[dev].cell.c_codes[ch]);
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	4413      	add	r3, r2
 8006f18:	7bba      	ldrb	r2, [r7, #14]
 8006f1a:	3210      	adds	r2, #16
 8006f1c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 ff49 	bl	8007db8 <getVoltage>
 8006f26:	ed87 0a02 	vstr	s0, [r7, #8]

				// Improved logic: Balance cells above target with a small hysteresis
				if (v > (target_lowest_cell + 0.01)) { // 10mV hysteresis
 8006f2a:	68b8      	ldr	r0, [r7, #8]
 8006f2c:	f7f9 fb14 	bl	8000558 <__aeabi_f2d>
 8006f30:	4604      	mov	r4, r0
 8006f32:	460d      	mov	r5, r1
 8006f34:	4b46      	ldr	r3, [pc, #280]	@ (8007050 <balanceCells+0x1c0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7f9 fb0d 	bl	8000558 <__aeabi_f2d>
 8006f3e:	a340      	add	r3, pc, #256	@ (adr r3, 8007040 <balanceCells+0x1b0>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f7f9 f9aa 	bl	800029c <__adddf3>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fdea 	bl	8000b28 <__aeabi_dcmpgt>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d019      	beq.n	8006f8e <balanceCells+0xfe>
													   // Set this cell for balancing
					multiMask |= (1 << ch);
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	b21a      	sxth	r2, r3
 8006f64:	4b3b      	ldr	r3, [pc, #236]	@ (8007054 <balanceCells+0x1c4>)
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b21b      	sxth	r3, r3
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	b21b      	sxth	r3, r3
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	4b38      	ldr	r3, [pc, #224]	@ (8007054 <balanceCells+0x1c4>)
 8006f72:	801a      	strh	r2, [r3, #0]
					// Configure PWM duty cycle
					ic[dev].PwmA.pwma[ch] = duty_cycle;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	441a      	add	r2, r3
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	4413      	add	r3, r2
 8006f86:	79ba      	ldrb	r2, [r7, #6]
 8006f88:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
 8006f8c:	e00b      	b.n	8006fa6 <balanceCells+0x116>
				} else {
					// Ensure PWM is off for cells we don't balance
					ic[dev].PwmA.pwma[ch] = PWM_0_0_PCT;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
			for (uint8_t ch = 0; ch < cell_count; ++ch) {
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	73bb      	strb	r3, [r7, #14]
 8006fac:	4b2a      	ldr	r3, [pc, #168]	@ (8007058 <balanceCells+0x1c8>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	7bba      	ldrb	r2, [r7, #14]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3a9      	bcc.n	8006f0a <balanceCells+0x7a>
				}
			}

			// Apply the mask directly (cleaner than the previous approach)
			ic[dev].tx_cfgb.dcc = ConfigB_DccBits(multiMask, DCC_BIT_SET);
 8006fb6:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <balanceCells+0x1c4>)
 8006fb8:	8818      	ldrh	r0, [r3, #0]
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8006fc0:	fb02 f303 	mul.w	r3, r2, r3
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	18d4      	adds	r4, r2, r3
 8006fc8:	2101      	movs	r1, #1
 8006fca:	f7fb fa22 	bl	8002412 <ConfigB_DccBits>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	8263      	strh	r3, [r4, #18]
		for (uint8_t dev = 0; dev < tIC; ++dev) {
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	7bfa      	ldrb	r2, [r7, #15]
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d388      	bcc.n	8006ef2 <balanceCells+0x62>
		}
	}

	// Send configuration to the hardware - this should happen every time
	// to ensure the balancing continues even if we don't update the mask
	adBmsWakeupIc(tIC);
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f906 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM1, Pwm, A); /* cells 1-8 */
 8006fe8:	79f8      	ldrb	r0, [r7, #7]
 8006fea:	2301      	movs	r3, #1
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	2304      	movs	r3, #4
 8006ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800705c <balanceCells+0x1cc>)
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	f7fa ffe8 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f8fa 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM2, Pwm, B); /* cells 9-16 */
 8007000:	79f8      	ldrb	r0, [r7, #7]
 8007002:	2302      	movs	r3, #2
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	2304      	movs	r3, #4
 8007008:	4a15      	ldr	r2, [pc, #84]	@ (8007060 <balanceCells+0x1d0>)
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	f7fa ffdc 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 f8ee 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRCFGB, Config, B); /* push DCC */
 8007018:	79f8      	ldrb	r0, [r7, #7]
 800701a:	2302      	movs	r3, #2
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2308      	movs	r3, #8
 8007020:	4a10      	ldr	r2, [pc, #64]	@ (8007064 <balanceCells+0x1d4>)
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	f7fa ffd0 	bl	8001fc8 <adBmsWriteData>

	// Enable S-pin control
	adBmsWakeupIc(tIC);
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f8e2 	bl	80071f4 <adBmsWakeupIc>
	spiSendCmd(UNMUTE);
 8007030:	480d      	ldr	r0, [pc, #52]	@ (8007068 <balanceCells+0x1d8>)
 8007032:	f7fa f89d 	bl	8001170 <spiSendCmd>
}
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bdb0      	pop	{r4, r5, r7, pc}
 800703c:	f3af 8000 	nop.w
 8007040:	47ae147b 	.word	0x47ae147b
 8007044:	3f847ae1 	.word	0x3f847ae1
 8007048:	20001c68 	.word	0x20001c68
 800704c:	20001c7c 	.word	0x20001c7c
 8007050:	2000003c 	.word	0x2000003c
 8007054:	20001c66 	.word	0x20001c66
 8007058:	20000044 	.word	0x20000044
 800705c:	20000030 	.word	0x20000030
 8007060:	20000034 	.word	0x20000034
 8007064:	20000004 	.word	0x20000004
 8007068:	20000038 	.word	0x20000038

0800706c <stopBalancing>:

void stopBalancing(uint8_t tIC, cell_asic *ic) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af02      	add	r7, sp, #8
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
	// Clear all balance control
	multiMask = 0;
 8007078:	4b2d      	ldr	r3, [pc, #180]	@ (8007130 <stopBalancing+0xc4>)
 800707a:	2200      	movs	r2, #0
 800707c:	801a      	strh	r2, [r3, #0]

	for (uint8_t dev = 0; dev < tIC; ++dev) {
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
 8007082:	e022      	b.n	80070ca <stopBalancing+0x5e>
		// Clear all DCC bits for all cells
		ic[dev].tx_cfgb.dcc = 0;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800708a:	fb02 f303 	mul.w	r3, r2, r3
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	4413      	add	r3, r2
 8007092:	2200      	movs	r2, #0
 8007094:	825a      	strh	r2, [r3, #18]

		// Also ensure all PWM settings are zero
		for (uint8_t ch = 0; ch < cell_count; ++ch) {
 8007096:	2300      	movs	r3, #0
 8007098:	73bb      	strb	r3, [r7, #14]
 800709a:	e00e      	b.n	80070ba <stopBalancing+0x4e>
			ic[dev].PwmA.pwma[ch] = PWM_0_0_PCT;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	441a      	add	r2, r3
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	4413      	add	r3, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
		for (uint8_t ch = 0; ch < cell_count; ++ch) {
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	3301      	adds	r3, #1
 80070b8:	73bb      	strb	r3, [r7, #14]
 80070ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007134 <stopBalancing+0xc8>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	7bba      	ldrb	r2, [r7, #14]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d3eb      	bcc.n	800709c <stopBalancing+0x30>
	for (uint8_t dev = 0; dev < tIC; ++dev) {
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	3301      	adds	r3, #1
 80070c8:	73fb      	strb	r3, [r7, #15]
 80070ca:	7bfa      	ldrb	r2, [r7, #15]
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d3d8      	bcc.n	8007084 <stopBalancing+0x18>
		}
	}

	// Update hardware registers
	adBmsWakeupIc(tIC);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f88d 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM1, Pwm, A);
 80070da:	79f8      	ldrb	r0, [r7, #7]
 80070dc:	2301      	movs	r3, #1
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2304      	movs	r3, #4
 80070e2:	4a15      	ldr	r2, [pc, #84]	@ (8007138 <stopBalancing+0xcc>)
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	f7fa ff6f 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f881 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRPWM2, Pwm, B);
 80070f2:	79f8      	ldrb	r0, [r7, #7]
 80070f4:	2302      	movs	r3, #2
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	2304      	movs	r3, #4
 80070fa:	4a10      	ldr	r2, [pc, #64]	@ (800713c <stopBalancing+0xd0>)
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	f7fa ff63 	bl	8001fc8 <adBmsWriteData>

	adBmsWakeupIc(tIC);
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	4618      	mov	r0, r3
 8007106:	f000 f875 	bl	80071f4 <adBmsWakeupIc>
	adBmsWriteData(tIC, &ic[0], WRCFGB, Config, B);
 800710a:	79f8      	ldrb	r0, [r7, #7]
 800710c:	2302      	movs	r3, #2
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	2308      	movs	r3, #8
 8007112:	4a0b      	ldr	r2, [pc, #44]	@ (8007140 <stopBalancing+0xd4>)
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	f7fa ff57 	bl	8001fc8 <adBmsWriteData>

	// Ensure S-pins are operational
	adBmsWakeupIc(tIC);
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f869 	bl	80071f4 <adBmsWakeupIc>
	spiSendCmd(UNMUTE);
 8007122:	4808      	ldr	r0, [pc, #32]	@ (8007144 <stopBalancing+0xd8>)
 8007124:	f7fa f824 	bl	8001170 <spiSendCmd>
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20001c66 	.word	0x20001c66
 8007134:	20000044 	.word	0x20000044
 8007138:	20000030 	.word	0x20000030
 800713c:	20000034 	.word	0x20000034
 8007140:	20000004 	.word	0x20000004
 8007144:	20000038 	.word	0x20000038

08007148 <Delay_ms>:
 * @return None
 *
 *******************************************************************************
*/
void Delay_ms(uint32_t delay)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f003 ff19 	bl	800af88 <HAL_Delay>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <adBmsCsLow>:
 * @return None
 *
 *******************************************************************************
*/
void adBmsCsLow()
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8007164:	2200      	movs	r2, #0
 8007166:	2140      	movs	r1, #64	@ 0x40
 8007168:	4802      	ldr	r0, [pc, #8]	@ (8007174 <adBmsCsLow+0x14>)
 800716a:	f006 fcb7 	bl	800dadc <HAL_GPIO_WritePin>
}
 800716e:	bf00      	nop
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	48000400 	.word	0x48000400

08007178 <adBmsCsHigh>:
 * @return None
 *
 *******************************************************************************
*/
void adBmsCsHigh()
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 800717c:	2201      	movs	r2, #1
 800717e:	2140      	movs	r1, #64	@ 0x40
 8007180:	4802      	ldr	r0, [pc, #8]	@ (800718c <adBmsCsHigh+0x14>)
 8007182:	f006 fcab 	bl	800dadc <HAL_GPIO_WritePin>
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	48000400 	.word	0x48000400

08007190 <spiWriteBytes>:
void spiWriteBytes
( 
uint16_t size,                     /*Option: Number of bytes to be written on the SPI port*/
uint8_t *tx_Data                       /*Array of bytes to be written on the SPI port*/
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Transmit(hspi, tx_Data, size, SPI_TIME_OUT); /* SPI1 , data, size, timeout */ 
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <spiWriteBytes+0x24>)
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	f007 ffda 	bl	800f160 <HAL_SPI_Transmit>
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000040 	.word	0x20000040

080071b8 <spiWriteReadBytes>:
(
uint8_t *tx_data,                   /*array of data to be written on SPI port*/
uint8_t *rx_data,                   /*Input: array that will store the data read by the SPI port*/
uint16_t size                           /*Option: number of bytes*/
)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	4613      	mov	r3, r2
 80071c4:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Transmit(hspi, tx_data, 4, SPI_TIME_OUT);
 80071c6:	4b0a      	ldr	r3, [pc, #40]	@ (80071f0 <spiWriteReadBytes+0x38>)
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071ce:	2204      	movs	r2, #4
 80071d0:	68f9      	ldr	r1, [r7, #12]
 80071d2:	f007 ffc5 	bl	800f160 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, rx_data, size, SPI_TIME_OUT);
 80071d6:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <spiWriteReadBytes+0x38>)
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	f008 f933 	bl	800f44c <HAL_SPI_Receive>
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000040 	.word	0x20000040

080071f4 <adBmsWakeupIc>:
 * @return None
 *
 *******************************************************************************
*/
void adBmsWakeupIc(uint8_t total_ic)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	71fb      	strb	r3, [r7, #7]
  for (uint8_t ic = 0; ic < total_ic; ic++)
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
 8007202:	e00c      	b.n	800721e <adBmsWakeupIc+0x2a>
  {
    adBmsCsLow();
 8007204:	f7ff ffac 	bl	8007160 <adBmsCsLow>
    Delay_ms(WAKEUP_DELAY);
 8007208:	2001      	movs	r0, #1
 800720a:	f7ff ff9d 	bl	8007148 <Delay_ms>
    adBmsCsHigh();
 800720e:	f7ff ffb3 	bl	8007178 <adBmsCsHigh>
    Delay_ms(WAKEUP_DELAY);
 8007212:	2001      	movs	r0, #1
 8007214:	f7ff ff98 	bl	8007148 <Delay_ms>
  for (uint8_t ic = 0; ic < total_ic; ic++)
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	3301      	adds	r3, #1
 800721c:	73fb      	strb	r3, [r7, #15]
 800721e:	7bfa      	ldrb	r2, [r7, #15]
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	429a      	cmp	r2, r3
 8007224:	d3ee      	bcc.n	8007204 <adBmsWakeupIc+0x10>
  }
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <printVoltages>:
 * @return None
 *
 *******************************************************************************
*/
void printVoltages(uint8_t tIC, cell_asic *IC, TYPE type)
{
 8007230:	b5b0      	push	{r4, r5, r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	6039      	str	r1, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	4613      	mov	r3, r2
 800723e:	71bb      	strb	r3, [r7, #6]
	if (PRINT_ON) {
  float voltage;
  int16_t temp;
  uint8_t channel;
  if((type == Cell) || (type == AvgCell) || (type == F_volt) || (type == S_volt))
 8007240:	79bb      	ldrb	r3, [r7, #6]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <printVoltages+0x28>
 8007246:	79bb      	ldrb	r3, [r7, #6]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d005      	beq.n	8007258 <printVoltages+0x28>
 800724c:	79bb      	ldrb	r3, [r7, #6]
 800724e:	2b07      	cmp	r3, #7
 8007250:	d002      	beq.n	8007258 <printVoltages+0x28>
 8007252:	79bb      	ldrb	r3, [r7, #6]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d102      	bne.n	800725e <printVoltages+0x2e>
  {
    channel = CELL;
 8007258:	2310      	movs	r3, #16
 800725a:	777b      	strb	r3, [r7, #29]
 800725c:	e00a      	b.n	8007274 <printVoltages+0x44>
  }
  else if (type == Aux){ channel = AUX;}
 800725e:	79bb      	ldrb	r3, [r7, #6]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d102      	bne.n	800726a <printVoltages+0x3a>
 8007264:	230c      	movs	r3, #12
 8007266:	777b      	strb	r3, [r7, #29]
 8007268:	e004      	b.n	8007274 <printVoltages+0x44>
  else if (type == RAux){channel = RAUX;}
 800726a:	79bb      	ldrb	r3, [r7, #6]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d101      	bne.n	8007274 <printVoltages+0x44>
 8007270:	230a      	movs	r3, #10
 8007272:	777b      	strb	r3, [r7, #29]
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007274:	2300      	movs	r3, #0
 8007276:	773b      	strb	r3, [r7, #28]
 8007278:	e1d7      	b.n	800762a <printVoltages+0x3fa>
  {
    printf("IC%d:",(ic+1));
 800727a:	7f3b      	ldrb	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	4619      	mov	r1, r3
 8007280:	4893      	ldr	r0, [pc, #588]	@ (80074d0 <printVoltages+0x2a0>)
 8007282:	f00c fcf1 	bl	8013c68 <iprintf>
    for(uint8_t index = 0; index < channel; index++)
 8007286:	2300      	movs	r3, #0
 8007288:	76fb      	strb	r3, [r7, #27]
 800728a:	e1c3      	b.n	8007614 <printVoltages+0x3e4>
    {
      if(type == Cell){ temp = IC[ic].cell.c_codes[index]; }
 800728c:	79bb      	ldrb	r3, [r7, #6]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <printVoltages+0x7c>
 8007292:	7f3b      	ldrb	r3, [r7, #28]
 8007294:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	4413      	add	r3, r2
 80072a0:	7efa      	ldrb	r2, [r7, #27]
 80072a2:	3210      	adds	r2, #16
 80072a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072a8:	83fb      	strh	r3, [r7, #30]
 80072aa:	e04e      	b.n	800734a <printVoltages+0x11a>
      else if(type == AvgCell){ temp = IC[ic].acell.ac_codes[index]; }
 80072ac:	79bb      	ldrb	r3, [r7, #6]
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d10c      	bne.n	80072cc <printVoltages+0x9c>
 80072b2:	7f3b      	ldrb	r3, [r7, #28]
 80072b4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80072b8:	fb02 f303 	mul.w	r3, r2, r3
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	4413      	add	r3, r2
 80072c0:	7efa      	ldrb	r2, [r7, #27]
 80072c2:	3220      	adds	r2, #32
 80072c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072c8:	83fb      	strh	r3, [r7, #30]
 80072ca:	e03e      	b.n	800734a <printVoltages+0x11a>
      else if(type == F_volt){ temp = IC[ic].fcell.fc_codes[index]; }
 80072cc:	79bb      	ldrb	r3, [r7, #6]
 80072ce:	2b07      	cmp	r3, #7
 80072d0:	d10c      	bne.n	80072ec <printVoltages+0xbc>
 80072d2:	7f3b      	ldrb	r3, [r7, #28]
 80072d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	4413      	add	r3, r2
 80072e0:	7efa      	ldrb	r2, [r7, #27]
 80072e2:	3240      	adds	r2, #64	@ 0x40
 80072e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80072e8:	83fb      	strh	r3, [r7, #30]
 80072ea:	e02e      	b.n	800734a <printVoltages+0x11a>
      else if(type == S_volt){ temp = IC[ic].scell.sc_codes[index]; }
 80072ec:	79bb      	ldrb	r3, [r7, #6]
 80072ee:	2b06      	cmp	r3, #6
 80072f0:	d10c      	bne.n	800730c <printVoltages+0xdc>
 80072f2:	7f3b      	ldrb	r3, [r7, #28]
 80072f4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	4413      	add	r3, r2
 8007300:	7efa      	ldrb	r2, [r7, #27]
 8007302:	3230      	adds	r2, #48	@ 0x30
 8007304:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007308:	83fb      	strh	r3, [r7, #30]
 800730a:	e01e      	b.n	800734a <printVoltages+0x11a>
      else if(type == Aux){ temp = IC[ic].aux.a_codes[index]; }
 800730c:	79bb      	ldrb	r3, [r7, #6]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d10c      	bne.n	800732c <printVoltages+0xfc>
 8007312:	7f3b      	ldrb	r3, [r7, #28]
 8007314:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007318:	fb02 f303 	mul.w	r3, r2, r3
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	4413      	add	r3, r2
 8007320:	7efa      	ldrb	r2, [r7, #27]
 8007322:	3250      	adds	r2, #80	@ 0x50
 8007324:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007328:	83fb      	strh	r3, [r7, #30]
 800732a:	e00e      	b.n	800734a <printVoltages+0x11a>
      else if(type == RAux){ temp = IC[ic].raux.ra_codes[index]; }
 800732c:	79bb      	ldrb	r3, [r7, #6]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d10b      	bne.n	800734a <printVoltages+0x11a>
 8007332:	7f3b      	ldrb	r3, [r7, #28]
 8007334:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	4413      	add	r3, r2
 8007340:	7efa      	ldrb	r2, [r7, #27]
 8007342:	325c      	adds	r2, #92	@ 0x5c
 8007344:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007348:	83fb      	strh	r3, [r7, #30]
      voltage = getVoltage(temp);
 800734a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd32 	bl	8007db8 <getVoltage>
 8007354:	ed87 0a05 	vstr	s0, [r7, #20]

      if(type == Cell)
 8007358:	79bb      	ldrb	r3, [r7, #6]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d12b      	bne.n	80073b6 <printVoltages+0x186>
      {
    	printf("C%d=%fV, ",(index+1), voltage);
 800735e:	7efb      	ldrb	r3, [r7, #27]
 8007360:	1c5c      	adds	r4, r3, #1
 8007362:	6978      	ldr	r0, [r7, #20]
 8007364:	f7f9 f8f8 	bl	8000558 <__aeabi_f2d>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4621      	mov	r1, r4
 800736e:	4859      	ldr	r0, [pc, #356]	@ (80074d4 <printVoltages+0x2a4>)
 8007370:	f00c fc7a 	bl	8013c68 <iprintf>
//    	printf("%d", ((int) voltage * 100)/100);
//    	printf(".%d", ((int) (voltage * 1000) - ((int) voltage * 1000)));
//    	printf("V, ");

        if(index == (channel-1))
 8007374:	7efa      	ldrb	r2, [r7, #27]
 8007376:	7f7b      	ldrb	r3, [r7, #29]
 8007378:	3b01      	subs	r3, #1
 800737a:	429a      	cmp	r2, r3
 800737c:	f040 8147 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007380:	7f3b      	ldrb	r3, [r7, #28]
 8007382:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007386:	fb02 f303 	mul.w	r3, r2, r3
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4413      	add	r3, r2
 800738e:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007392:	4619      	mov	r1, r3
 8007394:	4850      	ldr	r0, [pc, #320]	@ (80074d8 <printVoltages+0x2a8>)
 8007396:	f00c fc67 	bl	8013c68 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.cell_pec);
 800739a:	7f3b      	ldrb	r3, [r7, #28]
 800739c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	4413      	add	r3, r2
 80073a8:	f893 3191 	ldrb.w	r3, [r3, #401]	@ 0x191
 80073ac:	4619      	mov	r1, r3
 80073ae:	484b      	ldr	r0, [pc, #300]	@ (80074dc <printVoltages+0x2ac>)
 80073b0:	f00c fc5a 	bl	8013c68 <iprintf>
 80073b4:	e12b      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else if(type == AvgCell)
 80073b6:	79bb      	ldrb	r3, [r7, #6]
 80073b8:	2b05      	cmp	r3, #5
 80073ba:	d12b      	bne.n	8007414 <printVoltages+0x1e4>
      {
        printf("AC%d=%fV,",(index+1), voltage);
 80073bc:	7efb      	ldrb	r3, [r7, #27]
 80073be:	1c5c      	adds	r4, r3, #1
 80073c0:	6978      	ldr	r0, [r7, #20]
 80073c2:	f7f9 f8c9 	bl	8000558 <__aeabi_f2d>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4621      	mov	r1, r4
 80073cc:	4844      	ldr	r0, [pc, #272]	@ (80074e0 <printVoltages+0x2b0>)
 80073ce:	f00c fc4b 	bl	8013c68 <iprintf>
        if(index == (channel-1))
 80073d2:	7efa      	ldrb	r2, [r7, #27]
 80073d4:	7f7b      	ldrb	r3, [r7, #29]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	f040 8118 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 80073de:	7f3b      	ldrb	r3, [r7, #28]
 80073e0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80073e4:	fb02 f303 	mul.w	r3, r2, r3
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	4413      	add	r3, r2
 80073ec:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 80073f0:	4619      	mov	r1, r3
 80073f2:	4839      	ldr	r0, [pc, #228]	@ (80074d8 <printVoltages+0x2a8>)
 80073f4:	f00c fc38 	bl	8013c68 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.acell_pec);
 80073f8:	7f3b      	ldrb	r3, [r7, #28]
 80073fa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80073fe:	fb02 f303 	mul.w	r3, r2, r3
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4413      	add	r3, r2
 8007406:	f893 3192 	ldrb.w	r3, [r3, #402]	@ 0x192
 800740a:	4619      	mov	r1, r3
 800740c:	4833      	ldr	r0, [pc, #204]	@ (80074dc <printVoltages+0x2ac>)
 800740e:	f00c fc2b 	bl	8013c68 <iprintf>
 8007412:	e0fc      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else if(type == F_volt)
 8007414:	79bb      	ldrb	r3, [r7, #6]
 8007416:	2b07      	cmp	r3, #7
 8007418:	d12b      	bne.n	8007472 <printVoltages+0x242>
      {
        printf("FC%d=%fV,",(index+1), voltage);
 800741a:	7efb      	ldrb	r3, [r7, #27]
 800741c:	1c5c      	adds	r4, r3, #1
 800741e:	6978      	ldr	r0, [r7, #20]
 8007420:	f7f9 f89a 	bl	8000558 <__aeabi_f2d>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4621      	mov	r1, r4
 800742a:	482e      	ldr	r0, [pc, #184]	@ (80074e4 <printVoltages+0x2b4>)
 800742c:	f00c fc1c 	bl	8013c68 <iprintf>
        if(index == (channel-1))
 8007430:	7efa      	ldrb	r2, [r7, #27]
 8007432:	7f7b      	ldrb	r3, [r7, #29]
 8007434:	3b01      	subs	r3, #1
 8007436:	429a      	cmp	r2, r3
 8007438:	f040 80e9 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 800743c:	7f3b      	ldrb	r3, [r7, #28]
 800743e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007442:	fb02 f303 	mul.w	r3, r2, r3
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	4413      	add	r3, r2
 800744a:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 800744e:	4619      	mov	r1, r3
 8007450:	4821      	ldr	r0, [pc, #132]	@ (80074d8 <printVoltages+0x2a8>)
 8007452:	f00c fc09 	bl	8013c68 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.fcell_pec);
 8007456:	7f3b      	ldrb	r3, [r7, #28]
 8007458:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	4413      	add	r3, r2
 8007464:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8007468:	4619      	mov	r1, r3
 800746a:	481c      	ldr	r0, [pc, #112]	@ (80074dc <printVoltages+0x2ac>)
 800746c:	f00c fbfc 	bl	8013c68 <iprintf>
 8007470:	e0cd      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else if(type == S_volt)
 8007472:	79bb      	ldrb	r3, [r7, #6]
 8007474:	2b06      	cmp	r3, #6
 8007476:	d139      	bne.n	80074ec <printVoltages+0x2bc>
      {
        printf("S%d=%fV,",(index+1), voltage);
 8007478:	7efb      	ldrb	r3, [r7, #27]
 800747a:	1c5c      	adds	r4, r3, #1
 800747c:	6978      	ldr	r0, [r7, #20]
 800747e:	f7f9 f86b 	bl	8000558 <__aeabi_f2d>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4621      	mov	r1, r4
 8007488:	4817      	ldr	r0, [pc, #92]	@ (80074e8 <printVoltages+0x2b8>)
 800748a:	f00c fbed 	bl	8013c68 <iprintf>
        if(index == (channel-1))
 800748e:	7efa      	ldrb	r2, [r7, #27]
 8007490:	7f7b      	ldrb	r3, [r7, #29]
 8007492:	3b01      	subs	r3, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	f040 80ba 	bne.w	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 800749a:	7f3b      	ldrb	r3, [r7, #28]
 800749c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80074a0:	fb02 f303 	mul.w	r3, r2, r3
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 80074ac:	4619      	mov	r1, r3
 80074ae:	480a      	ldr	r0, [pc, #40]	@ (80074d8 <printVoltages+0x2a8>)
 80074b0:	f00c fbda 	bl	8013c68 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.scell_pec);
 80074b4:	7f3b      	ldrb	r3, [r7, #28]
 80074b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	4413      	add	r3, r2
 80074c2:	f893 3193 	ldrb.w	r3, [r3, #403]	@ 0x193
 80074c6:	4619      	mov	r1, r3
 80074c8:	4804      	ldr	r0, [pc, #16]	@ (80074dc <printVoltages+0x2ac>)
 80074ca:	f00c fbcd 	bl	8013c68 <iprintf>
 80074ce:	e09e      	b.n	800760e <printVoltages+0x3de>
 80074d0:	08016c50 	.word	0x08016c50
 80074d4:	08016c58 	.word	0x08016c58
 80074d8:	08016bd4 	.word	0x08016bd4
 80074dc:	08016c64 	.word	0x08016c64
 80074e0:	08016c70 	.word	0x08016c70
 80074e4:	08016c7c 	.word	0x08016c7c
 80074e8:	08016c88 	.word	0x08016c88
        }
      }
      else if(type == Aux)
 80074ec:	79bb      	ldrb	r3, [r7, #6]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d15c      	bne.n	80075ac <printVoltages+0x37c>
      {
        if(index <= 9)
 80074f2:	7efb      	ldrb	r3, [r7, #27]
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	f200 808a 	bhi.w	800760e <printVoltages+0x3de>
        {
        	float V = voltage;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	613b      	str	r3, [r7, #16]
        	float temperature = -225.6985 * (V * V * V) + 1310.5937 * (V * V) + -2594.7697 * V + 1767.8260;
 80074fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8007502:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007506:	edd7 7a04 	vldr	s15, [r7, #16]
 800750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750e:	ee17 0a90 	vmov	r0, s15
 8007512:	f7f9 f821 	bl	8000558 <__aeabi_f2d>
 8007516:	a350      	add	r3, pc, #320	@ (adr r3, 8007658 <printVoltages+0x428>)
 8007518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751c:	f7f9 f874 	bl	8000608 <__aeabi_dmul>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4614      	mov	r4, r2
 8007526:	461d      	mov	r5, r3
 8007528:	edd7 7a04 	vldr	s15, [r7, #16]
 800752c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007530:	ee17 0a90 	vmov	r0, s15
 8007534:	f7f9 f810 	bl	8000558 <__aeabi_f2d>
 8007538:	a349      	add	r3, pc, #292	@ (adr r3, 8007660 <printVoltages+0x430>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f863 	bl	8000608 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f8 fea7 	bl	800029c <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4614      	mov	r4, r2
 8007554:	461d      	mov	r5, r3
 8007556:	6938      	ldr	r0, [r7, #16]
 8007558:	f7f8 fffe 	bl	8000558 <__aeabi_f2d>
 800755c:	a342      	add	r3, pc, #264	@ (adr r3, 8007668 <printVoltages+0x438>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f9 f851 	bl	8000608 <__aeabi_dmul>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f8 fe95 	bl	800029c <__adddf3>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4610      	mov	r0, r2
 8007578:	4619      	mov	r1, r3
 800757a:	a33d      	add	r3, pc, #244	@ (adr r3, 8007670 <printVoltages+0x440>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f8 fe8c 	bl	800029c <__adddf3>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	f7f9 fb34 	bl	8000bf8 <__aeabi_d2f>
 8007590:	4603      	mov	r3, r0
 8007592:	60fb      	str	r3, [r7, #12]
        	printf("AUX%d=%fC, ",(index+1), temperature);
 8007594:	7efb      	ldrb	r3, [r7, #27]
 8007596:	1c5c      	adds	r4, r3, #1
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7f8 ffdd 	bl	8000558 <__aeabi_f2d>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4621      	mov	r1, r4
 80075a4:	4826      	ldr	r0, [pc, #152]	@ (8007640 <printVoltages+0x410>)
 80075a6:	f00c fb5f 	bl	8013c68 <iprintf>
 80075aa:	e030      	b.n	800760e <printVoltages+0x3de>
			// printf("%d", ((int) temp * 100)/100);
			// printf(".%d", ((int) (temp * 1000) - ((int) temp * 1000)));
			// printf("C, ");
      //   }
      }
      else if(type == RAux)
 80075ac:	79bb      	ldrb	r3, [r7, #6]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d12a      	bne.n	8007608 <printVoltages+0x3d8>
      {
        printf("RAUX%d=%fV,",(index+1), voltage);
 80075b2:	7efb      	ldrb	r3, [r7, #27]
 80075b4:	1c5c      	adds	r4, r3, #1
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f7f8 ffce 	bl	8000558 <__aeabi_f2d>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4621      	mov	r1, r4
 80075c2:	4820      	ldr	r0, [pc, #128]	@ (8007644 <printVoltages+0x414>)
 80075c4:	f00c fb50 	bl	8013c68 <iprintf>
        if(index == (channel-1))
 80075c8:	7efa      	ldrb	r2, [r7, #27]
 80075ca:	7f7b      	ldrb	r3, [r7, #29]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d11d      	bne.n	800760e <printVoltages+0x3de>
        {
          printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 80075d2:	7f3b      	ldrb	r3, [r7, #28]
 80075d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80075d8:	fb02 f303 	mul.w	r3, r2, r3
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	4413      	add	r3, r2
 80075e0:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 80075e4:	4619      	mov	r1, r3
 80075e6:	4818      	ldr	r0, [pc, #96]	@ (8007648 <printVoltages+0x418>)
 80075e8:	f00c fb3e 	bl	8013c68 <iprintf>
          printf("PECError:%d",IC[ic].cccrc.raux_pec);
 80075ec:	7f3b      	ldrb	r3, [r7, #28]
 80075ee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4413      	add	r3, r2
 80075fa:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80075fe:	4619      	mov	r1, r3
 8007600:	4812      	ldr	r0, [pc, #72]	@ (800764c <printVoltages+0x41c>)
 8007602:	f00c fb31 	bl	8013c68 <iprintf>
 8007606:	e002      	b.n	800760e <printVoltages+0x3de>
        }
      }
      else{ printf("Wrong Register Group Select\n"); }
 8007608:	4811      	ldr	r0, [pc, #68]	@ (8007650 <printVoltages+0x420>)
 800760a:	f00c fb9d 	bl	8013d48 <puts>
    for(uint8_t index = 0; index < channel; index++)
 800760e:	7efb      	ldrb	r3, [r7, #27]
 8007610:	3301      	adds	r3, #1
 8007612:	76fb      	strb	r3, [r7, #27]
 8007614:	7efa      	ldrb	r2, [r7, #27]
 8007616:	7f7b      	ldrb	r3, [r7, #29]
 8007618:	429a      	cmp	r2, r3
 800761a:	f4ff ae37 	bcc.w	800728c <printVoltages+0x5c>
    }
    printf("\n\n");
 800761e:	480d      	ldr	r0, [pc, #52]	@ (8007654 <printVoltages+0x424>)
 8007620:	f00c fb92 	bl	8013d48 <puts>
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007624:	7f3b      	ldrb	r3, [r7, #28]
 8007626:	3301      	adds	r3, #1
 8007628:	773b      	strb	r3, [r7, #28]
 800762a:	7f3a      	ldrb	r2, [r7, #28]
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	429a      	cmp	r2, r3
 8007630:	f4ff ae23 	bcc.w	800727a <printVoltages+0x4a>
  }
	}

}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bdb0      	pop	{r4, r5, r7, pc}
 800763e:	bf00      	nop
 8007640:	08016c94 	.word	0x08016c94
 8007644:	08016ca0 	.word	0x08016ca0
 8007648:	08016bd4 	.word	0x08016bd4
 800764c:	08016c64 	.word	0x08016c64
 8007650:	08016a7c 	.word	0x08016a7c
 8007654:	08016cac 	.word	0x08016cac
 8007658:	1cac0831 	.word	0x1cac0831
 800765c:	c06c365a 	.word	0xc06c365a
 8007660:	f2e48e8a 	.word	0xf2e48e8a
 8007664:	40947a5f 	.word	0x40947a5f
 8007668:	161e4f76 	.word	0x161e4f76
 800766c:	c0a4458a 	.word	0xc0a4458a
 8007670:	d2f1a9fc 	.word	0xd2f1a9fc
 8007674:	409b9f4d 	.word	0x409b9f4d

08007678 <printWritePwmDutyCycle>:
* @return None
*
*******************************************************************************
*/
void printWritePwmDutyCycle(uint8_t tIC, cell_asic *IC, TYPE type, GRP grp)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6039      	str	r1, [r7, #0]
 8007680:	4611      	mov	r1, r2
 8007682:	461a      	mov	r2, r3
 8007684:	4603      	mov	r3, r0
 8007686:	71fb      	strb	r3, [r7, #7]
 8007688:	460b      	mov	r3, r1
 800768a:	71bb      	strb	r3, [r7, #6]
 800768c:	4613      	mov	r3, r2
 800768e:	717b      	strb	r3, [r7, #5]
	if (PRINT_ON) {
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e0f3      	b.n	800787e <printWritePwmDutyCycle+0x206>
  {
    printf("IC%d:\n",(ic+1));
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	3301      	adds	r3, #1
 800769a:	4619      	mov	r1, r3
 800769c:	487d      	ldr	r0, [pc, #500]	@ (8007894 <printWritePwmDutyCycle+0x21c>)
 800769e:	f00c fae3 	bl	8013c68 <iprintf>
    if(grp == A)
 80076a2:	797b      	ldrb	r3, [r7, #5]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d151      	bne.n	800774c <printWritePwmDutyCycle+0xd4>
    {
      printf("Write Pwma Duty Cycle:\n");
 80076a8:	487b      	ldr	r0, [pc, #492]	@ (8007898 <printWritePwmDutyCycle+0x220>)
 80076aa:	f00c fb4d 	bl	8013d48 <puts>
      printf("0x%X, ", IC[ic].pwma.tx_data[0]);
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	4413      	add	r3, r2
 80076bc:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 80076c0:	4619      	mov	r1, r3
 80076c2:	4876      	ldr	r0, [pc, #472]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80076c4:	f00c fad0 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[1]);
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80076ce:	fb02 f303 	mul.w	r3, r2, r3
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 80076da:	4619      	mov	r1, r3
 80076dc:	486f      	ldr	r0, [pc, #444]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80076de:	f00c fac3 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[2]);
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	4413      	add	r3, r2
 80076f0:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80076f4:	4619      	mov	r1, r3
 80076f6:	4869      	ldr	r0, [pc, #420]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80076f8:	f00c fab6 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[3]);
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	4413      	add	r3, r2
 800770a:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 800770e:	4619      	mov	r1, r3
 8007710:	4862      	ldr	r0, [pc, #392]	@ (800789c <printWritePwmDutyCycle+0x224>)
 8007712:	f00c faa9 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[4]);
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	4413      	add	r3, r2
 8007724:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8007728:	4619      	mov	r1, r3
 800772a:	485c      	ldr	r0, [pc, #368]	@ (800789c <printWritePwmDutyCycle+0x224>)
 800772c:	f00c fa9c 	bl	8013c68 <iprintf>
      printf("0x%X\n\n", IC[ic].pwma.tx_data[5]);
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	4413      	add	r3, r2
 800773e:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 8007742:	4619      	mov	r1, r3
 8007744:	4856      	ldr	r0, [pc, #344]	@ (80078a0 <printWritePwmDutyCycle+0x228>)
 8007746:	f00c fa8f 	bl	8013c68 <iprintf>
 800774a:	e095      	b.n	8007878 <printWritePwmDutyCycle+0x200>
    }
    else if(grp == B)
 800774c:	797b      	ldrb	r3, [r7, #5]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d11d      	bne.n	800778e <printWritePwmDutyCycle+0x116>
    {
      printf("Write Pwmb Duty Cycle:\n");
 8007752:	4854      	ldr	r0, [pc, #336]	@ (80078a4 <printWritePwmDutyCycle+0x22c>)
 8007754:	f00c faf8 	bl	8013d48 <puts>
      printf("0x%X, ", IC[ic].pwmb.tx_data[0]);
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	4413      	add	r3, r2
 8007766:	f893 3173 	ldrb.w	r3, [r3, #371]	@ 0x173
 800776a:	4619      	mov	r1, r3
 800776c:	484b      	ldr	r0, [pc, #300]	@ (800789c <printWritePwmDutyCycle+0x224>)
 800776e:	f00c fa7b 	bl	8013c68 <iprintf>
      printf("0x%X\n\n", IC[ic].pwmb.tx_data[1]);
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	4413      	add	r3, r2
 8007780:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8007784:	4619      	mov	r1, r3
 8007786:	4846      	ldr	r0, [pc, #280]	@ (80078a0 <printWritePwmDutyCycle+0x228>)
 8007788:	f00c fa6e 	bl	8013c68 <iprintf>
 800778c:	e074      	b.n	8007878 <printWritePwmDutyCycle+0x200>
    }
    else if(grp == ALL_GRP)
 800778e:	797b      	ldrb	r3, [r7, #5]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d16e      	bne.n	8007872 <printWritePwmDutyCycle+0x1fa>
    {
      printf("Write Pwma Duty Cycle:\n");
 8007794:	4840      	ldr	r0, [pc, #256]	@ (8007898 <printWritePwmDutyCycle+0x220>)
 8007796:	f00c fad7 	bl	8013d48 <puts>
      printf("0x%X, ", IC[ic].pwma.tx_data[0]);
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077a0:	fb02 f303 	mul.w	r3, r2, r3
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	4413      	add	r3, r2
 80077a8:	f893 3165 	ldrb.w	r3, [r3, #357]	@ 0x165
 80077ac:	4619      	mov	r1, r3
 80077ae:	483b      	ldr	r0, [pc, #236]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077b0:	f00c fa5a 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[1]);
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 80077c6:	4619      	mov	r1, r3
 80077c8:	4834      	ldr	r0, [pc, #208]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077ca:	f00c fa4d 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[2]);
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	4413      	add	r3, r2
 80077dc:	f893 3167 	ldrb.w	r3, [r3, #359]	@ 0x167
 80077e0:	4619      	mov	r1, r3
 80077e2:	482e      	ldr	r0, [pc, #184]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077e4:	f00c fa40 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[3]);
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	4413      	add	r3, r2
 80077f6:	f893 3168 	ldrb.w	r3, [r3, #360]	@ 0x168
 80077fa:	4619      	mov	r1, r3
 80077fc:	4827      	ldr	r0, [pc, #156]	@ (800789c <printWritePwmDutyCycle+0x224>)
 80077fe:	f00c fa33 	bl	8013c68 <iprintf>
      printf("0x%X, ", IC[ic].pwma.tx_data[4]);
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007808:	fb02 f303 	mul.w	r3, r2, r3
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	4413      	add	r3, r2
 8007810:	f893 3169 	ldrb.w	r3, [r3, #361]	@ 0x169
 8007814:	4619      	mov	r1, r3
 8007816:	4821      	ldr	r0, [pc, #132]	@ (800789c <printWritePwmDutyCycle+0x224>)
 8007818:	f00c fa26 	bl	8013c68 <iprintf>
      printf("0x%X\n", IC[ic].pwma.tx_data[5]);
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4413      	add	r3, r2
 800782a:	f893 316a 	ldrb.w	r3, [r3, #362]	@ 0x16a
 800782e:	4619      	mov	r1, r3
 8007830:	481d      	ldr	r0, [pc, #116]	@ (80078a8 <printWritePwmDutyCycle+0x230>)
 8007832:	f00c fa19 	bl	8013c68 <iprintf>

      printf("Write Pwmb Duty Cycle:\n");
 8007836:	481b      	ldr	r0, [pc, #108]	@ (80078a4 <printWritePwmDutyCycle+0x22c>)
 8007838:	f00c fa86 	bl	8013d48 <puts>
      printf("0x%X, ", IC[ic].pwmb.tx_data[0]);
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007842:	fb02 f303 	mul.w	r3, r2, r3
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4413      	add	r3, r2
 800784a:	f893 3173 	ldrb.w	r3, [r3, #371]	@ 0x173
 800784e:	4619      	mov	r1, r3
 8007850:	4812      	ldr	r0, [pc, #72]	@ (800789c <printWritePwmDutyCycle+0x224>)
 8007852:	f00c fa09 	bl	8013c68 <iprintf>
      printf("0x%X\n\n", IC[ic].pwmb.tx_data[1]);
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4413      	add	r3, r2
 8007864:	f893 3174 	ldrb.w	r3, [r3, #372]	@ 0x174
 8007868:	4619      	mov	r1, r3
 800786a:	480d      	ldr	r0, [pc, #52]	@ (80078a0 <printWritePwmDutyCycle+0x228>)
 800786c:	f00c f9fc 	bl	8013c68 <iprintf>
 8007870:	e002      	b.n	8007878 <printWritePwmDutyCycle+0x200>
    }
    else{ printf("Wrong Register Group Select\n"); }
 8007872:	480e      	ldr	r0, [pc, #56]	@ (80078ac <printWritePwmDutyCycle+0x234>)
 8007874:	f00c fa68 	bl	8013d48 <puts>
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	3301      	adds	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
 800787e:	7bfa      	ldrb	r2, [r7, #15]
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	429a      	cmp	r2, r3
 8007884:	f4ff af07 	bcc.w	8007696 <printWritePwmDutyCycle+0x1e>
  }
	}
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	08016a44 	.word	0x08016a44
 8007898:	080170b8 	.word	0x080170b8
 800789c:	08016a5c 	.word	0x08016a5c
 80078a0:	08016a64 	.word	0x08016a64
 80078a4:	080170d0 	.word	0x080170d0
 80078a8:	080170e8 	.word	0x080170e8
 80078ac:	08016a7c 	.word	0x08016a7c

080078b0 <printReadPwmDutyCycle>:
* @return None
*
*******************************************************************************
*/
void printReadPwmDutyCycle(uint8_t tIC, cell_asic *IC, TYPE type, GRP grp)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6039      	str	r1, [r7, #0]
 80078b8:	4611      	mov	r1, r2
 80078ba:	461a      	mov	r2, r3
 80078bc:	4603      	mov	r3, r0
 80078be:	71fb      	strb	r3, [r7, #7]
 80078c0:	460b      	mov	r3, r1
 80078c2:	71bb      	strb	r3, [r7, #6]
 80078c4:	4613      	mov	r3, r2
 80078c6:	717b      	strb	r3, [r7, #5]
	if (PRINT_ON) {
  for(uint8_t ic = 0; ic < tIC; ic++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
 80078cc:	e23d      	b.n	8007d4a <printReadPwmDutyCycle+0x49a>
  {
    printf("IC%d:\n",(ic+1));
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4619      	mov	r1, r3
 80078d4:	488a      	ldr	r0, [pc, #552]	@ (8007b00 <printReadPwmDutyCycle+0x250>)
 80078d6:	f00c f9c7 	bl	8013c68 <iprintf>
    if(grp == A)
 80078da:	797b      	ldrb	r3, [r7, #5]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	f040 80ba 	bne.w	8007a56 <printReadPwmDutyCycle+0x1a6>
    {
      printf("Read PWMA Duty Cycle:\n");
 80078e2:	4888      	ldr	r0, [pc, #544]	@ (8007b04 <printReadPwmDutyCycle+0x254>)
 80078e4:	f00c fa30 	bl	8013d48 <puts>
      printf("PWM1:0x%X, ", IC[ic].PwmA.pwma[0]);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	4413      	add	r3, r2
 80078f6:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 80078fa:	4619      	mov	r1, r3
 80078fc:	4882      	ldr	r0, [pc, #520]	@ (8007b08 <printReadPwmDutyCycle+0x258>)
 80078fe:	f00c f9b3 	bl	8013c68 <iprintf>
      printf("PWM2:0x%X, ", IC[ic].PwmA.pwma[1]);
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	4413      	add	r3, r2
 8007910:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8007914:	4619      	mov	r1, r3
 8007916:	487d      	ldr	r0, [pc, #500]	@ (8007b0c <printReadPwmDutyCycle+0x25c>)
 8007918:	f00c f9a6 	bl	8013c68 <iprintf>
      printf("PWM3:0x%X, ", IC[ic].PwmA.pwma[2]);
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007922:	fb02 f303 	mul.w	r3, r2, r3
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4413      	add	r3, r2
 800792a:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800792e:	4619      	mov	r1, r3
 8007930:	4877      	ldr	r0, [pc, #476]	@ (8007b10 <printReadPwmDutyCycle+0x260>)
 8007932:	f00c f999 	bl	8013c68 <iprintf>
      printf("PWM4:0x%X, ", IC[ic].PwmA.pwma[3]);
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800793c:	fb02 f303 	mul.w	r3, r2, r3
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	4413      	add	r3, r2
 8007944:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8007948:	4619      	mov	r1, r3
 800794a:	4872      	ldr	r0, [pc, #456]	@ (8007b14 <printReadPwmDutyCycle+0x264>)
 800794c:	f00c f98c 	bl	8013c68 <iprintf>
      printf("PWM5:0x%X, ", IC[ic].PwmA.pwma[4]);
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007956:	fb02 f303 	mul.w	r3, r2, r3
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4413      	add	r3, r2
 800795e:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8007962:	4619      	mov	r1, r3
 8007964:	486c      	ldr	r0, [pc, #432]	@ (8007b18 <printReadPwmDutyCycle+0x268>)
 8007966:	f00c f97f 	bl	8013c68 <iprintf>
      printf("PWM6:0x%X, ", IC[ic].PwmA.pwma[5]);
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	4413      	add	r3, r2
 8007978:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800797c:	4619      	mov	r1, r3
 800797e:	4867      	ldr	r0, [pc, #412]	@ (8007b1c <printReadPwmDutyCycle+0x26c>)
 8007980:	f00c f972 	bl	8013c68 <iprintf>
      printf("PWM7:0x%X, ", IC[ic].PwmA.pwma[6]);
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4413      	add	r3, r2
 8007992:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8007996:	4619      	mov	r1, r3
 8007998:	4861      	ldr	r0, [pc, #388]	@ (8007b20 <printReadPwmDutyCycle+0x270>)
 800799a:	f00c f965 	bl	8013c68 <iprintf>
      printf("PWM8:0x%X, ", IC[ic].PwmA.pwma[7]);
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079a4:	fb02 f303 	mul.w	r3, r2, r3
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	4413      	add	r3, r2
 80079ac:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 80079b0:	4619      	mov	r1, r3
 80079b2:	485c      	ldr	r0, [pc, #368]	@ (8007b24 <printReadPwmDutyCycle+0x274>)
 80079b4:	f00c f958 	bl	8013c68 <iprintf>
      printf("PWM9:0x%X, ", IC[ic].PwmA.pwma[8]);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079be:	fb02 f303 	mul.w	r3, r2, r3
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 80079ca:	4619      	mov	r1, r3
 80079cc:	4856      	ldr	r0, [pc, #344]	@ (8007b28 <printReadPwmDutyCycle+0x278>)
 80079ce:	f00c f94b 	bl	8013c68 <iprintf>
      printf("PWM10:0x%X, ", IC[ic].PwmA.pwma[9]);
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	4413      	add	r3, r2
 80079e0:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 80079e4:	4619      	mov	r1, r3
 80079e6:	4851      	ldr	r0, [pc, #324]	@ (8007b2c <printReadPwmDutyCycle+0x27c>)
 80079e8:	f00c f93e 	bl	8013c68 <iprintf>
      printf("PWM11:0x%X, ", IC[ic].PwmA.pwma[10]);
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4413      	add	r3, r2
 80079fa:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 80079fe:	4619      	mov	r1, r3
 8007a00:	484b      	ldr	r0, [pc, #300]	@ (8007b30 <printReadPwmDutyCycle+0x280>)
 8007a02:	f00c f931 	bl	8013c68 <iprintf>
      printf("PWM12:0x%X, ", IC[ic].PwmA.pwma[11]);
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a0c:	fb02 f303 	mul.w	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	4413      	add	r3, r2
 8007a14:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4846      	ldr	r0, [pc, #280]	@ (8007b34 <printReadPwmDutyCycle+0x284>)
 8007a1c:	f00c f924 	bl	8013c68 <iprintf>
      printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007a32:	4619      	mov	r1, r3
 8007a34:	4840      	ldr	r0, [pc, #256]	@ (8007b38 <printReadPwmDutyCycle+0x288>)
 8007a36:	f00c f917 	bl	8013c68 <iprintf>
      printf("PECError:%d\n\n",IC[ic].cccrc.pwm_pec);
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	4413      	add	r3, r2
 8007a48:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	483b      	ldr	r0, [pc, #236]	@ (8007b3c <printReadPwmDutyCycle+0x28c>)
 8007a50:	f00c f90a 	bl	8013c68 <iprintf>
 8007a54:	e176      	b.n	8007d44 <printReadPwmDutyCycle+0x494>
    }
    else if(grp == B)
 8007a56:	797b      	ldrb	r3, [r7, #5]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d17b      	bne.n	8007b54 <printReadPwmDutyCycle+0x2a4>
    {
      printf("Read PWMB Duty Cycle:\n");
 8007a5c:	4838      	ldr	r0, [pc, #224]	@ (8007b40 <printReadPwmDutyCycle+0x290>)
 8007a5e:	f00c f973 	bl	8013d48 <puts>
      printf("PWM13:0x%X, ", IC[ic].PwmB.pwmb[0]);
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8007a74:	4619      	mov	r1, r3
 8007a76:	4833      	ldr	r0, [pc, #204]	@ (8007b44 <printReadPwmDutyCycle+0x294>)
 8007a78:	f00c f8f6 	bl	8013c68 <iprintf>
      printf("PWM14:0x%X, ", IC[ic].PwmB.pwmb[1]);
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 8007a8e:	4619      	mov	r1, r3
 8007a90:	482d      	ldr	r0, [pc, #180]	@ (8007b48 <printReadPwmDutyCycle+0x298>)
 8007a92:	f00c f8e9 	bl	8013c68 <iprintf>
      printf("PWM15:0x%X, ", IC[ic].PwmB.pwmb[2]);
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007a9c:	fb02 f303 	mul.w	r3, r2, r3
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4828      	ldr	r0, [pc, #160]	@ (8007b4c <printReadPwmDutyCycle+0x29c>)
 8007aac:	f00c f8dc 	bl	8013c68 <iprintf>
      printf("PWM16:0x%X, ", IC[ic].PwmB.pwmb[3]);
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4822      	ldr	r0, [pc, #136]	@ (8007b50 <printReadPwmDutyCycle+0x2a0>)
 8007ac6:	f00c f8cf 	bl	8013c68 <iprintf>
      printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007ad0:	fb02 f303 	mul.w	r3, r2, r3
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007adc:	4619      	mov	r1, r3
 8007ade:	4816      	ldr	r0, [pc, #88]	@ (8007b38 <printReadPwmDutyCycle+0x288>)
 8007ae0:	f00c f8c2 	bl	8013c68 <iprintf>
      printf("PECError:%d\n\n",IC[ic].cccrc.pwm_pec);
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4413      	add	r3, r2
 8007af2:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 8007af6:	4619      	mov	r1, r3
 8007af8:	4810      	ldr	r0, [pc, #64]	@ (8007b3c <printReadPwmDutyCycle+0x28c>)
 8007afa:	f00c f8b5 	bl	8013c68 <iprintf>
 8007afe:	e121      	b.n	8007d44 <printReadPwmDutyCycle+0x494>
 8007b00:	08016a44 	.word	0x08016a44
 8007b04:	080170f0 	.word	0x080170f0
 8007b08:	08017108 	.word	0x08017108
 8007b0c:	08017114 	.word	0x08017114
 8007b10:	08017120 	.word	0x08017120
 8007b14:	0801712c 	.word	0x0801712c
 8007b18:	08017138 	.word	0x08017138
 8007b1c:	08017144 	.word	0x08017144
 8007b20:	08017150 	.word	0x08017150
 8007b24:	0801715c 	.word	0x0801715c
 8007b28:	08017168 	.word	0x08017168
 8007b2c:	08017174 	.word	0x08017174
 8007b30:	08017184 	.word	0x08017184
 8007b34:	08017194 	.word	0x08017194
 8007b38:	08016bd4 	.word	0x08016bd4
 8007b3c:	08016be0 	.word	0x08016be0
 8007b40:	080171a4 	.word	0x080171a4
 8007b44:	080171bc 	.word	0x080171bc
 8007b48:	080171cc 	.word	0x080171cc
 8007b4c:	080171dc 	.word	0x080171dc
 8007b50:	080171ec 	.word	0x080171ec
    }
    else if(grp == ALL_GRP)
 8007b54:	797b      	ldrb	r3, [r7, #5]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f040 80f1 	bne.w	8007d3e <printReadPwmDutyCycle+0x48e>
    {
      printf("Read PWMA Duty Cycle:\n");
 8007b5c:	4880      	ldr	r0, [pc, #512]	@ (8007d60 <printReadPwmDutyCycle+0x4b0>)
 8007b5e:	f00c f8f3 	bl	8013d48 <puts>
      printf("PWM1:0x%X, ", IC[ic].PwmA.pwma[0]);
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8007b74:	4619      	mov	r1, r3
 8007b76:	487b      	ldr	r0, [pc, #492]	@ (8007d64 <printReadPwmDutyCycle+0x4b4>)
 8007b78:	f00c f876 	bl	8013c68 <iprintf>
      printf("PWM2:0x%X, ", IC[ic].PwmA.pwma[1]);
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007b82:	fb02 f303 	mul.w	r3, r2, r3
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4875      	ldr	r0, [pc, #468]	@ (8007d68 <printReadPwmDutyCycle+0x4b8>)
 8007b92:	f00c f869 	bl	8013c68 <iprintf>
      printf("PWM3:0x%X, ", IC[ic].PwmA.pwma[2]);
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007b9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4870      	ldr	r0, [pc, #448]	@ (8007d6c <printReadPwmDutyCycle+0x4bc>)
 8007bac:	f00c f85c 	bl	8013c68 <iprintf>
      printf("PWM4:0x%X, ", IC[ic].PwmA.pwma[3]);
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007bb6:	fb02 f303 	mul.w	r3, r2, r3
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	486a      	ldr	r0, [pc, #424]	@ (8007d70 <printReadPwmDutyCycle+0x4c0>)
 8007bc6:	f00c f84f 	bl	8013c68 <iprintf>
      printf("PWM5:0x%X, ", IC[ic].PwmA.pwma[4]);
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4865      	ldr	r0, [pc, #404]	@ (8007d74 <printReadPwmDutyCycle+0x4c4>)
 8007be0:	f00c f842 	bl	8013c68 <iprintf>
      printf("PWM6:0x%X, ", IC[ic].PwmA.pwma[5]);
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	485f      	ldr	r0, [pc, #380]	@ (8007d78 <printReadPwmDutyCycle+0x4c8>)
 8007bfa:	f00c f835 	bl	8013c68 <iprintf>
      printf("PWM7:0x%X, ", IC[ic].PwmA.pwma[6]);
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c04:	fb02 f303 	mul.w	r3, r2, r3
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8007c10:	4619      	mov	r1, r3
 8007c12:	485a      	ldr	r0, [pc, #360]	@ (8007d7c <printReadPwmDutyCycle+0x4cc>)
 8007c14:	f00c f828 	bl	8013c68 <iprintf>
      printf("PWM8:0x%X, ", IC[ic].PwmA.pwma[7]);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	4413      	add	r3, r2
 8007c26:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4854      	ldr	r0, [pc, #336]	@ (8007d80 <printReadPwmDutyCycle+0x4d0>)
 8007c2e:	f00c f81b 	bl	8013c68 <iprintf>
      printf("PWM9:0x%X, ", IC[ic].PwmA.pwma[8]);
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8007c44:	4619      	mov	r1, r3
 8007c46:	484f      	ldr	r0, [pc, #316]	@ (8007d84 <printReadPwmDutyCycle+0x4d4>)
 8007c48:	f00c f80e 	bl	8013c68 <iprintf>
      printf("PWM10:0x%X, ", IC[ic].PwmA.pwma[9]);
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4849      	ldr	r0, [pc, #292]	@ (8007d88 <printReadPwmDutyCycle+0x4d8>)
 8007c62:	f00c f801 	bl	8013c68 <iprintf>
      printf("PWM11:0x%X, ", IC[ic].PwmA.pwma[10]);
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	4413      	add	r3, r2
 8007c74:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4844      	ldr	r0, [pc, #272]	@ (8007d8c <printReadPwmDutyCycle+0x4dc>)
 8007c7c:	f00b fff4 	bl	8013c68 <iprintf>
      printf("PWM12:0x%X\n", IC[ic].PwmA.pwma[11]);
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8007c92:	4619      	mov	r1, r3
 8007c94:	483e      	ldr	r0, [pc, #248]	@ (8007d90 <printReadPwmDutyCycle+0x4e0>)
 8007c96:	f00b ffe7 	bl	8013c68 <iprintf>

      printf("Read PWMB Duty Cycle:\n");
 8007c9a:	483e      	ldr	r0, [pc, #248]	@ (8007d94 <printReadPwmDutyCycle+0x4e4>)
 8007c9c:	f00c f854 	bl	8013d48 <puts>
      printf("PWM13:0x%X, ", IC[ic].PwmB.pwmb[0]);
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4413      	add	r3, r2
 8007cae:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4838      	ldr	r0, [pc, #224]	@ (8007d98 <printReadPwmDutyCycle+0x4e8>)
 8007cb6:	f00b ffd7 	bl	8013c68 <iprintf>
      printf("PWM14:0x%X, ", IC[ic].PwmB.pwmb[1]);
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007cc0:	fb02 f303 	mul.w	r3, r2, r3
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4833      	ldr	r0, [pc, #204]	@ (8007d9c <printReadPwmDutyCycle+0x4ec>)
 8007cd0:	f00b ffca 	bl	8013c68 <iprintf>
      printf("PWM15:0x%X, ", IC[ic].PwmB.pwmb[2]);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	482d      	ldr	r0, [pc, #180]	@ (8007da0 <printReadPwmDutyCycle+0x4f0>)
 8007cea:	f00b ffbd 	bl	8013c68 <iprintf>
      printf("PWM16:0x%X, ", IC[ic].PwmB.pwmb[3]);
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007cf4:	fb02 f303 	mul.w	r3, r2, r3
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8007d00:	4619      	mov	r1, r3
 8007d02:	4828      	ldr	r0, [pc, #160]	@ (8007da4 <printReadPwmDutyCycle+0x4f4>)
 8007d04:	f00b ffb0 	bl	8013c68 <iprintf>
      printf("CCount:%d,",IC[ic].cccrc.cmd_cntr);
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4413      	add	r3, r2
 8007d16:	f893 318f 	ldrb.w	r3, [r3, #399]	@ 0x18f
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4822      	ldr	r0, [pc, #136]	@ (8007da8 <printReadPwmDutyCycle+0x4f8>)
 8007d1e:	f00b ffa3 	bl	8013c68 <iprintf>
      printf("PECError:%d\n\n",IC[ic].cccrc.pwm_pec);
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8007d28:	fb02 f303 	mul.w	r3, r2, r3
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 8007d34:	4619      	mov	r1, r3
 8007d36:	481d      	ldr	r0, [pc, #116]	@ (8007dac <printReadPwmDutyCycle+0x4fc>)
 8007d38:	f00b ff96 	bl	8013c68 <iprintf>
 8007d3c:	e002      	b.n	8007d44 <printReadPwmDutyCycle+0x494>
    }
    else{ printf("Wrong Register Type Select\n"); }
 8007d3e:	481c      	ldr	r0, [pc, #112]	@ (8007db0 <printReadPwmDutyCycle+0x500>)
 8007d40:	f00c f802 	bl	8013d48 <puts>
  for(uint8_t ic = 0; ic < tIC; ic++)
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	3301      	adds	r3, #1
 8007d48:	73fb      	strb	r3, [r7, #15]
 8007d4a:	7bfa      	ldrb	r2, [r7, #15]
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f4ff adbd 	bcc.w	80078ce <printReadPwmDutyCycle+0x1e>
  }
	}
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	080170f0 	.word	0x080170f0
 8007d64:	08017108 	.word	0x08017108
 8007d68:	08017114 	.word	0x08017114
 8007d6c:	08017120 	.word	0x08017120
 8007d70:	0801712c 	.word	0x0801712c
 8007d74:	08017138 	.word	0x08017138
 8007d78:	08017144 	.word	0x08017144
 8007d7c:	08017150 	.word	0x08017150
 8007d80:	0801715c 	.word	0x0801715c
 8007d84:	08017168 	.word	0x08017168
 8007d88:	08017174 	.word	0x08017174
 8007d8c:	08017184 	.word	0x08017184
 8007d90:	080171fc 	.word	0x080171fc
 8007d94:	080171a4 	.word	0x080171a4
 8007d98:	080171bc 	.word	0x080171bc
 8007d9c:	080171cc 	.word	0x080171cc
 8007da0:	080171dc 	.word	0x080171dc
 8007da4:	080171ec 	.word	0x080171ec
 8007da8:	08016bd4 	.word	0x08016bd4
 8007dac:	08016be0 	.word	0x08016be0
 8007db0:	0801709c 	.word	0x0801709c
 8007db4:	00000000 	.word	0x00000000

08007db8 <getVoltage>:
 * @return voltage(float)
 *
 *******************************************************************************
*/
float getVoltage(int data)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
//	printf("%d", data);
    float voltage_float; //voltage in Volts
    voltage_float = ((data + 10000) * 0.000150);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8007dc6:	3310      	adds	r3, #16
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7f8 fbb3 	bl	8000534 <__aeabi_i2d>
 8007dce:	a30a      	add	r3, pc, #40	@ (adr r3, 8007df8 <getVoltage+0x40>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fc18 	bl	8000608 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	f7f8 ff0a 	bl	8000bf8 <__aeabi_d2f>
 8007de4:	4603      	mov	r3, r0
 8007de6:	60fb      	str	r3, [r7, #12]
    return voltage_float;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	ee07 3a90 	vmov	s15, r3
}
 8007dee:	eeb0 0a67 	vmov.f32	s0, s15
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	30553261 	.word	0x30553261
 8007dfc:	3f23a92a 	.word	0x3f23a92a

08007e00 <populate_CAN1>:
#include "adbms_can_helper.h"
#include "custom_functions.h"
#include "serialPrintResult.h"

void populate_CAN1(CAN1_DATAFRAME *frame, cell_asic *ICs, int totalIC) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
    // --- PACK CURRENT ---
    frame->data.pack_current = (int16_t)(current * 10.0f); // current is extern, *0.1 A for CAN
 8007e0c:	4b51      	ldr	r3, [pc, #324]	@ (8007f54 <populate_CAN1+0x154>)
 8007e0e:	edd3 7a00 	vldr	s15, [r3]
 8007e12:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e1e:	ee17 3a90 	vmov	r3, s15
 8007e22:	b21a      	sxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	801a      	strh	r2, [r3, #0]

    // --- PACK VOLTAGE ---
    float pack_voltage_sum = 0.0f;
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	617b      	str	r3, [r7, #20]
    //     for (int j = 0; j < NUM_CELLS_PER_IC; j++) {
    //         float cell_voltage = getVoltage(ICs[i].cell.c_codes[j]);
    //         pack_voltage_sum += cell_voltage;
    //     }
    // }
    pack_voltage_sum = getPackVoltage(totalIC, ICs);
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fa21 	bl	8009278 <getPackVoltage>
 8007e36:	ed87 0a05 	vstr	s0, [r7, #20]
    frame->data.pack_voltage = (uint16_t)(pack_voltage_sum * 10.0f); // *0.1 V for CAN
 8007e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e3e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4a:	ee17 3a90 	vmov	r3, s15
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	805a      	strh	r2, [r3, #2]

    // --- STATE OF CHARGE (SOC) ---
    // soc = (pack_voltage_sum - 280.0f) / (420.0f - 280.0f); // scale 280V–420V

    frame->data.pack_soc = (uint8_t)(soc); // *0.5% for 0–100% (0–200 steps)
 8007e54:	4b40      	ldr	r3, [pc, #256]	@ (8007f58 <populate_CAN1+0x158>)
 8007e56:	edd3 7a00 	vldr	s15, [r3]
 8007e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5e:	edc7 7a00 	vstr	s15, [r7]
 8007e62:	783b      	ldrb	r3, [r7, #0]
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	711a      	strb	r2, [r3, #4]

    // --- RELAY + SYSTEM STATUS FLAGS ---
    frame->data.discharge_relay = 1; // TODO: replace with actual GPIO read if needed
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	7993      	ldrb	r3, [r2, #6]
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	7193      	strb	r3, [r2, #6]
    frame->data.charge_relay    = 1;
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	7993      	ldrb	r3, [r2, #6]
 8007e78:	f043 0302 	orr.w	r3, r3, #2
 8007e7c:	7193      	strb	r3, [r2, #6]
    frame->data.charger_safety  = 0; // Optional safety flag
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	7993      	ldrb	r3, [r2, #6]
 8007e82:	f023 0304 	bic.w	r3, r3, #4
 8007e86:	7193      	strb	r3, [r2, #6]

    // --- Fault Indicator (MIL light) ---
    frame->data.mil_state = (cell_fault || temp_fault) ? 1 : 0;
 8007e88:	4b34      	ldr	r3, [pc, #208]	@ (8007f5c <populate_CAN1+0x15c>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <populate_CAN1+0x98>
 8007e90:	4b33      	ldr	r3, [pc, #204]	@ (8007f60 <populate_CAN1+0x160>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <populate_CAN1+0x9c>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <populate_CAN1+0x9e>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	b2d9      	uxtb	r1, r3
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	7993      	ldrb	r3, [r2, #6]
 8007ea8:	f361 03c3 	bfi	r3, r1, #3, #1
 8007eac:	7193      	strb	r3, [r2, #6]

    // --- Charging Status ---
    frame->data.charging_on = (accy_status == CHARGE_POWER) ? 1 : 0;
 8007eae:	4b2d      	ldr	r3, [pc, #180]	@ (8007f64 <populate_CAN1+0x164>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8007f68 <populate_CAN1+0x168>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2d9      	uxtb	r1, r3
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	7993      	ldrb	r3, [r2, #6]
 8007ec6:	f361 13c7 	bfi	r3, r1, #7, #1
 8007eca:	7193      	strb	r3, [r2, #6]
    frame->data.is_ready    = (accy_status == READY_POWER) ? 1 : 0;
 8007ecc:	4b27      	ldr	r3, [pc, #156]	@ (8007f6c <populate_CAN1+0x16c>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4b25      	ldr	r3, [pc, #148]	@ (8007f68 <populate_CAN1+0x168>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	bf0c      	ite	eq
 8007eda:	2301      	moveq	r3, #1
 8007edc:	2300      	movne	r3, #0
 8007ede:	b2d9      	uxtb	r1, r3
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	7993      	ldrb	r3, [r2, #6]
 8007ee4:	f361 1386 	bfi	r3, r1, #6, #1
 8007ee8:	7193      	strb	r3, [r2, #6]
    frame->data.always_on   = 1;
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	7993      	ldrb	r3, [r2, #6]
 8007eee:	f043 0320 	orr.w	r3, r3, #32
 8007ef2:	7193      	strb	r3, [r2, #6]

    // --- MPx/MPEnable Flags (dummy/stub logic) ---
    frame->data.mp_enable   = 1;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	7953      	ldrb	r3, [r2, #5]
 8007ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007efc:	7153      	strb	r3, [r2, #5]
    frame->data.mpo1_state  = 0;
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	7953      	ldrb	r3, [r2, #5]
 8007f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f06:	7153      	strb	r3, [r2, #5]
    frame->data.mpo2_state  = 1;
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	7953      	ldrb	r3, [r2, #5]
 8007f0c:	f043 0308 	orr.w	r3, r3, #8
 8007f10:	7153      	strb	r3, [r2, #5]
    frame->data.mpo3_state  = 0;
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	7953      	ldrb	r3, [r2, #5]
 8007f16:	f023 0310 	bic.w	r3, r3, #16
 8007f1a:	7153      	strb	r3, [r2, #5]
    frame->data.mpo4_state  = 1;
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	7953      	ldrb	r3, [r2, #5]
 8007f20:	f043 0320 	orr.w	r3, r3, #32
 8007f24:	7153      	strb	r3, [r2, #5]
    frame->data.mpi1_state  = 0;
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	7993      	ldrb	r3, [r2, #6]
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	7193      	strb	r3, [r2, #6]
    frame->data.mpi2_state  = 1;
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	7953      	ldrb	r3, [r2, #5]
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	7153      	strb	r3, [r2, #5]
    frame->data.mpi3_state  = 0;
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	7953      	ldrb	r3, [r2, #5]
 8007f3e:	f023 0302 	bic.w	r3, r3, #2
 8007f42:	7153      	strb	r3, [r2, #5]

    // --- Checksum (optional, unused for now) ---
    frame->data.checksum = 0;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	71da      	strb	r2, [r3, #7]
}
 8007f4a:	bf00      	nop
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20001c74 	.word	0x20001c74
 8007f58:	20001c78 	.word	0x20001c78
 8007f5c:	20001c6a 	.word	0x20001c6a
 8007f60:	20001c6b 	.word	0x20001c6b
 8007f64:	08017a61 	.word	0x08017a61
 8007f68:	20001c70 	.word	0x20001c70
 8007f6c:	08017a60 	.word	0x08017a60

08007f70 <populate_CAN2>:


void populate_CAN2(CAN2_DATAFRAME *frame, cell_asic *ICs, int totalIC) {
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
    // --- Current Limits ---
    frame->data.pack_dcl = dcl;
 8007f7c:	4b37      	ldr	r3, [pc, #220]	@ (800805c <populate_CAN2+0xec>)
 8007f7e:	edd3 7a00 	vldr	s15, [r3]
 8007f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f86:	ee17 3a90 	vmov	r3, s15
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	801a      	strh	r2, [r3, #0]
    frame->data.pack_ccl = ccl;
 8007f90:	4b33      	ldr	r3, [pc, #204]	@ (8008060 <populate_CAN2+0xf0>)
 8007f92:	edd3 7a00 	vldr	s15, [r3]
 8007f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f9a:	edc7 7a00 	vstr	s15, [r7]
 8007f9e:	783b      	ldrb	r3, [r7, #0]
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	709a      	strb	r2, [r3, #2]
    // }

    // Clamp to int8 range
    // if (max_temp > 127) max_temp = 127;
    // if (min_temp < -128) min_temp = -128;
    if (highest_temp > 127) lowest_temp = 127;
 8007fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8008064 <populate_CAN2+0xf4>)
 8007fa8:	edd3 7a00 	vldr	s15, [r3]
 8007fac:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8008068 <populate_CAN2+0xf8>
 8007fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb8:	dd02      	ble.n	8007fc0 <populate_CAN2+0x50>
 8007fba:	4b2c      	ldr	r3, [pc, #176]	@ (800806c <populate_CAN2+0xfc>)
 8007fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8008070 <populate_CAN2+0x100>)
 8007fbe:	601a      	str	r2, [r3, #0]
    if (highest_temp < -128) highest_temp = -128;
 8007fc0:	4b28      	ldr	r3, [pc, #160]	@ (8008064 <populate_CAN2+0xf4>)
 8007fc2:	edd3 7a00 	vldr	s15, [r3]
 8007fc6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008074 <populate_CAN2+0x104>
 8007fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd2:	d503      	bpl.n	8007fdc <populate_CAN2+0x6c>
 8007fd4:	4b23      	ldr	r3, [pc, #140]	@ (8008064 <populate_CAN2+0xf4>)
 8007fd6:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8007fda:	601a      	str	r2, [r3, #0]
    if (lowest_temp > 127) lowest_temp = 127;
 8007fdc:	4b23      	ldr	r3, [pc, #140]	@ (800806c <populate_CAN2+0xfc>)
 8007fde:	edd3 7a00 	vldr	s15, [r3]
 8007fe2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008068 <populate_CAN2+0xf8>
 8007fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fee:	dd02      	ble.n	8007ff6 <populate_CAN2+0x86>
 8007ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800806c <populate_CAN2+0xfc>)
 8007ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8008070 <populate_CAN2+0x100>)
 8007ff4:	601a      	str	r2, [r3, #0]
    if (lowest_temp < -128) lowest_temp = -128;
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <populate_CAN2+0xfc>)
 8007ff8:	edd3 7a00 	vldr	s15, [r3]
 8007ffc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008074 <populate_CAN2+0x104>
 8008000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008008:	d503      	bpl.n	8008012 <populate_CAN2+0xa2>
 800800a:	4b18      	ldr	r3, [pc, #96]	@ (800806c <populate_CAN2+0xfc>)
 800800c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8008010:	601a      	str	r2, [r3, #0]

    frame->data.pack_high_temp = (int8_t)highest_temp;
 8008012:	4b14      	ldr	r3, [pc, #80]	@ (8008064 <populate_CAN2+0xf4>)
 8008014:	edd3 7a00 	vldr	s15, [r3]
 8008018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800801c:	edc7 7a00 	vstr	s15, [r7]
 8008020:	783b      	ldrb	r3, [r7, #0]
 8008022:	b25a      	sxtb	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	711a      	strb	r2, [r3, #4]
    frame->data.pack_low_temp = (int8_t)lowest_temp;
 8008028:	4b10      	ldr	r3, [pc, #64]	@ (800806c <populate_CAN2+0xfc>)
 800802a:	edd3 7a00 	vldr	s15, [r3]
 800802e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008032:	edc7 7a00 	vstr	s15, [r7]
 8008036:	783b      	ldrb	r3, [r7, #0]
 8008038:	b25a      	sxtb	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	715a      	strb	r2, [r3, #5]

    // --- Padding / Checksum ---
    frame->data.reserved0 = 0;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	70da      	strb	r2, [r3, #3]
    frame->data.reserved1 = 0;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	719a      	strb	r2, [r3, #6]
    frame->data.checksum = 0; // optional
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	71da      	strb	r2, [r3, #7]
}
 8008050:	bf00      	nop
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	20001c94 	.word	0x20001c94
 8008060:	20001c90 	.word	0x20001c90
 8008064:	20001c9c 	.word	0x20001c9c
 8008068:	42fe0000 	.word	0x42fe0000
 800806c:	20001c98 	.word	0x20001c98
 8008070:	42fe0000 	.word	0x42fe0000
 8008074:	c3000000 	.word	0xc3000000

08008078 <populate_CAN3>:

void populate_CAN3(CAN3_DATAFRAME *frame, cell_asic *ICs, int totalIC) {
 8008078:	b480      	push	{r7}
 800807a:	b089      	sub	sp, #36	@ 0x24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
    float min_voltage = 1e6f;  // large initial value for comparison
 8008084:	4b20      	ldr	r3, [pc, #128]	@ (8008108 <populate_CAN3+0x90>)
 8008086:	61fb      	str	r3, [r7, #28]
    float max_voltage = -1e6f; // small initial value for comparison
 8008088:	4b20      	ldr	r3, [pc, #128]	@ (800810c <populate_CAN3+0x94>)
 800808a:	61bb      	str	r3, [r7, #24]
    //         if (voltage < min_voltage) min_voltage = voltage;
    //         if (voltage > max_voltage) max_voltage = voltage;
    //     }
    // }

    min_voltage = lowest_cell;
 800808c:	4b20      	ldr	r3, [pc, #128]	@ (8008110 <populate_CAN3+0x98>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	61fb      	str	r3, [r7, #28]
    max_voltage = highest_cell;
 8008092:	4b20      	ldr	r3, [pc, #128]	@ (8008114 <populate_CAN3+0x9c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	61bb      	str	r3, [r7, #24]

    // Fallback if no valid cells were processed
    if (cell_count == 0) {
 8008098:	4b1f      	ldr	r3, [pc, #124]	@ (8008118 <populate_CAN3+0xa0>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <populate_CAN3+0x34>
        min_voltage = 0.0f;
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
        max_voltage = 0.0f;
 80080a6:	f04f 0300 	mov.w	r3, #0
 80080aa:	61bb      	str	r3, [r7, #24]
    }

    // Convert to 0.0001 V units for CAN message
    uint16_t min_mv = (uint16_t)(min_voltage * 10000.0f);
 80080ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80080b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800811c <populate_CAN3+0xa4>
 80080b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080bc:	ee17 3a90 	vmov	r3, s15
 80080c0:	82fb      	strh	r3, [r7, #22]
    uint16_t max_mv = (uint16_t)(max_voltage * 10000.0f);
 80080c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80080c6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800811c <populate_CAN3+0xa4>
 80080ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080d2:	ee17 3a90 	vmov	r3, s15
 80080d6:	82bb      	strh	r3, [r7, #20]

    frame->data.low_cell_voltage  = min_mv;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8afa      	ldrh	r2, [r7, #22]
 80080dc:	801a      	strh	r2, [r3, #0]
    frame->data.high_cell_voltage = max_mv;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8aba      	ldrh	r2, [r7, #20]
 80080e2:	805a      	strh	r2, [r3, #2]

    frame->data.reserved0 = 0;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	711a      	strb	r2, [r3, #4]
    frame->data.reserved1 = 0;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	715a      	strb	r2, [r3, #5]
    frame->data.reserved2 = 0;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	719a      	strb	r2, [r3, #6]
    frame->data.checksum  = 0;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	71da      	strb	r2, [r3, #7]
}
 80080fc:	bf00      	nop
 80080fe:	3724      	adds	r7, #36	@ 0x24
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	49742400 	.word	0x49742400
 800810c:	c9742400 	.word	0xc9742400
 8008110:	20001c7c 	.word	0x20001c7c
 8008114:	20001c80 	.word	0x20001c80
 8008118:	20000044 	.word	0x20000044
 800811c:	461c4000 	.word	0x461c4000

08008120 <populate_charge_CAN>:

void populate_charge_CAN(FDCAN_CHARGER_CONTEXT *CHARGER_CONTEXT, cell_asic *ICs, int totalIC) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
	//set pack current data
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.pack_voltage = (int16_t)(getPackVoltage(totalIC, ICs) * 10.0f); // current is extern, *0.1 A for CAN
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f8a2 	bl	8009278 <getPackVoltage>
 8008134:	eef0 7a40 	vmov.f32	s15, s0
 8008138:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800813c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008144:	ee17 3a90 	vmov	r3, s15
 8008148:	b21b      	sxth	r3, r3
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.pack_ccl = (int16_t)(calcCCL() * 10.0f); // current is extern, *0.1 A for CAN
 8008152:	f001 fc55 	bl	8009a00 <calcCCL>
 8008156:	eef0 7a40 	vmov.f32	s15, s0
 800815a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800815e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008166:	ee17 3a90 	vmov	r3, s15
 800816a:	b21a      	sxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	//todo: dont forget charge_enable
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.charge_enable = !is_charging;
 8008172:	4b4e      	ldr	r3, [pc, #312]	@ (80082ac <populate_charge_CAN+0x18c>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf0c      	ite	eq
 800817a:	2301      	moveq	r3, #1
 800817c:	2300      	movne	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	461a      	mov	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
//	CHARGER_CONTEXT->chgmsg_1806e7f4.data.charge_enable = !HAL_GPIO_ReadPin(SDC_IN_GPIO_Port,SDC_IN_Pin);
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.reserved0 = 0;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.reserved1= 0;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	CHARGER_CONTEXT->chgmsg_1806e7f4.data.reserved2 = 0;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97


	CHARGER_CONTEXT->chgmsg_1806e5f4.data.high_cell_voltage = (int16_t)(highest_cell * 10.0f); // current is extern, *0.1 A for CAN
 80081a0:	4b43      	ldr	r3, [pc, #268]	@ (80082b0 <populate_charge_CAN+0x190>)
 80081a2:	edd3 7a00 	vldr	s15, [r3]
 80081a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80081aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081b2:	ee17 3a90 	vmov	r3, s15
 80081b6:	b21b      	sxth	r3, r3
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.pack_ccl = (int16_t)(calcCCL() * 10.0f); // current is extern, *0.1 A for CAN
 80081c0:	f001 fc1e 	bl	8009a00 <calcCCL>
 80081c4:	eef0 7a40 	vmov.f32	s15, s0
 80081c8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80081cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081d4:	ee17 3a90 	vmov	r3, s15
 80081d8:	b21b      	sxth	r3, r3
 80081da:	b29a      	uxth	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved0 = 0;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved1 = 0;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved2 = 0;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
	CHARGER_CONTEXT->chgmsg_1806e5f4.data.reserved3 = 0;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 209f 	strb.w	r2, [r3, #159]	@ 0x9f


	CHARGER_CONTEXT->chgmsg_1806e9f4.data.high_cell_voltage = (int16_t)(highest_cell * 10.0f); // current is extern, *0.1 A for CAN
 8008202:	4b2b      	ldr	r3, [pc, #172]	@ (80082b0 <populate_charge_CAN+0x190>)
 8008204:	edd3 7a00 	vldr	s15, [r3]
 8008208:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800820c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008214:	ee17 3a90 	vmov	r3, s15
 8008218:	b21b      	sxth	r3, r3
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.pack_ccl = (int16_t)(calcCCL() * 10.0f); // current is extern, *0.1 A for CAN
 8008222:	f001 fbed 	bl	8009a00 <calcCCL>
 8008226:	eef0 7a40 	vmov.f32	s15, s0
 800822a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800822e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008236:	ee17 3a90 	vmov	r3, s15
 800823a:	b21b      	sxth	r3, r3
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved0 = 0;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved1 = 0;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved2 = 0;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
	CHARGER_CONTEXT->chgmsg_1806e9f4.data.reserved3 = 0;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7



	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved0 = 0;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved1 = 0;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved2 = 0;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved3 = 0;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved4 = 0;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved5 = 0;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved6 = 0;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	CHARGER_CONTEXT->chgmsg_18ff50e5.data.reserved7 = 0;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20001c8c 	.word	0x20001c8c
 80082b0:	20001c80 	.word	0x20001c80

080082b4 <CANTransmitMinion>:
#include "can.h"
#include "custom_functions.h"

HAL_StatusTypeDef CANTransmitMinion(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *header, uint8_t *dataArray) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]
	int attempts = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	613b      	str	r3, [r7, #16]

	while (attempts < FDCAN_RETRY_LIMIT && status != HAL_OK) {
 80082c8:	e009      	b.n	80082de <CANTransmitMinion+0x2a>
		status = HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, header, dataArray);
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f004 fdb7 	bl	800ce42 <HAL_FDCAN_AddMessageToTxFifoQ>
 80082d4:	4603      	mov	r3, r0
 80082d6:	75fb      	strb	r3, [r7, #23]
		attempts++;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	3301      	adds	r3, #1
 80082dc:	613b      	str	r3, [r7, #16]
	while (attempts < FDCAN_RETRY_LIMIT && status != HAL_OK) {
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	dc02      	bgt.n	80082ea <CANTransmitMinion+0x36>
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1ef      	bne.n	80082ca <CANTransmitMinion+0x16>
	}

	return status;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <init_FDCAN_header>:

void init_FDCAN_header(FDCAN_TxHeaderTypeDef *hdr, uint32_t id) {
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	hdr->Identifier = id;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	601a      	str	r2, [r3, #0]
	hdr->IdType = FDCAN_STANDARD_ID;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	605a      	str	r2, [r3, #4]
	hdr->TxFrameType = FDCAN_DATA_FRAME;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	609a      	str	r2, [r3, #8]
	hdr->DataLength = FDCAN_DLC_BYTES_8;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2208      	movs	r2, #8
 8008314:	60da      	str	r2, [r3, #12]
	hdr->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	611a      	str	r2, [r3, #16]
	hdr->BitRateSwitch = FDCAN_BRS_OFF;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	615a      	str	r2, [r3, #20]
	hdr->FDFormat = FDCAN_CLASSIC_CAN;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
	hdr->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	61da      	str	r2, [r3, #28]
	hdr->MessageMarker = 0;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	621a      	str	r2, [r3, #32]
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <init_FDCAN_header_EXTENDED>:

void init_FDCAN_header_EXTENDED(FDCAN_TxHeaderTypeDef *hdr, uint32_t id) {
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
	hdr->Identifier = id;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	601a      	str	r2, [r3, #0]
	hdr->IdType = FDCAN_EXTENDED_ID;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008356:	605a      	str	r2, [r3, #4]
	hdr->TxFrameType = FDCAN_DATA_FRAME;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	609a      	str	r2, [r3, #8]
	hdr->DataLength = FDCAN_DLC_BYTES_8;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2208      	movs	r2, #8
 8008362:	60da      	str	r2, [r3, #12]
	hdr->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	611a      	str	r2, [r3, #16]
	hdr->BitRateSwitch = FDCAN_BRS_OFF;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	615a      	str	r2, [r3, #20]
	hdr->FDFormat = FDCAN_CLASSIC_CAN;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	619a      	str	r2, [r3, #24]
	hdr->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	61da      	str	r2, [r3, #28]
	hdr->MessageMarker = 0;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	621a      	str	r2, [r3, #32]
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <FDCAN_BMS_Mailman>:

/**
 * is charging is 1 if ur tryna charge ts accy, 0 otherwise
 *
 */
void FDCAN_BMS_Mailman(FDCAN_HandleTypeDef *hfdcan, FDCAN_BMS_CONTEXT *ctx, uint32_t now_ms, uint8_t isCharging) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	70fb      	strb	r3, [r7, #3]
	// Message 0x6B0: current, voltage, SoC, flags
	if (now_ms - ctx->last_tx_time_6b0 >= MSG_6B0_PERIOD_MS) {
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	2b07      	cmp	r3, #7
 80083aa:	d911      	bls.n	80083d0 <FDCAN_BMS_Mailman+0x40>
		ctx->header_6b0.Identifier = FDCAN_MSG_ID_6B0;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f44f 62d6 	mov.w	r2, #1712	@ 0x6b0
 80083b2:	601a      	str	r2, [r3, #0]
		ctx->header_6b0.DataLength = 8;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2208      	movs	r2, #8
 80083b8:	60da      	str	r2, [r3, #12]
		CANTransmitMinion(hfdcan, &ctx->header_6b0, ctx->msg_6b0.array);
 80083ba:	68b9      	ldr	r1, [r7, #8]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	336c      	adds	r3, #108	@ 0x6c
 80083c0:	461a      	mov	r2, r3
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff ff76 	bl	80082b4 <CANTransmitMinion>
		ctx->last_tx_time_6b0 = now_ms;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}

	// Message 0x6B1: DCL, CCL, temps
	if (now_ms - ctx->last_tx_time_6b1 >= MSG_6B1_PERIOD_MS) {
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b67      	cmp	r3, #103	@ 0x67
 80083dc:	d910      	bls.n	8008400 <FDCAN_BMS_Mailman+0x70>
		ctx->header_6b1.Identifier = FDCAN_MSG_ID_6B1;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f240 62b1 	movw	r2, #1713	@ 0x6b1
 80083e4:	625a      	str	r2, [r3, #36]	@ 0x24
		CANTransmitMinion(hfdcan, &ctx->header_6b1, ctx->msg_6b1.array);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	3374      	adds	r3, #116	@ 0x74
 80083f0:	461a      	mov	r2, r3
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff ff5e 	bl	80082b4 <CANTransmitMinion>
		ctx->last_tx_time_6b1 = now_ms;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	}

	// Message 0x6B2: high/low cell voltages
	if (now_ms - ctx->last_tx_time_6b2 >= MSG_6B2_PERIOD_MS) {
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b07      	cmp	r3, #7
 800840c:	d910      	bls.n	8008430 <FDCAN_BMS_Mailman+0xa0>
		ctx->header_6b2.Identifier = FDCAN_MSG_ID_6B2;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f240 62b2 	movw	r2, #1714	@ 0x6b2
 8008414:	649a      	str	r2, [r3, #72]	@ 0x48
		CANTransmitMinion(hfdcan, &ctx->header_6b2, ctx->msg_6b2.array);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	337c      	adds	r3, #124	@ 0x7c
 8008420:	461a      	mov	r2, r3
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff ff46 	bl	80082b4 <CANTransmitMinion>
		ctx->last_tx_time_6b2 = now_ms;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	}

	if (isCharging) {
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8088 	beq.w	8008548 <FDCAN_BMS_Mailman+0x1b8>
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 8008438:	bf00      	nop
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1f7      	bne.n	800843a <FDCAN_BMS_Mailman+0xaa>
				{
				    // TX FIFO queue is full, wait
				}
		// Message 0x6B0: current, voltage, SoC, flags
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_1806e7f4 >= MSG_CHARGER_PERIOD_MS) {
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b63      	cmp	r3, #99	@ 0x63
 8008456:	d911      	bls.n	800847c <FDCAN_BMS_Mailman+0xec>
			ctx->CAN_CHGCONTEXT.header_1806E7F4.Identifier = 0x1806e7f4;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4a3d      	ldr	r2, [pc, #244]	@ (8008550 <FDCAN_BMS_Mailman+0x1c0>)
 800845c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_1806E7F4, ctx->CAN_CHGCONTEXT.chgmsg_1806e7f4.array);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800846c:	461a      	mov	r2, r3
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f7ff ff20 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_1806e7f4 = now_ms;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		}
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 800847c:	bf00      	nop
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008486:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f7      	bne.n	800847e <FDCAN_BMS_Mailman+0xee>
						{
						    // TX FIFO queue is full, wait
						}
		// Message 0x6B1: DCL, CCL, temps
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_1806e5f4 >= MSG_CHARGER_PERIOD_MS) {
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b63      	cmp	r3, #99	@ 0x63
 800849a:	d911      	bls.n	80084c0 <FDCAN_BMS_Mailman+0x130>
			ctx->CAN_CHGCONTEXT.header_1806E5F4.Identifier = 0x1806e5f4;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4a2d      	ldr	r2, [pc, #180]	@ (8008554 <FDCAN_BMS_Mailman+0x1c4>)
 80084a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_1806E5F4, ctx->CAN_CHGCONTEXT.chgmsg_1806e5f4.array);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f103 01b4 	add.w	r1, r3, #180	@ 0xb4
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80084b0:	461a      	mov	r2, r3
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff fefe 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_1806e5f4 = now_ms;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
		}
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 80084c0:	bf00      	nop
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80084ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1f7      	bne.n	80084c2 <FDCAN_BMS_Mailman+0x132>
						{
						    // TX FIFO queue is full, wait
						}
		// Message 0x6B2: high/low cell voltages
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_1806e9f4 >= MSG_CHARGER_PERIOD_MS) {
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b63      	cmp	r3, #99	@ 0x63
 80084de:	d911      	bls.n	8008504 <FDCAN_BMS_Mailman+0x174>
			ctx->CAN_CHGCONTEXT.header_1806E9F4.Identifier = 0x1806e9f4;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008558 <FDCAN_BMS_Mailman+0x1c8>)
 80084e4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_1806E9F4, ctx->CAN_CHGCONTEXT.chgmsg_1806e9f4.array);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f103 01d8 	add.w	r1, r3, #216	@ 0xd8
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80084f4:	461a      	mov	r2, r3
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fedc 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_1806e9f4 = now_ms;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
		}
		while ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0)
 8008504:	bf00      	nop
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800850e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1f7      	bne.n	8008506 <FDCAN_BMS_Mailman+0x176>
						{
						    // TX FIFO queue is full, wait
						}
		// Message 0x6B2: high/low cell voltages
		if (now_ms - ctx->CAN_CHGCONTEXT.last_tx_time_18ff50e5 >= MSG_CHARGER_PERIOD_MS) {
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b63      	cmp	r3, #99	@ 0x63
 8008522:	d911      	bls.n	8008548 <FDCAN_BMS_Mailman+0x1b8>
			ctx->CAN_CHGCONTEXT.header_18FF50E5.Identifier = 0x18ff50e5;
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4a0d      	ldr	r2, [pc, #52]	@ (800855c <FDCAN_BMS_Mailman+0x1cc>)
 8008528:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

			CANTransmitMinion(hfdcan, &ctx->CAN_CHGCONTEXT.header_18FF50E5, ctx->CAN_CHGCONTEXT.chgmsg_18ff50e5.array);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f103 01fc 	add.w	r1, r3, #252	@ 0xfc
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8008538:	461a      	mov	r2, r3
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f7ff feba 	bl	80082b4 <CANTransmitMinion>
			ctx->CAN_CHGCONTEXT.last_tx_time_18ff50e5 = now_ms;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
		}

	}
}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	1806e7f4 	.word	0x1806e7f4
 8008554:	1806e5f4 	.word	0x1806e5f4
 8008558:	1806e9f4 	.word	0x1806e9f4
 800855c:	18ff50e5 	.word	0x18ff50e5

08008560 <add_fault>:
 * @param fault_type Type of fault (UV, OV, TEMP)
 * @param fault_value Value that caused the fault
 * @return index of the fault entry in the array
 */
int add_fault(uint8_t ic_num, uint8_t cell_num, uint8_t fault_type,
		float fault_value) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	ed87 0a00 	vstr	s0, [r7]
 800856c:	71fb      	strb	r3, [r7, #7]
 800856e:	460b      	mov	r3, r1
 8008570:	71bb      	strb	r3, [r7, #6]
 8008572:	4613      	mov	r3, r2
 8008574:	717b      	strb	r3, [r7, #5]
	uint16_t cell_id = ic_num * 10 + cell_num;
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	b29b      	uxth	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	4413      	add	r3, r2
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	79bb      	ldrb	r3, [r7, #6]
 8008586:	b29b      	uxth	r3, r3
 8008588:	4413      	add	r3, r2
 800858a:	81fb      	strh	r3, [r7, #14]

	// First check if this fault already exists
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e024      	b.n	80085dc <add_fault+0x7c>
		if (fault_log[i].active && fault_log[i].cell_id == cell_id
 8008592:	4a3e      	ldr	r2, [pc, #248]	@ (800868c <add_fault+0x12c>)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	4413      	add	r3, r2
 800859a:	330c      	adds	r3, #12
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d019      	beq.n	80085d6 <add_fault+0x76>
 80085a2:	4a3a      	ldr	r2, [pc, #232]	@ (800868c <add_fault+0x12c>)
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	89fa      	ldrh	r2, [r7, #14]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d111      	bne.n	80085d6 <add_fault+0x76>
				&& fault_log[i].fault_type == fault_type) {
 80085b2:	4a36      	ldr	r2, [pc, #216]	@ (800868c <add_fault+0x12c>)
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	4413      	add	r3, r2
 80085ba:	3302      	adds	r3, #2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	797a      	ldrb	r2, [r7, #5]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d108      	bne.n	80085d6 <add_fault+0x76>
			// Update existing fault entry
			fault_log[i].fault_value = fault_value;
 80085c4:	4a31      	ldr	r2, [pc, #196]	@ (800868c <add_fault+0x12c>)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	011b      	lsls	r3, r3, #4
 80085ca:	4413      	add	r3, r2
 80085cc:	3304      	adds	r3, #4
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	601a      	str	r2, [r3, #0]
			return i;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	e056      	b.n	8008684 <add_fault+0x124>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	3301      	adds	r3, #1
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b13      	cmp	r3, #19
 80085e0:	ddd7      	ble.n	8008592 <add_fault+0x32>
		}
	}

	// Find an empty slot for a new fault
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 80085e2:	2300      	movs	r3, #0
 80085e4:	613b      	str	r3, [r7, #16]
 80085e6:	e045      	b.n	8008674 <add_fault+0x114>
		if (!fault_log[i].active) {
 80085e8:	4a28      	ldr	r2, [pc, #160]	@ (800868c <add_fault+0x12c>)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	4413      	add	r3, r2
 80085f0:	330c      	adds	r3, #12
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f083 0301 	eor.w	r3, r3, #1
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d037      	beq.n	800866e <add_fault+0x10e>
			fault_log[i].cell_id = cell_id;
 80085fe:	4a23      	ldr	r2, [pc, #140]	@ (800868c <add_fault+0x12c>)
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	4413      	add	r3, r2
 8008606:	89fa      	ldrh	r2, [r7, #14]
 8008608:	801a      	strh	r2, [r3, #0]
			fault_log[i].fault_type = fault_type;
 800860a:	4a20      	ldr	r2, [pc, #128]	@ (800868c <add_fault+0x12c>)
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	4413      	add	r3, r2
 8008612:	3302      	adds	r3, #2
 8008614:	797a      	ldrb	r2, [r7, #5]
 8008616:	701a      	strb	r2, [r3, #0]
			fault_log[i].fault_value = fault_value;
 8008618:	4a1c      	ldr	r2, [pc, #112]	@ (800868c <add_fault+0x12c>)
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	4413      	add	r3, r2
 8008620:	3304      	adds	r3, #4
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	601a      	str	r2, [r3, #0]
			fault_log[i].timestamp = HAL_GetTick();
 8008626:	f002 fca3 	bl	800af70 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	4917      	ldr	r1, [pc, #92]	@ (800868c <add_fault+0x12c>)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	440b      	add	r3, r1
 8008634:	3308      	adds	r3, #8
 8008636:	601a      	str	r2, [r3, #0]
			fault_log[i].active = true;
 8008638:	4a14      	ldr	r2, [pc, #80]	@ (800868c <add_fault+0x12c>)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	4413      	add	r3, r2
 8008640:	330c      	adds	r3, #12
 8008642:	2201      	movs	r2, #1
 8008644:	701a      	strb	r2, [r3, #0]
			num_active_faults++;
 8008646:	4b12      	ldr	r3, [pc, #72]	@ (8008690 <add_fault+0x130>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	3301      	adds	r3, #1
 800864c:	b2da      	uxtb	r2, r3
 800864e:	4b10      	ldr	r3, [pc, #64]	@ (8008690 <add_fault+0x130>)
 8008650:	701a      	strb	r2, [r3, #0]

			// Print info about the new fault
			if (PRINT_ON) printf("New fault: IC%d Cell%d Type:%d Value:", ic_num + 1,
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	1c59      	adds	r1, r3, #1
 8008656:	79bb      	ldrb	r3, [r7, #6]
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	797b      	ldrb	r3, [r7, #5]
 800865c:	480d      	ldr	r0, [pc, #52]	@ (8008694 <add_fault+0x134>)
 800865e:	f00b fb03 	bl	8013c68 <iprintf>
					cell_num + 1, fault_type);
			if (PRINT_ON) printFloat(fault_value);
 8008662:	ed97 0a00 	vldr	s0, [r7]
 8008666:	f000 fdc3 	bl	80091f0 <printFloat>

			return i;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	e00a      	b.n	8008684 <add_fault+0x124>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3301      	adds	r3, #1
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2b13      	cmp	r3, #19
 8008678:	ddb6      	ble.n	80085e8 <add_fault+0x88>
		}
	}

	// If we get here, the fault log is full - just return -1
	if (PRINT_ON) printf("Fault log full! Cannot record new faults\n");
 800867a:	4807      	ldr	r0, [pc, #28]	@ (8008698 <add_fault+0x138>)
 800867c:	f00b fb64 	bl	8013d48 <puts>
	return -1;
 8008680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20001cc0 	.word	0x20001cc0
 8008690:	20001e00 	.word	0x20001e00
 8008694:	080176d8 	.word	0x080176d8
 8008698:	08017700 	.word	0x08017700

0800869c <clear_fault>:
 *
 * @param ic_num IC number (0-based)
 * @param cell_num Cell number (0-based)
 * @param fault_type Type of fault (UV, OV, TEMP)
 */
void clear_fault(uint8_t ic_num, uint8_t cell_num, uint8_t fault_type) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
 80086a6:	460b      	mov	r3, r1
 80086a8:	71bb      	strb	r3, [r7, #6]
 80086aa:	4613      	mov	r3, r2
 80086ac:	717b      	strb	r3, [r7, #5]
	uint16_t cell_id = ic_num * 10 + cell_num;
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	0092      	lsls	r2, r2, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	79bb      	ldrb	r3, [r7, #6]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	4413      	add	r3, r2
 80086c2:	817b      	strh	r3, [r7, #10]

	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e03d      	b.n	8008746 <clear_fault+0xaa>
		if (fault_log[i].active && fault_log[i].cell_id == cell_id
 80086ca:	4a22      	ldr	r2, [pc, #136]	@ (8008754 <clear_fault+0xb8>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	4413      	add	r3, r2
 80086d2:	330c      	adds	r3, #12
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d032      	beq.n	8008740 <clear_fault+0xa4>
 80086da:	4a1e      	ldr	r2, [pc, #120]	@ (8008754 <clear_fault+0xb8>)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	897a      	ldrh	r2, [r7, #10]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d12a      	bne.n	8008740 <clear_fault+0xa4>
				&& fault_log[i].fault_type == fault_type) {
 80086ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008754 <clear_fault+0xb8>)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	4413      	add	r3, r2
 80086f2:	3302      	adds	r3, #2
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	797a      	ldrb	r2, [r7, #5]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d121      	bne.n	8008740 <clear_fault+0xa4>

			if (PRINT_ON) printf("Cleared fault: IC%d Cell%d Type:%d Value:", ic_num + 1,
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	1c59      	adds	r1, r3, #1
 8008700:	79bb      	ldrb	r3, [r7, #6]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	797b      	ldrb	r3, [r7, #5]
 8008706:	3301      	adds	r3, #1
 8008708:	4813      	ldr	r0, [pc, #76]	@ (8008758 <clear_fault+0xbc>)
 800870a:	f00b faad 	bl	8013c68 <iprintf>
					cell_num + 1, fault_type + 1);
			if (PRINT_ON) printFloat(fault_log[i].fault_value);
 800870e:	4a11      	ldr	r2, [pc, #68]	@ (8008754 <clear_fault+0xb8>)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	4413      	add	r3, r2
 8008716:	3304      	adds	r3, #4
 8008718:	edd3 7a00 	vldr	s15, [r3]
 800871c:	eeb0 0a67 	vmov.f32	s0, s15
 8008720:	f000 fd66 	bl	80091f0 <printFloat>

			fault_log[i].active = false;
 8008724:	4a0b      	ldr	r2, [pc, #44]	@ (8008754 <clear_fault+0xb8>)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	4413      	add	r3, r2
 800872c:	330c      	adds	r3, #12
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
			num_active_faults--;
 8008732:	4b0a      	ldr	r3, [pc, #40]	@ (800875c <clear_fault+0xc0>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	3b01      	subs	r3, #1
 8008738:	b2da      	uxtb	r2, r3
 800873a:	4b08      	ldr	r3, [pc, #32]	@ (800875c <clear_fault+0xc0>)
 800873c:	701a      	strb	r2, [r3, #0]
			return;
 800873e:	e005      	b.n	800874c <clear_fault+0xb0>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b13      	cmp	r3, #19
 800874a:	ddbe      	ble.n	80086ca <clear_fault+0x2e>
		}
	}
}
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20001cc0 	.word	0x20001cc0
 8008758:	0801772c 	.word	0x0801772c
 800875c:	20001e00 	.word	0x20001e00

08008760 <print_fault_summary>:
 * This function prints all active faults in a compact format showing:
 * - Cell ID (IC# * 10 + Cell#)
 * - Value that caused the fault
 * - Type of fault (V for voltage, T for temperature)
 */
void print_fault_summary(void) {
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
	if (PRINT_ON) {
	if (num_active_faults == 0) {
 8008766:	4b4a      	ldr	r3, [pc, #296]	@ (8008890 <print_fault_summary+0x130>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <print_fault_summary+0x16>
		printf("No active faults\n");
 800876e:	4849      	ldr	r0, [pc, #292]	@ (8008894 <print_fault_summary+0x134>)
 8008770:	f00b faea 	bl	8013d48 <puts>
		return;
 8008774:	e089      	b.n	800888a <print_fault_summary+0x12a>
	}

	printf("Faulted cells:\n");
 8008776:	4848      	ldr	r0, [pc, #288]	@ (8008898 <print_fault_summary+0x138>)
 8008778:	f00b fae6 	bl	8013d48 <puts>

	int count = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 8008780:	2300      	movs	r3, #0
 8008782:	60bb      	str	r3, [r7, #8]
 8008784:	e076      	b.n	8008874 <print_fault_summary+0x114>
		if (fault_log[i].active) {
 8008786:	4a45      	ldr	r2, [pc, #276]	@ (800889c <print_fault_summary+0x13c>)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	4413      	add	r3, r2
 800878e:	330c      	adds	r3, #12
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d06b      	beq.n	800886e <print_fault_summary+0x10e>
			uint8_t ic_num = fault_log[i].cell_id / 10;
 8008796:	4a41      	ldr	r2, [pc, #260]	@ (800889c <print_fault_summary+0x13c>)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	4a3f      	ldr	r2, [pc, #252]	@ (80088a0 <print_fault_summary+0x140>)
 80087a2:	fba2 2303 	umull	r2, r3, r2, r3
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	71fb      	strb	r3, [r7, #7]
			uint8_t cell_num = fault_log[i].cell_id % 10;
 80087ac:	4a3b      	ldr	r2, [pc, #236]	@ (800889c <print_fault_summary+0x13c>)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	4413      	add	r3, r2
 80087b4:	881a      	ldrh	r2, [r3, #0]
 80087b6:	4b3a      	ldr	r3, [pc, #232]	@ (80088a0 <print_fault_summary+0x140>)
 80087b8:	fba3 1302 	umull	r1, r3, r3, r2
 80087bc:	08d9      	lsrs	r1, r3, #3
 80087be:	460b      	mov	r3, r1
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	71bb      	strb	r3, [r7, #6]

			// Print cell information
			printf("IC%d Cell%d: ", ic_num + 1, cell_num + 1);
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	1c59      	adds	r1, r3, #1
 80087d0:	79bb      	ldrb	r3, [r7, #6]
 80087d2:	3301      	adds	r3, #1
 80087d4:	461a      	mov	r2, r3
 80087d6:	4833      	ldr	r0, [pc, #204]	@ (80088a4 <print_fault_summary+0x144>)
 80087d8:	f00b fa46 	bl	8013c68 <iprintf>

			// Print fault value with appropriate units
			switch (fault_log[i].fault_type) {
 80087dc:	4a2f      	ldr	r2, [pc, #188]	@ (800889c <print_fault_summary+0x13c>)
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	4413      	add	r3, r2
 80087e4:	3302      	adds	r3, #2
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	dc02      	bgt.n	80087f2 <print_fault_summary+0x92>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dc03      	bgt.n	80087f8 <print_fault_summary+0x98>
 80087f0:	e020      	b.n	8008834 <print_fault_summary+0xd4>
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d00f      	beq.n	8008816 <print_fault_summary+0xb6>
 80087f6:	e01d      	b.n	8008834 <print_fault_summary+0xd4>
			case FAULT_TYPE_UV:
			case FAULT_TYPE_OV:
				printf("%.2fV", fault_log[i].fault_value);
 80087f8:	4a28      	ldr	r2, [pc, #160]	@ (800889c <print_fault_summary+0x13c>)
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	4413      	add	r3, r2
 8008800:	3304      	adds	r3, #4
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4618      	mov	r0, r3
 8008806:	f7f7 fea7 	bl	8000558 <__aeabi_f2d>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4826      	ldr	r0, [pc, #152]	@ (80088a8 <print_fault_summary+0x148>)
 8008810:	f00b fa2a 	bl	8013c68 <iprintf>
				break;
 8008814:	e01c      	b.n	8008850 <print_fault_summary+0xf0>
			case FAULT_TYPE_TEMP:
				printf("%.1fC", fault_log[i].fault_value);
 8008816:	4a21      	ldr	r2, [pc, #132]	@ (800889c <print_fault_summary+0x13c>)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	4413      	add	r3, r2
 800881e:	3304      	adds	r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4618      	mov	r0, r3
 8008824:	f7f7 fe98 	bl	8000558 <__aeabi_f2d>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	481f      	ldr	r0, [pc, #124]	@ (80088ac <print_fault_summary+0x14c>)
 800882e:	f00b fa1b 	bl	8013c68 <iprintf>
				break;
 8008832:	e00d      	b.n	8008850 <print_fault_summary+0xf0>
			default:
				printf("%.2f?", fault_log[i].fault_value);
 8008834:	4a19      	ldr	r2, [pc, #100]	@ (800889c <print_fault_summary+0x13c>)
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	4413      	add	r3, r2
 800883c:	3304      	adds	r3, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f7f7 fe89 	bl	8000558 <__aeabi_f2d>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4819      	ldr	r0, [pc, #100]	@ (80088b0 <print_fault_summary+0x150>)
 800884c:	f00b fa0c 	bl	8013c68 <iprintf>
			}

			// Add separator or newline
			count++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]
			if (count % 4 == 0) { // Four entries per line
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d103      	bne.n	8008868 <print_fault_summary+0x108>
				printf("\n");
 8008860:	200a      	movs	r0, #10
 8008862:	f00b fa13 	bl	8013c8c <putchar>
 8008866:	e002      	b.n	800886e <print_fault_summary+0x10e>
			} else {
				printf("; ");
 8008868:	4812      	ldr	r0, [pc, #72]	@ (80088b4 <print_fault_summary+0x154>)
 800886a:	f00b f9fd 	bl	8013c68 <iprintf>
	for (int i = 0; i < MAX_FAULT_ENTRIES; i++) {
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	3301      	adds	r3, #1
 8008872:	60bb      	str	r3, [r7, #8]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b13      	cmp	r3, #19
 8008878:	dd85      	ble.n	8008786 <print_fault_summary+0x26>
			}
		}
	}

	// Ensure we end with a newline
	if (count % 4 != 0) {
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <print_fault_summary+0x12a>
		printf("\n");
 8008884:	200a      	movs	r0, #10
 8008886:	f00b fa01 	bl	8013c8c <putchar>
	}
	}
}
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20001e00 	.word	0x20001e00
 8008894:	08017758 	.word	0x08017758
 8008898:	0801776c 	.word	0x0801776c
 800889c:	20001cc0 	.word	0x20001cc0
 80088a0:	cccccccd 	.word	0xcccccccd
 80088a4:	0801777c 	.word	0x0801777c
 80088a8:	0801778c 	.word	0x0801778c
 80088ac:	08017794 	.word	0x08017794
 80088b0:	0801779c 	.word	0x0801779c
 80088b4:	080177a4 	.word	0x080177a4

080088b8 <populateIC>:

void populateIC(cell_asic *IC, uint8_t tIC) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
	uint32_t timingshits = HAL_GetTick();
 80088c4:	f002 fb54 	bl	800af70 <HAL_GetTick>
 80088c8:	6178      	str	r0, [r7, #20]
	adBms6830_start_adc_cell_voltage_measurment(tIC);
 80088ca:	78fb      	ldrb	r3, [r7, #3]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe f9f1 	bl	8006cb4 <adBms6830_start_adc_cell_voltage_measurment>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 80088d2:	f002 fb4d 	bl	800af70 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	4619      	mov	r1, r3
 80088de:	4839      	ldr	r0, [pc, #228]	@ (80089c4 <populateIC+0x10c>)
 80088e0:	f00b f9c2 	bl	8013c68 <iprintf>

	Delay_ms(8); // ADCs are updated at their conversion rate is 8ms
 80088e4:	2008      	movs	r0, #8
 80088e6:	f7fe fc2f 	bl	8007148 <Delay_ms>
	timingshits = HAL_GetTick();
 80088ea:	f002 fb41 	bl	800af70 <HAL_GetTick>
 80088ee:	6178      	str	r0, [r7, #20]
	adBms6830_read_cell_voltages(tIC, &IC[0]);
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe f9f3 	bl	8006ce0 <adBms6830_read_cell_voltages>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 80088fa:	f002 fb39 	bl	800af70 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	4619      	mov	r1, r3
 8008906:	482f      	ldr	r0, [pc, #188]	@ (80089c4 <populateIC+0x10c>)
 8008908:	f00b f9ae 	bl	8013c68 <iprintf>

	int c_fault = user_adBms6830_cellFault(tIC, &IC[0]);
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f85f 	bl	80089d4 <user_adBms6830_cellFault>
 8008916:	6138      	str	r0, [r7, #16]
	if (c_fault != 0) {
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <populateIC+0x6e>
		cell_fault = c_fault;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	4b29      	ldr	r3, [pc, #164]	@ (80089c8 <populateIC+0x110>)
 8008924:	701a      	strb	r2, [r3, #0]
	}
	Delay_ms(8);
 8008926:	2008      	movs	r0, #8
 8008928:	f7fe fc0e 	bl	8007148 <Delay_ms>
	timingshits = HAL_GetTick();
 800892c:	f002 fb20 	bl	800af70 <HAL_GetTick>
 8008930:	6178      	str	r0, [r7, #20]
	adBms6830_start_aux_voltage_measurment(tIC, &IC[0]);
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe fa28 	bl	8006d8c <adBms6830_start_aux_voltage_measurment>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 800893c:	f002 fb18 	bl	800af70 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	4619      	mov	r1, r3
 8008948:	481e      	ldr	r0, [pc, #120]	@ (80089c4 <populateIC+0x10c>)
 800894a:	f00b f98d 	bl	8013c68 <iprintf>

	Delay_ms(8); // ADCs are updated at their conversion rate is 8ms
 800894e:	2008      	movs	r0, #8
 8008950:	f7fe fbfa 	bl	8007148 <Delay_ms>
	timingshits = HAL_GetTick();
 8008954:	f002 fb0c 	bl	800af70 <HAL_GetTick>
 8008958:	6178      	str	r0, [r7, #20]

	adBms6830_read_aux_voltages(tIC, &IC[0]);
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fa54 	bl	8006e0c <adBms6830_read_aux_voltages>
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 8008964:	f002 fb04 	bl	800af70 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	4619      	mov	r1, r3
 8008970:	4814      	ldr	r0, [pc, #80]	@ (80089c4 <populateIC+0x10c>)
 8008972:	f00b f979 	bl	8013c68 <iprintf>

	int t_fault = user_adBms6830_tempFault(tIC, &IC[0]);
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f908 	bl	8008b90 <user_adBms6830_tempFault>
 8008980:	60f8      	str	r0, [r7, #12]
	if (t_fault == 1) {
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d102      	bne.n	800898e <populateIC+0xd6>
		temp_fault = CELL_TEMP_FAULT;
 8008988:	2203      	movs	r2, #3
 800898a:	4b10      	ldr	r3, [pc, #64]	@ (80089cc <populateIC+0x114>)
 800898c:	701a      	strb	r2, [r3, #0]
	}

	timingshits = HAL_GetTick();
 800898e:	f002 faef 	bl	800af70 <HAL_GetTick>
 8008992:	6178      	str	r0, [r7, #20]
	// Current sensor data + fault
	uint8_t current_fault = getCurrentSensorData();
 8008994:	f000 faf4 	bl	8008f80 <getCurrentSensorData>
 8008998:	4603      	mov	r3, r0
 800899a:	72fb      	strb	r3, [r7, #11]
	if (current_fault != 0) {
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <populateIC+0xf0>
		current_sensor_fault = CURRENT_SENSOR_FAULT;
 80089a2:	2204      	movs	r2, #4
 80089a4:	4b0a      	ldr	r3, [pc, #40]	@ (80089d0 <populateIC+0x118>)
 80089a6:	701a      	strb	r2, [r3, #0]
		// printf("Current sensor fault detected\n");
	}
	if (PRINT_ON) printf("time to read once: %d", HAL_GetTick() - timingshits);
 80089a8:	f002 fae2 	bl	800af70 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	4619      	mov	r1, r3
 80089b4:	4803      	ldr	r0, [pc, #12]	@ (80089c4 <populateIC+0x10c>)
 80089b6:	f00b f957 	bl	8013c68 <iprintf>
}
 80089ba:	bf00      	nop
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	080177a8 	.word	0x080177a8
 80089c8:	20001c6a 	.word	0x20001c6a
 80089cc:	20001c6b 	.word	0x20001c6b
 80089d0:	20001c6c 	.word	0x20001c6c

080089d4 <user_adBms6830_cellFault>:

int user_adBms6830_cellFault(uint8_t tIC, cell_asic *IC) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
	int16_t temp;
	float voltage;
	float adjusted_voltage;

	lowest_cell = 100.0; // Initialize to a high value
 80089e4:	4b60      	ldr	r3, [pc, #384]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 80089e6:	4a61      	ldr	r2, [pc, #388]	@ (8008b6c <user_adBms6830_cellFault+0x198>)
 80089e8:	601a      	str	r2, [r3, #0]
	highest_cell = 0.0;  // Initialize to a low value
 80089ea:	4b61      	ldr	r3, [pc, #388]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

	for (uint8_t ic = 0; ic < tIC; ic++) {
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
 80089f6:	e0a2      	b.n	8008b3e <user_adBms6830_cellFault+0x16a>
		for (uint8_t index = 0; index < cell_count; index++) {
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]
 80089fc:	e096      	b.n	8008b2c <user_adBms6830_cellFault+0x158>
			temp = IC[ic].cell.c_codes[index];
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	7bba      	ldrb	r2, [r7, #14]
 8008a0e:	3210      	adds	r2, #16
 8008a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a14:	81bb      	strh	r3, [r7, #12]
			voltage = getVoltage(temp);
 8008a16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff f9cc 	bl	8007db8 <getVoltage>
 8008a20:	ed87 0a02 	vstr	s0, [r7, #8]

			// Adjust voltage based on current if current sensor is not faulted
			if (current_sensor_fault == 0) {
 8008a24:	4b53      	ldr	r3, [pc, #332]	@ (8008b74 <user_adBms6830_cellFault+0x1a0>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d12c      	bne.n	8008a86 <user_adBms6830_cellFault+0xb2>
				if (accy_status == READY_POWER) {
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4b51      	ldr	r3, [pc, #324]	@ (8008b78 <user_adBms6830_cellFault+0x1a4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d10e      	bne.n	8008a56 <user_adBms6830_cellFault+0x82>
					// When discharging, actual cell voltage is higher than measured
					adjusted_voltage = voltage + (current * cell_resistance);
 8008a38:	4b50      	ldr	r3, [pc, #320]	@ (8008b7c <user_adBms6830_cellFault+0x1a8>)
 8008a3a:	ed93 7a00 	vldr	s14, [r3]
 8008a3e:	4b50      	ldr	r3, [pc, #320]	@ (8008b80 <user_adBms6830_cellFault+0x1ac>)
 8008a40:	edd3 7a00 	vldr	s15, [r3]
 8008a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a48:	ed97 7a02 	vldr	s14, [r7, #8]
 8008a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a50:	edc7 7a04 	vstr	s15, [r7, #16]
 8008a54:	e019      	b.n	8008a8a <user_adBms6830_cellFault+0xb6>
				} else if (accy_status == CHARGE_POWER) {
 8008a56:	2302      	movs	r3, #2
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b47      	ldr	r3, [pc, #284]	@ (8008b78 <user_adBms6830_cellFault+0x1a4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d10e      	bne.n	8008a80 <user_adBms6830_cellFault+0xac>
					// When charging, actual cell voltage is lower than measured
					adjusted_voltage = voltage - (current * cell_resistance);
 8008a62:	4b46      	ldr	r3, [pc, #280]	@ (8008b7c <user_adBms6830_cellFault+0x1a8>)
 8008a64:	ed93 7a00 	vldr	s14, [r3]
 8008a68:	4b45      	ldr	r3, [pc, #276]	@ (8008b80 <user_adBms6830_cellFault+0x1ac>)
 8008a6a:	edd3 7a00 	vldr	s15, [r3]
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	ed97 7a02 	vldr	s14, [r7, #8]
 8008a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a7a:	edc7 7a04 	vstr	s15, [r7, #16]
 8008a7e:	e004      	b.n	8008a8a <user_adBms6830_cellFault+0xb6>
				} else {
					adjusted_voltage = voltage; // No adjustment needed
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	e001      	b.n	8008a8a <user_adBms6830_cellFault+0xb6>
				}
			} else {
				adjusted_voltage = voltage; // No adjustment if current sensor is faulted
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	613b      	str	r3, [r7, #16]
			}

			if (adjusted_voltage < lowest_cell) {
 8008a8a:	4b37      	ldr	r3, [pc, #220]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 8008a8c:	edd3 7a00 	vldr	s15, [r3]
 8008a90:	ed97 7a04 	vldr	s14, [r7, #16]
 8008a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9c:	d502      	bpl.n	8008aa4 <user_adBms6830_cellFault+0xd0>
				lowest_cell = adjusted_voltage;
 8008a9e:	4a32      	ldr	r2, [pc, #200]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6013      	str	r3, [r2, #0]
			}
			if (adjusted_voltage > highest_cell) {
 8008aa4:	4b32      	ldr	r3, [pc, #200]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 8008aa6:	edd3 7a00 	vldr	s15, [r3]
 8008aaa:	ed97 7a04 	vldr	s14, [r7, #16]
 8008aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab6:	dd02      	ble.n	8008abe <user_adBms6830_cellFault+0xea>
				highest_cell = adjusted_voltage;
 8008ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6013      	str	r3, [r2, #0]
			}

			// Check for under-voltage faults using adjusted voltage
			if (adjusted_voltage < UV_THRESHOLD) {
 8008abe:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8008ac2:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ace:	d50a      	bpl.n	8008ae6 <user_adBms6830_cellFault+0x112>
				error = CELL_UV_FAULT;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
				add_fault(ic, index, FAULT_TYPE_UV, adjusted_voltage);
 8008ad4:	7bb9      	ldrb	r1, [r7, #14]
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	ed97 0a04 	vldr	s0, [r7, #16]
 8008adc:	2201      	movs	r2, #1
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff fd3e 	bl	8008560 <add_fault>
 8008ae4:	e005      	b.n	8008af2 <user_adBms6830_cellFault+0x11e>
			} else {
				// Clear the UV fault if it exists
				clear_fault(ic, index, FAULT_TYPE_UV);
 8008ae6:	7bb9      	ldrb	r1, [r7, #14]
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2201      	movs	r2, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff fdd5 	bl	800869c <clear_fault>
			}

			// Check for over-voltage faults using adjusted voltage
			if (adjusted_voltage > OV_THRESHOLD) {
 8008af2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8008b84 <user_adBms6830_cellFault+0x1b0>
 8008af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8008afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b02:	dd0a      	ble.n	8008b1a <user_adBms6830_cellFault+0x146>
				error = CELL_OV_FAULT;
 8008b04:	2302      	movs	r3, #2
 8008b06:	617b      	str	r3, [r7, #20]
				add_fault(ic, index, FAULT_TYPE_OV, adjusted_voltage);
 8008b08:	7bb9      	ldrb	r1, [r7, #14]
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	ed97 0a04 	vldr	s0, [r7, #16]
 8008b10:	2202      	movs	r2, #2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff fd24 	bl	8008560 <add_fault>
 8008b18:	e005      	b.n	8008b26 <user_adBms6830_cellFault+0x152>
			} else {
				// Clear the OV fault if it exists
				clear_fault(ic, index, FAULT_TYPE_OV);
 8008b1a:	7bb9      	ldrb	r1, [r7, #14]
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff fdbb 	bl	800869c <clear_fault>
		for (uint8_t index = 0; index < cell_count; index++) {
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	73bb      	strb	r3, [r7, #14]
 8008b2c:	4b16      	ldr	r3, [pc, #88]	@ (8008b88 <user_adBms6830_cellFault+0x1b4>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	7bba      	ldrb	r2, [r7, #14]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	f4ff af63 	bcc.w	80089fe <user_adBms6830_cellFault+0x2a>
	for (uint8_t ic = 0; ic < tIC; ic++) {
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	73fb      	strb	r3, [r7, #15]
 8008b3e:	7bfa      	ldrb	r2, [r7, #15]
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	f4ff af58 	bcc.w	80089f8 <user_adBms6830_cellFault+0x24>
			}
		}
	}

	delta_cell = highest_cell - lowest_cell;
 8008b48:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <user_adBms6830_cellFault+0x19c>)
 8008b4a:	ed93 7a00 	vldr	s14, [r3]
 8008b4e:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <user_adBms6830_cellFault+0x194>)
 8008b50:	edd3 7a00 	vldr	s15, [r3]
 8008b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b58:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <user_adBms6830_cellFault+0x1b8>)
 8008b5a:	edc3 7a00 	vstr	s15, [r3]
	return error;
 8008b5e:	697b      	ldr	r3, [r7, #20]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20001c7c 	.word	0x20001c7c
 8008b6c:	42c80000 	.word	0x42c80000
 8008b70:	20001c80 	.word	0x20001c80
 8008b74:	20001c6c 	.word	0x20001c6c
 8008b78:	20001c70 	.word	0x20001c70
 8008b7c:	20001c74 	.word	0x20001c74
 8008b80:	20000048 	.word	0x20000048
 8008b84:	40866666 	.word	0x40866666
 8008b88:	20000044 	.word	0x20000044
 8008b8c:	20001c88 	.word	0x20001c88

08008b90 <user_adBms6830_tempFault>:

int user_adBms6830_tempFault(uint8_t tIC, cell_asic *IC) {
 8008b90:	b5b0      	push	{r4, r5, r7, lr}
 8008b92:	b08a      	sub	sp, #40	@ 0x28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
	int error = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t temp;
	float temperature;
	float V;

	lowest_temp = 1000.0; // Initialize to a high value
 8008ba0:	4b91      	ldr	r3, [pc, #580]	@ (8008de8 <user_adBms6830_tempFault+0x258>)
 8008ba2:	4a92      	ldr	r2, [pc, #584]	@ (8008dec <user_adBms6830_tempFault+0x25c>)
 8008ba4:	601a      	str	r2, [r3, #0]
	highest_temp = 0.0;   // Initialize to a low value
 8008ba6:	4b92      	ldr	r3, [pc, #584]	@ (8008df0 <user_adBms6830_tempFault+0x260>)
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
	float temp_sum = 0.0;
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	61bb      	str	r3, [r7, #24]
	int faulted_cell_count = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	623b      	str	r3, [r7, #32]

	for (uint8_t ic = 0; ic < tIC; ic++) {
 8008bb8:	2300      	movs	r3, #0
 8008bba:	77fb      	strb	r3, [r7, #31]
 8008bbc:	e0e4      	b.n	8008d88 <user_adBms6830_tempFault+0x1f8>
		for (uint8_t index = 0; index < cell_count; index++) {
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	77bb      	strb	r3, [r7, #30]
 8008bc2:	e0d8      	b.n	8008d76 <user_adBms6830_tempFault+0x1e6>
			if (ic * 10 + index + 1 == 55) {
 8008bc4:	7ffa      	ldrb	r2, [r7, #31]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	461a      	mov	r2, r3
 8008bd0:	7fbb      	ldrb	r3, [r7, #30]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	2b36      	cmp	r3, #54	@ 0x36
 8008bd6:	f000 80ca 	beq.w	8008d6e <user_adBms6830_tempFault+0x1de>
				continue;
			}

			temp = IC[ic].aux.a_codes[index];
 8008bda:	7ffb      	ldrb	r3, [r7, #31]
 8008bdc:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8008be0:	fb02 f303 	mul.w	r3, r2, r3
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	4413      	add	r3, r2
 8008be8:	7fba      	ldrb	r2, [r7, #30]
 8008bea:	3250      	adds	r2, #80	@ 0x50
 8008bec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008bf0:	82fb      	strh	r3, [r7, #22]
			V = getVoltage(temp);
 8008bf2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff f8de 	bl	8007db8 <getVoltage>
 8008bfc:	ed87 0a04 	vstr	s0, [r7, #16]
			temperature = -225.6985 * (V * V * V) + 1310.5937 * (V * V)
 8008c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c10:	ee17 0a90 	vmov	r0, s15
 8008c14:	f7f7 fca0 	bl	8000558 <__aeabi_f2d>
 8008c18:	a36b      	add	r3, pc, #428	@ (adr r3, 8008dc8 <user_adBms6830_tempFault+0x238>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fcf3 	bl	8000608 <__aeabi_dmul>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4614      	mov	r4, r2
 8008c28:	461d      	mov	r5, r3
 8008c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c32:	ee17 0a90 	vmov	r0, s15
 8008c36:	f7f7 fc8f 	bl	8000558 <__aeabi_f2d>
 8008c3a:	a365      	add	r3, pc, #404	@ (adr r3, 8008dd0 <user_adBms6830_tempFault+0x240>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fce2 	bl	8000608 <__aeabi_dmul>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 fb26 	bl	800029c <__adddf3>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	461d      	mov	r5, r3
																+ -2594.7697 * V + 1767.8260;
 8008c58:	6938      	ldr	r0, [r7, #16]
 8008c5a:	f7f7 fc7d 	bl	8000558 <__aeabi_f2d>
 8008c5e:	a35e      	add	r3, pc, #376	@ (adr r3, 8008dd8 <user_adBms6830_tempFault+0x248>)
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f7f7 fcd0 	bl	8000608 <__aeabi_dmul>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	f7f7 fb14 	bl	800029c <__adddf3>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	a358      	add	r3, pc, #352	@ (adr r3, 8008de0 <user_adBms6830_tempFault+0x250>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fb0b 	bl	800029c <__adddf3>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
			temperature = -225.6985 * (V * V * V) + 1310.5937 * (V * V)
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f7f7 ffb3 	bl	8000bf8 <__aeabi_d2f>
 8008c92:	4603      	mov	r3, r0
 8008c94:	60fb      	str	r3, [r7, #12]

			// Check for temperature faults
			if (temperature > TEMP_LIMIT || temperature < LOWER_TEMP_LIMIT) {
 8008c96:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8008df4 <user_adBms6830_tempFault+0x264>
 8008c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	dc08      	bgt.n	8008cba <user_adBms6830_tempFault+0x12a>
 8008ca8:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8008cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb8:	d510      	bpl.n	8008cdc <user_adBms6830_tempFault+0x14c>
				faulted_cell_count++;
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	623b      	str	r3, [r7, #32]
				if (faulted_cell_count > MAX_ALLOWED_TEMP_FAULTS) {
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	2b0a      	cmp	r3, #10
 8008cc4:	dd54      	ble.n	8008d70 <user_adBms6830_tempFault+0x1e0>
					error = 1;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
					add_fault(ic, index, FAULT_TYPE_TEMP, temperature);
 8008cca:	7fb9      	ldrb	r1, [r7, #30]
 8008ccc:	7ffb      	ldrb	r3, [r7, #31]
 8008cce:	ed97 0a03 	vldr	s0, [r7, #12]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7ff fc43 	bl	8008560 <add_fault>
				if (faulted_cell_count > MAX_ALLOWED_TEMP_FAULTS) {
 8008cda:	e049      	b.n	8008d70 <user_adBms6830_tempFault+0x1e0>
				}
			} else {


				if (temperature < lowest_temp) {
 8008cdc:	4b42      	ldr	r3, [pc, #264]	@ (8008de8 <user_adBms6830_tempFault+0x258>)
 8008cde:	edd3 7a00 	vldr	s15, [r3]
 8008ce2:	ed97 7a03 	vldr	s14, [r7, #12]
 8008ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cee:	d511      	bpl.n	8008d14 <user_adBms6830_tempFault+0x184>
					lowest_temp_ID = ic * 10 + index + 1;
 8008cf0:	7ffa      	ldrb	r2, [r7, #31]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	7fbb      	ldrb	r3, [r7, #30]
 8008cfe:	4413      	add	r3, r2
 8008d00:	3301      	adds	r3, #1
 8008d02:	4a3d      	ldr	r2, [pc, #244]	@ (8008df8 <user_adBms6830_tempFault+0x268>)
 8008d04:	6013      	str	r3, [r2, #0]
					if (lowest_temp_ID != 11)
 8008d06:	4b3c      	ldr	r3, [pc, #240]	@ (8008df8 <user_adBms6830_tempFault+0x268>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b0b      	cmp	r3, #11
 8008d0c:	d002      	beq.n	8008d14 <user_adBms6830_tempFault+0x184>
						lowest_temp = temperature;
 8008d0e:	4a36      	ldr	r2, [pc, #216]	@ (8008de8 <user_adBms6830_tempFault+0x258>)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6013      	str	r3, [r2, #0]
				}
				if (temperature > highest_temp) {
 8008d14:	4b36      	ldr	r3, [pc, #216]	@ (8008df0 <user_adBms6830_tempFault+0x260>)
 8008d16:	edd3 7a00 	vldr	s15, [r3]
 8008d1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d26:	dd11      	ble.n	8008d4c <user_adBms6830_tempFault+0x1bc>
					highest_temp_ID = ic * 10 + index + 1;
 8008d28:	7ffa      	ldrb	r2, [r7, #31]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	461a      	mov	r2, r3
 8008d34:	7fbb      	ldrb	r3, [r7, #30]
 8008d36:	4413      	add	r3, r2
 8008d38:	3301      	adds	r3, #1
 8008d3a:	4a30      	ldr	r2, [pc, #192]	@ (8008dfc <user_adBms6830_tempFault+0x26c>)
 8008d3c:	6013      	str	r3, [r2, #0]
					if (highest_temp_ID != 45)
 8008d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8008dfc <user_adBms6830_tempFault+0x26c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d44:	d002      	beq.n	8008d4c <user_adBms6830_tempFault+0x1bc>
						highest_temp = temperature;
 8008d46:	4a2a      	ldr	r2, [pc, #168]	@ (8008df0 <user_adBms6830_tempFault+0x260>)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6013      	str	r3, [r2, #0]
				}

				avg_temp += temperature;
 8008d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008d4e:	ed93 7a00 	vldr	s14, [r3]
 8008d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d5a:	4b29      	ldr	r3, [pc, #164]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008d5c:	edc3 7a00 	vstr	s15, [r3]


				// Clear the temperature fault if it exists
				clear_fault(ic, index, FAULT_TYPE_TEMP);
 8008d60:	7fb9      	ldrb	r1, [r7, #30]
 8008d62:	7ffb      	ldrb	r3, [r7, #31]
 8008d64:	2203      	movs	r2, #3
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff fc98 	bl	800869c <clear_fault>
 8008d6c:	e000      	b.n	8008d70 <user_adBms6830_tempFault+0x1e0>
				continue;
 8008d6e:	bf00      	nop
		for (uint8_t index = 0; index < cell_count; index++) {
 8008d70:	7fbb      	ldrb	r3, [r7, #30]
 8008d72:	3301      	adds	r3, #1
 8008d74:	77bb      	strb	r3, [r7, #30]
 8008d76:	4b23      	ldr	r3, [pc, #140]	@ (8008e04 <user_adBms6830_tempFault+0x274>)
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	7fba      	ldrb	r2, [r7, #30]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	f4ff af21 	bcc.w	8008bc4 <user_adBms6830_tempFault+0x34>
	for (uint8_t ic = 0; ic < tIC; ic++) {
 8008d82:	7ffb      	ldrb	r3, [r7, #31]
 8008d84:	3301      	adds	r3, #1
 8008d86:	77fb      	strb	r3, [r7, #31]
 8008d88:	7ffa      	ldrb	r2, [r7, #31]
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	f4ff af16 	bcc.w	8008bbe <user_adBms6830_tempFault+0x2e>
			}
		}
	}

	avg_temp /= (tIC * cell_count) - faulted_cell_count;
 8008d92:	4b1b      	ldr	r3, [pc, #108]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008d94:	edd3 6a00 	vldr	s13, [r3]
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008e04 <user_adBms6830_tempFault+0x274>)
 8008d9c:	7812      	ldrb	r2, [r2, #0]
 8008d9e:	fb03 f202 	mul.w	r2, r3, r2
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db2:	4b13      	ldr	r3, [pc, #76]	@ (8008e00 <user_adBms6830_tempFault+0x270>)
 8008db4:	edc3 7a00 	vstr	s15, [r3]
	return error;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3728      	adds	r7, #40	@ 0x28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	f3af 8000 	nop.w
 8008dc8:	1cac0831 	.word	0x1cac0831
 8008dcc:	c06c365a 	.word	0xc06c365a
 8008dd0:	f2e48e8a 	.word	0xf2e48e8a
 8008dd4:	40947a5f 	.word	0x40947a5f
 8008dd8:	161e4f76 	.word	0x161e4f76
 8008ddc:	c0a4458a 	.word	0xc0a4458a
 8008de0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008de4:	409b9f4d 	.word	0x409b9f4d
 8008de8:	20001c98 	.word	0x20001c98
 8008dec:	447a0000 	.word	0x447a0000
 8008df0:	20001c9c 	.word	0x20001c9c
 8008df4:	42700000 	.word	0x42700000
 8008df8:	20001ca0 	.word	0x20001ca0
 8008dfc:	20001ca4 	.word	0x20001ca4
 8008e00:	20001ca8 	.word	0x20001ca8
 8008e04:	20000044 	.word	0x20000044

08008e08 <user_adBms6830_setFaults>:

void user_adBms6830_setFaults(void) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
	if (cell_fault == CELL_UV_FAULT || cell_fault == CELL_OV_FAULT) {
 8008e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8008ef8 <user_adBms6830_setFaults+0xf0>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2201      	movs	r2, #1
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d004      	beq.n	8008e20 <user_adBms6830_setFaults+0x18>
 8008e16:	4b38      	ldr	r3, [pc, #224]	@ (8008ef8 <user_adBms6830_setFaults+0xf0>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d119      	bne.n	8008e54 <user_adBms6830_setFaults+0x4c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8008e20:	2201      	movs	r2, #1
 8008e22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e26:	4835      	ldr	r0, [pc, #212]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008e28:	f004 fe58 	bl	800dadc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2108      	movs	r1, #8
 8008e30:	4833      	ldr	r0, [pc, #204]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e32:	f004 fe53 	bl	800dadc <HAL_GPIO_WritePin>

		if (accy_status == CHARGE_POWER) {
 8008e36:	2302      	movs	r3, #2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b32      	ldr	r3, [pc, #200]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d121      	bne.n	8008e86 <user_adBms6830_setFaults+0x7e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008e42:	2200      	movs	r2, #0
 8008e44:	2104      	movs	r1, #4
 8008e46:	482e      	ldr	r0, [pc, #184]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e48:	f004 fe48 	bl	800dadc <HAL_GPIO_WritePin>
			is_charging = 0;
 8008e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	701a      	strb	r2, [r3, #0]
		if (accy_status == CHARGE_POWER) {
 8008e52:	e018      	b.n	8008e86 <user_adBms6830_setFaults+0x7e>
		}
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8008e54:	2200      	movs	r2, #0
 8008e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008e5a:	4828      	ldr	r0, [pc, #160]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008e5c:	f004 fe3e 	bl	800dadc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008e60:	2201      	movs	r2, #1
 8008e62:	2108      	movs	r1, #8
 8008e64:	4826      	ldr	r0, [pc, #152]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e66:	f004 fe39 	bl	800dadc <HAL_GPIO_WritePin>
		if (accy_status == CHARGE_POWER) {
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4b25      	ldr	r3, [pc, #148]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d107      	bne.n	8008e86 <user_adBms6830_setFaults+0x7e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008e76:	2201      	movs	r2, #1
 8008e78:	2104      	movs	r1, #4
 8008e7a:	4821      	ldr	r0, [pc, #132]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008e7c:	f004 fe2e 	bl	800dadc <HAL_GPIO_WritePin>
			is_charging = 1;
 8008e80:	4b21      	ldr	r3, [pc, #132]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (temp_fault == CELL_TEMP_FAULT) {
 8008e86:	4b21      	ldr	r3, [pc, #132]	@ (8008f0c <user_adBms6830_setFaults+0x104>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	2203      	movs	r2, #3
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d118      	bne.n	8008ec2 <user_adBms6830_setFaults+0xba>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8008e90:	2201      	movs	r2, #1
 8008e92:	2102      	movs	r1, #2
 8008e94:	4819      	ldr	r0, [pc, #100]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008e96:	f004 fe21 	bl	800dadc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2108      	movs	r1, #8
 8008e9e:	4818      	ldr	r0, [pc, #96]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008ea0:	f004 fe1c 	bl	800dadc <HAL_GPIO_WritePin>

		if (accy_status == CHARGE_POWER) {
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	4b16      	ldr	r3, [pc, #88]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d120      	bne.n	8008ef2 <user_adBms6830_setFaults+0xea>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); // TODO: Change to PB3 on next iteration
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	4812      	ldr	r0, [pc, #72]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008eb6:	f004 fe11 	bl	800dadc <HAL_GPIO_WritePin>
			is_charging = 0;
 8008eba:	4b13      	ldr	r3, [pc, #76]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
		if (accy_status == CHARGE_POWER) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
			is_charging = 1;
		}
	}
}
 8008ec0:	e017      	b.n	8008ef2 <user_adBms6830_setFaults+0xea>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2102      	movs	r1, #2
 8008ec6:	480d      	ldr	r0, [pc, #52]	@ (8008efc <user_adBms6830_setFaults+0xf4>)
 8008ec8:	f004 fe08 	bl	800dadc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008ecc:	2201      	movs	r2, #1
 8008ece:	2108      	movs	r1, #8
 8008ed0:	480b      	ldr	r0, [pc, #44]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008ed2:	f004 fe03 	bl	800dadc <HAL_GPIO_WritePin>
		if (accy_status == CHARGE_POWER) {
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4b0a      	ldr	r3, [pc, #40]	@ (8008f04 <user_adBms6830_setFaults+0xfc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d107      	bne.n	8008ef2 <user_adBms6830_setFaults+0xea>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); // TODO: Change to PB3 on next iteration
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	2104      	movs	r1, #4
 8008ee6:	4806      	ldr	r0, [pc, #24]	@ (8008f00 <user_adBms6830_setFaults+0xf8>)
 8008ee8:	f004 fdf8 	bl	800dadc <HAL_GPIO_WritePin>
			is_charging = 1;
 8008eec:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <user_adBms6830_setFaults+0x100>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20001c6a 	.word	0x20001c6a
 8008efc:	48000400 	.word	0x48000400
 8008f00:	48000800 	.word	0x48000800
 8008f04:	20001c70 	.word	0x20001c70
 8008f08:	20001c8c 	.word	0x20001c8c
 8008f0c:	20001c6b 	.word	0x20001c6b

08008f10 <user_adBms6830_getAccyStatus>:

void user_adBms6830_getAccyStatus(void) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
	GPIO_PinState charge_power = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8008f16:	2120      	movs	r1, #32
 8008f18:	4816      	ldr	r0, [pc, #88]	@ (8008f74 <user_adBms6830_getAccyStatus+0x64>)
 8008f1a:	f004 fdc7 	bl	800daac <HAL_GPIO_ReadPin>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState ready_power = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8008f22:	2140      	movs	r1, #64	@ 0x40
 8008f24:	4813      	ldr	r0, [pc, #76]	@ (8008f74 <user_adBms6830_getAccyStatus+0x64>)
 8008f26:	f004 fdc1 	bl	800daac <HAL_GPIO_ReadPin>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71bb      	strb	r3, [r7, #6]

	if (charge_power == GPIO_PIN_SET && ready_power == GPIO_PIN_SET) {
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d107      	bne.n	8008f44 <user_adBms6830_getAccyStatus+0x34>
 8008f34:	79bb      	ldrb	r3, [r7, #6]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d104      	bne.n	8008f44 <user_adBms6830_getAccyStatus+0x34>
		accy_status = -1;
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f40:	601a      	str	r2, [r3, #0]
	} else if (ready_power == GPIO_PIN_SET) {
		accy_status = READY_POWER;
	} else {
		accy_status = 0;
	}
}
 8008f42:	e012      	b.n	8008f6a <user_adBms6830_getAccyStatus+0x5a>
	} else if (charge_power == GPIO_PIN_SET) {
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d104      	bne.n	8008f54 <user_adBms6830_getAccyStatus+0x44>
		accy_status = CHARGE_POWER;
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f50:	601a      	str	r2, [r3, #0]
}
 8008f52:	e00a      	b.n	8008f6a <user_adBms6830_getAccyStatus+0x5a>
	} else if (ready_power == GPIO_PIN_SET) {
 8008f54:	79bb      	ldrb	r3, [r7, #6]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d104      	bne.n	8008f64 <user_adBms6830_getAccyStatus+0x54>
		accy_status = READY_POWER;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4b06      	ldr	r3, [pc, #24]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f60:	601a      	str	r2, [r3, #0]
}
 8008f62:	e002      	b.n	8008f6a <user_adBms6830_getAccyStatus+0x5a>
		accy_status = 0;
 8008f64:	4b04      	ldr	r3, [pc, #16]	@ (8008f78 <user_adBms6830_getAccyStatus+0x68>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	48000800 	.word	0x48000800
 8008f78:	20001c70 	.word	0x20001c70
 8008f7c:	00000000 	.word	0x00000000

08008f80 <getCurrentSensorData>:
 * @brief Get current sensor data with hysteresis to prevent jumps between ranges
 *
 * This function reads from two ADCs that measure current at different ranges,
 * then applies hysteresis logic to smoothly transition between ranges.
 */
uint8_t getCurrentSensorData(void) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
	int adc1Value = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
	int adc2Value = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61bb      	str	r3, [r7, #24]
	static int current_range = 0;                 // 0: low range, 1: high range
	static const float LOW_TO_HIGH_THRESHOLD = 29.0; // Threshold to switch from low to high
	static const float HIGH_TO_LOW_THRESHOLD = 24.0; // Threshold to switch from high to low

// Start ADC conversions
	HAL_ADC_Start(&hadc1);
 8008f8e:	4872      	ldr	r0, [pc, #456]	@ (8009158 <getCurrentSensorData+0x1d8>)
 8008f90:	f002 fc04 	bl	800b79c <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8008f94:	4871      	ldr	r0, [pc, #452]	@ (800915c <getCurrentSensorData+0x1dc>)
 8008f96:	f002 fc01 	bl	800b79c <HAL_ADC_Start>

// Get ADC values with timeout
	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8008f9a:	210a      	movs	r1, #10
 8008f9c:	486e      	ldr	r0, [pc, #440]	@ (8009158 <getCurrentSensorData+0x1d8>)
 8008f9e:	f002 fce1 	bl	800b964 <HAL_ADC_PollForConversion>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <getCurrentSensorData+0x32>
		adc1Value = HAL_ADC_GetValue(&hadc1);
 8008fa8:	486b      	ldr	r0, [pc, #428]	@ (8009158 <getCurrentSensorData+0x1d8>)
 8008faa:	f002 fde1 	bl	800bb70 <HAL_ADC_GetValue>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	61fb      	str	r3, [r7, #28]
	}

	if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 8008fb2:	210a      	movs	r1, #10
 8008fb4:	4869      	ldr	r0, [pc, #420]	@ (800915c <getCurrentSensorData+0x1dc>)
 8008fb6:	f002 fcd5 	bl	800b964 <HAL_ADC_PollForConversion>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d104      	bne.n	8008fca <getCurrentSensorData+0x4a>
		adc2Value = HAL_ADC_GetValue(&hadc2);
 8008fc0:	4866      	ldr	r0, [pc, #408]	@ (800915c <getCurrentSensorData+0x1dc>)
 8008fc2:	f002 fdd5 	bl	800bb70 <HAL_ADC_GetValue>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	61bb      	str	r3, [r7, #24]
	}

// Convert ADC values to voltages
	float v1 = getCurrentVoltage(adc1Value);
 8008fca:	69f8      	ldr	r0, [r7, #28]
 8008fcc:	f000 f8dc 	bl	8009188 <getCurrentVoltage>
 8008fd0:	ed87 0a05 	vstr	s0, [r7, #20]
	float v2 = getCurrentVoltage(adc2Value);
 8008fd4:	69b8      	ldr	r0, [r7, #24]
 8008fd6:	f000 f8d7 	bl	8009188 <getCurrentVoltage>
 8008fda:	ed87 0a04 	vstr	s0, [r7, #16]

// Calculate current from both ranges
	float current_high = 159.6343 * v2 - 401.4685;
 8008fde:	6938      	ldr	r0, [r7, #16]
 8008fe0:	f7f7 faba 	bl	8000558 <__aeabi_f2d>
 8008fe4:	a354      	add	r3, pc, #336	@ (adr r3, 8009138 <getCurrentSensorData+0x1b8>)
 8008fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fea:	f7f7 fb0d 	bl	8000608 <__aeabi_dmul>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	a352      	add	r3, pc, #328	@ (adr r3, 8009140 <getCurrentSensorData+0x1c0>)
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f7f7 f94c 	bl	8000298 <__aeabi_dsub>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4610      	mov	r0, r2
 8009006:	4619      	mov	r1, r3
 8009008:	f7f7 fdf6 	bl	8000bf8 <__aeabi_d2f>
 800900c:	4603      	mov	r3, r0
 800900e:	60fb      	str	r3, [r7, #12]
	float current_low = 13.2615 * v1 - 34.3672;
 8009010:	6978      	ldr	r0, [r7, #20]
 8009012:	f7f7 faa1 	bl	8000558 <__aeabi_f2d>
 8009016:	a34c      	add	r3, pc, #304	@ (adr r3, 8009148 <getCurrentSensorData+0x1c8>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 faf4 	bl	8000608 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	a349      	add	r3, pc, #292	@ (adr r3, 8009150 <getCurrentSensorData+0x1d0>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f933 	bl	8000298 <__aeabi_dsub>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4610      	mov	r0, r2
 8009038:	4619      	mov	r1, r3
 800903a:	f7f7 fddd 	bl	8000bf8 <__aeabi_d2f>
 800903e:	4603      	mov	r3, r0
 8009040:	60bb      	str	r3, [r7, #8]

	if (fabs(current_high) > 400.0) {
 8009042:	edd7 7a03 	vldr	s15, [r7, #12]
 8009046:	eef0 7ae7 	vabs.f32	s15, s15
 800904a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009160 <getCurrentSensorData+0x1e0>
 800904e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009056:	dd01      	ble.n	800905c <getCurrentSensorData+0xdc>
		return CURRENT_SENSOR_FAULT; // High current sensor out of range
 8009058:	2304      	movs	r3, #4
 800905a:	e068      	b.n	800912e <getCurrentSensorData+0x1ae>
	}

// Apply hysteresis logic to determine range
	float abs_low = fabs(current_low);
 800905c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009060:	eef0 7ae7 	vabs.f32	s15, s15
 8009064:	edc7 7a01 	vstr	s15, [r7, #4]

	if (current_range == 0 && abs_low > LOW_TO_HIGH_THRESHOLD) {
 8009068:	4b3e      	ldr	r3, [pc, #248]	@ (8009164 <getCurrentSensorData+0x1e4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10d      	bne.n	800908c <getCurrentSensorData+0x10c>
 8009070:	4b3d      	ldr	r3, [pc, #244]	@ (8009168 <getCurrentSensorData+0x1e8>)
 8009072:	edd3 7a00 	vldr	s15, [r3]
 8009076:	ed97 7a01 	vldr	s14, [r7, #4]
 800907a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	dd03      	ble.n	800908c <getCurrentSensorData+0x10c>
		// Switch from low range to high range when current exceeds threshold
		current_range = 1;
 8009084:	4b37      	ldr	r3, [pc, #220]	@ (8009164 <getCurrentSensorData+0x1e4>)
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e010      	b.n	80090ae <getCurrentSensorData+0x12e>
	} else if (current_range == 1 && abs_low < HIGH_TO_LOW_THRESHOLD) {
 800908c:	4b35      	ldr	r3, [pc, #212]	@ (8009164 <getCurrentSensorData+0x1e4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d10c      	bne.n	80090ae <getCurrentSensorData+0x12e>
 8009094:	4b35      	ldr	r3, [pc, #212]	@ (800916c <getCurrentSensorData+0x1ec>)
 8009096:	edd3 7a00 	vldr	s15, [r3]
 800909a:	ed97 7a01 	vldr	s14, [r7, #4]
 800909e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d502      	bpl.n	80090ae <getCurrentSensorData+0x12e>
		// Switch from high range to low range when current drops below threshold
		current_range = 0;
 80090a8:	4b2e      	ldr	r3, [pc, #184]	@ (8009164 <getCurrentSensorData+0x1e4>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	601a      	str	r2, [r3, #0]
	}

// Select current value based on range with appropriate sign
	if (current_range == 0) {
 80090ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009164 <getCurrentSensorData+0x1e4>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d111      	bne.n	80090da <getCurrentSensorData+0x15a>
		// Use low range value
		if (accy_status == CHARGE_POWER) {
 80090b6:	2302      	movs	r3, #2
 80090b8:	461a      	mov	r2, r3
 80090ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009170 <getCurrentSensorData+0x1f0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d107      	bne.n	80090d2 <getCurrentSensorData+0x152>
			current = -current_low;
 80090c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80090c6:	eef1 7a67 	vneg.f32	s15, s15
 80090ca:	4b2a      	ldr	r3, [pc, #168]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090cc:	edc3 7a00 	vstr	s15, [r3]
 80090d0:	e014      	b.n	80090fc <getCurrentSensorData+0x17c>
		} else {
			current = current_low;
 80090d2:	4a28      	ldr	r2, [pc, #160]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	e010      	b.n	80090fc <getCurrentSensorData+0x17c>
		}
	} else {
		// Use high range value
		if (accy_status == CHARGE_POWER) {
 80090da:	2302      	movs	r3, #2
 80090dc:	461a      	mov	r2, r3
 80090de:	4b24      	ldr	r3, [pc, #144]	@ (8009170 <getCurrentSensorData+0x1f0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d107      	bne.n	80090f6 <getCurrentSensorData+0x176>
			current = -current_high;
 80090e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80090ea:	eef1 7a67 	vneg.f32	s15, s15
 80090ee:	4b21      	ldr	r3, [pc, #132]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090f0:	edc3 7a00 	vstr	s15, [r3]
 80090f4:	e002      	b.n	80090fc <getCurrentSensorData+0x17c>
		} else {
			current = current_high;
 80090f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009174 <getCurrentSensorData+0x1f4>)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6013      	str	r3, [r2, #0]
		}
	}
	if (PRINT_ON) {
	printf("Current Sensor Low Current: ");
 80090fc:	481e      	ldr	r0, [pc, #120]	@ (8009178 <getCurrentSensorData+0x1f8>)
 80090fe:	f00a fdb3 	bl	8013c68 <iprintf>
	printFloat(current_low);
 8009102:	ed97 0a02 	vldr	s0, [r7, #8]
 8009106:	f000 f873 	bl	80091f0 <printFloat>
	printf("Current Sensor High Current: ");
 800910a:	481c      	ldr	r0, [pc, #112]	@ (800917c <getCurrentSensorData+0x1fc>)
 800910c:	f00a fdac 	bl	8013c68 <iprintf>
	printFloat(current_high);
 8009110:	ed97 0a03 	vldr	s0, [r7, #12]
 8009114:	f000 f86c 	bl	80091f0 <printFloat>
	printf("Selected Current: ");
 8009118:	4819      	ldr	r0, [pc, #100]	@ (8009180 <getCurrentSensorData+0x200>)
 800911a:	f00a fda5 	bl	8013c68 <iprintf>
	printFloat(current);
 800911e:	4b15      	ldr	r3, [pc, #84]	@ (8009174 <getCurrentSensorData+0x1f4>)
 8009120:	edd3 7a00 	vldr	s15, [r3]
 8009124:	eeb0 0a67 	vmov.f32	s0, s15
 8009128:	f000 f862 	bl	80091f0 <printFloat>
	}

	return 0; // Return 0 to indicate success
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3720      	adds	r7, #32
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	2f837b4a 	.word	0x2f837b4a
 800913c:	4063f44c 	.word	0x4063f44c
 8009140:	f9db22d1 	.word	0xf9db22d1
 8009144:	4079177e 	.word	0x4079177e
 8009148:	53f7ced9 	.word	0x53f7ced9
 800914c:	402a85e3 	.word	0x402a85e3
 8009150:	68db8bac 	.word	0x68db8bac
 8009154:	40412f00 	.word	0x40412f00
 8009158:	20001e14 	.word	0x20001e14
 800915c:	20001e80 	.word	0x20001e80
 8009160:	43c80000 	.word	0x43c80000
 8009164:	20001e04 	.word	0x20001e04
 8009168:	08017b44 	.word	0x08017b44
 800916c:	08017b48 	.word	0x08017b48
 8009170:	20001c70 	.word	0x20001c70
 8009174:	20001c74 	.word	0x20001c74
 8009178:	080177c0 	.word	0x080177c0
 800917c:	080177e0 	.word	0x080177e0
 8009180:	08017800 	.word	0x08017800
 8009184:	00000000 	.word	0x00000000

08009188 <getCurrentVoltage>:

float getCurrentVoltage(int value) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	return 0.001444863364 * (float) value + 0.110218620256712;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800919a:	ee17 0a90 	vmov	r0, s15
 800919e:	f7f7 f9db 	bl	8000558 <__aeabi_f2d>
 80091a2:	a30f      	add	r3, pc, #60	@ (adr r3, 80091e0 <getCurrentVoltage+0x58>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 fa2e 	bl	8000608 <__aeabi_dmul>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4610      	mov	r0, r2
 80091b2:	4619      	mov	r1, r3
 80091b4:	a30c      	add	r3, pc, #48	@ (adr r3, 80091e8 <getCurrentVoltage+0x60>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f86f 	bl	800029c <__adddf3>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4610      	mov	r0, r2
 80091c4:	4619      	mov	r1, r3
 80091c6:	f7f7 fd17 	bl	8000bf8 <__aeabi_d2f>
 80091ca:	4603      	mov	r3, r0
 80091cc:	ee07 3a90 	vmov	s15, r3
}
 80091d0:	eeb0 0a67 	vmov.f32	s0, s15
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	f3af 8000 	nop.w
 80091e0:	3950feba 	.word	0x3950feba
 80091e4:	3f57ac32 	.word	0x3f57ac32
 80091e8:	9969aea6 	.word	0x9969aea6
 80091ec:	3fbc3749 	.word	0x3fbc3749

080091f0 <printFloat>:

void printFloat(float num) {
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	ed87 0a01 	vstr	s0, [r7, #4]
	int intPart = (int) num;
 80091fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80091fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009202:	ee17 3a90 	vmov	r3, s15
 8009206:	60fb      	str	r3, [r7, #12]
	int fracPart = (int) (fabs(num - intPart) * 10000 + 0.5f);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009212:	ed97 7a01 	vldr	s14, [r7, #4]
 8009216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800921a:	eef0 7ae7 	vabs.f32	s15, s15
 800921e:	ee17 0a90 	vmov	r0, s15
 8009222:	f7f7 f999 	bl	8000558 <__aeabi_f2d>
 8009226:	a312      	add	r3, pc, #72	@ (adr r3, 8009270 <printFloat+0x80>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f7 f9ec 	bl	8000608 <__aeabi_dmul>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4610      	mov	r0, r2
 8009236:	4619      	mov	r1, r3
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	4b0a      	ldr	r3, [pc, #40]	@ (8009268 <printFloat+0x78>)
 800923e:	f7f7 f82d 	bl	800029c <__adddf3>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	f7f7 fc8d 	bl	8000b68 <__aeabi_d2iz>
 800924e:	4603      	mov	r3, r0
 8009250:	60bb      	str	r3, [r7, #8]
	printf("%d.%04d\n", intPart, fracPart);
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	68f9      	ldr	r1, [r7, #12]
 8009256:	4805      	ldr	r0, [pc, #20]	@ (800926c <printFloat+0x7c>)
 8009258:	f00a fd06 	bl	8013c68 <iprintf>
}
 800925c:	bf00      	nop
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	f3af 8000 	nop.w
 8009268:	3fe00000 	.word	0x3fe00000
 800926c:	08017814 	.word	0x08017814
 8009270:	00000000 	.word	0x00000000
 8009274:	40c38800 	.word	0x40c38800

08009278 <getPackVoltage>:

// Function to get pack voltage and update lowest, highest, and average cell voltages
float getPackVoltage(int totalIC, cell_asic *ICs) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	float pack_voltage_sum = 0.0f;
 8009282:	f04f 0300 	mov.w	r3, #0
 8009286:	617b      	str	r3, [r7, #20]
	lowest_cell = 100.0f; // Initialize to a high value
 8009288:	4b31      	ldr	r3, [pc, #196]	@ (8009350 <getPackVoltage+0xd8>)
 800928a:	4a32      	ldr	r2, [pc, #200]	@ (8009354 <getPackVoltage+0xdc>)
 800928c:	601a      	str	r2, [r3, #0]
	highest_cell = 0.0f;  // Initialize to a low value
 800928e:	4b32      	ldr	r3, [pc, #200]	@ (8009358 <getPackVoltage+0xe0>)
 8009290:	f04f 0200 	mov.w	r2, #0
 8009294:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < totalIC; i++) {
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	e03d      	b.n	8009318 <getPackVoltage+0xa0>
		for (int j = 0; j < NUM_CELLS_PER_IC; j++) {
 800929c:	2300      	movs	r3, #0
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e034      	b.n	800930c <getPackVoltage+0x94>
			float cell_voltage = getVoltage(ICs[i].cell.c_codes[j]);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	4413      	add	r3, r2
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	3210      	adds	r2, #16
 80092b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe fd7d 	bl	8007db8 <getVoltage>
 80092be:	ed87 0a02 	vstr	s0, [r7, #8]
			pack_voltage_sum += cell_voltage;
 80092c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80092c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80092ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ce:	edc7 7a05 	vstr	s15, [r7, #20]
			if (cell_voltage < lowest_cell) {
 80092d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009350 <getPackVoltage+0xd8>)
 80092d4:	edd3 7a00 	vldr	s15, [r3]
 80092d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80092dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e4:	d502      	bpl.n	80092ec <getPackVoltage+0x74>
				lowest_cell = cell_voltage;
 80092e6:	4a1a      	ldr	r2, [pc, #104]	@ (8009350 <getPackVoltage+0xd8>)
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6013      	str	r3, [r2, #0]
			}
			if (cell_voltage > highest_cell) {
 80092ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009358 <getPackVoltage+0xe0>)
 80092ee:	edd3 7a00 	vldr	s15, [r3]
 80092f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80092f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fe:	dd02      	ble.n	8009306 <getPackVoltage+0x8e>
				highest_cell = cell_voltage;
 8009300:	4a15      	ldr	r2, [pc, #84]	@ (8009358 <getPackVoltage+0xe0>)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6013      	str	r3, [r2, #0]
		for (int j = 0; j < NUM_CELLS_PER_IC; j++) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b09      	cmp	r3, #9
 8009310:	ddc7      	ble.n	80092a2 <getPackVoltage+0x2a>
	for (int i = 0; i < totalIC; i++) {
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3301      	adds	r3, #1
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	dbbd      	blt.n	800929c <getPackVoltage+0x24>
			}
		}
	}
	avg_cell = pack_voltage_sum / (totalIC * NUM_CELLS_PER_IC);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009332:	edd7 6a05 	vldr	s13, [r7, #20]
 8009336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800933a:	4b08      	ldr	r3, [pc, #32]	@ (800935c <getPackVoltage+0xe4>)
 800933c:	edc3 7a00 	vstr	s15, [r3]

	return pack_voltage_sum;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
}
 8009346:	eeb0 0a67 	vmov.f32	s0, s15
 800934a:	3718      	adds	r7, #24
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20001c7c 	.word	0x20001c7c
 8009354:	42c80000 	.word	0x42c80000
 8009358:	20001c80 	.word	0x20001c80
 800935c:	20001c84 	.word	0x20001c84

08009360 <updateSOC>:

#define SOC_READ_TIMEOUT 30000 // wait time before it takes a SOC read based off settled voltage, in ms
uint32_t lastNonZeroCurrentTime = 0;
uint8_t waitingForSOCReinit = 0;

float updateSOC() {
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
	if (cell_fault != 0) {
 8009366:	4b7d      	ldr	r3, [pc, #500]	@ (800955c <updateSOC+0x1fc>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d006      	beq.n	800937c <updateSOC+0x1c>
		soc = 0.0f;
 800936e:	4b7c      	ldr	r3, [pc, #496]	@ (8009560 <updateSOC+0x200>)
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
		return soc;
 8009376:	4b7a      	ldr	r3, [pc, #488]	@ (8009560 <updateSOC+0x200>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	e0e8      	b.n	800954e <updateSOC+0x1ee>
	}


	soc = voltagetoSOC(avg_cell);
 800937c:	4b79      	ldr	r3, [pc, #484]	@ (8009564 <updateSOC+0x204>)
 800937e:	edd3 7a00 	vldr	s15, [r3]
 8009382:	eeb0 0a67 	vmov.f32	s0, s15
 8009386:	f000 fb0b 	bl	80099a0 <voltagetoSOC>
 800938a:	eef0 7a40 	vmov.f32	s15, s0
 800938e:	4b74      	ldr	r3, [pc, #464]	@ (8009560 <updateSOC+0x200>)
 8009390:	edc3 7a00 	vstr	s15, [r3]
	if (soc > 50) {
 8009394:	4b72      	ldr	r3, [pc, #456]	@ (8009560 <updateSOC+0x200>)
 8009396:	edd3 7a00 	vldr	s15, [r3]
 800939a:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8009568 <updateSOC+0x208>
 800939e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a6:	dd0c      	ble.n	80093c2 <updateSOC+0x62>
		soc = voltagetoSOC(highest_cell);
 80093a8:	4b70      	ldr	r3, [pc, #448]	@ (800956c <updateSOC+0x20c>)
 80093aa:	edd3 7a00 	vldr	s15, [r3]
 80093ae:	eeb0 0a67 	vmov.f32	s0, s15
 80093b2:	f000 faf5 	bl	80099a0 <voltagetoSOC>
 80093b6:	eef0 7a40 	vmov.f32	s15, s0
 80093ba:	4b69      	ldr	r3, [pc, #420]	@ (8009560 <updateSOC+0x200>)
 80093bc:	edc3 7a00 	vstr	s15, [r3]
 80093c0:	e015      	b.n	80093ee <updateSOC+0x8e>
	} else if (soc < 50) {
 80093c2:	4b67      	ldr	r3, [pc, #412]	@ (8009560 <updateSOC+0x200>)
 80093c4:	edd3 7a00 	vldr	s15, [r3]
 80093c8:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8009568 <updateSOC+0x208>
 80093cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d4:	d50b      	bpl.n	80093ee <updateSOC+0x8e>
		soc = voltagetoSOC(lowest_cell);
 80093d6:	4b66      	ldr	r3, [pc, #408]	@ (8009570 <updateSOC+0x210>)
 80093d8:	edd3 7a00 	vldr	s15, [r3]
 80093dc:	eeb0 0a67 	vmov.f32	s0, s15
 80093e0:	f000 fade 	bl	80099a0 <voltagetoSOC>
 80093e4:	eef0 7a40 	vmov.f32	s15, s0
 80093e8:	4b5d      	ldr	r3, [pc, #372]	@ (8009560 <updateSOC+0x200>)
 80093ea:	edc3 7a00 	vstr	s15, [r3]
	}

	uint32_t current_time = HAL_GetTick();
 80093ee:	f001 fdbf 	bl	800af70 <HAL_GetTick>
 80093f2:	60f8      	str	r0, [r7, #12]

	if (fabs(current) < REST_CURRENT_THRESHOLD) {
 80093f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009574 <updateSOC+0x214>)
 80093f6:	edd3 7a00 	vldr	s15, [r3]
 80093fa:	eef0 7ae7 	vabs.f32	s15, s15
 80093fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940a:	d50d      	bpl.n	8009428 <updateSOC+0xc8>
		if (!is_resting) {
 800940c:	4b5a      	ldr	r3, [pc, #360]	@ (8009578 <updateSOC+0x218>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	f083 0301 	eor.w	r3, r3, #1
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d009      	beq.n	800942e <updateSOC+0xce>
			is_resting = true;
 800941a:	4b57      	ldr	r3, [pc, #348]	@ (8009578 <updateSOC+0x218>)
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
			rest_start_time = current_time;
 8009420:	4a56      	ldr	r2, [pc, #344]	@ (800957c <updateSOC+0x21c>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	e002      	b.n	800942e <updateSOC+0xce>
		}
	} else {
		is_resting = false;
 8009428:	4b53      	ldr	r3, [pc, #332]	@ (8009578 <updateSOC+0x218>)
 800942a:	2200      	movs	r2, #0
 800942c:	701a      	strb	r2, [r3, #0]
	}

	if (is_resting && (current_time - rest_start_time > REST_DURATION_MS)) {
 800942e:	4b52      	ldr	r3, [pc, #328]	@ (8009578 <updateSOC+0x218>)
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d01e      	beq.n	8009474 <updateSOC+0x114>
 8009436:	4b51      	ldr	r3, [pc, #324]	@ (800957c <updateSOC+0x21c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	4a50      	ldr	r2, [pc, #320]	@ (8009580 <updateSOC+0x220>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d917      	bls.n	8009474 <updateSOC+0x114>
		soc = voltagetoSOC(avg_cell);
 8009444:	4b47      	ldr	r3, [pc, #284]	@ (8009564 <updateSOC+0x204>)
 8009446:	edd3 7a00 	vldr	s15, [r3]
 800944a:	eeb0 0a67 	vmov.f32	s0, s15
 800944e:	f000 faa7 	bl	80099a0 <voltagetoSOC>
 8009452:	eef0 7a40 	vmov.f32	s15, s0
 8009456:	4b42      	ldr	r3, [pc, #264]	@ (8009560 <updateSOC+0x200>)
 8009458:	edc3 7a00 	vstr	s15, [r3]

		// reset the coloumb counter
		coulombs = 0.0f;
 800945c:	4b49      	ldr	r3, [pc, #292]	@ (8009584 <updateSOC+0x224>)
 800945e:	f04f 0200 	mov.w	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
		initial_soc = soc;
 8009464:	4b3e      	ldr	r3, [pc, #248]	@ (8009560 <updateSOC+0x200>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a47      	ldr	r2, [pc, #284]	@ (8009588 <updateSOC+0x228>)
 800946a:	6013      	str	r3, [r2, #0]

		rest_start_time = current_time;
 800946c:	4a43      	ldr	r2, [pc, #268]	@ (800957c <updateSOC+0x21c>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	e051      	b.n	8009518 <updateSOC+0x1b8>
	}

	// coloumb counting
	else {
		if (initial_soc < 0.0f) {
 8009474:	4b44      	ldr	r3, [pc, #272]	@ (8009588 <updateSOC+0x228>)
 8009476:	edd3 7a00 	vldr	s15, [r3]
 800947a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800947e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009482:	d512      	bpl.n	80094aa <updateSOC+0x14a>
			initial_soc = voltagetoSOC(avg_cell);
 8009484:	4b37      	ldr	r3, [pc, #220]	@ (8009564 <updateSOC+0x204>)
 8009486:	edd3 7a00 	vldr	s15, [r3]
 800948a:	eeb0 0a67 	vmov.f32	s0, s15
 800948e:	f000 fa87 	bl	80099a0 <voltagetoSOC>
 8009492:	eef0 7a40 	vmov.f32	s15, s0
 8009496:	4b3c      	ldr	r3, [pc, #240]	@ (8009588 <updateSOC+0x228>)
 8009498:	edc3 7a00 	vstr	s15, [r3]
			soc = initial_soc;
 800949c:	4b3a      	ldr	r3, [pc, #232]	@ (8009588 <updateSOC+0x228>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a2f      	ldr	r2, [pc, #188]	@ (8009560 <updateSOC+0x200>)
 80094a2:	6013      	str	r3, [r2, #0]
			last_time = current_time;
 80094a4:	4a39      	ldr	r2, [pc, #228]	@ (800958c <updateSOC+0x22c>)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6013      	str	r3, [r2, #0]
		}

		float delta_t_sec = (current_time - last_time) / 1000.0f;
 80094aa:	4b38      	ldr	r3, [pc, #224]	@ (800958c <updateSOC+0x22c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80094ba:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8009590 <updateSOC+0x230>
 80094be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094c2:	edc7 7a02 	vstr	s15, [r7, #8]
		last_time = current_time;
 80094c6:	4a31      	ldr	r2, [pc, #196]	@ (800958c <updateSOC+0x22c>)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6013      	str	r3, [r2, #0]


		coulombs += current * delta_t_sec;
 80094cc:	4b29      	ldr	r3, [pc, #164]	@ (8009574 <updateSOC+0x214>)
 80094ce:	ed93 7a00 	vldr	s14, [r3]
 80094d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80094d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094da:	4b2a      	ldr	r3, [pc, #168]	@ (8009584 <updateSOC+0x224>)
 80094dc:	edd3 7a00 	vldr	s15, [r3]
 80094e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e4:	4b27      	ldr	r3, [pc, #156]	@ (8009584 <updateSOC+0x224>)
 80094e6:	edc3 7a00 	vstr	s15, [r3]

		float soc_change_percent = (coulombs / BATTERY_CAPACITY_COULOMBS) * 100.0f;
 80094ea:	4b26      	ldr	r3, [pc, #152]	@ (8009584 <updateSOC+0x224>)
 80094ec:	ed93 7a00 	vldr	s14, [r3]
 80094f0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8009594 <updateSOC+0x234>
 80094f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094f8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8009598 <updateSOC+0x238>
 80094fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009500:	edc7 7a01 	vstr	s15, [r7, #4]
		soc = initial_soc - soc_change_percent;
 8009504:	4b20      	ldr	r3, [pc, #128]	@ (8009588 <updateSOC+0x228>)
 8009506:	ed93 7a00 	vldr	s14, [r3]
 800950a:	edd7 7a01 	vldr	s15, [r7, #4]
 800950e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009512:	4b13      	ldr	r3, [pc, #76]	@ (8009560 <updateSOC+0x200>)
 8009514:	edc3 7a00 	vstr	s15, [r3]
	}

	if (soc > 100.0f) {
 8009518:	4b11      	ldr	r3, [pc, #68]	@ (8009560 <updateSOC+0x200>)
 800951a:	edd3 7a00 	vldr	s15, [r3]
 800951e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8009598 <updateSOC+0x238>
 8009522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952a:	dd02      	ble.n	8009532 <updateSOC+0x1d2>
		soc = 100.0f;
 800952c:	4b0c      	ldr	r3, [pc, #48]	@ (8009560 <updateSOC+0x200>)
 800952e:	4a1b      	ldr	r2, [pc, #108]	@ (800959c <updateSOC+0x23c>)
 8009530:	601a      	str	r2, [r3, #0]
	}
	if (soc < 0.0f) {
 8009532:	4b0b      	ldr	r3, [pc, #44]	@ (8009560 <updateSOC+0x200>)
 8009534:	edd3 7a00 	vldr	s15, [r3]
 8009538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009540:	d503      	bpl.n	800954a <updateSOC+0x1ea>
		soc = 0.0f;
 8009542:	4b07      	ldr	r3, [pc, #28]	@ (8009560 <updateSOC+0x200>)
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	601a      	str	r2, [r3, #0]
//    last_time = current_time;
//
//    // Coulomb counting to track SOC
//    coulombs += current * delta_t_sec;
//    soc = initial_soc - 100 * (coulombs / 64800000.0f); // 64800000 is the amount of total coulombs in 18000 Ah (in percentage)
	return soc;
 800954a:	4b05      	ldr	r3, [pc, #20]	@ (8009560 <updateSOC+0x200>)
 800954c:	681b      	ldr	r3, [r3, #0]
}
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eeb0 0a67 	vmov.f32	s0, s15
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20001c6a 	.word	0x20001c6a
 8009560:	20001c78 	.word	0x20001c78
 8009564:	20001c84 	.word	0x20001c84
 8009568:	42480000 	.word	0x42480000
 800956c:	20001c80 	.word	0x20001c80
 8009570:	20001c7c 	.word	0x20001c7c
 8009574:	20001c74 	.word	0x20001c74
 8009578:	20001cbc 	.word	0x20001cbc
 800957c:	20001cb8 	.word	0x20001cb8
 8009580:	0002bf20 	.word	0x0002bf20
 8009584:	20001cb0 	.word	0x20001cb0
 8009588:	2000004c 	.word	0x2000004c
 800958c:	20001cb4 	.word	0x20001cb4
 8009590:	447a0000 	.word	0x447a0000
 8009594:	477d2000 	.word	0x477d2000
 8009598:	42c80000 	.word	0x42c80000
 800959c:	42c80000 	.word	0x42c80000

080095a0 <fanPWMControl>:
 * an open-drain pin where LOWER PWM values result in HIGHER fan speeds.
 *
 * @param max_temp Current maximum cell temperature in Celsius
 * @param htimPWM Timer handle for PWM output
 */
void fanPWMControl(float max_temp, TIM_HandleTypeDef *htimPWM) {
 80095a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095a4:	b090      	sub	sp, #64	@ 0x40
 80095a6:	af08      	add	r7, sp, #32
 80095a8:	ed87 0a01 	vstr	s0, [r7, #4]
 80095ac:	6038      	str	r0, [r7, #0]
	static const float MIN_TEMP = 25.0f;    // Start fans at this temperature
	static const float TARGET_TEMP = 40.0f; // Target temperature
	static const float MAX_TEMP = 55.0f;    // Maximum allowed temperature

// Get current time for delta calculation
	uint32_t current_time = HAL_GetTick();
 80095ae:	f001 fcdf 	bl	800af70 <HAL_GetTick>
 80095b2:	6178      	str	r0, [r7, #20]
	float delta_time =
			(prev_time == 0) ? 1.0f : (current_time - prev_time) / 1000.0f; // In seconds
 80095b4:	4b94      	ldr	r3, [pc, #592]	@ (8009808 <fanPWMControl+0x268>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00c      	beq.n	80095d6 <fanPWMControl+0x36>
 80095bc:	4b92      	ldr	r3, [pc, #584]	@ (8009808 <fanPWMControl+0x268>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095cc:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800980c <fanPWMControl+0x26c>
 80095d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095d4:	e001      	b.n	80095da <fanPWMControl+0x3a>
 80095d6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
	float delta_time =
 80095da:	edc7 7a07 	vstr	s15, [r7, #28]
	prev_time = current_time;
 80095de:	4a8a      	ldr	r2, [pc, #552]	@ (8009808 <fanPWMControl+0x268>)
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	6013      	str	r3, [r2, #0]

// Prevent integral windup by limiting delta time
	if (delta_time > 5.0f)
 80095e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80095e8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80095ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f4:	dd02      	ble.n	80095fc <fanPWMControl+0x5c>
		delta_time = 1.0f;
 80095f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80095fa:	61fb      	str	r3, [r7, #28]

// If temperature is below minimum threshold, turn off fans
	if (max_temp < MIN_TEMP) {
 80095fc:	4b84      	ldr	r3, [pc, #528]	@ (8009810 <fanPWMControl+0x270>)
 80095fe:	edd3 7a00 	vldr	s15, [r3]
 8009602:	ed97 7a01 	vldr	s14, [r7, #4]
 8009606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800960a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960e:	d511      	bpl.n	8009634 <fanPWMControl+0x94>
		__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_4, htimPWM->Init.Period); // Full OFF (max value in open drain)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	68d2      	ldr	r2, [r2, #12]
 8009618:	641a      	str	r2, [r3, #64]	@ 0x40
		fan_status = 0.0f;
 800961a:	4b7e      	ldr	r3, [pc, #504]	@ (8009814 <fanPWMControl+0x274>)
 800961c:	f04f 0200 	mov.w	r2, #0
 8009620:	601a      	str	r2, [r3, #0]
		integral = 0.0f; // Reset integral term
 8009622:	4b7d      	ldr	r3, [pc, #500]	@ (8009818 <fanPWMControl+0x278>)
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
		prev_error = 0.0f;
 800962a:	4b7c      	ldr	r3, [pc, #496]	@ (800981c <fanPWMControl+0x27c>)
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
		return;
 8009632:	e0e5      	b.n	8009800 <fanPWMControl+0x260>
	}

// Calculate error (positive error means we're above target temp)
	float error = max_temp - TARGET_TEMP;
 8009634:	4b7a      	ldr	r3, [pc, #488]	@ (8009820 <fanPWMControl+0x280>)
 8009636:	edd3 7a00 	vldr	s15, [r3]
 800963a:	ed97 7a01 	vldr	s14, [r7, #4]
 800963e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009642:	edc7 7a04 	vstr	s15, [r7, #16]

// Compute integral with anti-windup
	integral += error * delta_time;
 8009646:	ed97 7a04 	vldr	s14, [r7, #16]
 800964a:	edd7 7a07 	vldr	s15, [r7, #28]
 800964e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009652:	4b71      	ldr	r3, [pc, #452]	@ (8009818 <fanPWMControl+0x278>)
 8009654:	edd3 7a00 	vldr	s15, [r3]
 8009658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800965c:	4b6e      	ldr	r3, [pc, #440]	@ (8009818 <fanPWMControl+0x278>)
 800965e:	edc3 7a00 	vstr	s15, [r3]

// Limit integral to prevent excessive buildup
	if (integral > 100.0f)
 8009662:	4b6d      	ldr	r3, [pc, #436]	@ (8009818 <fanPWMControl+0x278>)
 8009664:	edd3 7a00 	vldr	s15, [r3]
 8009668:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8009824 <fanPWMControl+0x284>
 800966c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009674:	dd02      	ble.n	800967c <fanPWMControl+0xdc>
		integral = 100.0f;
 8009676:	4b68      	ldr	r3, [pc, #416]	@ (8009818 <fanPWMControl+0x278>)
 8009678:	4a6b      	ldr	r2, [pc, #428]	@ (8009828 <fanPWMControl+0x288>)
 800967a:	601a      	str	r2, [r3, #0]
	if (integral < -100.0f)
 800967c:	4b66      	ldr	r3, [pc, #408]	@ (8009818 <fanPWMControl+0x278>)
 800967e:	edd3 7a00 	vldr	s15, [r3]
 8009682:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800982c <fanPWMControl+0x28c>
 8009686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800968a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968e:	d502      	bpl.n	8009696 <fanPWMControl+0xf6>
		integral = -100.0f;
 8009690:	4b61      	ldr	r3, [pc, #388]	@ (8009818 <fanPWMControl+0x278>)
 8009692:	4a67      	ldr	r2, [pc, #412]	@ (8009830 <fanPWMControl+0x290>)
 8009694:	601a      	str	r2, [r3, #0]

// If we're below target, slowly reduce integral
	if (error < 0 && integral > 0) {
 8009696:	edd7 7a04 	vldr	s15, [r7, #16]
 800969a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800969e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a2:	d511      	bpl.n	80096c8 <fanPWMControl+0x128>
 80096a4:	4b5c      	ldr	r3, [pc, #368]	@ (8009818 <fanPWMControl+0x278>)
 80096a6:	edd3 7a00 	vldr	s15, [r3]
 80096aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b2:	dd09      	ble.n	80096c8 <fanPWMControl+0x128>
		integral *= 0.95f; // Decay integral when under target temp
 80096b4:	4b58      	ldr	r3, [pc, #352]	@ (8009818 <fanPWMControl+0x278>)
 80096b6:	edd3 7a00 	vldr	s15, [r3]
 80096ba:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8009834 <fanPWMControl+0x294>
 80096be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096c2:	4b55      	ldr	r3, [pc, #340]	@ (8009818 <fanPWMControl+0x278>)
 80096c4:	edc3 7a00 	vstr	s15, [r3]
	}

// Compute derivative
	float derivative =
			(delta_time > 0.0f) ? (error - prev_error) / delta_time : 0.0f;
 80096c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80096cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d4:	dd0b      	ble.n	80096ee <fanPWMControl+0x14e>
 80096d6:	4b51      	ldr	r3, [pc, #324]	@ (800981c <fanPWMControl+0x27c>)
 80096d8:	edd3 7a00 	vldr	s15, [r3]
 80096dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80096e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80096e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80096e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ec:	e001      	b.n	80096f2 <fanPWMControl+0x152>
 80096ee:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8009838 <fanPWMControl+0x298>
	float derivative =
 80096f2:	edc7 7a03 	vstr	s15, [r7, #12]
	prev_error = error;
 80096f6:	4a49      	ldr	r2, [pc, #292]	@ (800981c <fanPWMControl+0x27c>)
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6013      	str	r3, [r2, #0]

// Calculate PID output (0.0 = no fan, 1.0 = max fan)
	float pid_output = Kp * error + Ki * integral + Kd * derivative;
 80096fc:	4b4f      	ldr	r3, [pc, #316]	@ (800983c <fanPWMControl+0x29c>)
 80096fe:	ed93 7a00 	vldr	s14, [r3]
 8009702:	edd7 7a04 	vldr	s15, [r7, #16]
 8009706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800970a:	4b4d      	ldr	r3, [pc, #308]	@ (8009840 <fanPWMControl+0x2a0>)
 800970c:	edd3 6a00 	vldr	s13, [r3]
 8009710:	4b41      	ldr	r3, [pc, #260]	@ (8009818 <fanPWMControl+0x278>)
 8009712:	edd3 7a00 	vldr	s15, [r3]
 8009716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800971a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800971e:	4b49      	ldr	r3, [pc, #292]	@ (8009844 <fanPWMControl+0x2a4>)
 8009720:	edd3 6a00 	vldr	s13, [r3]
 8009724:	edd7 7a03 	vldr	s15, [r7, #12]
 8009728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800972c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009730:	edc7 7a06 	vstr	s15, [r7, #24]

// Emergency override for high temperatures
	if (max_temp >= MAX_TEMP) {
 8009734:	4b44      	ldr	r3, [pc, #272]	@ (8009848 <fanPWMControl+0x2a8>)
 8009736:	edd3 7a00 	vldr	s15, [r3]
 800973a:	ed97 7a01 	vldr	s14, [r7, #4]
 800973e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	db02      	blt.n	800974e <fanPWMControl+0x1ae>
		pid_output = 1.0f; // Maximum fan speed
 8009748:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800974c:	61bb      	str	r3, [r7, #24]
	}

// Limit output range between 0.0 and 1.0
	if (pid_output < 0.0f)
 800974e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009752:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975a:	d502      	bpl.n	8009762 <fanPWMControl+0x1c2>
		pid_output = 0.0f;
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	61bb      	str	r3, [r7, #24]
	if (pid_output > 1.0f)
 8009762:	edd7 7a06 	vldr	s15, [r7, #24]
 8009766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800976a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009772:	dd02      	ble.n	800977a <fanPWMControl+0x1da>
		pid_output = 1.0f;
 8009774:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009778:	61bb      	str	r3, [r7, #24]

// Calculate PWM value - NOTE: Value is inverted (1.0 = no fans, 0.0 = max fans)
// Scale between 0 and Init.Period in inverted fashion
	uint32_t pwm_value = (uint32_t) (htimPWM->Init.Period * (1.0f - pid_output));
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800978a:	edd7 7a06 	vldr	s15, [r7, #24]
 800978e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800979a:	ee17 3a90 	vmov	r3, s15
 800979e:	60bb      	str	r3, [r7, #8]

// Update PWM output
	__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_4, pwm_value);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	641a      	str	r2, [r3, #64]	@ 0x40

// Store current fan status (as percentage of max speed)
	fan_status = pid_output * 100.0f;
 80097a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80097ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009824 <fanPWMControl+0x284>
 80097b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097b4:	4b17      	ldr	r3, [pc, #92]	@ (8009814 <fanPWMControl+0x274>)
 80097b6:	edc3 7a00 	vstr	s15, [r3]

// Debug output
	if (PRINT_ON) printf("Temp: %.1f°C, Error: %.1f, PID: %.2f, Fan: %.0f%%, PWM: %lu\r\n",
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7f6 fecc 	bl	8000558 <__aeabi_f2d>
 80097c0:	4682      	mov	sl, r0
 80097c2:	468b      	mov	fp, r1
 80097c4:	6938      	ldr	r0, [r7, #16]
 80097c6:	f7f6 fec7 	bl	8000558 <__aeabi_f2d>
 80097ca:	4604      	mov	r4, r0
 80097cc:	460d      	mov	r5, r1
 80097ce:	69b8      	ldr	r0, [r7, #24]
 80097d0:	f7f6 fec2 	bl	8000558 <__aeabi_f2d>
 80097d4:	4680      	mov	r8, r0
 80097d6:	4689      	mov	r9, r1
 80097d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <fanPWMControl+0x274>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7f6 febb 	bl	8000558 <__aeabi_f2d>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	68b9      	ldr	r1, [r7, #8]
 80097e8:	9106      	str	r1, [sp, #24]
 80097ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80097f2:	e9cd 4500 	strd	r4, r5, [sp]
 80097f6:	4652      	mov	r2, sl
 80097f8:	465b      	mov	r3, fp
 80097fa:	4814      	ldr	r0, [pc, #80]	@ (800984c <fanPWMControl+0x2ac>)
 80097fc:	f00a fa34 	bl	8013c68 <iprintf>
			max_temp, error, pid_output, fan_status, pwm_value);
}
 8009800:	3720      	adds	r7, #32
 8009802:	46bd      	mov	sp, r7
 8009804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009808:	20001e08 	.word	0x20001e08
 800980c:	447a0000 	.word	0x447a0000
 8009810:	08017b4c 	.word	0x08017b4c
 8009814:	20001cac 	.word	0x20001cac
 8009818:	20001e0c 	.word	0x20001e0c
 800981c:	20001e10 	.word	0x20001e10
 8009820:	08017b50 	.word	0x08017b50
 8009824:	42c80000 	.word	0x42c80000
 8009828:	42c80000 	.word	0x42c80000
 800982c:	c2c80000 	.word	0xc2c80000
 8009830:	c2c80000 	.word	0xc2c80000
 8009834:	3f733333 	.word	0x3f733333
 8009838:	00000000 	.word	0x00000000
 800983c:	08017b54 	.word	0x08017b54
 8009840:	08017b58 	.word	0x08017b58
 8009844:	08017b5c 	.word	0x08017b5c
 8009848:	08017b60 	.word	0x08017b60
 800984c:	08017820 	.word	0x08017820

08009850 <interpolate>:

float interpolate(float x, const float x_points[], const float y_points[], int num_points) {
 8009850:	b480      	push	{r7}
 8009852:	b08b      	sub	sp, #44	@ 0x2c
 8009854:	af00      	add	r7, sp, #0
 8009856:	ed87 0a03 	vstr	s0, [r7, #12]
 800985a:	60b8      	str	r0, [r7, #8]
 800985c:	6079      	str	r1, [r7, #4]
 800985e:	603a      	str	r2, [r7, #0]
    if (x <= x_points[0]) {
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	edd3 7a00 	vldr	s15, [r3]
 8009866:	ed97 7a03 	vldr	s14, [r7, #12]
 800986a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800986e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009872:	d803      	bhi.n	800987c <interpolate+0x2c>
        return y_points[0];
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	edd3 7a00 	vldr	s15, [r3]
 800987a:	e089      	b.n	8009990 <interpolate+0x140>
    }

    if (x >= x_points[num_points - 1]) {
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009882:	3b01      	subs	r3, #1
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	4413      	add	r3, r2
 800988a:	edd3 7a00 	vldr	s15, [r3]
 800988e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989a:	db09      	blt.n	80098b0 <interpolate+0x60>
        return y_points[num_points - 1];
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80098a2:	3b01      	subs	r3, #1
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	4413      	add	r3, r2
 80098aa:	edd3 7a00 	vldr	s15, [r3]
 80098ae:	e06f      	b.n	8009990 <interpolate+0x140>
    }

    for (int i = 0; i < num_points - 1; i++) {
 80098b0:	2300      	movs	r3, #0
 80098b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80098b4:	e05e      	b.n	8009974 <interpolate+0x124>
        if (x >= x_points[i] && x <= x_points[i + 1]) {
 80098b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	4413      	add	r3, r2
 80098be:	edd3 7a00 	vldr	s15, [r3]
 80098c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80098c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ce:	db4e      	blt.n	800996e <interpolate+0x11e>
 80098d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d2:	3301      	adds	r3, #1
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	4413      	add	r3, r2
 80098da:	edd3 7a00 	vldr	s15, [r3]
 80098de:	ed97 7a03 	vldr	s14, [r7, #12]
 80098e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	d840      	bhi.n	800996e <interpolate+0x11e>
            float x1 = x_points[i];
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	4413      	add	r3, r2
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	623b      	str	r3, [r7, #32]
            float y1 = y_points[i];
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	4413      	add	r3, r2
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	61fb      	str	r3, [r7, #28]
            float x2 = x_points[i + 1];
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	3301      	adds	r3, #1
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	4413      	add	r3, r2
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	61bb      	str	r3, [r7, #24]
            float y2 = y_points[i + 1];
 8009912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009914:	3301      	adds	r3, #1
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	4413      	add	r3, r2
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	617b      	str	r3, [r7, #20]

            if (x1 == x2) {
 8009920:	ed97 7a08 	vldr	s14, [r7, #32]
 8009924:	edd7 7a06 	vldr	s15, [r7, #24]
 8009928:	eeb4 7a67 	vcmp.f32	s14, s15
 800992c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009930:	d102      	bne.n	8009938 <interpolate+0xe8>
                return y1;
 8009932:	edd7 7a07 	vldr	s15, [r7, #28]
 8009936:	e02b      	b.n	8009990 <interpolate+0x140>
            }

            // y = y1 + (x - x1) * (slope)
            return y1 + (x - x1) * (y2 - y1) / (x2 - x1);
 8009938:	ed97 7a03 	vldr	s14, [r7, #12]
 800993c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009944:	edd7 6a05 	vldr	s13, [r7, #20]
 8009948:	edd7 7a07 	vldr	s15, [r7, #28]
 800994c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009950:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009954:	ed97 7a06 	vldr	s14, [r7, #24]
 8009958:	edd7 7a08 	vldr	s15, [r7, #32]
 800995c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009964:	edd7 7a07 	vldr	s15, [r7, #28]
 8009968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800996c:	e010      	b.n	8009990 <interpolate+0x140>
    for (int i = 0; i < num_points - 1; i++) {
 800996e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009970:	3301      	adds	r3, #1
 8009972:	627b      	str	r3, [r7, #36]	@ 0x24
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	3b01      	subs	r3, #1
 8009978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800997a:	429a      	cmp	r2, r3
 800997c:	db9b      	blt.n	80098b6 <interpolate+0x66>
        }
    }


    return y_points[num_points - 1];
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009984:	3b01      	subs	r3, #1
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	4413      	add	r3, r2
 800998c:	edd3 7a00 	vldr	s15, [r3]
}
 8009990:	eeb0 0a67 	vmov.f32	s0, s15
 8009994:	372c      	adds	r7, #44	@ 0x2c
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
	...

080099a0 <voltagetoSOC>:


float voltagetoSOC(float voltage) {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	ed87 0a01 	vstr	s0, [r7, #4]
    return interpolate(voltage, SOC_LUT_VOLTAGES, SOC_LUT_PERCENT, SOC_LUT_SIZE);
 80099aa:	2309      	movs	r3, #9
 80099ac:	461a      	mov	r2, r3
 80099ae:	4906      	ldr	r1, [pc, #24]	@ (80099c8 <voltagetoSOC+0x28>)
 80099b0:	4806      	ldr	r0, [pc, #24]	@ (80099cc <voltagetoSOC+0x2c>)
 80099b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80099b6:	f7ff ff4b 	bl	8009850 <interpolate>
 80099ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80099be:	eeb0 0a67 	vmov.f32	s0, s15
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	08017a88 	.word	0x08017a88
 80099cc:	08017a64 	.word	0x08017a64

080099d0 <calcDCL>:
float SOCtoVoltage(float soc) {
    return interpolate(soc, SOC_LUT_PERCENT, SOC_LUT_VOLTAGES, SOC_LUT_SIZE);
}


float calcDCL() {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	af00      	add	r7, sp, #0
    return interpolate(highest_temp, DCL_LUT_TEMP, DCL_LUT_CURRENT, DCL_LUT_SIZE);
 80099d4:	4b07      	ldr	r3, [pc, #28]	@ (80099f4 <calcDCL+0x24>)
 80099d6:	edd3 7a00 	vldr	s15, [r3]
 80099da:	2308      	movs	r3, #8
 80099dc:	461a      	mov	r2, r3
 80099de:	4906      	ldr	r1, [pc, #24]	@ (80099f8 <calcDCL+0x28>)
 80099e0:	4806      	ldr	r0, [pc, #24]	@ (80099fc <calcDCL+0x2c>)
 80099e2:	eeb0 0a67 	vmov.f32	s0, s15
 80099e6:	f7ff ff33 	bl	8009850 <interpolate>
 80099ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80099ee:	eeb0 0a67 	vmov.f32	s0, s15
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20001c9c 	.word	0x20001c9c
 80099f8:	08017acc 	.word	0x08017acc
 80099fc:	08017aac 	.word	0x08017aac

08009a00 <calcCCL>:


float calcCCL() {
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
    return interpolate(highest_temp, CCL_LUT_TEMP, CCL_LUT_CURRENT, CCL_LUT_SIZE);
 8009a04:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <calcCCL+0x24>)
 8009a06:	edd3 7a00 	vldr	s15, [r3]
 8009a0a:	230b      	movs	r3, #11
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4906      	ldr	r1, [pc, #24]	@ (8009a28 <calcCCL+0x28>)
 8009a10:	4806      	ldr	r0, [pc, #24]	@ (8009a2c <calcCCL+0x2c>)
 8009a12:	eeb0 0a67 	vmov.f32	s0, s15
 8009a16:	f7ff ff1b 	bl	8009850 <interpolate>
 8009a1a:	eef0 7a40 	vmov.f32	s15, s0
}
 8009a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20001c9c 	.word	0x20001c9c
 8009a28:	08017b18 	.word	0x08017b18
 8009a2c:	08017aec 	.word	0x08017aec

08009a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009a34:	f001 fa37 	bl	800aea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009a38:	f000 f8ac 	bl	8009b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009a3c:	f000 fca8 	bl	800a390 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009a40:	f000 f8f6 	bl	8009c30 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009a44:	f000 fa20 	bl	8009e88 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8009a48:	f000 fa5e 	bl	8009f08 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8009a4c:	f000 fad2 	bl	8009ff4 <MX_SPI1_Init>
  MX_FDCAN2_Init();
 8009a50:	f000 f9cc 	bl	8009dec <MX_FDCAN2_Init>
  MX_ADC2_Init();
 8009a54:	f000 f964 	bl	8009d20 <MX_ADC2_Init>
  MX_RTC_Init();
 8009a58:	f000 faa0 	bl	8009f9c <MX_RTC_Init>
  MX_TIM2_Init();
 8009a5c:	f000 fb9c 	bl	800a198 <MX_TIM2_Init>
  MX_TIM8_Init();
 8009a60:	f000 fc42 	bl	800a2e8 <MX_TIM8_Init>
  MX_TIM1_Init();
 8009a64:	f000 fb04 	bl	800a070 <MX_TIM1_Init>
  MX_TIM3_Init();
 8009a68:	f000 fbe4 	bl	800a234 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	user_adBms6830_getAccyStatus();
 8009a6c:	f7ff fa50 	bl	8008f10 <user_adBms6830_getAccyStatus>
	//  // Set duty cycle (e.g., 50%)
	//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 196600);	// full on is 196600
	//  Delay_ms(5000);
	//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 196570);	// full on is 196600

	init_FDCAN_header(&FDCAN_BMS_CONTEXT_INSTANCE.header_6b0, FDCAN_MSG_ID_6B0);
 8009a70:	f44f 61d6 	mov.w	r1, #1712	@ 0x6b0
 8009a74:	4837      	ldr	r0, [pc, #220]	@ (8009b54 <main+0x124>)
 8009a76:	f7fe fc3d 	bl	80082f4 <init_FDCAN_header>
			init_FDCAN_header(&FDCAN_BMS_CONTEXT_INSTANCE.header_6b1, FDCAN_MSG_ID_6B1);
 8009a7a:	f240 61b1 	movw	r1, #1713	@ 0x6b1
 8009a7e:	4836      	ldr	r0, [pc, #216]	@ (8009b58 <main+0x128>)
 8009a80:	f7fe fc38 	bl	80082f4 <init_FDCAN_header>
			init_FDCAN_header(&FDCAN_BMS_CONTEXT_INSTANCE.header_6b2, FDCAN_MSG_ID_6B2);
 8009a84:	f240 61b2 	movw	r1, #1714	@ 0x6b2
 8009a88:	4834      	ldr	r0, [pc, #208]	@ (8009b5c <main+0x12c>)
 8009a8a:	f7fe fc33 	bl	80082f4 <init_FDCAN_header>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_1806E7F4, 0x1806E7F4);
 8009a8e:	4934      	ldr	r1, [pc, #208]	@ (8009b60 <main+0x130>)
 8009a90:	4834      	ldr	r0, [pc, #208]	@ (8009b64 <main+0x134>)
 8009a92:	f7fe fc55 	bl	8008340 <init_FDCAN_header_EXTENDED>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_1806E5F4, 0x1806E5F4);
 8009a96:	4934      	ldr	r1, [pc, #208]	@ (8009b68 <main+0x138>)
 8009a98:	4834      	ldr	r0, [pc, #208]	@ (8009b6c <main+0x13c>)
 8009a9a:	f7fe fc51 	bl	8008340 <init_FDCAN_header_EXTENDED>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_1806E9F4, 0x1806E9F4);
 8009a9e:	4934      	ldr	r1, [pc, #208]	@ (8009b70 <main+0x140>)
 8009aa0:	4834      	ldr	r0, [pc, #208]	@ (8009b74 <main+0x144>)
 8009aa2:	f7fe fc4d 	bl	8008340 <init_FDCAN_header_EXTENDED>
			init_FDCAN_header_EXTENDED(&FDCAN_BMS_CONTEXT_INSTANCE.CAN_CHGCONTEXT.header_18FF50E5, 0x18FF50E5);
 8009aa6:	4934      	ldr	r1, [pc, #208]	@ (8009b78 <main+0x148>)
 8009aa8:	4834      	ldr	r0, [pc, #208]	@ (8009b7c <main+0x14c>)
 8009aaa:	f7fe fc49 	bl	8008340 <init_FDCAN_header_EXTENDED>

	if (accy_status == CHARGE_POWER) {
 8009aae:	4b34      	ldr	r3, [pc, #208]	@ (8009b80 <main+0x150>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4b33      	ldr	r3, [pc, #204]	@ (8009b84 <main+0x154>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d143      	bne.n	8009b44 <main+0x114>
		HAL_FDCAN_DeInit(&hfdcan2);
 8009abc:	4832      	ldr	r0, [pc, #200]	@ (8009b88 <main+0x158>)
 8009abe:	f003 f905 	bl	800cccc <HAL_FDCAN_DeInit>

		hfdcan2.Instance = FDCAN2;
 8009ac2:	4b31      	ldr	r3, [pc, #196]	@ (8009b88 <main+0x158>)
 8009ac4:	4a31      	ldr	r2, [pc, #196]	@ (8009b8c <main+0x15c>)
 8009ac6:	601a      	str	r2, [r3, #0]
		hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8009ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8009b88 <main+0x158>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	605a      	str	r2, [r3, #4]
		hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8009ace:	4b2e      	ldr	r3, [pc, #184]	@ (8009b88 <main+0x158>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	609a      	str	r2, [r3, #8]
		hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8009b88 <main+0x158>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	60da      	str	r2, [r3, #12]
		hfdcan2.Init.AutoRetransmission = DISABLE;
 8009ada:	4b2b      	ldr	r3, [pc, #172]	@ (8009b88 <main+0x158>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	741a      	strb	r2, [r3, #16]
		hfdcan2.Init.TransmitPause = DISABLE;
 8009ae0:	4b29      	ldr	r3, [pc, #164]	@ (8009b88 <main+0x158>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	745a      	strb	r2, [r3, #17]
		hfdcan2.Init.ProtocolException = DISABLE;
 8009ae6:	4b28      	ldr	r3, [pc, #160]	@ (8009b88 <main+0x158>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	749a      	strb	r2, [r3, #18]
		hfdcan2.Init.NominalPrescaler = 40;
 8009aec:	4b26      	ldr	r3, [pc, #152]	@ (8009b88 <main+0x158>)
 8009aee:	2228      	movs	r2, #40	@ 0x28
 8009af0:	615a      	str	r2, [r3, #20]
		hfdcan2.Init.NominalSyncJumpWidth = 1;
 8009af2:	4b25      	ldr	r3, [pc, #148]	@ (8009b88 <main+0x158>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	619a      	str	r2, [r3, #24]
		hfdcan2.Init.NominalTimeSeg1 = 14;
 8009af8:	4b23      	ldr	r3, [pc, #140]	@ (8009b88 <main+0x158>)
 8009afa:	220e      	movs	r2, #14
 8009afc:	61da      	str	r2, [r3, #28]
		hfdcan2.Init.NominalTimeSeg2 = 2;
 8009afe:	4b22      	ldr	r3, [pc, #136]	@ (8009b88 <main+0x158>)
 8009b00:	2202      	movs	r2, #2
 8009b02:	621a      	str	r2, [r3, #32]
		hfdcan2.Init.DataPrescaler = 1;
 8009b04:	4b20      	ldr	r3, [pc, #128]	@ (8009b88 <main+0x158>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	625a      	str	r2, [r3, #36]	@ 0x24
		hfdcan2.Init.DataSyncJumpWidth = 1;
 8009b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8009b88 <main+0x158>)
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	629a      	str	r2, [r3, #40]	@ 0x28
		hfdcan2.Init.DataTimeSeg1 = 1;
 8009b10:	4b1d      	ldr	r3, [pc, #116]	@ (8009b88 <main+0x158>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	62da      	str	r2, [r3, #44]	@ 0x2c
		hfdcan2.Init.DataTimeSeg2 = 1;
 8009b16:	4b1c      	ldr	r3, [pc, #112]	@ (8009b88 <main+0x158>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	631a      	str	r2, [r3, #48]	@ 0x30
		hfdcan2.Init.StdFiltersNbr = 1;
 8009b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009b88 <main+0x158>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	635a      	str	r2, [r3, #52]	@ 0x34
		hfdcan2.Init.ExtFiltersNbr = 0;
 8009b22:	4b19      	ldr	r3, [pc, #100]	@ (8009b88 <main+0x158>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	639a      	str	r2, [r3, #56]	@ 0x38
		hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8009b28:	4b17      	ldr	r3, [pc, #92]	@ (8009b88 <main+0x158>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_FDCAN_Init(&hfdcan2);
 8009b2e:	4816      	ldr	r0, [pc, #88]	@ (8009b88 <main+0x158>)
 8009b30:	f002 ff72 	bl	800ca18 <HAL_FDCAN_Init>
//		{
//			Error_Handler();
//		}

		/* Start the FDCAN module */
         		if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8009b34:	4814      	ldr	r0, [pc, #80]	@ (8009b88 <main+0x158>)
 8009b36:	f003 f8ec 	bl	800cd12 <HAL_FDCAN_Start>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <main+0x114>
		{
			Error_Handler();
 8009b40:	f000 fd2e 	bl	800a5a0 <Error_Handler>
//		};
//
//		uint8_t data[8] = {0xDE, 0xAD, 0xBE, 0xEF, 0xAA, 0xBB, 0xCC, 0xDD};
//
//		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data);
		adbms_main(16, &hfdcan2, &FDCAN_BMS_CONTEXT_INSTANCE, &htim3);
 8009b44:	4b12      	ldr	r3, [pc, #72]	@ (8009b90 <main+0x160>)
 8009b46:	4a03      	ldr	r2, [pc, #12]	@ (8009b54 <main+0x124>)
 8009b48:	490f      	ldr	r1, [pc, #60]	@ (8009b88 <main+0x158>)
 8009b4a:	2010      	movs	r0, #16
 8009b4c:	f7fc fe9e 	bl	800688c <adbms_main>
 8009b50:	e7f8      	b.n	8009b44 <main+0x114>
 8009b52:	bf00      	nop
 8009b54:	20002218 	.word	0x20002218
 8009b58:	2000223c 	.word	0x2000223c
 8009b5c:	20002260 	.word	0x20002260
 8009b60:	1806e7f4 	.word	0x1806e7f4
 8009b64:	200022a8 	.word	0x200022a8
 8009b68:	1806e5f4 	.word	0x1806e5f4
 8009b6c:	200022cc 	.word	0x200022cc
 8009b70:	1806e9f4 	.word	0x1806e9f4
 8009b74:	200022f0 	.word	0x200022f0
 8009b78:	18ff50e5 	.word	0x18ff50e5
 8009b7c:	20002314 	.word	0x20002314
 8009b80:	08017a61 	.word	0x08017a61
 8009b84:	20001c70 	.word	0x20001c70
 8009b88:	20001eec 	.word	0x20001eec
 8009b8c:	40006800 	.word	0x40006800
 8009b90:	2000215c 	.word	0x2000215c

08009b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b094      	sub	sp, #80	@ 0x50
 8009b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009b9a:	f107 0318 	add.w	r3, r7, #24
 8009b9e:	2238      	movs	r2, #56	@ 0x38
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f00a f8d8 	bl	8013d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ba8:	1d3b      	adds	r3, r7, #4
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	605a      	str	r2, [r3, #4]
 8009bb0:	609a      	str	r2, [r3, #8]
 8009bb2:	60da      	str	r2, [r3, #12]
 8009bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	f004 f8da 	bl	800dd70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009bbc:	230a      	movs	r3, #10
 8009bbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009bc6:	2340      	movs	r3, #64	@ 0x40
 8009bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009bd6:	2304      	movs	r3, #4
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009bda:	2355      	movs	r3, #85	@ 0x55
 8009bdc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009bde:	2302      	movs	r3, #2
 8009be0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009be2:	2302      	movs	r3, #2
 8009be4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009be6:	2302      	movs	r3, #2
 8009be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009bea:	f107 0318 	add.w	r3, r7, #24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f004 f972 	bl	800ded8 <HAL_RCC_OscConfig>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8009bfa:	f000 fcd1 	bl	800a5a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009bfe:	230f      	movs	r3, #15
 8009c00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c02:	2303      	movs	r3, #3
 8009c04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009c12:	1d3b      	adds	r3, r7, #4
 8009c14:	2104      	movs	r1, #4
 8009c16:	4618      	mov	r0, r3
 8009c18:	f004 fc70 	bl	800e4fc <HAL_RCC_ClockConfig>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8009c22:	f000 fcbd 	bl	800a5a0 <Error_Handler>
  }
}
 8009c26:	bf00      	nop
 8009c28:	3750      	adds	r7, #80	@ 0x50
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08c      	sub	sp, #48	@ 0x30
 8009c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8009c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	605a      	str	r2, [r3, #4]
 8009c40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009c42:	1d3b      	adds	r3, r7, #4
 8009c44:	2220      	movs	r2, #32
 8009c46:	2100      	movs	r1, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f00a f885 	bl	8013d58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009c4e:	4b32      	ldr	r3, [pc, #200]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009c56:	4b30      	ldr	r3, [pc, #192]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c58:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009c5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009c64:	4b2c      	ldr	r3, [pc, #176]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8009c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009c70:	4b29      	ldr	r3, [pc, #164]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009c76:	4b28      	ldr	r3, [pc, #160]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c78:	2204      	movs	r2, #4
 8009c7a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009c7c:	4b26      	ldr	r3, [pc, #152]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009c82:	4b25      	ldr	r3, [pc, #148]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8009c88:	4b23      	ldr	r3, [pc, #140]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009c8e:	4b22      	ldr	r3, [pc, #136]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009c96:	4b20      	ldr	r3, [pc, #128]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009caa:	4b1b      	ldr	r3, [pc, #108]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8009cb0:	4b19      	ldr	r3, [pc, #100]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009cb8:	4817      	ldr	r0, [pc, #92]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009cba:	f001 fbb3 	bl	800b424 <HAL_ADC_Init>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8009cc4:	f000 fc6c 	bl	800a5a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4811      	ldr	r0, [pc, #68]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009cd4:	f002 fc56 	bl	800c584 <HAL_ADCEx_MultiModeConfigChannel>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8009cde:	f000 fc5f 	bl	800a5a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8009d1c <MX_ADC1_Init+0xec>)
 8009ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009ce6:	2306      	movs	r3, #6
 8009ce8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009cee:	237f      	movs	r3, #127	@ 0x7f
 8009cf0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009cf2:	2304      	movs	r3, #4
 8009cf4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009cfa:	1d3b      	adds	r3, r7, #4
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4806      	ldr	r0, [pc, #24]	@ (8009d18 <MX_ADC1_Init+0xe8>)
 8009d00:	f001 ff44 	bl	800bb8c <HAL_ADC_ConfigChannel>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8009d0a:	f000 fc49 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009d0e:	bf00      	nop
 8009d10:	3730      	adds	r7, #48	@ 0x30
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20001e14 	.word	0x20001e14
 8009d1c:	08600004 	.word	0x08600004

08009d20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b088      	sub	sp, #32
 8009d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009d26:	463b      	mov	r3, r7
 8009d28:	2220      	movs	r2, #32
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f00a f813 	bl	8013d58 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8009d32:	4b2b      	ldr	r3, [pc, #172]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d34:	4a2b      	ldr	r2, [pc, #172]	@ (8009de4 <MX_ADC2_Init+0xc4>)
 8009d36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009d38:	4b29      	ldr	r3, [pc, #164]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009d3e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8009d40:	4b27      	ldr	r3, [pc, #156]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009d46:	4b26      	ldr	r3, [pc, #152]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8009d4c:	4b24      	ldr	r3, [pc, #144]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009d52:	4b23      	ldr	r3, [pc, #140]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009d58:	4b21      	ldr	r3, [pc, #132]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d5a:	2204      	movs	r2, #4
 8009d5c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8009d5e:	4b20      	ldr	r3, [pc, #128]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8009d64:	4b1e      	ldr	r3, [pc, #120]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8009d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009d70:	4b1b      	ldr	r3, [pc, #108]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009d78:	4b19      	ldr	r3, [pc, #100]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009d7e:	4b18      	ldr	r3, [pc, #96]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8009d84:	4b16      	ldr	r3, [pc, #88]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009d8c:	4b14      	ldr	r3, [pc, #80]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8009d92:	4b13      	ldr	r3, [pc, #76]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009d9a:	4811      	ldr	r0, [pc, #68]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009d9c:	f001 fb42 	bl	800b424 <HAL_ADC_Init>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8009da6:	f000 fbfb 	bl	800a5a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8009daa:	4b0f      	ldr	r3, [pc, #60]	@ (8009de8 <MX_ADC2_Init+0xc8>)
 8009dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009dae:	2306      	movs	r3, #6
 8009db0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009db6:	237f      	movs	r3, #127	@ 0x7f
 8009db8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009dba:	2304      	movs	r3, #4
 8009dbc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009dc2:	463b      	mov	r3, r7
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4806      	ldr	r0, [pc, #24]	@ (8009de0 <MX_ADC2_Init+0xc0>)
 8009dc8:	f001 fee0 	bl	800bb8c <HAL_ADC_ConfigChannel>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8009dd2:	f000 fbe5 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009dd6:	bf00      	nop
 8009dd8:	3720      	adds	r7, #32
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20001e80 	.word	0x20001e80
 8009de4:	50000100 	.word	0x50000100
 8009de8:	47520000 	.word	0x47520000

08009dec <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8009df0:	4b23      	ldr	r3, [pc, #140]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009df2:	4a24      	ldr	r2, [pc, #144]	@ (8009e84 <MX_FDCAN2_Init+0x98>)
 8009df4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8009df6:	4b22      	ldr	r3, [pc, #136]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8009dfc:	4b20      	ldr	r3, [pc, #128]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8009e02:	4b1f      	ldr	r3, [pc, #124]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8009e08:	4b1d      	ldr	r3, [pc, #116]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8009e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8009e14:	4b1a      	ldr	r3, [pc, #104]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 20;
 8009e1a:	4b19      	ldr	r3, [pc, #100]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e1c:	2214      	movs	r2, #20
 8009e1e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8009e20:	4b17      	ldr	r3, [pc, #92]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8009e26:	4b16      	ldr	r3, [pc, #88]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e28:	220e      	movs	r2, #14
 8009e2a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8009e2c:	4b14      	ldr	r3, [pc, #80]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e2e:	2202      	movs	r2, #2
 8009e30:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8009e32:	4b13      	ldr	r3, [pc, #76]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e34:	2201      	movs	r2, #1
 8009e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8009e38:	4b11      	ldr	r3, [pc, #68]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8009e3e:	4b10      	ldr	r3, [pc, #64]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e40:	2201      	movs	r2, #1
 8009e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8009e44:	4b0e      	ldr	r3, [pc, #56]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8009e50:	4b0b      	ldr	r3, [pc, #44]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8009e56:	4b0a      	ldr	r3, [pc, #40]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8009e5c:	4808      	ldr	r0, [pc, #32]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e5e:	f002 fddb 	bl	800ca18 <HAL_FDCAN_Init>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8009e68:	f000 fb9a 	bl	800a5a0 <Error_Handler>
//	{
//		Error_Handler();
//	}

	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8009e6c:	4804      	ldr	r0, [pc, #16]	@ (8009e80 <MX_FDCAN2_Init+0x94>)
 8009e6e:	f002 ff50 	bl	800cd12 <HAL_FDCAN_Start>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <MX_FDCAN2_Init+0x90>
	{
		Error_Handler();
 8009e78:	f000 fb92 	bl	800a5a0 <Error_Handler>
//	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
//	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	TxHeader.MessageMarker = 0;
  /* USER CODE END FDCAN2_Init 2 */

}
 8009e7c:	bf00      	nop
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	20001eec 	.word	0x20001eec
 8009e84:	40006800 	.word	0x40006800

08009e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009f00 <MX_I2C1_Init+0x78>)
 8009e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8009e92:	4b1a      	ldr	r3, [pc, #104]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009e94:	4a1b      	ldr	r2, [pc, #108]	@ (8009f04 <MX_I2C1_Init+0x7c>)
 8009e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009e98:	4b18      	ldr	r3, [pc, #96]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009e9e:	4b17      	ldr	r3, [pc, #92]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009ea4:	4b15      	ldr	r3, [pc, #84]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009eaa:	4b14      	ldr	r3, [pc, #80]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009eb0:	4b12      	ldr	r3, [pc, #72]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009eb6:	4b11      	ldr	r3, [pc, #68]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009ec2:	480e      	ldr	r0, [pc, #56]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009ec4:	f003 fe22 	bl	800db0c <HAL_I2C_Init>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009ece:	f000 fb67 	bl	800a5a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4809      	ldr	r0, [pc, #36]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009ed6:	f003 feb4 	bl	800dc42 <HAL_I2CEx_ConfigAnalogFilter>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009ee0:	f000 fb5e 	bl	800a5a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4805      	ldr	r0, [pc, #20]	@ (8009efc <MX_I2C1_Init+0x74>)
 8009ee8:	f003 fef6 	bl	800dcd8 <HAL_I2CEx_ConfigDigitalFilter>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009ef2:	f000 fb55 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009ef6:	bf00      	nop
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20001f50 	.word	0x20001f50
 8009f00:	40005400 	.word	0x40005400
 8009f04:	40b285c2 	.word	0x40b285c2

08009f08 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009f0c:	4b21      	ldr	r3, [pc, #132]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f0e:	4a22      	ldr	r2, [pc, #136]	@ (8009f98 <MX_LPUART1_UART_Init+0x90>)
 8009f10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8009f12:	4b20      	ldr	r3, [pc, #128]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009f18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009f20:	4b1c      	ldr	r3, [pc, #112]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009f26:	4b1b      	ldr	r3, [pc, #108]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009f2c:	4b19      	ldr	r3, [pc, #100]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f2e:	220c      	movs	r2, #12
 8009f30:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f32:	4b18      	ldr	r3, [pc, #96]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f38:	4b16      	ldr	r3, [pc, #88]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009f3e:	4b15      	ldr	r3, [pc, #84]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f44:	4b13      	ldr	r3, [pc, #76]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009f4a:	4812      	ldr	r0, [pc, #72]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f4c:	f007 f80e 	bl	8010f6c <HAL_UART_Init>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8009f56:	f000 fb23 	bl	800a5a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	480d      	ldr	r0, [pc, #52]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f5e:	f007 feff 	bl	8011d60 <HAL_UARTEx_SetTxFifoThreshold>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8009f68:	f000 fb1a 	bl	800a5a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	4809      	ldr	r0, [pc, #36]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f70:	f007 ff34 	bl	8011ddc <HAL_UARTEx_SetRxFifoThreshold>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8009f7a:	f000 fb11 	bl	800a5a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009f7e:	4805      	ldr	r0, [pc, #20]	@ (8009f94 <MX_LPUART1_UART_Init+0x8c>)
 8009f80:	f007 feb5 	bl	8011cee <HAL_UARTEx_DisableFifoMode>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8009f8a:	f000 fb09 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009f8e:	bf00      	nop
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	20001fa4 	.word	0x20001fa4
 8009f98:	40008000 	.word	0x40008000

08009f9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009fa0:	4b12      	ldr	r3, [pc, #72]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fa2:	4a13      	ldr	r2, [pc, #76]	@ (8009ff0 <MX_RTC_Init+0x54>)
 8009fa4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009fa6:	4b11      	ldr	r3, [pc, #68]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009fac:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fae:	227f      	movs	r2, #127	@ 0x7f
 8009fb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fb4:	22ff      	movs	r2, #255	@ 0xff
 8009fb6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009fc4:	4b09      	ldr	r3, [pc, #36]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009fca:	4b08      	ldr	r3, [pc, #32]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fcc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009fd0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009fd2:	4b06      	ldr	r3, [pc, #24]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009fd8:	4804      	ldr	r0, [pc, #16]	@ (8009fec <MX_RTC_Init+0x50>)
 8009fda:	f004 fef9 	bl	800edd0 <HAL_RTC_Init>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8009fe4:	f000 fadc 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009fe8:	bf00      	nop
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20002038 	.word	0x20002038
 8009ff0:	40002800 	.word	0x40002800

08009ff4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009ff8:	4b1b      	ldr	r3, [pc, #108]	@ (800a068 <MX_SPI1_Init+0x74>)
 8009ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800a06c <MX_SPI1_Init+0x78>)
 8009ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009ffe:	4b1a      	ldr	r3, [pc, #104]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a006:	4b18      	ldr	r3, [pc, #96]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a008:	2200      	movs	r2, #0
 800a00a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a00c:	4b16      	ldr	r3, [pc, #88]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a00e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800a012:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a014:	4b14      	ldr	r3, [pc, #80]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a016:	2200      	movs	r2, #0
 800a018:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a01a:	4b13      	ldr	r3, [pc, #76]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a020:	4b11      	ldr	r3, [pc, #68]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a026:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800a028:	4b0f      	ldr	r3, [pc, #60]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a02a:	2230      	movs	r2, #48	@ 0x30
 800a02c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a02e:	4b0e      	ldr	r3, [pc, #56]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a030:	2200      	movs	r2, #0
 800a032:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a034:	4b0c      	ldr	r3, [pc, #48]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a036:	2200      	movs	r2, #0
 800a038:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a03a:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a040:	4b09      	ldr	r3, [pc, #36]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a042:	2207      	movs	r2, #7
 800a044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a046:	4b08      	ldr	r3, [pc, #32]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a048:	2200      	movs	r2, #0
 800a04a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a04e:	2208      	movs	r2, #8
 800a050:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a052:	4805      	ldr	r0, [pc, #20]	@ (800a068 <MX_SPI1_Init+0x74>)
 800a054:	f004 ffd9 	bl	800f00a <HAL_SPI_Init>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a05e:	f000 fa9f 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a062:	bf00      	nop
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20002060 	.word	0x20002060
 800a06c:	40013000 	.word	0x40013000

0800a070 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b098      	sub	sp, #96	@ 0x60
 800a074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a076:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a07a:	2200      	movs	r2, #0
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	605a      	str	r2, [r3, #4]
 800a080:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a082:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	605a      	str	r2, [r3, #4]
 800a08c:	609a      	str	r2, [r3, #8]
 800a08e:	60da      	str	r2, [r3, #12]
 800a090:	611a      	str	r2, [r3, #16]
 800a092:	615a      	str	r2, [r3, #20]
 800a094:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a096:	1d3b      	adds	r3, r7, #4
 800a098:	2234      	movs	r2, #52	@ 0x34
 800a09a:	2100      	movs	r1, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f009 fe5b 	bl	8013d58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a0a2:	4b3b      	ldr	r3, [pc, #236]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0a4:	4a3b      	ldr	r2, [pc, #236]	@ (800a194 <MX_TIM1_Init+0x124>)
 800a0a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a0a8:	4b39      	ldr	r3, [pc, #228]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ae:	4b38      	ldr	r3, [pc, #224]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 800a0b4:	4b36      	ldr	r3, [pc, #216]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0b6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800a0ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0bc:	4b34      	ldr	r3, [pc, #208]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a0c2:	4b33      	ldr	r3, [pc, #204]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0c8:	4b31      	ldr	r3, [pc, #196]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a0ce:	4830      	ldr	r0, [pc, #192]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0d0:	f005 ff27 	bl	800ff22 <HAL_TIM_PWM_Init>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800a0da:	f000 fa61 	bl	800a5a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a0ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	4827      	ldr	r0, [pc, #156]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a0f2:	f006 fe11 	bl	8010d18 <HAL_TIMEx_MasterConfigSynchronization>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a0fc:	f000 fa50 	bl	800a5a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a100:	2360      	movs	r3, #96	@ 0x60
 800a102:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a108:	2300      	movs	r3, #0
 800a10a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a10c:	2300      	movs	r3, #0
 800a10e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a110:	2300      	movs	r3, #0
 800a112:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a114:	2300      	movs	r3, #0
 800a116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a118:	2300      	movs	r3, #0
 800a11a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a11c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a120:	2200      	movs	r2, #0
 800a122:	4619      	mov	r1, r3
 800a124:	481a      	ldr	r0, [pc, #104]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a126:	f005 ff53 	bl	800ffd0 <HAL_TIM_PWM_ConfigChannel>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800a130:	f000 fa36 	bl	800a5a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a134:	2300      	movs	r3, #0
 800a136:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a138:	2300      	movs	r3, #0
 800a13a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a14c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a152:	2300      	movs	r3, #0
 800a154:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a156:	2300      	movs	r3, #0
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a15a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a15e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a164:	2300      	movs	r3, #0
 800a166:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a168:	2300      	movs	r3, #0
 800a16a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a16c:	1d3b      	adds	r3, r7, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	4807      	ldr	r0, [pc, #28]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a172:	f006 fe67 	bl	8010e44 <HAL_TIMEx_ConfigBreakDeadTime>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800a17c:	f000 fa10 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a180:	4803      	ldr	r0, [pc, #12]	@ (800a190 <MX_TIM1_Init+0x120>)
 800a182:	f000 fcf7 	bl	800ab74 <HAL_TIM_MspPostInit>

}
 800a186:	bf00      	nop
 800a188:	3760      	adds	r7, #96	@ 0x60
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200020c4 	.word	0x200020c4
 800a194:	40012c00 	.word	0x40012c00

0800a198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a19e:	f107 0310 	add.w	r3, r7, #16
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	605a      	str	r2, [r3, #4]
 800a1a8:	609a      	str	r2, [r3, #8]
 800a1aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1ac:	1d3b      	adds	r3, r7, #4
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	605a      	str	r2, [r3, #4]
 800a1b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a1b6:	4b1e      	ldr	r3, [pc, #120]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a1bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800a1be:	4b1c      	ldr	r3, [pc, #112]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1c0:	22a9      	movs	r2, #169	@ 0xa9
 800a1c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800a1ca:	4b19      	ldr	r3, [pc, #100]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a1d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1d2:	4b17      	ldr	r3, [pc, #92]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1d8:	4b15      	ldr	r3, [pc, #84]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a1de:	4814      	ldr	r0, [pc, #80]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1e0:	f005 fe48 	bl	800fe74 <HAL_TIM_Base_Init>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a1ea:	f000 f9d9 	bl	800a5a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a1f4:	f107 0310 	add.w	r3, r7, #16
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	480d      	ldr	r0, [pc, #52]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a1fc:	f005 fffc 	bl	80101f8 <HAL_TIM_ConfigClockSource>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a206:	f000 f9cb 	bl	800a5a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a20a:	2300      	movs	r3, #0
 800a20c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a212:	1d3b      	adds	r3, r7, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4806      	ldr	r0, [pc, #24]	@ (800a230 <MX_TIM2_Init+0x98>)
 800a218:	f006 fd7e 	bl	8010d18 <HAL_TIMEx_MasterConfigSynchronization>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a222:	f000 f9bd 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a226:	bf00      	nop
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20002110 	.word	0x20002110

0800a234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08a      	sub	sp, #40	@ 0x28
 800a238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a23a:	f107 031c 	add.w	r3, r7, #28
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	605a      	str	r2, [r3, #4]
 800a244:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a246:	463b      	mov	r3, r7
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	605a      	str	r2, [r3, #4]
 800a24e:	609a      	str	r2, [r3, #8]
 800a250:	60da      	str	r2, [r3, #12]
 800a252:	611a      	str	r2, [r3, #16]
 800a254:	615a      	str	r2, [r3, #20]
 800a256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a258:	4b21      	ldr	r3, [pc, #132]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a25a:	4a22      	ldr	r2, [pc, #136]	@ (800a2e4 <MX_TIM3_Init+0xb0>)
 800a25c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a25e:	4b20      	ldr	r3, [pc, #128]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a260:	2200      	movs	r2, #0
 800a262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a264:	4b1e      	ldr	r3, [pc, #120]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a266:	2200      	movs	r2, #0
 800a268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6554;
 800a26a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a26c:	f641 129a 	movw	r2, #6554	@ 0x199a
 800a270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a272:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a274:	2200      	movs	r2, #0
 800a276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a278:	4b19      	ldr	r3, [pc, #100]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a27e:	4818      	ldr	r0, [pc, #96]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a280:	f005 fe4f 	bl	800ff22 <HAL_TIM_PWM_Init>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800a28a:	f000 f989 	bl	800a5a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a292:	2300      	movs	r3, #0
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a296:	f107 031c 	add.w	r3, r7, #28
 800a29a:	4619      	mov	r1, r3
 800a29c:	4810      	ldr	r0, [pc, #64]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a29e:	f006 fd3b 	bl	8010d18 <HAL_TIMEx_MasterConfigSynchronization>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800a2a8:	f000 f97a 	bl	800a5a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a2ac:	2360      	movs	r3, #96	@ 0x60
 800a2ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a2bc:	463b      	mov	r3, r7
 800a2be:	220c      	movs	r2, #12
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4807      	ldr	r0, [pc, #28]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a2c4:	f005 fe84 	bl	800ffd0 <HAL_TIM_PWM_ConfigChannel>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800a2ce:	f000 f967 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a2d2:	4803      	ldr	r0, [pc, #12]	@ (800a2e0 <MX_TIM3_Init+0xac>)
 800a2d4:	f000 fc4e 	bl	800ab74 <HAL_TIM_MspPostInit>

}
 800a2d8:	bf00      	nop
 800a2da:	3728      	adds	r7, #40	@ 0x28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	2000215c 	.word	0x2000215c
 800a2e4:	40000400 	.word	0x40000400

0800a2e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2ee:	f107 0310 	add.w	r3, r7, #16
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	605a      	str	r2, [r3, #4]
 800a2f8:	609a      	str	r2, [r3, #8]
 800a2fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2fc:	1d3b      	adds	r3, r7, #4
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	605a      	str	r2, [r3, #4]
 800a304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a306:	4b20      	ldr	r3, [pc, #128]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a308:	4a20      	ldr	r2, [pc, #128]	@ (800a38c <MX_TIM8_Init+0xa4>)
 800a30a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a30c:	4b1e      	ldr	r3, [pc, #120]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a30e:	2200      	movs	r2, #0
 800a310:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a312:	4b1d      	ldr	r3, [pc, #116]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a314:	2200      	movs	r2, #0
 800a316:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a318:	4b1b      	ldr	r3, [pc, #108]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a31a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a31e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a320:	4b19      	ldr	r3, [pc, #100]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a322:	2200      	movs	r2, #0
 800a324:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a326:	4b18      	ldr	r3, [pc, #96]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a328:	2200      	movs	r2, #0
 800a32a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a32c:	4b16      	ldr	r3, [pc, #88]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a32e:	2200      	movs	r2, #0
 800a330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a332:	4815      	ldr	r0, [pc, #84]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a334:	f005 fd9e 	bl	800fe74 <HAL_TIM_Base_Init>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800a33e:	f000 f92f 	bl	800a5a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a346:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a348:	f107 0310 	add.w	r3, r7, #16
 800a34c:	4619      	mov	r1, r3
 800a34e:	480e      	ldr	r0, [pc, #56]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a350:	f005 ff52 	bl	80101f8 <HAL_TIM_ConfigClockSource>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800a35a:	f000 f921 	bl	800a5a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a35e:	2300      	movs	r3, #0
 800a360:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a362:	2300      	movs	r3, #0
 800a364:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a36a:	1d3b      	adds	r3, r7, #4
 800a36c:	4619      	mov	r1, r3
 800a36e:	4806      	ldr	r0, [pc, #24]	@ (800a388 <MX_TIM8_Init+0xa0>)
 800a370:	f006 fcd2 	bl	8010d18 <HAL_TIMEx_MasterConfigSynchronization>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800a37a:	f000 f911 	bl	800a5a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a37e:	bf00      	nop
 800a380:	3720      	adds	r7, #32
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	200021a8 	.word	0x200021a8
 800a38c:	40013400 	.word	0x40013400

0800a390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	@ 0x28
 800a394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a396:	f107 0314 	add.w	r3, r7, #20
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	605a      	str	r2, [r3, #4]
 800a3a0:	609a      	str	r2, [r3, #8]
 800a3a2:	60da      	str	r2, [r3, #12]
 800a3a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3a6:	4b4e      	ldr	r3, [pc, #312]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3aa:	4a4d      	ldr	r2, [pc, #308]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3ac:	f043 0304 	orr.w	r3, r3, #4
 800a3b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3b6:	f003 0304 	and.w	r3, r3, #4
 800a3ba:	613b      	str	r3, [r7, #16]
 800a3bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a3be:	4b48      	ldr	r3, [pc, #288]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c2:	4a47      	ldr	r2, [pc, #284]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3c4:	f043 0320 	orr.w	r3, r3, #32
 800a3c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3ca:	4b45      	ldr	r3, [pc, #276]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3d6:	4b42      	ldr	r3, [pc, #264]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3da:	4a41      	ldr	r2, [pc, #260]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3dc:	f043 0301 	orr.w	r3, r3, #1
 800a3e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3e2:	4b3f      	ldr	r3, [pc, #252]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	60bb      	str	r3, [r7, #8]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3ee:	4b3c      	ldr	r3, [pc, #240]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3f2:	4a3b      	ldr	r2, [pc, #236]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3f4:	f043 0302 	orr.w	r3, r3, #2
 800a3f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3fa:	4b39      	ldr	r3, [pc, #228]	@ (800a4e0 <MX_GPIO_Init+0x150>)
 800a3fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	607b      	str	r3, [r7, #4]
 800a404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Charge_Enable_Pin|Discharge_Enable_Pin|POS_AIR_GND_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 800a406:	2200      	movs	r2, #0
 800a408:	f640 011c 	movw	r1, #2076	@ 0x81c
 800a40c:	4835      	ldr	r0, [pc, #212]	@ (800a4e4 <MX_GPIO_Init+0x154>)
 800a40e:	f003 fb65 	bl	800dadc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Temp_Fault_Pin|Precharge_Enable_Pin|NEG_AIR_GND_Pin|Cell_Fault_Pin
 800a412:	2200      	movs	r2, #0
 800a414:	f648 0146 	movw	r1, #34886	@ 0x8846
 800a418:	4833      	ldr	r0, [pc, #204]	@ (800a4e8 <MX_GPIO_Init+0x158>)
 800a41a:	f003 fb5f 	bl	800dadc <HAL_GPIO_WritePin>
                          |CSB1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSB_2_GPIO_Port, CSB_2_Pin, GPIO_PIN_SET);
 800a41e:	2201      	movs	r2, #1
 800a420:	2180      	movs	r1, #128	@ 0x80
 800a422:	4830      	ldr	r0, [pc, #192]	@ (800a4e4 <MX_GPIO_Init+0x154>)
 800a424:	f003 fb5a 	bl	800dadc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W2_GPIO_Port, W2_Pin, GPIO_PIN_SET);
 800a428:	2201      	movs	r2, #1
 800a42a:	2120      	movs	r1, #32
 800a42c:	482e      	ldr	r0, [pc, #184]	@ (800a4e8 <MX_GPIO_Init+0x158>)
 800a42e:	f003 fb55 	bl	800dadc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDC_IN_Pin */
  GPIO_InitStruct.Pin = SDC_IN_Pin;
 800a432:	2302      	movs	r3, #2
 800a434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a436:	2300      	movs	r3, #0
 800a438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a43a:	2301      	movs	r3, #1
 800a43c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDC_IN_GPIO_Port, &GPIO_InitStruct);
 800a43e:	f107 0314 	add.w	r3, r7, #20
 800a442:	4619      	mov	r1, r3
 800a444:	4827      	ldr	r0, [pc, #156]	@ (800a4e4 <MX_GPIO_Init+0x154>)
 800a446:	f003 f8cd 	bl	800d5e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_Enable_Pin Discharge_Enable_Pin POS_AIR_GND_Pin CSB_2_Pin
                           PC11 */
  GPIO_InitStruct.Pin = Charge_Enable_Pin|Discharge_Enable_Pin|POS_AIR_GND_Pin|CSB_2_Pin
 800a44a:	f640 039c 	movw	r3, #2204	@ 0x89c
 800a44e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a450:	2301      	movs	r3, #1
 800a452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a454:	2300      	movs	r3, #0
 800a456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a458:	2300      	movs	r3, #0
 800a45a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a45c:	f107 0314 	add.w	r3, r7, #20
 800a460:	4619      	mov	r1, r3
 800a462:	4820      	ldr	r0, [pc, #128]	@ (800a4e4 <MX_GPIO_Init+0x154>)
 800a464:	f003 f8be 	bl	800d5e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_Power_Pin Ready_Power_Pin Always_On_Power_Pin */
  GPIO_InitStruct.Pin = Charge_Power_Pin|Ready_Power_Pin|Always_On_Power_Pin;
 800a468:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800a46c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a46e:	2300      	movs	r3, #0
 800a470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a472:	2300      	movs	r3, #0
 800a474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a476:	f107 0314 	add.w	r3, r7, #20
 800a47a:	4619      	mov	r1, r3
 800a47c:	4819      	ldr	r0, [pc, #100]	@ (800a4e4 <MX_GPIO_Init+0x154>)
 800a47e:	f003 f8b1 	bl	800d5e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Temp_Fault_Pin Precharge_Enable_Pin NEG_AIR_GND_Pin Cell_Fault_Pin
                           W2_Pin CSB1_Pin */
  GPIO_InitStruct.Pin = Temp_Fault_Pin|Precharge_Enable_Pin|NEG_AIR_GND_Pin|Cell_Fault_Pin
 800a482:	f648 0366 	movw	r3, #34918	@ 0x8866
 800a486:	617b      	str	r3, [r7, #20]
                          |W2_Pin|CSB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a488:	2301      	movs	r3, #1
 800a48a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a490:	2300      	movs	r3, #0
 800a492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a494:	f107 0314 	add.w	r3, r7, #20
 800a498:	4619      	mov	r1, r3
 800a49a:	4813      	ldr	r0, [pc, #76]	@ (800a4e8 <MX_GPIO_Init+0x158>)
 800a49c:	f003 f8a2 	bl	800d5e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : W1_Pin I2_Pin M1_Pin */
  GPIO_InitStruct.Pin = W1_Pin|I2_Pin|M1_Pin;
 800a4a0:	f44f 6383 	mov.w	r3, #1048	@ 0x418
 800a4a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4ae:	f107 0314 	add.w	r3, r7, #20
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	480c      	ldr	r0, [pc, #48]	@ (800a4e8 <MX_GPIO_Init+0x158>)
 800a4b6:	f003 f895 	bl	800d5e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_Pin */
  GPIO_InitStruct.Pin = M2_Pin;
 800a4ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 800a4c8:	f107 0314 	add.w	r3, r7, #20
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a4d2:	f003 f887 	bl	800d5e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800a4d6:	bf00      	nop
 800a4d8:	3728      	adds	r7, #40	@ 0x28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	40021000 	.word	0x40021000
 800a4e4:	48000800 	.word	0x48000800
 800a4e8:	48000400 	.word	0x48000400

0800a4ec <__io_putchar>:

/**
 * @brief  Retargets the C library printf function to the USART.
 */
PUTCHAR_PROTOTYPE
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the LPUART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a4f4:	1d39      	adds	r1, r7, #4
 800a4f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	4803      	ldr	r0, [pc, #12]	@ (800a50c <__io_putchar+0x20>)
 800a4fe:	f006 fd85 	bl	801100c <HAL_UART_Transmit>

	return ch;
 800a502:	687b      	ldr	r3, [r7, #4]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20001fa4 	.word	0x20001fa4

0800a510 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	71fb      	strb	r3, [r7, #7]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&hlpuart1);
 800a51a:	4b0b      	ldr	r3, [pc, #44]	@ (800a548 <__io_getchar+0x38>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2208      	movs	r2, #8
 800a520:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800a522:	1df9      	adds	r1, r7, #7
 800a524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a528:	2201      	movs	r2, #1
 800a52a:	4807      	ldr	r0, [pc, #28]	@ (800a548 <__io_getchar+0x38>)
 800a52c:	f006 fdfc 	bl	8011128 <HAL_UART_Receive>
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800a530:	1df9      	adds	r1, r7, #7
 800a532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a536:	2201      	movs	r2, #1
 800a538:	4803      	ldr	r0, [pc, #12]	@ (800a548 <__io_getchar+0x38>)
 800a53a:	f006 fd67 	bl	801100c <HAL_UART_Transmit>
	return ch;
 800a53e:	79fb      	ldrb	r3, [r7, #7]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	20001fa4 	.word	0x20001fa4

0800a54c <HAL_FDCAN_RxFifo0Callback>:

/*placeholder echo function*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	@ 0x38
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01a      	beq.n	800a596 <HAL_FDCAN_RxFifo0Callback+0x4a>
	{
		FDCAN_RxHeaderTypeDef localRxHeader;
		uint8_t localRxData[8];

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &localRxHeader, localRxData) != HAL_OK)
 800a560:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a564:	f107 0208 	add.w	r2, r7, #8
 800a568:	2140      	movs	r1, #64	@ 0x40
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f002 fcae 	bl	800cecc <HAL_FDCAN_GetRxMessage>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <HAL_FDCAN_RxFifo0Callback+0x30>
		{
			Error_Handler();
 800a576:	f000 f813 	bl	800a5a0 <Error_Handler>
			return;
 800a57a:	e00c      	b.n	800a596 <HAL_FDCAN_RxFifo0Callback+0x4a>
		}

		if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, localRxData) != HAL_OK)
 800a57c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a580:	461a      	mov	r2, r3
 800a582:	4906      	ldr	r1, [pc, #24]	@ (800a59c <HAL_FDCAN_RxFifo0Callback+0x50>)
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f002 fc5c 	bl	800ce42 <HAL_FDCAN_AddMessageToTxFifoQ>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <HAL_FDCAN_RxFifo0Callback+0x4a>
		{
			Error_Handler();
 800a590:	f000 f806 	bl	800a5a0 <Error_Handler>
			return;
 800a594:	bf00      	nop
		}
	}
}
 800a596:	3738      	adds	r7, #56	@ 0x38
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	200021f4 	.word	0x200021f4

0800a5a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a5a4:	b672      	cpsid	i
}
 800a5a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800a5a8:	bf00      	nop
 800a5aa:	e7fd      	b.n	800a5a8 <Error_Handler+0x8>

0800a5ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f0 <HAL_MspInit+0x44>)
 800a5b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5b6:	4a0e      	ldr	r2, [pc, #56]	@ (800a5f0 <HAL_MspInit+0x44>)
 800a5b8:	f043 0301 	orr.w	r3, r3, #1
 800a5bc:	6613      	str	r3, [r2, #96]	@ 0x60
 800a5be:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f0 <HAL_MspInit+0x44>)
 800a5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	607b      	str	r3, [r7, #4]
 800a5c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5ca:	4b09      	ldr	r3, [pc, #36]	@ (800a5f0 <HAL_MspInit+0x44>)
 800a5cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ce:	4a08      	ldr	r2, [pc, #32]	@ (800a5f0 <HAL_MspInit+0x44>)
 800a5d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5d4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5d6:	4b06      	ldr	r3, [pc, #24]	@ (800a5f0 <HAL_MspInit+0x44>)
 800a5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5de:	603b      	str	r3, [r7, #0]
 800a5e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800a5e2:	f003 fc69 	bl	800deb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	40021000 	.word	0x40021000

0800a5f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b0a0      	sub	sp, #128	@ 0x80
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	605a      	str	r2, [r3, #4]
 800a606:	609a      	str	r2, [r3, #8]
 800a608:	60da      	str	r2, [r3, #12]
 800a60a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a60c:	f107 0318 	add.w	r3, r7, #24
 800a610:	2254      	movs	r2, #84	@ 0x54
 800a612:	2100      	movs	r1, #0
 800a614:	4618      	mov	r0, r3
 800a616:	f009 fb9f 	bl	8013d58 <memset>
  if(hadc->Instance==ADC1)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a622:	d13e      	bne.n	800a6a2 <HAL_ADC_MspInit+0xae>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800a624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a628:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800a62a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a62e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a630:	f107 0318 	add.w	r3, r7, #24
 800a634:	4618      	mov	r0, r3
 800a636:	f004 f97d 	bl	800e934 <HAL_RCCEx_PeriphCLKConfig>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800a640:	f7ff ffae 	bl	800a5a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800a644:	4b3a      	ldr	r3, [pc, #232]	@ (800a730 <HAL_ADC_MspInit+0x13c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3301      	adds	r3, #1
 800a64a:	4a39      	ldr	r2, [pc, #228]	@ (800a730 <HAL_ADC_MspInit+0x13c>)
 800a64c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800a64e:	4b38      	ldr	r3, [pc, #224]	@ (800a730 <HAL_ADC_MspInit+0x13c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d10b      	bne.n	800a66e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800a656:	4b37      	ldr	r3, [pc, #220]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a65a:	4a36      	ldr	r2, [pc, #216]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a65c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a662:	4b34      	ldr	r3, [pc, #208]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a66e:	4b31      	ldr	r3, [pc, #196]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a672:	4a30      	ldr	r2, [pc, #192]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a674:	f043 0301 	orr.w	r3, r3, #1
 800a678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a67a:	4b2e      	ldr	r3, [pc, #184]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a67c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	613b      	str	r3, [r7, #16]
 800a684:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Low_Pin;
 800a686:	2302      	movs	r3, #2
 800a688:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a68a:	2303      	movs	r3, #3
 800a68c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a68e:	2300      	movs	r3, #0
 800a690:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_Sensor_Low_GPIO_Port, &GPIO_InitStruct);
 800a692:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a696:	4619      	mov	r1, r3
 800a698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a69c:	f002 ffa2 	bl	800d5e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800a6a0:	e042      	b.n	800a728 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a24      	ldr	r2, [pc, #144]	@ (800a738 <HAL_ADC_MspInit+0x144>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d13d      	bne.n	800a728 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800a6ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800a6b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800a6b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a6b8:	f107 0318 	add.w	r3, r7, #24
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f004 f939 	bl	800e934 <HAL_RCCEx_PeriphCLKConfig>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 800a6c8:	f7ff ff6a 	bl	800a5a0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800a6cc:	4b18      	ldr	r3, [pc, #96]	@ (800a730 <HAL_ADC_MspInit+0x13c>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	4a17      	ldr	r2, [pc, #92]	@ (800a730 <HAL_ADC_MspInit+0x13c>)
 800a6d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800a6d6:	4b16      	ldr	r3, [pc, #88]	@ (800a730 <HAL_ADC_MspInit+0x13c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d10b      	bne.n	800a6f6 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800a6de:	4b15      	ldr	r3, [pc, #84]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6e2:	4a14      	ldr	r2, [pc, #80]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a6e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a6e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a6ea:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a6ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a6f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6fa:	4a0e      	ldr	r2, [pc, #56]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a6fc:	f043 0301 	orr.w	r3, r3, #1
 800a700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a702:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <HAL_ADC_MspInit+0x140>)
 800a704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_Sensor_High_Pin;
 800a70e:	2310      	movs	r3, #16
 800a710:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a712:	2303      	movs	r3, #3
 800a714:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a716:	2300      	movs	r3, #0
 800a718:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_Sensor_High_GPIO_Port, &GPIO_InitStruct);
 800a71a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a71e:	4619      	mov	r1, r3
 800a720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a724:	f002 ff5e 	bl	800d5e4 <HAL_GPIO_Init>
}
 800a728:	bf00      	nop
 800a72a:	3780      	adds	r7, #128	@ 0x80
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20002368 	.word	0x20002368
 800a734:	40021000 	.word	0x40021000
 800a738:	50000100 	.word	0x50000100

0800a73c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b09e      	sub	sp, #120	@ 0x78
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a744:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a748:	2200      	movs	r2, #0
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	605a      	str	r2, [r3, #4]
 800a74e:	609a      	str	r2, [r3, #8]
 800a750:	60da      	str	r2, [r3, #12]
 800a752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a754:	f107 0310 	add.w	r3, r7, #16
 800a758:	2254      	movs	r2, #84	@ 0x54
 800a75a:	2100      	movs	r1, #0
 800a75c:	4618      	mov	r0, r3
 800a75e:	f009 fafb 	bl	8013d58 <memset>
  if(hfdcan->Instance==FDCAN2)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a24      	ldr	r2, [pc, #144]	@ (800a7f8 <HAL_FDCAN_MspInit+0xbc>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d140      	bne.n	800a7ee <HAL_FDCAN_MspInit+0xb2>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800a76c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a770:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800a772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a776:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a778:	f107 0310 	add.w	r3, r7, #16
 800a77c:	4618      	mov	r0, r3
 800a77e:	f004 f8d9 	bl	800e934 <HAL_RCCEx_PeriphCLKConfig>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800a788:	f7ff ff0a 	bl	800a5a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800a78c:	4b1b      	ldr	r3, [pc, #108]	@ (800a7fc <HAL_FDCAN_MspInit+0xc0>)
 800a78e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a790:	4a1a      	ldr	r2, [pc, #104]	@ (800a7fc <HAL_FDCAN_MspInit+0xc0>)
 800a792:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a796:	6593      	str	r3, [r2, #88]	@ 0x58
 800a798:	4b18      	ldr	r3, [pc, #96]	@ (800a7fc <HAL_FDCAN_MspInit+0xc0>)
 800a79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7a4:	4b15      	ldr	r3, [pc, #84]	@ (800a7fc <HAL_FDCAN_MspInit+0xc0>)
 800a7a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7a8:	4a14      	ldr	r2, [pc, #80]	@ (800a7fc <HAL_FDCAN_MspInit+0xc0>)
 800a7aa:	f043 0302 	orr.w	r3, r3, #2
 800a7ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7b0:	4b12      	ldr	r3, [pc, #72]	@ (800a7fc <HAL_FDCAN_MspInit+0xc0>)
 800a7b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	60bb      	str	r3, [r7, #8]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800a7bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800a7c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800a7ce:	2309      	movs	r3, #9
 800a7d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4809      	ldr	r0, [pc, #36]	@ (800a800 <HAL_FDCAN_MspInit+0xc4>)
 800a7da:	f002 ff03 	bl	800d5e4 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	2056      	movs	r0, #86	@ 0x56
 800a7e4:	f002 f8d5 	bl	800c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800a7e8:	2056      	movs	r0, #86	@ 0x56
 800a7ea:	f002 f8ec 	bl	800c9c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 800a7ee:	bf00      	nop
 800a7f0:	3778      	adds	r7, #120	@ 0x78
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40006800 	.word	0x40006800
 800a7fc:	40021000 	.word	0x40021000
 800a800:	48000400 	.word	0x48000400

0800a804 <HAL_FDCAN_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* hfdcan)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  if(hfdcan->Instance==FDCAN2)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a0a      	ldr	r2, [pc, #40]	@ (800a83c <HAL_FDCAN_MspDeInit+0x38>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d10d      	bne.n	800a832 <HAL_FDCAN_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN FDCAN2_MspDeInit 0 */

    /* USER CODE END FDCAN2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 800a816:	4b0a      	ldr	r3, [pc, #40]	@ (800a840 <HAL_FDCAN_MspDeInit+0x3c>)
 800a818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a81a:	4a09      	ldr	r2, [pc, #36]	@ (800a840 <HAL_FDCAN_MspDeInit+0x3c>)
 800a81c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a820:	6593      	str	r3, [r2, #88]	@ 0x58

    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 800a822:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800a826:	4807      	ldr	r0, [pc, #28]	@ (800a844 <HAL_FDCAN_MspDeInit+0x40>)
 800a828:	f003 f85e 	bl	800d8e8 <HAL_GPIO_DeInit>

    /* FDCAN2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(FDCAN2_IT0_IRQn);
 800a82c:	2056      	movs	r0, #86	@ 0x56
 800a82e:	f002 f8d8 	bl	800c9e2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN FDCAN2_MspDeInit 1 */

    /* USER CODE END FDCAN2_MspDeInit 1 */
  }

}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	40006800 	.word	0x40006800
 800a840:	40021000 	.word	0x40021000
 800a844:	48000400 	.word	0x48000400

0800a848 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b09e      	sub	sp, #120	@ 0x78
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a850:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	605a      	str	r2, [r3, #4]
 800a85a:	609a      	str	r2, [r3, #8]
 800a85c:	60da      	str	r2, [r3, #12]
 800a85e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a860:	f107 0310 	add.w	r3, r7, #16
 800a864:	2254      	movs	r2, #84	@ 0x54
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f009 fa75 	bl	8013d58 <memset>
  if(hi2c->Instance==I2C1)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f0 <HAL_I2C_MspInit+0xa8>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d136      	bne.n	800a8e6 <HAL_I2C_MspInit+0x9e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800a878:	2340      	movs	r3, #64	@ 0x40
 800a87a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a87c:	2300      	movs	r3, #0
 800a87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a880:	f107 0310 	add.w	r3, r7, #16
 800a884:	4618      	mov	r0, r3
 800a886:	f004 f855 	bl	800e934 <HAL_RCCEx_PeriphCLKConfig>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a890:	f7ff fe86 	bl	800a5a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a894:	4b17      	ldr	r3, [pc, #92]	@ (800a8f4 <HAL_I2C_MspInit+0xac>)
 800a896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a898:	4a16      	ldr	r2, [pc, #88]	@ (800a8f4 <HAL_I2C_MspInit+0xac>)
 800a89a:	f043 0302 	orr.w	r3, r3, #2
 800a89e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a8a0:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <HAL_I2C_MspInit+0xac>)
 800a8a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8a4:	f003 0302 	and.w	r3, r3, #2
 800a8a8:	60fb      	str	r3, [r7, #12]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a8ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a8b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8b2:	2312      	movs	r3, #18
 800a8b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a8be:	2304      	movs	r3, #4
 800a8c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	480b      	ldr	r0, [pc, #44]	@ (800a8f8 <HAL_I2C_MspInit+0xb0>)
 800a8ca:	f002 fe8b 	bl	800d5e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a8ce:	4b09      	ldr	r3, [pc, #36]	@ (800a8f4 <HAL_I2C_MspInit+0xac>)
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8d2:	4a08      	ldr	r2, [pc, #32]	@ (800a8f4 <HAL_I2C_MspInit+0xac>)
 800a8d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8da:	4b06      	ldr	r3, [pc, #24]	@ (800a8f4 <HAL_I2C_MspInit+0xac>)
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8e2:	60bb      	str	r3, [r7, #8]
 800a8e4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800a8e6:	bf00      	nop
 800a8e8:	3778      	adds	r7, #120	@ 0x78
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	40005400 	.word	0x40005400
 800a8f4:	40021000 	.word	0x40021000
 800a8f8:	48000400 	.word	0x48000400

0800a8fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b09e      	sub	sp, #120	@ 0x78
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a904:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	605a      	str	r2, [r3, #4]
 800a90e:	609a      	str	r2, [r3, #8]
 800a910:	60da      	str	r2, [r3, #12]
 800a912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a914:	f107 0310 	add.w	r3, r7, #16
 800a918:	2254      	movs	r2, #84	@ 0x54
 800a91a:	2100      	movs	r1, #0
 800a91c:	4618      	mov	r0, r3
 800a91e:	f009 fa1b 	bl	8013d58 <memset>
  if(huart->Instance==LPUART1)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a1f      	ldr	r2, [pc, #124]	@ (800a9a4 <HAL_UART_MspInit+0xa8>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d136      	bne.n	800a99a <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a92c:	2320      	movs	r3, #32
 800a92e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a930:	2300      	movs	r3, #0
 800a932:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a934:	f107 0310 	add.w	r3, r7, #16
 800a938:	4618      	mov	r0, r3
 800a93a:	f003 fffb 	bl	800e934 <HAL_RCCEx_PeriphCLKConfig>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a944:	f7ff fe2c 	bl	800a5a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a948:	4b17      	ldr	r3, [pc, #92]	@ (800a9a8 <HAL_UART_MspInit+0xac>)
 800a94a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a94c:	4a16      	ldr	r2, [pc, #88]	@ (800a9a8 <HAL_UART_MspInit+0xac>)
 800a94e:	f043 0301 	orr.w	r3, r3, #1
 800a952:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a954:	4b14      	ldr	r3, [pc, #80]	@ (800a9a8 <HAL_UART_MspInit+0xac>)
 800a956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	60fb      	str	r3, [r7, #12]
 800a95e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a960:	4b11      	ldr	r3, [pc, #68]	@ (800a9a8 <HAL_UART_MspInit+0xac>)
 800a962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a964:	4a10      	ldr	r2, [pc, #64]	@ (800a9a8 <HAL_UART_MspInit+0xac>)
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a96c:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a8 <HAL_UART_MspInit+0xac>)
 800a96e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800a978:	230c      	movs	r3, #12
 800a97a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a97c:	2302      	movs	r3, #2
 800a97e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a980:	2300      	movs	r3, #0
 800a982:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a984:	2300      	movs	r3, #0
 800a986:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800a988:	230c      	movs	r3, #12
 800a98a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a98c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800a990:	4619      	mov	r1, r3
 800a992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a996:	f002 fe25 	bl	800d5e4 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800a99a:	bf00      	nop
 800a99c:	3778      	adds	r7, #120	@ 0x78
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	40008000 	.word	0x40008000
 800a9a8:	40021000 	.word	0x40021000

0800a9ac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b098      	sub	sp, #96	@ 0x60
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a9b4:	f107 030c 	add.w	r3, r7, #12
 800a9b8:	2254      	movs	r2, #84	@ 0x54
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f009 f9cb 	bl	8013d58 <memset>
  if(hrtc->Instance==RTC)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a15      	ldr	r2, [pc, #84]	@ (800aa1c <HAL_RTC_MspInit+0x70>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d123      	bne.n	800aa14 <HAL_RTC_MspInit+0x68>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a9cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a9d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a9d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a9d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f003 ffa9 	bl	800e934 <HAL_RCCEx_PeriphCLKConfig>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a9e8:	f7ff fdda 	bl	800a5a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a9ec:	4b0c      	ldr	r3, [pc, #48]	@ (800aa20 <HAL_RTC_MspInit+0x74>)
 800a9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9f2:	4a0b      	ldr	r2, [pc, #44]	@ (800aa20 <HAL_RTC_MspInit+0x74>)
 800a9f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a9fc:	4b08      	ldr	r3, [pc, #32]	@ (800aa20 <HAL_RTC_MspInit+0x74>)
 800a9fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa00:	4a07      	ldr	r2, [pc, #28]	@ (800aa20 <HAL_RTC_MspInit+0x74>)
 800aa02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800aa06:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa08:	4b05      	ldr	r3, [pc, #20]	@ (800aa20 <HAL_RTC_MspInit+0x74>)
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa10:	60bb      	str	r3, [r7, #8]
 800aa12:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800aa14:	bf00      	nop
 800aa16:	3760      	adds	r7, #96	@ 0x60
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	40002800 	.word	0x40002800
 800aa20:	40021000 	.word	0x40021000

0800aa24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08a      	sub	sp, #40	@ 0x28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa2c:	f107 0314 	add.w	r3, r7, #20
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	605a      	str	r2, [r3, #4]
 800aa36:	609a      	str	r2, [r3, #8]
 800aa38:	60da      	str	r2, [r3, #12]
 800aa3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a17      	ldr	r2, [pc, #92]	@ (800aaa0 <HAL_SPI_MspInit+0x7c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d128      	bne.n	800aa98 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aa46:	4b17      	ldr	r3, [pc, #92]	@ (800aaa4 <HAL_SPI_MspInit+0x80>)
 800aa48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa4a:	4a16      	ldr	r2, [pc, #88]	@ (800aaa4 <HAL_SPI_MspInit+0x80>)
 800aa4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aa50:	6613      	str	r3, [r2, #96]	@ 0x60
 800aa52:	4b14      	ldr	r3, [pc, #80]	@ (800aaa4 <HAL_SPI_MspInit+0x80>)
 800aa54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa5a:	613b      	str	r3, [r7, #16]
 800aa5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa5e:	4b11      	ldr	r3, [pc, #68]	@ (800aaa4 <HAL_SPI_MspInit+0x80>)
 800aa60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa62:	4a10      	ldr	r2, [pc, #64]	@ (800aaa4 <HAL_SPI_MspInit+0x80>)
 800aa64:	f043 0301 	orr.w	r3, r3, #1
 800aa68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <HAL_SPI_MspInit+0x80>)
 800aa6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	60fb      	str	r3, [r7, #12]
 800aa74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800aa76:	23e0      	movs	r3, #224	@ 0xe0
 800aa78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa82:	2300      	movs	r3, #0
 800aa84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800aa86:	2305      	movs	r3, #5
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa8a:	f107 0314 	add.w	r3, r7, #20
 800aa8e:	4619      	mov	r1, r3
 800aa90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800aa94:	f002 fda6 	bl	800d5e4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800aa98:	bf00      	nop
 800aa9a:	3728      	adds	r7, #40	@ 0x28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	40013000 	.word	0x40013000
 800aaa4:	40021000 	.word	0x40021000

0800aaa8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a13      	ldr	r2, [pc, #76]	@ (800ab04 <HAL_TIM_PWM_MspInit+0x5c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d10c      	bne.n	800aad4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800aaba:	4b13      	ldr	r3, [pc, #76]	@ (800ab08 <HAL_TIM_PWM_MspInit+0x60>)
 800aabc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aabe:	4a12      	ldr	r2, [pc, #72]	@ (800ab08 <HAL_TIM_PWM_MspInit+0x60>)
 800aac0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800aac4:	6613      	str	r3, [r2, #96]	@ 0x60
 800aac6:	4b10      	ldr	r3, [pc, #64]	@ (800ab08 <HAL_TIM_PWM_MspInit+0x60>)
 800aac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800aad2:	e010      	b.n	800aaf6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a0c      	ldr	r2, [pc, #48]	@ (800ab0c <HAL_TIM_PWM_MspInit+0x64>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d10b      	bne.n	800aaf6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aade:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <HAL_TIM_PWM_MspInit+0x60>)
 800aae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae2:	4a09      	ldr	r2, [pc, #36]	@ (800ab08 <HAL_TIM_PWM_MspInit+0x60>)
 800aae4:	f043 0302 	orr.w	r3, r3, #2
 800aae8:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaea:	4b07      	ldr	r3, [pc, #28]	@ (800ab08 <HAL_TIM_PWM_MspInit+0x60>)
 800aaec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	60bb      	str	r3, [r7, #8]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	40012c00 	.word	0x40012c00
 800ab08:	40021000 	.word	0x40021000
 800ab0c:	40000400 	.word	0x40000400

0800ab10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab20:	d10c      	bne.n	800ab3c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ab22:	4b12      	ldr	r3, [pc, #72]	@ (800ab6c <HAL_TIM_Base_MspInit+0x5c>)
 800ab24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab26:	4a11      	ldr	r2, [pc, #68]	@ (800ab6c <HAL_TIM_Base_MspInit+0x5c>)
 800ab28:	f043 0301 	orr.w	r3, r3, #1
 800ab2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab6c <HAL_TIM_Base_MspInit+0x5c>)
 800ab30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800ab3a:	e010      	b.n	800ab5e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a0b      	ldr	r2, [pc, #44]	@ (800ab70 <HAL_TIM_Base_MspInit+0x60>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d10b      	bne.n	800ab5e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ab46:	4b09      	ldr	r3, [pc, #36]	@ (800ab6c <HAL_TIM_Base_MspInit+0x5c>)
 800ab48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab4a:	4a08      	ldr	r2, [pc, #32]	@ (800ab6c <HAL_TIM_Base_MspInit+0x5c>)
 800ab4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ab50:	6613      	str	r3, [r2, #96]	@ 0x60
 800ab52:	4b06      	ldr	r3, [pc, #24]	@ (800ab6c <HAL_TIM_Base_MspInit+0x5c>)
 800ab54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab5a:	60bb      	str	r3, [r7, #8]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
}
 800ab5e:	bf00      	nop
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	40021000 	.word	0x40021000
 800ab70:	40013400 	.word	0x40013400

0800ab74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	@ 0x28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab7c:	f107 0314 	add.w	r3, r7, #20
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	605a      	str	r2, [r3, #4]
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a22      	ldr	r2, [pc, #136]	@ (800ac1c <HAL_TIM_MspPostInit+0xa8>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d11d      	bne.n	800abd2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab96:	4b22      	ldr	r3, [pc, #136]	@ (800ac20 <HAL_TIM_MspPostInit+0xac>)
 800ab98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab9a:	4a21      	ldr	r2, [pc, #132]	@ (800ac20 <HAL_TIM_MspPostInit+0xac>)
 800ab9c:	f043 0304 	orr.w	r3, r3, #4
 800aba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aba2:	4b1f      	ldr	r3, [pc, #124]	@ (800ac20 <HAL_TIM_MspPostInit+0xac>)
 800aba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aba6:	f003 0304 	and.w	r3, r3, #4
 800abaa:	613b      	str	r3, [r7, #16]
 800abac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800abae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800abb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abb4:	2302      	movs	r3, #2
 800abb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb8:	2300      	movs	r3, #0
 800abba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abbc:	2300      	movs	r3, #0
 800abbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800abc0:	2304      	movs	r3, #4
 800abc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abc4:	f107 0314 	add.w	r3, r7, #20
 800abc8:	4619      	mov	r1, r3
 800abca:	4816      	ldr	r0, [pc, #88]	@ (800ac24 <HAL_TIM_MspPostInit+0xb0>)
 800abcc:	f002 fd0a 	bl	800d5e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800abd0:	e020      	b.n	800ac14 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a14      	ldr	r2, [pc, #80]	@ (800ac28 <HAL_TIM_MspPostInit+0xb4>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d11b      	bne.n	800ac14 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800abdc:	4b10      	ldr	r3, [pc, #64]	@ (800ac20 <HAL_TIM_MspPostInit+0xac>)
 800abde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abe0:	4a0f      	ldr	r2, [pc, #60]	@ (800ac20 <HAL_TIM_MspPostInit+0xac>)
 800abe2:	f043 0302 	orr.w	r3, r3, #2
 800abe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800abe8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac20 <HAL_TIM_MspPostInit+0xac>)
 800abea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abec:	f003 0302 	and.w	r3, r3, #2
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800abf4:	2380      	movs	r3, #128	@ 0x80
 800abf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf8:	2302      	movs	r3, #2
 800abfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac00:	2300      	movs	r3, #0
 800ac02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 800ac04:	230a      	movs	r3, #10
 800ac06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac08:	f107 0314 	add.w	r3, r7, #20
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4807      	ldr	r0, [pc, #28]	@ (800ac2c <HAL_TIM_MspPostInit+0xb8>)
 800ac10:	f002 fce8 	bl	800d5e4 <HAL_GPIO_Init>
}
 800ac14:	bf00      	nop
 800ac16:	3728      	adds	r7, #40	@ 0x28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	40012c00 	.word	0x40012c00
 800ac20:	40021000 	.word	0x40021000
 800ac24:	48000800 	.word	0x48000800
 800ac28:	40000400 	.word	0x40000400
 800ac2c:	48000400 	.word	0x48000400

0800ac30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ac34:	bf00      	nop
 800ac36:	e7fd      	b.n	800ac34 <NMI_Handler+0x4>

0800ac38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ac3c:	bf00      	nop
 800ac3e:	e7fd      	b.n	800ac3c <HardFault_Handler+0x4>

0800ac40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ac40:	b480      	push	{r7}
 800ac42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ac44:	bf00      	nop
 800ac46:	e7fd      	b.n	800ac44 <MemManage_Handler+0x4>

0800ac48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ac4c:	bf00      	nop
 800ac4e:	e7fd      	b.n	800ac4c <BusFault_Handler+0x4>

0800ac50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac50:	b480      	push	{r7}
 800ac52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ac54:	bf00      	nop
 800ac56:	e7fd      	b.n	800ac54 <UsageFault_Handler+0x4>

0800ac58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ac5c:	bf00      	nop
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ac66:	b480      	push	{r7}
 800ac68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac6a:	bf00      	nop
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ac74:	b480      	push	{r7}
 800ac76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ac78:	bf00      	nop
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ac86:	f000 f961 	bl	800af4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ac8a:	bf00      	nop
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800ac94:	4802      	ldr	r0, [pc, #8]	@ (800aca0 <FDCAN2_IT0_IRQHandler+0x10>)
 800ac96:	f002 fa21 	bl	800d0dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800ac9a:	bf00      	nop
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20001eec 	.word	0x20001eec

0800aca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
  return 1;
 800aca8:	2301      	movs	r3, #1
}
 800acaa:	4618      	mov	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <_kill>:

int _kill(int pid, int sig)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800acbe:	f009 f875 	bl	8013dac <__errno>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2216      	movs	r2, #22
 800acc6:	601a      	str	r2, [r3, #0]
  return -1;
 800acc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <_exit>:

void _exit (int status)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800acdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff ffe7 	bl	800acb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ace6:	bf00      	nop
 800ace8:	e7fd      	b.n	800ace6 <_exit+0x12>

0800acea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b086      	sub	sp, #24
 800acee:	af00      	add	r7, sp, #0
 800acf0:	60f8      	str	r0, [r7, #12]
 800acf2:	60b9      	str	r1, [r7, #8]
 800acf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]
 800acfa:	e00a      	b.n	800ad12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800acfc:	f7ff fc08 	bl	800a510 <__io_getchar>
 800ad00:	4601      	mov	r1, r0
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	60ba      	str	r2, [r7, #8]
 800ad08:	b2ca      	uxtb	r2, r1
 800ad0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	617b      	str	r3, [r7, #20]
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	dbf0      	blt.n	800acfc <_read+0x12>
  }

  return len;
 800ad1a:	687b      	ldr	r3, [r7, #4]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad30:	2300      	movs	r3, #0
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	e009      	b.n	800ad4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	60ba      	str	r2, [r7, #8]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff fbd4 	bl	800a4ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	3301      	adds	r3, #1
 800ad48:	617b      	str	r3, [r7, #20]
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	dbf1      	blt.n	800ad36 <_write+0x12>
  }
  return len;
 800ad52:	687b      	ldr	r3, [r7, #4]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <_close>:

int _close(int file)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ad64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ad84:	605a      	str	r2, [r3, #4]
  return 0;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <_isatty>:

int _isatty(int file)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ad9c:	2301      	movs	r3, #1
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800adaa:	b480      	push	{r7}
 800adac:	b085      	sub	sp, #20
 800adae:	af00      	add	r7, sp, #0
 800adb0:	60f8      	str	r0, [r7, #12]
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3714      	adds	r7, #20
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800adcc:	4a14      	ldr	r2, [pc, #80]	@ (800ae20 <_sbrk+0x5c>)
 800adce:	4b15      	ldr	r3, [pc, #84]	@ (800ae24 <_sbrk+0x60>)
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800add8:	4b13      	ldr	r3, [pc, #76]	@ (800ae28 <_sbrk+0x64>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ade0:	4b11      	ldr	r3, [pc, #68]	@ (800ae28 <_sbrk+0x64>)
 800ade2:	4a12      	ldr	r2, [pc, #72]	@ (800ae2c <_sbrk+0x68>)
 800ade4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ade6:	4b10      	ldr	r3, [pc, #64]	@ (800ae28 <_sbrk+0x64>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4413      	add	r3, r2
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d207      	bcs.n	800ae04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800adf4:	f008 ffda 	bl	8013dac <__errno>
 800adf8:	4603      	mov	r3, r0
 800adfa:	220c      	movs	r2, #12
 800adfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800adfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae02:	e009      	b.n	800ae18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ae04:	4b08      	ldr	r3, [pc, #32]	@ (800ae28 <_sbrk+0x64>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ae0a:	4b07      	ldr	r3, [pc, #28]	@ (800ae28 <_sbrk+0x64>)
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4413      	add	r3, r2
 800ae12:	4a05      	ldr	r2, [pc, #20]	@ (800ae28 <_sbrk+0x64>)
 800ae14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ae16:	68fb      	ldr	r3, [r7, #12]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20020000 	.word	0x20020000
 800ae24:	00000400 	.word	0x00000400
 800ae28:	2000236c 	.word	0x2000236c
 800ae2c:	200024c0 	.word	0x200024c0

0800ae30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ae34:	4b06      	ldr	r3, [pc, #24]	@ (800ae50 <SystemInit+0x20>)
 800ae36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae3a:	4a05      	ldr	r2, [pc, #20]	@ (800ae50 <SystemInit+0x20>)
 800ae3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ae44:	bf00      	nop
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	e000ed00 	.word	0xe000ed00

0800ae54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ae54:	480d      	ldr	r0, [pc, #52]	@ (800ae8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ae56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800ae58:	f7ff ffea 	bl	800ae30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ae5c:	480c      	ldr	r0, [pc, #48]	@ (800ae90 <LoopForever+0x6>)
  ldr r1, =_edata
 800ae5e:	490d      	ldr	r1, [pc, #52]	@ (800ae94 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ae60:	4a0d      	ldr	r2, [pc, #52]	@ (800ae98 <LoopForever+0xe>)
  movs r3, #0
 800ae62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800ae64:	e002      	b.n	800ae6c <LoopCopyDataInit>

0800ae66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ae66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ae68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ae6a:	3304      	adds	r3, #4

0800ae6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ae6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ae6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ae70:	d3f9      	bcc.n	800ae66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ae72:	4a0a      	ldr	r2, [pc, #40]	@ (800ae9c <LoopForever+0x12>)
  ldr r4, =_ebss
 800ae74:	4c0a      	ldr	r4, [pc, #40]	@ (800aea0 <LoopForever+0x16>)
  movs r3, #0
 800ae76:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ae78:	e001      	b.n	800ae7e <LoopFillZerobss>

0800ae7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ae7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ae7c:	3204      	adds	r2, #4

0800ae7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ae7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ae80:	d3fb      	bcc.n	800ae7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ae82:	f008 ff99 	bl	8013db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ae86:	f7fe fdd3 	bl	8009a30 <main>

0800ae8a <LoopForever>:

LoopForever:
    b LoopForever
 800ae8a:	e7fe      	b.n	800ae8a <LoopForever>
  ldr   r0, =_estack
 800ae8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ae90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ae94:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800ae98:	08017fe8 	.word	0x08017fe8
  ldr r2, =_sbss
 800ae9c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800aea0:	200024c0 	.word	0x200024c0

0800aea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800aea4:	e7fe      	b.n	800aea4 <ADC1_2_IRQHandler>

0800aea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aeb0:	2003      	movs	r0, #3
 800aeb2:	f001 fd63 	bl	800c97c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	f000 f80e 	bl	800aed8 <HAL_InitTick>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	71fb      	strb	r3, [r7, #7]
 800aec6:	e001      	b.n	800aecc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800aec8:	f7ff fb70 	bl	800a5ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800aecc:	79fb      	ldrb	r3, [r7, #7]

}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800aee4:	4b16      	ldr	r3, [pc, #88]	@ (800af40 <HAL_InitTick+0x68>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d022      	beq.n	800af32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800aeec:	4b15      	ldr	r3, [pc, #84]	@ (800af44 <HAL_InitTick+0x6c>)
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	4b13      	ldr	r3, [pc, #76]	@ (800af40 <HAL_InitTick+0x68>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aef8:	fbb1 f3f3 	udiv	r3, r1, r3
 800aefc:	fbb2 f3f3 	udiv	r3, r2, r3
 800af00:	4618      	mov	r0, r3
 800af02:	f001 fd7c 	bl	800c9fe <HAL_SYSTICK_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10f      	bne.n	800af2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b0f      	cmp	r3, #15
 800af10:	d809      	bhi.n	800af26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800af12:	2200      	movs	r2, #0
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af1a:	f001 fd3a 	bl	800c992 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800af1e:	4a0a      	ldr	r2, [pc, #40]	@ (800af48 <HAL_InitTick+0x70>)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	e007      	b.n	800af36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]
 800af2a:	e004      	b.n	800af36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	73fb      	strb	r3, [r7, #15]
 800af30:	e001      	b.n	800af36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800af36:	7bfb      	ldrb	r3, [r7, #15]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	20000058 	.word	0x20000058
 800af44:	20000050 	.word	0x20000050
 800af48:	20000054 	.word	0x20000054

0800af4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800af4c:	b480      	push	{r7}
 800af4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800af50:	4b05      	ldr	r3, [pc, #20]	@ (800af68 <HAL_IncTick+0x1c>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	4b05      	ldr	r3, [pc, #20]	@ (800af6c <HAL_IncTick+0x20>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4413      	add	r3, r2
 800af5a:	4a03      	ldr	r2, [pc, #12]	@ (800af68 <HAL_IncTick+0x1c>)
 800af5c:	6013      	str	r3, [r2, #0]
}
 800af5e:	bf00      	nop
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	20002370 	.word	0x20002370
 800af6c:	20000058 	.word	0x20000058

0800af70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800af70:	b480      	push	{r7}
 800af72:	af00      	add	r7, sp, #0
  return uwTick;
 800af74:	4b03      	ldr	r3, [pc, #12]	@ (800af84 <HAL_GetTick+0x14>)
 800af76:	681b      	ldr	r3, [r3, #0]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20002370 	.word	0x20002370

0800af88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800af90:	f7ff ffee 	bl	800af70 <HAL_GetTick>
 800af94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afa0:	d004      	beq.n	800afac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800afa2:	4b09      	ldr	r3, [pc, #36]	@ (800afc8 <HAL_Delay+0x40>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	4413      	add	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800afac:	bf00      	nop
 800afae:	f7ff ffdf 	bl	800af70 <HAL_GetTick>
 800afb2:	4602      	mov	r2, r0
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d8f7      	bhi.n	800afae <HAL_Delay+0x26>
  {
  }
}
 800afbe:	bf00      	nop
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20000058 	.word	0x20000058

0800afcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	431a      	orrs	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	609a      	str	r2, [r3, #8]
}
 800afe6:	bf00      	nop
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b083      	sub	sp, #12
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	431a      	orrs	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	609a      	str	r2, [r3, #8]
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b028:	4618      	mov	r0, r3
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
 800b040:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3360      	adds	r3, #96	@ 0x60
 800b046:	461a      	mov	r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	4b08      	ldr	r3, [pc, #32]	@ (800b078 <LL_ADC_SetOffset+0x44>)
 800b056:	4013      	ands	r3, r2
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	4313      	orrs	r3, r2
 800b064:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b06c:	bf00      	nop
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	03fff000 	.word	0x03fff000

0800b07c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3360      	adds	r3, #96	@ 0x60
 800b08a:	461a      	mov	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3360      	adds	r3, #96	@ 0x60
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b0d2:	bf00      	nop
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b087      	sub	sp, #28
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3360      	adds	r3, #96	@ 0x60
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	431a      	orrs	r2, r3
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800b108:	bf00      	nop
 800b10a:	371c      	adds	r7, #28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3360      	adds	r3, #96	@ 0x60
 800b124:	461a      	mov	r2, r3
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	431a      	orrs	r2, r3
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800b13e:	bf00      	nop
 800b140:	371c      	adds	r7, #28
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	615a      	str	r2, [r3, #20]
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b196:	b480      	push	{r7}
 800b198:	b087      	sub	sp, #28
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3330      	adds	r3, #48	@ 0x30
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	0a1b      	lsrs	r3, r3, #8
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	f003 030c 	and.w	r3, r3, #12
 800b1b2:	4413      	add	r3, r2
 800b1b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f003 031f 	and.w	r3, r3, #31
 800b1c0:	211f      	movs	r1, #31
 800b1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c6:	43db      	mvns	r3, r3
 800b1c8:	401a      	ands	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	0e9b      	lsrs	r3, r3, #26
 800b1ce:	f003 011f 	and.w	r1, r3, #31
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b1e2:	bf00      	nop
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b087      	sub	sp, #28
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3314      	adds	r3, #20
 800b1fe:	461a      	mov	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	0e5b      	lsrs	r3, r3, #25
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	f003 0304 	and.w	r3, r3, #4
 800b20a:	4413      	add	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	0d1b      	lsrs	r3, r3, #20
 800b216:	f003 031f 	and.w	r3, r3, #31
 800b21a:	2107      	movs	r1, #7
 800b21c:	fa01 f303 	lsl.w	r3, r1, r3
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	0d1b      	lsrs	r3, r3, #20
 800b228:	f003 031f 	and.w	r3, r3, #31
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	fa01 f303 	lsl.w	r3, r1, r3
 800b232:	431a      	orrs	r2, r3
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b238:	bf00      	nop
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b25c:	43db      	mvns	r3, r3
 800b25e:	401a      	ands	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f003 0318 	and.w	r3, r3, #24
 800b266:	4908      	ldr	r1, [pc, #32]	@ (800b288 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b268:	40d9      	lsrs	r1, r3
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	400b      	ands	r3, r1
 800b26e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b272:	431a      	orrs	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b27a:	bf00      	nop
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	0007ffff 	.word	0x0007ffff

0800b28c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	f003 031f 	and.w	r3, r3, #31
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b2d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6093      	str	r3, [r2, #8]
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2fc:	d101      	bne.n	800b302 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e000      	b.n	800b304 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b324:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b34c:	d101      	bne.n	800b352 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b370:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b374:	f043 0201 	orr.w	r2, r3, #1
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f003 0301 	and.w	r3, r3, #1
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d101      	bne.n	800b3a0 <LL_ADC_IsEnabled+0x18>
 800b39c:	2301      	movs	r3, #1
 800b39e:	e000      	b.n	800b3a2 <LL_ADC_IsEnabled+0x1a>
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3c2:	f043 0204 	orr.w	r2, r3, #4
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b083      	sub	sp, #12
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f003 0304 	and.w	r3, r3, #4
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	d101      	bne.n	800b3ee <LL_ADC_REG_IsConversionOngoing+0x18>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e000      	b.n	800b3f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f003 0308 	and.w	r3, r3, #8
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d101      	bne.n	800b414 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b410:	2301      	movs	r3, #1
 800b412:	e000      	b.n	800b416 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	370c      	adds	r7, #12
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
	...

0800b424 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b424:	b590      	push	{r4, r7, lr}
 800b426:	b089      	sub	sp, #36	@ 0x24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e1a9      	b.n	800b792 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d109      	bne.n	800b460 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff f8d1 	bl	800a5f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4618      	mov	r0, r3
 800b466:	f7ff ff3f 	bl	800b2e8 <LL_ADC_IsDeepPowerDownEnabled>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d004      	beq.n	800b47a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff ff25 	bl	800b2c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff ff5a 	bl	800b338 <LL_ADC_IsInternalRegulatorEnabled>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d115      	bne.n	800b4b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff ff3e 	bl	800b310 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b494:	4b9c      	ldr	r3, [pc, #624]	@ (800b708 <HAL_ADC_Init+0x2e4>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	099b      	lsrs	r3, r3, #6
 800b49a:	4a9c      	ldr	r2, [pc, #624]	@ (800b70c <HAL_ADC_Init+0x2e8>)
 800b49c:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a0:	099b      	lsrs	r3, r3, #6
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b4a8:	e002      	b.n	800b4b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1f9      	bne.n	800b4aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff ff3c 	bl	800b338 <LL_ADC_IsInternalRegulatorEnabled>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10d      	bne.n	800b4e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4ca:	f043 0210 	orr.w	r2, r3, #16
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4d6:	f043 0201 	orr.w	r2, r3, #1
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff ff75 	bl	800b3d6 <LL_ADC_REG_IsConversionOngoing>
 800b4ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4f2:	f003 0310 	and.w	r3, r3, #16
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f040 8142 	bne.w	800b780 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 813e 	bne.w	800b780 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b508:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b50c:	f043 0202 	orr.w	r2, r3, #2
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff ff35 	bl	800b388 <LL_ADC_IsEnabled>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d141      	bne.n	800b5a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b52c:	d004      	beq.n	800b538 <HAL_ADC_Init+0x114>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a77      	ldr	r2, [pc, #476]	@ (800b710 <HAL_ADC_Init+0x2ec>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d10f      	bne.n	800b558 <HAL_ADC_Init+0x134>
 800b538:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b53c:	f7ff ff24 	bl	800b388 <LL_ADC_IsEnabled>
 800b540:	4604      	mov	r4, r0
 800b542:	4873      	ldr	r0, [pc, #460]	@ (800b710 <HAL_ADC_Init+0x2ec>)
 800b544:	f7ff ff20 	bl	800b388 <LL_ADC_IsEnabled>
 800b548:	4603      	mov	r3, r0
 800b54a:	4323      	orrs	r3, r4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bf0c      	ite	eq
 800b550:	2301      	moveq	r3, #1
 800b552:	2300      	movne	r3, #0
 800b554:	b2db      	uxtb	r3, r3
 800b556:	e012      	b.n	800b57e <HAL_ADC_Init+0x15a>
 800b558:	486e      	ldr	r0, [pc, #440]	@ (800b714 <HAL_ADC_Init+0x2f0>)
 800b55a:	f7ff ff15 	bl	800b388 <LL_ADC_IsEnabled>
 800b55e:	4604      	mov	r4, r0
 800b560:	486d      	ldr	r0, [pc, #436]	@ (800b718 <HAL_ADC_Init+0x2f4>)
 800b562:	f7ff ff11 	bl	800b388 <LL_ADC_IsEnabled>
 800b566:	4603      	mov	r3, r0
 800b568:	431c      	orrs	r4, r3
 800b56a:	486c      	ldr	r0, [pc, #432]	@ (800b71c <HAL_ADC_Init+0x2f8>)
 800b56c:	f7ff ff0c 	bl	800b388 <LL_ADC_IsEnabled>
 800b570:	4603      	mov	r3, r0
 800b572:	4323      	orrs	r3, r4
 800b574:	2b00      	cmp	r3, #0
 800b576:	bf0c      	ite	eq
 800b578:	2301      	moveq	r3, #1
 800b57a:	2300      	movne	r3, #0
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d012      	beq.n	800b5a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b58a:	d004      	beq.n	800b596 <HAL_ADC_Init+0x172>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a5f      	ldr	r2, [pc, #380]	@ (800b710 <HAL_ADC_Init+0x2ec>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d101      	bne.n	800b59a <HAL_ADC_Init+0x176>
 800b596:	4a62      	ldr	r2, [pc, #392]	@ (800b720 <HAL_ADC_Init+0x2fc>)
 800b598:	e000      	b.n	800b59c <HAL_ADC_Init+0x178>
 800b59a:	4a62      	ldr	r2, [pc, #392]	@ (800b724 <HAL_ADC_Init+0x300>)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f7ff fd12 	bl	800afcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	7f5b      	ldrb	r3, [r3, #29]
 800b5ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b5b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b5be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d106      	bne.n	800b5e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	045b      	lsls	r3, r3, #17
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	4b48      	ldr	r3, [pc, #288]	@ (800b728 <HAL_ADC_Init+0x304>)
 800b608:	4013      	ands	r3, r2
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6812      	ldr	r2, [r2, #0]
 800b60e:	69b9      	ldr	r1, [r7, #24]
 800b610:	430b      	orrs	r3, r1
 800b612:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	430a      	orrs	r2, r1
 800b628:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff fee4 	bl	800b3fc <LL_ADC_INJ_IsConversionOngoing>
 800b634:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d17f      	bne.n	800b73c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d17c      	bne.n	800b73c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b646:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b64e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b650:	4313      	orrs	r3, r2
 800b652:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b65e:	f023 0302 	bic.w	r3, r3, #2
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	6812      	ldr	r2, [r2, #0]
 800b666:	69b9      	ldr	r1, [r7, #24]
 800b668:	430b      	orrs	r3, r1
 800b66a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d017      	beq.n	800b6a4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	691a      	ldr	r2, [r3, #16]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b682:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b68c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b690:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	6911      	ldr	r1, [r2, #16]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	430b      	orrs	r3, r1
 800b69e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800b6a2:	e013      	b.n	800b6cc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b6b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	6812      	ldr	r2, [r2, #0]
 800b6c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b6c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6c8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d12a      	bne.n	800b72c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	691b      	ldr	r3, [r3, #16]
 800b6dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b6e0:	f023 0304 	bic.w	r3, r3, #4
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b6ec:	4311      	orrs	r1, r2
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b6f2:	4311      	orrs	r1, r2
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f042 0201 	orr.w	r2, r2, #1
 800b704:	611a      	str	r2, [r3, #16]
 800b706:	e019      	b.n	800b73c <HAL_ADC_Init+0x318>
 800b708:	20000050 	.word	0x20000050
 800b70c:	053e2d63 	.word	0x053e2d63
 800b710:	50000100 	.word	0x50000100
 800b714:	50000400 	.word	0x50000400
 800b718:	50000500 	.word	0x50000500
 800b71c:	50000600 	.word	0x50000600
 800b720:	50000300 	.word	0x50000300
 800b724:	50000700 	.word	0x50000700
 800b728:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	691a      	ldr	r2, [r3, #16]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0201 	bic.w	r2, r2, #1
 800b73a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d10c      	bne.n	800b75e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b74a:	f023 010f 	bic.w	r1, r3, #15
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	1e5a      	subs	r2, r3, #1
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	430a      	orrs	r2, r1
 800b75a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b75c:	e007      	b.n	800b76e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f022 020f 	bic.w	r2, r2, #15
 800b76c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b772:	f023 0303 	bic.w	r3, r3, #3
 800b776:	f043 0201 	orr.w	r2, r3, #1
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b77e:	e007      	b.n	800b790 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b784:	f043 0210 	orr.w	r2, r3, #16
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b790:	7ffb      	ldrb	r3, [r7, #31]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3724      	adds	r7, #36	@ 0x24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd90      	pop	{r4, r7, pc}
 800b79a:	bf00      	nop

0800b79c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7ac:	d004      	beq.n	800b7b8 <HAL_ADC_Start+0x1c>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a67      	ldr	r2, [pc, #412]	@ (800b950 <HAL_ADC_Start+0x1b4>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d101      	bne.n	800b7bc <HAL_ADC_Start+0x20>
 800b7b8:	4b66      	ldr	r3, [pc, #408]	@ (800b954 <HAL_ADC_Start+0x1b8>)
 800b7ba:	e000      	b.n	800b7be <HAL_ADC_Start+0x22>
 800b7bc:	4b66      	ldr	r3, [pc, #408]	@ (800b958 <HAL_ADC_Start+0x1bc>)
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fd64 	bl	800b28c <LL_ADC_GetMultimode>
 800b7c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7ff fe03 	bl	800b3d6 <LL_ADC_REG_IsConversionOngoing>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f040 80b4 	bne.w	800b940 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <HAL_ADC_Start+0x4a>
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e0af      	b.n	800b946 <HAL_ADC_Start+0x1aa>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 fe0c 	bl	800c40c <ADC_Enable>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800b7f8:	7dfb      	ldrb	r3, [r7, #23]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f040 809b 	bne.w	800b936 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b804:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b808:	f023 0301 	bic.w	r3, r3, #1
 800b80c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a4d      	ldr	r2, [pc, #308]	@ (800b950 <HAL_ADC_Start+0x1b4>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d009      	beq.n	800b832 <HAL_ADC_Start+0x96>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a4e      	ldr	r2, [pc, #312]	@ (800b95c <HAL_ADC_Start+0x1c0>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d002      	beq.n	800b82e <HAL_ADC_Start+0x92>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	e003      	b.n	800b836 <HAL_ADC_Start+0x9a>
 800b82e:	4b4c      	ldr	r3, [pc, #304]	@ (800b960 <HAL_ADC_Start+0x1c4>)
 800b830:	e001      	b.n	800b836 <HAL_ADC_Start+0x9a>
 800b832:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	6812      	ldr	r2, [r2, #0]
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d002      	beq.n	800b844 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b848:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b85c:	d106      	bne.n	800b86c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b862:	f023 0206 	bic.w	r2, r3, #6
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	661a      	str	r2, [r3, #96]	@ 0x60
 800b86a:	e002      	b.n	800b872 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	221c      	movs	r2, #28
 800b878:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a32      	ldr	r2, [pc, #200]	@ (800b950 <HAL_ADC_Start+0x1b4>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d009      	beq.n	800b8a0 <HAL_ADC_Start+0x104>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a32      	ldr	r2, [pc, #200]	@ (800b95c <HAL_ADC_Start+0x1c0>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d002      	beq.n	800b89c <HAL_ADC_Start+0x100>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	e003      	b.n	800b8a4 <HAL_ADC_Start+0x108>
 800b89c:	4b30      	ldr	r3, [pc, #192]	@ (800b960 <HAL_ADC_Start+0x1c4>)
 800b89e:	e001      	b.n	800b8a4 <HAL_ADC_Start+0x108>
 800b8a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6812      	ldr	r2, [r2, #0]
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d008      	beq.n	800b8be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d005      	beq.n	800b8be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b05      	cmp	r3, #5
 800b8b6:	d002      	beq.n	800b8be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	2b09      	cmp	r3, #9
 800b8bc:	d114      	bne.n	800b8e8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d007      	beq.n	800b8dc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b8d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff fd64 	bl	800b3ae <LL_ADC_REG_StartConversion>
 800b8e6:	e02d      	b.n	800b944 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a15      	ldr	r2, [pc, #84]	@ (800b950 <HAL_ADC_Start+0x1b4>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d009      	beq.n	800b912 <HAL_ADC_Start+0x176>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a16      	ldr	r2, [pc, #88]	@ (800b95c <HAL_ADC_Start+0x1c0>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d002      	beq.n	800b90e <HAL_ADC_Start+0x172>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	e003      	b.n	800b916 <HAL_ADC_Start+0x17a>
 800b90e:	4b14      	ldr	r3, [pc, #80]	@ (800b960 <HAL_ADC_Start+0x1c4>)
 800b910:	e001      	b.n	800b916 <HAL_ADC_Start+0x17a>
 800b912:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b916:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00f      	beq.n	800b944 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b928:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b92c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b934:	e006      	b.n	800b944 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800b93e:	e001      	b.n	800b944 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b940:	2302      	movs	r3, #2
 800b942:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b944:	7dfb      	ldrb	r3, [r7, #23]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	50000100 	.word	0x50000100
 800b954:	50000300 	.word	0x50000300
 800b958:	50000700 	.word	0x50000700
 800b95c:	50000500 	.word	0x50000500
 800b960:	50000400 	.word	0x50000400

0800b964 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b976:	d004      	beq.n	800b982 <HAL_ADC_PollForConversion+0x1e>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a77      	ldr	r2, [pc, #476]	@ (800bb5c <HAL_ADC_PollForConversion+0x1f8>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d101      	bne.n	800b986 <HAL_ADC_PollForConversion+0x22>
 800b982:	4b77      	ldr	r3, [pc, #476]	@ (800bb60 <HAL_ADC_PollForConversion+0x1fc>)
 800b984:	e000      	b.n	800b988 <HAL_ADC_PollForConversion+0x24>
 800b986:	4b77      	ldr	r3, [pc, #476]	@ (800bb64 <HAL_ADC_PollForConversion+0x200>)
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fc7f 	bl	800b28c <LL_ADC_GetMultimode>
 800b98e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	2b08      	cmp	r3, #8
 800b996:	d102      	bne.n	800b99e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800b998:	2308      	movs	r3, #8
 800b99a:	61fb      	str	r3, [r7, #28]
 800b99c:	e037      	b.n	800ba0e <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d005      	beq.n	800b9b0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	2b05      	cmp	r3, #5
 800b9a8:	d002      	beq.n	800b9b0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	2b09      	cmp	r3, #9
 800b9ae:	d111      	bne.n	800b9d4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d007      	beq.n	800b9ce <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9c2:	f043 0220 	orr.w	r2, r3, #32
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e0c1      	b.n	800bb52 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800b9ce:	2304      	movs	r3, #4
 800b9d0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b9d2:	e01c      	b.n	800ba0e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9dc:	d004      	beq.n	800b9e8 <HAL_ADC_PollForConversion+0x84>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a5e      	ldr	r2, [pc, #376]	@ (800bb5c <HAL_ADC_PollForConversion+0x1f8>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d101      	bne.n	800b9ec <HAL_ADC_PollForConversion+0x88>
 800b9e8:	4b5d      	ldr	r3, [pc, #372]	@ (800bb60 <HAL_ADC_PollForConversion+0x1fc>)
 800b9ea:	e000      	b.n	800b9ee <HAL_ADC_PollForConversion+0x8a>
 800b9ec:	4b5d      	ldr	r3, [pc, #372]	@ (800bb64 <HAL_ADC_PollForConversion+0x200>)
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fc5a 	bl	800b2a8 <LL_ADC_GetMultiDMATransfer>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d007      	beq.n	800ba0a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9fe:	f043 0220 	orr.w	r2, r3, #32
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e0a3      	b.n	800bb52 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800ba0a:	2304      	movs	r3, #4
 800ba0c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800ba0e:	f7ff faaf 	bl	800af70 <HAL_GetTick>
 800ba12:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ba14:	e021      	b.n	800ba5a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba1c:	d01d      	beq.n	800ba5a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800ba1e:	f7ff faa7 	bl	800af70 <HAL_GetTick>
 800ba22:	4602      	mov	r2, r0
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d302      	bcc.n	800ba34 <HAL_ADC_PollForConversion+0xd0>
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d112      	bne.n	800ba5a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10b      	bne.n	800ba5a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba46:	f043 0204 	orr.w	r2, r3, #4
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800ba56:	2303      	movs	r3, #3
 800ba58:	e07b      	b.n	800bb52 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	4013      	ands	r3, r2
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0d6      	beq.n	800ba16 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff fb79 	bl	800b170 <LL_ADC_REG_IsTriggerSourceSWStart>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d01c      	beq.n	800babe <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	7f5b      	ldrb	r3, [r3, #29]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d118      	bne.n	800babe <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0308 	and.w	r3, r3, #8
 800ba96:	2b08      	cmp	r3, #8
 800ba98:	d111      	bne.n	800babe <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d105      	bne.n	800babe <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bab6:	f043 0201 	orr.w	r2, r3, #1
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a26      	ldr	r2, [pc, #152]	@ (800bb5c <HAL_ADC_PollForConversion+0x1f8>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d009      	beq.n	800badc <HAL_ADC_PollForConversion+0x178>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a26      	ldr	r2, [pc, #152]	@ (800bb68 <HAL_ADC_PollForConversion+0x204>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d002      	beq.n	800bad8 <HAL_ADC_PollForConversion+0x174>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	e003      	b.n	800bae0 <HAL_ADC_PollForConversion+0x17c>
 800bad8:	4b24      	ldr	r3, [pc, #144]	@ (800bb6c <HAL_ADC_PollForConversion+0x208>)
 800bada:	e001      	b.n	800bae0 <HAL_ADC_PollForConversion+0x17c>
 800badc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	6812      	ldr	r2, [r2, #0]
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d008      	beq.n	800bafa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d005      	beq.n	800bafa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b05      	cmp	r3, #5
 800baf2:	d002      	beq.n	800bafa <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	2b09      	cmp	r3, #9
 800baf8:	d104      	bne.n	800bb04 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	61bb      	str	r3, [r7, #24]
 800bb02:	e014      	b.n	800bb2e <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a14      	ldr	r2, [pc, #80]	@ (800bb5c <HAL_ADC_PollForConversion+0x1f8>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d009      	beq.n	800bb22 <HAL_ADC_PollForConversion+0x1be>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a15      	ldr	r2, [pc, #84]	@ (800bb68 <HAL_ADC_PollForConversion+0x204>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d002      	beq.n	800bb1e <HAL_ADC_PollForConversion+0x1ba>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	e003      	b.n	800bb26 <HAL_ADC_PollForConversion+0x1c2>
 800bb1e:	4b13      	ldr	r3, [pc, #76]	@ (800bb6c <HAL_ADC_PollForConversion+0x208>)
 800bb20:	e001      	b.n	800bb26 <HAL_ADC_PollForConversion+0x1c2>
 800bb22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800bb26:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	2b08      	cmp	r3, #8
 800bb32:	d104      	bne.n	800bb3e <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2208      	movs	r2, #8
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	e008      	b.n	800bb50 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d103      	bne.n	800bb50 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	220c      	movs	r2, #12
 800bb4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3720      	adds	r7, #32
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	50000100 	.word	0x50000100
 800bb60:	50000300 	.word	0x50000300
 800bb64:	50000700 	.word	0x50000700
 800bb68:	50000500 	.word	0x50000500
 800bb6c:	50000400 	.word	0x50000400

0800bb70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
	...

0800bb8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b0b6      	sub	sp, #216	@ 0xd8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d102      	bne.n	800bbb0 <HAL_ADC_ConfigChannel+0x24>
 800bbaa:	2302      	movs	r3, #2
 800bbac:	f000 bc13 	b.w	800c3d6 <HAL_ADC_ConfigChannel+0x84a>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7ff fc0a 	bl	800b3d6 <LL_ADC_REG_IsConversionOngoing>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f040 83f3 	bne.w	800c3b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6818      	ldr	r0, [r3, #0]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	6859      	ldr	r1, [r3, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	f7ff fadd 	bl	800b196 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff fbf8 	bl	800b3d6 <LL_ADC_REG_IsConversionOngoing>
 800bbe6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff fc04 	bl	800b3fc <LL_ADC_INJ_IsConversionOngoing>
 800bbf4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bbf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f040 81d9 	bne.w	800bfb4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bc02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f040 81d4 	bne.w	800bfb4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc14:	d10f      	bne.n	800bc36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6818      	ldr	r0, [r3, #0]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4619      	mov	r1, r3
 800bc22:	f7ff fae4 	bl	800b1ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff fa8b 	bl	800b14a <LL_ADC_SetSamplingTimeCommonConfig>
 800bc34:	e00e      	b.n	800bc54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	6819      	ldr	r1, [r3, #0]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	461a      	mov	r2, r3
 800bc44:	f7ff fad3 	bl	800b1ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff fa7b 	bl	800b14a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	695a      	ldr	r2, [r3, #20]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	08db      	lsrs	r3, r3, #3
 800bc60:	f003 0303 	and.w	r3, r3, #3
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	fa02 f303 	lsl.w	r3, r2, r3
 800bc6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	d022      	beq.n	800bcbc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	6919      	ldr	r1, [r3, #16]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc86:	f7ff f9d5 	bl	800b034 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	6919      	ldr	r1, [r3, #16]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7ff fa21 	bl	800b0de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6818      	ldr	r0, [r3, #0]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d102      	bne.n	800bcb2 <HAL_ADC_ConfigChannel+0x126>
 800bcac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bcb0:	e000      	b.n	800bcb4 <HAL_ADC_ConfigChannel+0x128>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f7ff fa2d 	bl	800b114 <LL_ADC_SetOffsetSaturation>
 800bcba:	e17b      	b.n	800bfb4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff f9da 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <HAL_ADC_ConfigChannel+0x15c>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff f9cf 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bcde:	4603      	mov	r3, r0
 800bce0:	0e9b      	lsrs	r3, r3, #26
 800bce2:	f003 021f 	and.w	r2, r3, #31
 800bce6:	e01e      	b.n	800bd26 <HAL_ADC_ConfigChannel+0x19a>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2100      	movs	r1, #0
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff f9c4 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bcfe:	fa93 f3a3 	rbit	r3, r3
 800bd02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bd06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bd0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800bd16:	2320      	movs	r3, #32
 800bd18:	e004      	b.n	800bd24 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800bd1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bd1e:	fab3 f383 	clz	r3, r3
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d105      	bne.n	800bd3e <HAL_ADC_ConfigChannel+0x1b2>
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	0e9b      	lsrs	r3, r3, #26
 800bd38:	f003 031f 	and.w	r3, r3, #31
 800bd3c:	e018      	b.n	800bd70 <HAL_ADC_ConfigChannel+0x1e4>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd4a:	fa93 f3a3 	rbit	r3, r3
 800bd4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800bd52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800bd5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800bd62:	2320      	movs	r3, #32
 800bd64:	e004      	b.n	800bd70 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800bd66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd6a:	fab3 f383 	clz	r3, r3
 800bd6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d106      	bne.n	800bd82 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff f993 	bl	800b0a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2101      	movs	r1, #1
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7ff f977 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <HAL_ADC_ConfigChannel+0x222>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2101      	movs	r1, #1
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff f96c 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bda4:	4603      	mov	r3, r0
 800bda6:	0e9b      	lsrs	r3, r3, #26
 800bda8:	f003 021f 	and.w	r2, r3, #31
 800bdac:	e01e      	b.n	800bdec <HAL_ADC_ConfigChannel+0x260>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff f961 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdc4:	fa93 f3a3 	rbit	r3, r3
 800bdc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800bdcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bdd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800bdd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d101      	bne.n	800bde0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800bddc:	2320      	movs	r3, #32
 800bdde:	e004      	b.n	800bdea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800bde0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bde4:	fab3 f383 	clz	r3, r3
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d105      	bne.n	800be04 <HAL_ADC_ConfigChannel+0x278>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	0e9b      	lsrs	r3, r3, #26
 800bdfe:	f003 031f 	and.w	r3, r3, #31
 800be02:	e018      	b.n	800be36 <HAL_ADC_ConfigChannel+0x2aa>
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be10:	fa93 f3a3 	rbit	r3, r3
 800be14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800be18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800be1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800be20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800be28:	2320      	movs	r3, #32
 800be2a:	e004      	b.n	800be36 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800be2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be30:	fab3 f383 	clz	r3, r3
 800be34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800be36:	429a      	cmp	r2, r3
 800be38:	d106      	bne.n	800be48 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2200      	movs	r2, #0
 800be40:	2101      	movs	r1, #1
 800be42:	4618      	mov	r0, r3
 800be44:	f7ff f930 	bl	800b0a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2102      	movs	r1, #2
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff f914 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800be54:	4603      	mov	r3, r0
 800be56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10a      	bne.n	800be74 <HAL_ADC_ConfigChannel+0x2e8>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2102      	movs	r1, #2
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff f909 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800be6a:	4603      	mov	r3, r0
 800be6c:	0e9b      	lsrs	r3, r3, #26
 800be6e:	f003 021f 	and.w	r2, r3, #31
 800be72:	e01e      	b.n	800beb2 <HAL_ADC_ConfigChannel+0x326>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2102      	movs	r1, #2
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff f8fe 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800be80:	4603      	mov	r3, r0
 800be82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be8a:	fa93 f3a3 	rbit	r3, r3
 800be8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800be92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800be9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800bea2:	2320      	movs	r3, #32
 800bea4:	e004      	b.n	800beb0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800bea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800beaa:	fab3 f383 	clz	r3, r3
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d105      	bne.n	800beca <HAL_ADC_ConfigChannel+0x33e>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	0e9b      	lsrs	r3, r3, #26
 800bec4:	f003 031f 	and.w	r3, r3, #31
 800bec8:	e016      	b.n	800bef8 <HAL_ADC_ConfigChannel+0x36c>
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bed6:	fa93 f3a3 	rbit	r3, r3
 800beda:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800bedc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bede:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800bee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800beea:	2320      	movs	r3, #32
 800beec:	e004      	b.n	800bef8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800beee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bef2:	fab3 f383 	clz	r3, r3
 800bef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bef8:	429a      	cmp	r2, r3
 800befa:	d106      	bne.n	800bf0a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2200      	movs	r2, #0
 800bf02:	2102      	movs	r1, #2
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff f8cf 	bl	800b0a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2103      	movs	r1, #3
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff f8b3 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bf16:	4603      	mov	r3, r0
 800bf18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10a      	bne.n	800bf36 <HAL_ADC_ConfigChannel+0x3aa>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2103      	movs	r1, #3
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff f8a8 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	0e9b      	lsrs	r3, r3, #26
 800bf30:	f003 021f 	and.w	r2, r3, #31
 800bf34:	e017      	b.n	800bf66 <HAL_ADC_ConfigChannel+0x3da>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2103      	movs	r1, #3
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff f89d 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bf42:	4603      	mov	r3, r0
 800bf44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf48:	fa93 f3a3 	rbit	r3, r3
 800bf4c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800bf4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf50:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800bf52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800bf58:	2320      	movs	r3, #32
 800bf5a:	e003      	b.n	800bf64 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800bf5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf5e:	fab3 f383 	clz	r3, r3
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d105      	bne.n	800bf7e <HAL_ADC_ConfigChannel+0x3f2>
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	0e9b      	lsrs	r3, r3, #26
 800bf78:	f003 031f 	and.w	r3, r3, #31
 800bf7c:	e011      	b.n	800bfa2 <HAL_ADC_ConfigChannel+0x416>
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf86:	fa93 f3a3 	rbit	r3, r3
 800bf8a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800bf8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800bf90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800bf96:	2320      	movs	r3, #32
 800bf98:	e003      	b.n	800bfa2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800bf9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf9c:	fab3 f383 	clz	r3, r3
 800bfa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d106      	bne.n	800bfb4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2103      	movs	r1, #3
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff f87a 	bl	800b0a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff f9e5 	bl	800b388 <LL_ADC_IsEnabled>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f040 813d 	bne.w	800c240 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	6819      	ldr	r1, [r3, #0]
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	f7ff f936 	bl	800b244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	4aa2      	ldr	r2, [pc, #648]	@ (800c268 <HAL_ADC_ConfigChannel+0x6dc>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	f040 812e 	bne.w	800c240 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10b      	bne.n	800c00c <HAL_ADC_ConfigChannel+0x480>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	0e9b      	lsrs	r3, r3, #26
 800bffa:	3301      	adds	r3, #1
 800bffc:	f003 031f 	and.w	r3, r3, #31
 800c000:	2b09      	cmp	r3, #9
 800c002:	bf94      	ite	ls
 800c004:	2301      	movls	r3, #1
 800c006:	2300      	movhi	r3, #0
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	e019      	b.n	800c040 <HAL_ADC_ConfigChannel+0x4b4>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c014:	fa93 f3a3 	rbit	r3, r3
 800c018:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800c01a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c01c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800c01e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800c024:	2320      	movs	r3, #32
 800c026:	e003      	b.n	800c030 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800c028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c02a:	fab3 f383 	clz	r3, r3
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	3301      	adds	r3, #1
 800c032:	f003 031f 	and.w	r3, r3, #31
 800c036:	2b09      	cmp	r3, #9
 800c038:	bf94      	ite	ls
 800c03a:	2301      	movls	r3, #1
 800c03c:	2300      	movhi	r3, #0
 800c03e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c040:	2b00      	cmp	r3, #0
 800c042:	d079      	beq.n	800c138 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d107      	bne.n	800c060 <HAL_ADC_ConfigChannel+0x4d4>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	0e9b      	lsrs	r3, r3, #26
 800c056:	3301      	adds	r3, #1
 800c058:	069b      	lsls	r3, r3, #26
 800c05a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c05e:	e015      	b.n	800c08c <HAL_ADC_ConfigChannel+0x500>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c068:	fa93 f3a3 	rbit	r3, r3
 800c06c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800c06e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c070:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800c072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800c078:	2320      	movs	r3, #32
 800c07a:	e003      	b.n	800c084 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800c07c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07e:	fab3 f383 	clz	r3, r3
 800c082:	b2db      	uxtb	r3, r3
 800c084:	3301      	adds	r3, #1
 800c086:	069b      	lsls	r3, r3, #26
 800c088:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c094:	2b00      	cmp	r3, #0
 800c096:	d109      	bne.n	800c0ac <HAL_ADC_ConfigChannel+0x520>
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	0e9b      	lsrs	r3, r3, #26
 800c09e:	3301      	adds	r3, #1
 800c0a0:	f003 031f 	and.w	r3, r3, #31
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c0aa:	e017      	b.n	800c0dc <HAL_ADC_ConfigChannel+0x550>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0b4:	fa93 f3a3 	rbit	r3, r3
 800c0b8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800c0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800c0be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d101      	bne.n	800c0c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800c0c4:	2320      	movs	r3, #32
 800c0c6:	e003      	b.n	800c0d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800c0c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0ca:	fab3 f383 	clz	r3, r3
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	f003 031f 	and.w	r3, r3, #31
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c0dc:	ea42 0103 	orr.w	r1, r2, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d10a      	bne.n	800c102 <HAL_ADC_ConfigChannel+0x576>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	0e9b      	lsrs	r3, r3, #26
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	f003 021f 	and.w	r2, r3, #31
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	005b      	lsls	r3, r3, #1
 800c0fc:	4413      	add	r3, r2
 800c0fe:	051b      	lsls	r3, r3, #20
 800c100:	e018      	b.n	800c134 <HAL_ADC_ConfigChannel+0x5a8>
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10a:	fa93 f3a3 	rbit	r3, r3
 800c10e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800c110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800c114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800c11a:	2320      	movs	r3, #32
 800c11c:	e003      	b.n	800c126 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800c11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c120:	fab3 f383 	clz	r3, r3
 800c124:	b2db      	uxtb	r3, r3
 800c126:	3301      	adds	r3, #1
 800c128:	f003 021f 	and.w	r2, r3, #31
 800c12c:	4613      	mov	r3, r2
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	4413      	add	r3, r2
 800c132:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c134:	430b      	orrs	r3, r1
 800c136:	e07e      	b.n	800c236 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c140:	2b00      	cmp	r3, #0
 800c142:	d107      	bne.n	800c154 <HAL_ADC_ConfigChannel+0x5c8>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	0e9b      	lsrs	r3, r3, #26
 800c14a:	3301      	adds	r3, #1
 800c14c:	069b      	lsls	r3, r3, #26
 800c14e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c152:	e015      	b.n	800c180 <HAL_ADC_ConfigChannel+0x5f4>
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c15c:	fa93 f3a3 	rbit	r3, r3
 800c160:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c164:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800c166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d101      	bne.n	800c170 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800c16c:	2320      	movs	r3, #32
 800c16e:	e003      	b.n	800c178 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c172:	fab3 f383 	clz	r3, r3
 800c176:	b2db      	uxtb	r3, r3
 800c178:	3301      	adds	r3, #1
 800c17a:	069b      	lsls	r3, r3, #26
 800c17c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d109      	bne.n	800c1a0 <HAL_ADC_ConfigChannel+0x614>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	0e9b      	lsrs	r3, r3, #26
 800c192:	3301      	adds	r3, #1
 800c194:	f003 031f 	and.w	r3, r3, #31
 800c198:	2101      	movs	r1, #1
 800c19a:	fa01 f303 	lsl.w	r3, r1, r3
 800c19e:	e017      	b.n	800c1d0 <HAL_ADC_ConfigChannel+0x644>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	fa93 f3a3 	rbit	r3, r3
 800c1ac:	61fb      	str	r3, [r7, #28]
  return result;
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800c1b8:	2320      	movs	r3, #32
 800c1ba:	e003      	b.n	800c1c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1be:	fab3 f383 	clz	r3, r3
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	f003 031f 	and.w	r3, r3, #31
 800c1ca:	2101      	movs	r1, #1
 800c1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d0:	ea42 0103 	orr.w	r1, r2, r3
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10d      	bne.n	800c1fc <HAL_ADC_ConfigChannel+0x670>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	0e9b      	lsrs	r3, r3, #26
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	f003 021f 	and.w	r2, r3, #31
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	005b      	lsls	r3, r3, #1
 800c1f0:	4413      	add	r3, r2
 800c1f2:	3b1e      	subs	r3, #30
 800c1f4:	051b      	lsls	r3, r3, #20
 800c1f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c1fa:	e01b      	b.n	800c234 <HAL_ADC_ConfigChannel+0x6a8>
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	fa93 f3a3 	rbit	r3, r3
 800c208:	613b      	str	r3, [r7, #16]
  return result;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800c214:	2320      	movs	r3, #32
 800c216:	e003      	b.n	800c220 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	fab3 f383 	clz	r3, r3
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	3301      	adds	r3, #1
 800c222:	f003 021f 	and.w	r2, r3, #31
 800c226:	4613      	mov	r3, r2
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	4413      	add	r3, r2
 800c22c:	3b1e      	subs	r3, #30
 800c22e:	051b      	lsls	r3, r3, #20
 800c230:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c234:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c23a:	4619      	mov	r1, r3
 800c23c:	f7fe ffd7 	bl	800b1ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <HAL_ADC_ConfigChannel+0x6e0>)
 800c246:	4013      	ands	r3, r2
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 80be 	beq.w	800c3ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c256:	d004      	beq.n	800c262 <HAL_ADC_ConfigChannel+0x6d6>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a04      	ldr	r2, [pc, #16]	@ (800c270 <HAL_ADC_ConfigChannel+0x6e4>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d10a      	bne.n	800c278 <HAL_ADC_ConfigChannel+0x6ec>
 800c262:	4b04      	ldr	r3, [pc, #16]	@ (800c274 <HAL_ADC_ConfigChannel+0x6e8>)
 800c264:	e009      	b.n	800c27a <HAL_ADC_ConfigChannel+0x6ee>
 800c266:	bf00      	nop
 800c268:	407f0000 	.word	0x407f0000
 800c26c:	80080000 	.word	0x80080000
 800c270:	50000100 	.word	0x50000100
 800c274:	50000300 	.word	0x50000300
 800c278:	4b59      	ldr	r3, [pc, #356]	@ (800c3e0 <HAL_ADC_ConfigChannel+0x854>)
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fecc 	bl	800b018 <LL_ADC_GetCommonPathInternalCh>
 800c280:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a56      	ldr	r2, [pc, #344]	@ (800c3e4 <HAL_ADC_ConfigChannel+0x858>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d004      	beq.n	800c298 <HAL_ADC_ConfigChannel+0x70c>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a55      	ldr	r2, [pc, #340]	@ (800c3e8 <HAL_ADC_ConfigChannel+0x85c>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d13a      	bne.n	800c30e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c29c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d134      	bne.n	800c30e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2ac:	d005      	beq.n	800c2ba <HAL_ADC_ConfigChannel+0x72e>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a4e      	ldr	r2, [pc, #312]	@ (800c3ec <HAL_ADC_ConfigChannel+0x860>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	f040 8085 	bne.w	800c3c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2c2:	d004      	beq.n	800c2ce <HAL_ADC_ConfigChannel+0x742>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a49      	ldr	r2, [pc, #292]	@ (800c3f0 <HAL_ADC_ConfigChannel+0x864>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d101      	bne.n	800c2d2 <HAL_ADC_ConfigChannel+0x746>
 800c2ce:	4a49      	ldr	r2, [pc, #292]	@ (800c3f4 <HAL_ADC_ConfigChannel+0x868>)
 800c2d0:	e000      	b.n	800c2d4 <HAL_ADC_ConfigChannel+0x748>
 800c2d2:	4a43      	ldr	r2, [pc, #268]	@ (800c3e0 <HAL_ADC_ConfigChannel+0x854>)
 800c2d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c2d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f7fe fe87 	bl	800aff2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c2e4:	4b44      	ldr	r3, [pc, #272]	@ (800c3f8 <HAL_ADC_ConfigChannel+0x86c>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	099b      	lsrs	r3, r3, #6
 800c2ea:	4a44      	ldr	r2, [pc, #272]	@ (800c3fc <HAL_ADC_ConfigChannel+0x870>)
 800c2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c2f0:	099b      	lsrs	r3, r3, #6
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	4413      	add	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c2fe:	e002      	b.n	800c306 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3b01      	subs	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1f9      	bne.n	800c300 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c30c:	e05a      	b.n	800c3c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a3b      	ldr	r2, [pc, #236]	@ (800c400 <HAL_ADC_ConfigChannel+0x874>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d125      	bne.n	800c364 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c31c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d11f      	bne.n	800c364 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a31      	ldr	r2, [pc, #196]	@ (800c3f0 <HAL_ADC_ConfigChannel+0x864>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d104      	bne.n	800c338 <HAL_ADC_ConfigChannel+0x7ac>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a34      	ldr	r2, [pc, #208]	@ (800c404 <HAL_ADC_ConfigChannel+0x878>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d047      	beq.n	800c3c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c340:	d004      	beq.n	800c34c <HAL_ADC_ConfigChannel+0x7c0>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a2a      	ldr	r2, [pc, #168]	@ (800c3f0 <HAL_ADC_ConfigChannel+0x864>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d101      	bne.n	800c350 <HAL_ADC_ConfigChannel+0x7c4>
 800c34c:	4a29      	ldr	r2, [pc, #164]	@ (800c3f4 <HAL_ADC_ConfigChannel+0x868>)
 800c34e:	e000      	b.n	800c352 <HAL_ADC_ConfigChannel+0x7c6>
 800c350:	4a23      	ldr	r2, [pc, #140]	@ (800c3e0 <HAL_ADC_ConfigChannel+0x854>)
 800c352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c35a:	4619      	mov	r1, r3
 800c35c:	4610      	mov	r0, r2
 800c35e:	f7fe fe48 	bl	800aff2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c362:	e031      	b.n	800c3c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a27      	ldr	r2, [pc, #156]	@ (800c408 <HAL_ADC_ConfigChannel+0x87c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d12d      	bne.n	800c3ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c36e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d127      	bne.n	800c3ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a1c      	ldr	r2, [pc, #112]	@ (800c3f0 <HAL_ADC_ConfigChannel+0x864>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d022      	beq.n	800c3ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c38c:	d004      	beq.n	800c398 <HAL_ADC_ConfigChannel+0x80c>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a17      	ldr	r2, [pc, #92]	@ (800c3f0 <HAL_ADC_ConfigChannel+0x864>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d101      	bne.n	800c39c <HAL_ADC_ConfigChannel+0x810>
 800c398:	4a16      	ldr	r2, [pc, #88]	@ (800c3f4 <HAL_ADC_ConfigChannel+0x868>)
 800c39a:	e000      	b.n	800c39e <HAL_ADC_ConfigChannel+0x812>
 800c39c:	4a10      	ldr	r2, [pc, #64]	@ (800c3e0 <HAL_ADC_ConfigChannel+0x854>)
 800c39e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	f7fe fe22 	bl	800aff2 <LL_ADC_SetCommonPathInternalCh>
 800c3ae:	e00c      	b.n	800c3ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3b4:	f043 0220 	orr.w	r2, r3, #32
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c3c2:	e002      	b.n	800c3ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c3c4:	bf00      	nop
 800c3c6:	e000      	b.n	800c3ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c3c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c3d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	37d8      	adds	r7, #216	@ 0xd8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	50000700 	.word	0x50000700
 800c3e4:	c3210000 	.word	0xc3210000
 800c3e8:	90c00010 	.word	0x90c00010
 800c3ec:	50000600 	.word	0x50000600
 800c3f0:	50000100 	.word	0x50000100
 800c3f4:	50000300 	.word	0x50000300
 800c3f8:	20000050 	.word	0x20000050
 800c3fc:	053e2d63 	.word	0x053e2d63
 800c400:	c7520000 	.word	0xc7520000
 800c404:	50000500 	.word	0x50000500
 800c408:	cb840000 	.word	0xcb840000

0800c40c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c414:	2300      	movs	r3, #0
 800c416:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fe ffb3 	bl	800b388 <LL_ADC_IsEnabled>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d176      	bne.n	800c516 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	4b3c      	ldr	r3, [pc, #240]	@ (800c520 <ADC_Enable+0x114>)
 800c430:	4013      	ands	r3, r2
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00d      	beq.n	800c452 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c43a:	f043 0210 	orr.w	r2, r3, #16
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c446:	f043 0201 	orr.w	r2, r3, #1
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e062      	b.n	800c518 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe ff82 	bl	800b360 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c464:	d004      	beq.n	800c470 <ADC_Enable+0x64>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a2e      	ldr	r2, [pc, #184]	@ (800c524 <ADC_Enable+0x118>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d101      	bne.n	800c474 <ADC_Enable+0x68>
 800c470:	4b2d      	ldr	r3, [pc, #180]	@ (800c528 <ADC_Enable+0x11c>)
 800c472:	e000      	b.n	800c476 <ADC_Enable+0x6a>
 800c474:	4b2d      	ldr	r3, [pc, #180]	@ (800c52c <ADC_Enable+0x120>)
 800c476:	4618      	mov	r0, r3
 800c478:	f7fe fdce 	bl	800b018 <LL_ADC_GetCommonPathInternalCh>
 800c47c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c47e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c482:	2b00      	cmp	r3, #0
 800c484:	d013      	beq.n	800c4ae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c486:	4b2a      	ldr	r3, [pc, #168]	@ (800c530 <ADC_Enable+0x124>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	099b      	lsrs	r3, r3, #6
 800c48c:	4a29      	ldr	r2, [pc, #164]	@ (800c534 <ADC_Enable+0x128>)
 800c48e:	fba2 2303 	umull	r2, r3, r2, r3
 800c492:	099b      	lsrs	r3, r3, #6
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	4613      	mov	r3, r2
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	4413      	add	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c4a0:	e002      	b.n	800c4a8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1f9      	bne.n	800c4a2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c4ae:	f7fe fd5f 	bl	800af70 <HAL_GetTick>
 800c4b2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c4b4:	e028      	b.n	800c508 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe ff64 	bl	800b388 <LL_ADC_IsEnabled>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d104      	bne.n	800c4d0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fe ff48 	bl	800b360 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c4d0:	f7fe fd4e 	bl	800af70 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d914      	bls.n	800c508 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0301 	and.w	r3, r3, #1
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d00d      	beq.n	800c508 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4f0:	f043 0210 	orr.w	r2, r3, #16
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c4fc:	f043 0201 	orr.w	r2, r3, #1
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e007      	b.n	800c518 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0301 	and.w	r3, r3, #1
 800c512:	2b01      	cmp	r3, #1
 800c514:	d1cf      	bne.n	800c4b6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	8000003f 	.word	0x8000003f
 800c524:	50000100 	.word	0x50000100
 800c528:	50000300 	.word	0x50000300
 800c52c:	50000700 	.word	0x50000700
 800c530:	20000050 	.word	0x20000050
 800c534:	053e2d63 	.word	0x053e2d63

0800c538 <LL_ADC_IsEnabled>:
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d101      	bne.n	800c550 <LL_ADC_IsEnabled+0x18>
 800c54c:	2301      	movs	r3, #1
 800c54e:	e000      	b.n	800c552 <LL_ADC_IsEnabled+0x1a>
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <LL_ADC_REG_IsConversionOngoing>:
{
 800c55e:	b480      	push	{r7}
 800c560:	b083      	sub	sp, #12
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f003 0304 	and.w	r3, r3, #4
 800c56e:	2b04      	cmp	r3, #4
 800c570:	d101      	bne.n	800c576 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c572:	2301      	movs	r3, #1
 800c574:	e000      	b.n	800c578 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c584:	b590      	push	{r4, r7, lr}
 800c586:	b0a1      	sub	sp, #132	@ 0x84
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d101      	bne.n	800c5a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c59e:	2302      	movs	r3, #2
 800c5a0:	e0e7      	b.n	800c772 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5ba:	d102      	bne.n	800c5c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c5bc:	4b6f      	ldr	r3, [pc, #444]	@ (800c77c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c5be:	60bb      	str	r3, [r7, #8]
 800c5c0:	e009      	b.n	800c5d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a6e      	ldr	r2, [pc, #440]	@ (800c780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d102      	bne.n	800c5d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800c5cc:	4b6d      	ldr	r3, [pc, #436]	@ (800c784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c5ce:	60bb      	str	r3, [r7, #8]
 800c5d0:	e001      	b.n	800c5d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10b      	bne.n	800c5f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5e0:	f043 0220 	orr.w	r2, r3, #32
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e0be      	b.n	800c772 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7ff ffb1 	bl	800c55e <LL_ADC_REG_IsConversionOngoing>
 800c5fc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff ffab 	bl	800c55e <LL_ADC_REG_IsConversionOngoing>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f040 80a0 	bne.w	800c750 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c612:	2b00      	cmp	r3, #0
 800c614:	f040 809c 	bne.w	800c750 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c620:	d004      	beq.n	800c62c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a55      	ldr	r2, [pc, #340]	@ (800c77c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d101      	bne.n	800c630 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800c62c:	4b56      	ldr	r3, [pc, #344]	@ (800c788 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800c62e:	e000      	b.n	800c632 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800c630:	4b56      	ldr	r3, [pc, #344]	@ (800c78c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800c632:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d04b      	beq.n	800c6d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c63c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	6859      	ldr	r1, [r3, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c64e:	035b      	lsls	r3, r3, #13
 800c650:	430b      	orrs	r3, r1
 800c652:	431a      	orrs	r2, r3
 800c654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c656:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c660:	d004      	beq.n	800c66c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a45      	ldr	r2, [pc, #276]	@ (800c77c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d10f      	bne.n	800c68c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800c66c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c670:	f7ff ff62 	bl	800c538 <LL_ADC_IsEnabled>
 800c674:	4604      	mov	r4, r0
 800c676:	4841      	ldr	r0, [pc, #260]	@ (800c77c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c678:	f7ff ff5e 	bl	800c538 <LL_ADC_IsEnabled>
 800c67c:	4603      	mov	r3, r0
 800c67e:	4323      	orrs	r3, r4
 800c680:	2b00      	cmp	r3, #0
 800c682:	bf0c      	ite	eq
 800c684:	2301      	moveq	r3, #1
 800c686:	2300      	movne	r3, #0
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	e012      	b.n	800c6b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800c68c:	483c      	ldr	r0, [pc, #240]	@ (800c780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c68e:	f7ff ff53 	bl	800c538 <LL_ADC_IsEnabled>
 800c692:	4604      	mov	r4, r0
 800c694:	483b      	ldr	r0, [pc, #236]	@ (800c784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c696:	f7ff ff4f 	bl	800c538 <LL_ADC_IsEnabled>
 800c69a:	4603      	mov	r3, r0
 800c69c:	431c      	orrs	r4, r3
 800c69e:	483c      	ldr	r0, [pc, #240]	@ (800c790 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c6a0:	f7ff ff4a 	bl	800c538 <LL_ADC_IsEnabled>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	4323      	orrs	r3, r4
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	bf0c      	ite	eq
 800c6ac:	2301      	moveq	r3, #1
 800c6ae:	2300      	movne	r3, #0
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d056      	beq.n	800c764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c6b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c6be:	f023 030f 	bic.w	r3, r3, #15
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	6811      	ldr	r1, [r2, #0]
 800c6c6:	683a      	ldr	r2, [r7, #0]
 800c6c8:	6892      	ldr	r2, [r2, #8]
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	431a      	orrs	r2, r3
 800c6ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c6d2:	e047      	b.n	800c764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c6d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c6dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c6e8:	d004      	beq.n	800c6f4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a23      	ldr	r2, [pc, #140]	@ (800c77c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d10f      	bne.n	800c714 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800c6f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c6f8:	f7ff ff1e 	bl	800c538 <LL_ADC_IsEnabled>
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	481f      	ldr	r0, [pc, #124]	@ (800c77c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c700:	f7ff ff1a 	bl	800c538 <LL_ADC_IsEnabled>
 800c704:	4603      	mov	r3, r0
 800c706:	4323      	orrs	r3, r4
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bf0c      	ite	eq
 800c70c:	2301      	moveq	r3, #1
 800c70e:	2300      	movne	r3, #0
 800c710:	b2db      	uxtb	r3, r3
 800c712:	e012      	b.n	800c73a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800c714:	481a      	ldr	r0, [pc, #104]	@ (800c780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c716:	f7ff ff0f 	bl	800c538 <LL_ADC_IsEnabled>
 800c71a:	4604      	mov	r4, r0
 800c71c:	4819      	ldr	r0, [pc, #100]	@ (800c784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c71e:	f7ff ff0b 	bl	800c538 <LL_ADC_IsEnabled>
 800c722:	4603      	mov	r3, r0
 800c724:	431c      	orrs	r4, r3
 800c726:	481a      	ldr	r0, [pc, #104]	@ (800c790 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c728:	f7ff ff06 	bl	800c538 <LL_ADC_IsEnabled>
 800c72c:	4603      	mov	r3, r0
 800c72e:	4323      	orrs	r3, r4
 800c730:	2b00      	cmp	r3, #0
 800c732:	bf0c      	ite	eq
 800c734:	2301      	moveq	r3, #1
 800c736:	2300      	movne	r3, #0
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d012      	beq.n	800c764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c73e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c746:	f023 030f 	bic.w	r3, r3, #15
 800c74a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c74c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c74e:	e009      	b.n	800c764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c754:	f043 0220 	orr.w	r2, r3, #32
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c762:	e000      	b.n	800c766 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c764:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c76e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c772:	4618      	mov	r0, r3
 800c774:	3784      	adds	r7, #132	@ 0x84
 800c776:	46bd      	mov	sp, r7
 800c778:	bd90      	pop	{r4, r7, pc}
 800c77a:	bf00      	nop
 800c77c:	50000100 	.word	0x50000100
 800c780:	50000400 	.word	0x50000400
 800c784:	50000500 	.word	0x50000500
 800c788:	50000300 	.word	0x50000300
 800c78c:	50000700 	.word	0x50000700
 800c790:	50000600 	.word	0x50000600

0800c794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f003 0307 	and.w	r3, r3, #7
 800c7a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c7d8 <__NVIC_SetPriorityGrouping+0x44>)
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c7bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c7c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c7c6:	4a04      	ldr	r2, [pc, #16]	@ (800c7d8 <__NVIC_SetPriorityGrouping+0x44>)
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	60d3      	str	r3, [r2, #12]
}
 800c7cc:	bf00      	nop
 800c7ce:	3714      	adds	r7, #20
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr
 800c7d8:	e000ed00 	.word	0xe000ed00

0800c7dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c7e0:	4b04      	ldr	r3, [pc, #16]	@ (800c7f4 <__NVIC_GetPriorityGrouping+0x18>)
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	0a1b      	lsrs	r3, r3, #8
 800c7e6:	f003 0307 	and.w	r3, r3, #7
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr
 800c7f4:	e000ed00 	.word	0xe000ed00

0800c7f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c806:	2b00      	cmp	r3, #0
 800c808:	db0b      	blt.n	800c822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	f003 021f 	and.w	r2, r3, #31
 800c810:	4907      	ldr	r1, [pc, #28]	@ (800c830 <__NVIC_EnableIRQ+0x38>)
 800c812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c816:	095b      	lsrs	r3, r3, #5
 800c818:	2001      	movs	r0, #1
 800c81a:	fa00 f202 	lsl.w	r2, r0, r2
 800c81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c822:	bf00      	nop
 800c824:	370c      	adds	r7, #12
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	e000e100 	.word	0xe000e100

0800c834 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	4603      	mov	r3, r0
 800c83c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c842:	2b00      	cmp	r3, #0
 800c844:	db12      	blt.n	800c86c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	f003 021f 	and.w	r2, r3, #31
 800c84c:	490a      	ldr	r1, [pc, #40]	@ (800c878 <__NVIC_DisableIRQ+0x44>)
 800c84e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c852:	095b      	lsrs	r3, r3, #5
 800c854:	2001      	movs	r0, #1
 800c856:	fa00 f202 	lsl.w	r2, r0, r2
 800c85a:	3320      	adds	r3, #32
 800c85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c860:	f3bf 8f4f 	dsb	sy
}
 800c864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c866:	f3bf 8f6f 	isb	sy
}
 800c86a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	e000e100 	.word	0xe000e100

0800c87c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	6039      	str	r1, [r7, #0]
 800c886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	db0a      	blt.n	800c8a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	b2da      	uxtb	r2, r3
 800c894:	490c      	ldr	r1, [pc, #48]	@ (800c8c8 <__NVIC_SetPriority+0x4c>)
 800c896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c89a:	0112      	lsls	r2, r2, #4
 800c89c:	b2d2      	uxtb	r2, r2
 800c89e:	440b      	add	r3, r1
 800c8a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c8a4:	e00a      	b.n	800c8bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	4908      	ldr	r1, [pc, #32]	@ (800c8cc <__NVIC_SetPriority+0x50>)
 800c8ac:	79fb      	ldrb	r3, [r7, #7]
 800c8ae:	f003 030f 	and.w	r3, r3, #15
 800c8b2:	3b04      	subs	r3, #4
 800c8b4:	0112      	lsls	r2, r2, #4
 800c8b6:	b2d2      	uxtb	r2, r2
 800c8b8:	440b      	add	r3, r1
 800c8ba:	761a      	strb	r2, [r3, #24]
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	e000e100 	.word	0xe000e100
 800c8cc:	e000ed00 	.word	0xe000ed00

0800c8d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b089      	sub	sp, #36	@ 0x24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f003 0307 	and.w	r3, r3, #7
 800c8e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	f1c3 0307 	rsb	r3, r3, #7
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	bf28      	it	cs
 800c8ee:	2304      	movcs	r3, #4
 800c8f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	2b06      	cmp	r3, #6
 800c8f8:	d902      	bls.n	800c900 <NVIC_EncodePriority+0x30>
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	3b03      	subs	r3, #3
 800c8fe:	e000      	b.n	800c902 <NVIC_EncodePriority+0x32>
 800c900:	2300      	movs	r3, #0
 800c902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	fa02 f303 	lsl.w	r3, r2, r3
 800c90e:	43da      	mvns	r2, r3
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	401a      	ands	r2, r3
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c918:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	fa01 f303 	lsl.w	r3, r1, r3
 800c922:	43d9      	mvns	r1, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c928:	4313      	orrs	r3, r2
         );
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3724      	adds	r7, #36	@ 0x24
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
	...

0800c938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3b01      	subs	r3, #1
 800c944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c948:	d301      	bcc.n	800c94e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c94a:	2301      	movs	r3, #1
 800c94c:	e00f      	b.n	800c96e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c94e:	4a0a      	ldr	r2, [pc, #40]	@ (800c978 <SysTick_Config+0x40>)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3b01      	subs	r3, #1
 800c954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c956:	210f      	movs	r1, #15
 800c958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c95c:	f7ff ff8e 	bl	800c87c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c960:	4b05      	ldr	r3, [pc, #20]	@ (800c978 <SysTick_Config+0x40>)
 800c962:	2200      	movs	r2, #0
 800c964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c966:	4b04      	ldr	r3, [pc, #16]	@ (800c978 <SysTick_Config+0x40>)
 800c968:	2207      	movs	r2, #7
 800c96a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	e000e010 	.word	0xe000e010

0800c97c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7ff ff05 	bl	800c794 <__NVIC_SetPriorityGrouping>
}
 800c98a:	bf00      	nop
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b086      	sub	sp, #24
 800c996:	af00      	add	r7, sp, #0
 800c998:	4603      	mov	r3, r0
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	607a      	str	r2, [r7, #4]
 800c99e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c9a0:	f7ff ff1c 	bl	800c7dc <__NVIC_GetPriorityGrouping>
 800c9a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	6978      	ldr	r0, [r7, #20]
 800c9ac:	f7ff ff90 	bl	800c8d0 <NVIC_EncodePriority>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff ff5f 	bl	800c87c <__NVIC_SetPriority>
}
 800c9be:	bf00      	nop
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c9d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff ff0f 	bl	800c7f8 <__NVIC_EnableIRQ>
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c9ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff ff1f 	bl	800c834 <__NVIC_DisableIRQ>
}
 800c9f6:	bf00      	nop
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff ff96 	bl	800c938 <SysTick_Config>
 800ca0c:	4603      	mov	r3, r0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
	...

0800ca18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e147      	b.n	800ccba <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7fd fe7c 	bl	800a73c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	699a      	ldr	r2, [r3, #24]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 0210 	bic.w	r2, r2, #16
 800ca52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ca54:	f7fe fa8c 	bl	800af70 <HAL_GetTick>
 800ca58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800ca5a:	e012      	b.n	800ca82 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800ca5c:	f7fe fa88 	bl	800af70 <HAL_GetTick>
 800ca60:	4602      	mov	r2, r0
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	2b0a      	cmp	r3, #10
 800ca68:	d90b      	bls.n	800ca82 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca6e:	f043 0201 	orr.w	r2, r3, #1
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2203      	movs	r2, #3
 800ca7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e11b      	b.n	800ccba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	f003 0308 	and.w	r3, r3, #8
 800ca8c:	2b08      	cmp	r3, #8
 800ca8e:	d0e5      	beq.n	800ca5c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	699a      	ldr	r2, [r3, #24]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f042 0201 	orr.w	r2, r2, #1
 800ca9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800caa0:	f7fe fa66 	bl	800af70 <HAL_GetTick>
 800caa4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800caa6:	e012      	b.n	800cace <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800caa8:	f7fe fa62 	bl	800af70 <HAL_GetTick>
 800caac:	4602      	mov	r2, r0
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	2b0a      	cmp	r3, #10
 800cab4:	d90b      	bls.n	800cace <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caba:	f043 0201 	orr.w	r2, r3, #1
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2203      	movs	r2, #3
 800cac6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e0f5      	b.n	800ccba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	f003 0301 	and.w	r3, r3, #1
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d0e5      	beq.n	800caa8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	699a      	ldr	r2, [r3, #24]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0202 	orr.w	r2, r2, #2
 800caea:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a74      	ldr	r2, [pc, #464]	@ (800ccc4 <HAL_FDCAN_Init+0x2ac>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d103      	bne.n	800cafe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800caf6:	4a74      	ldr	r2, [pc, #464]	@ (800ccc8 <HAL_FDCAN_Init+0x2b0>)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	7c1b      	ldrb	r3, [r3, #16]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d108      	bne.n	800cb18 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	699a      	ldr	r2, [r3, #24]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb14:	619a      	str	r2, [r3, #24]
 800cb16:	e007      	b.n	800cb28 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	699a      	ldr	r2, [r3, #24]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb26:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7c5b      	ldrb	r3, [r3, #17]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d108      	bne.n	800cb42 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	699a      	ldr	r2, [r3, #24]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cb3e:	619a      	str	r2, [r3, #24]
 800cb40:	e007      	b.n	800cb52 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	699a      	ldr	r2, [r3, #24]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800cb50:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	7c9b      	ldrb	r3, [r3, #18]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d108      	bne.n	800cb6c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	699a      	ldr	r2, [r3, #24]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cb68:	619a      	str	r2, [r3, #24]
 800cb6a:	e007      	b.n	800cb7c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	699a      	ldr	r2, [r3, #24]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cb7a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	699a      	ldr	r2, [r3, #24]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800cba0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	691a      	ldr	r2, [r3, #16]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f022 0210 	bic.w	r2, r2, #16
 800cbb0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d108      	bne.n	800cbcc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	699a      	ldr	r2, [r3, #24]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f042 0204 	orr.w	r2, r2, #4
 800cbc8:	619a      	str	r2, [r3, #24]
 800cbca:	e02c      	b.n	800cc26 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d028      	beq.n	800cc26 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d01c      	beq.n	800cc16 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	699a      	ldr	r2, [r3, #24]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cbea:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	691a      	ldr	r2, [r3, #16]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0210 	orr.w	r2, r2, #16
 800cbfa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	2b03      	cmp	r3, #3
 800cc02:	d110      	bne.n	800cc26 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	699a      	ldr	r2, [r3, #24]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 0220 	orr.w	r2, r2, #32
 800cc12:	619a      	str	r2, [r3, #24]
 800cc14:	e007      	b.n	800cc26 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	699a      	ldr	r2, [r3, #24]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f042 0220 	orr.w	r2, r2, #32
 800cc24:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	3b01      	subs	r3, #1
 800cc34:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800cc36:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a1b      	ldr	r3, [r3, #32]
 800cc3c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800cc3e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	3b01      	subs	r3, #1
 800cc48:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800cc4e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800cc50:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc5a:	d115      	bne.n	800cc88 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc60:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc66:	3b01      	subs	r3, #1
 800cc68:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800cc6a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc70:	3b01      	subs	r3, #1
 800cc72:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800cc74:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800cc84:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800cc86:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	430a      	orrs	r2, r1
 800cc9a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fbb8 	bl	800d414 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	40006400 	.word	0x40006400
 800ccc8:	40006500 	.word	0x40006500

0800cccc <HAL_FDCAN_DeInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeInit(FDCAN_HandleTypeDef *hfdcan)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <HAL_FDCAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e015      	b.n	800cd0a <HAL_FDCAN_DeInit+0x3e>

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));

  /* Stop the FDCAN module: return value is voluntary ignored */
  (void)HAL_FDCAN_Stop(hfdcan);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f83f 	bl	800cd62 <HAL_FDCAN_Stop>

  /* Disable Interrupt lines */
  CLEAR_BIT(hfdcan->Instance->ILE, (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1));
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f022 0203 	bic.w	r2, r2, #3
 800ccf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* DeInit the low level hardware: CLOCK, NVIC */
  hfdcan->MspDeInitCallback(hfdcan);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_FDCAN_MspDeInit(hfdcan);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fd fd85 	bl	800a804 <HAL_FDCAN_MspDeInit>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Reset the FDCAN ErrorCode */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_RESET;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800cd12:	b480      	push	{r7}
 800cd14:	b083      	sub	sp, #12
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d110      	bne.n	800cd48 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2202      	movs	r2, #2
 800cd2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	699a      	ldr	r2, [r3, #24]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f022 0201 	bic.w	r2, r2, #1
 800cd3c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	e006      	b.n	800cd56 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd4c:	f043 0204 	orr.w	r2, r3, #4
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
  }
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800cd62:	b480      	push	{r7}
 800cd64:	b085      	sub	sp, #20
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d156      	bne.n	800ce28 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	699a      	ldr	r2, [r3, #24]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f042 0201 	orr.w	r2, r2, #1
 800cd88:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800cd8a:	e011      	b.n	800cdb0 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b0a      	cmp	r3, #10
 800cd90:	d90b      	bls.n	800cdaa <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd96:	f043 0201 	orr.w	r2, r3, #1
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2203      	movs	r2, #3
 800cda2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	e045      	b.n	800ce36 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3301      	adds	r3, #1
 800cdae:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0e6      	beq.n	800cd8c <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	699a      	ldr	r2, [r3, #24]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f022 0210 	bic.w	r2, r2, #16
 800cdd0:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800cdd2:	e011      	b.n	800cdf8 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b0a      	cmp	r3, #10
 800cdd8:	d90b      	bls.n	800cdf2 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdde:	f043 0201 	orr.w	r2, r3, #1
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2203      	movs	r2, #3
 800cdea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	e021      	b.n	800ce36 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	f003 0308 	and.w	r3, r3, #8
 800ce02:	2b08      	cmp	r3, #8
 800ce04:	d0e6      	beq.n	800cdd4 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	699a      	ldr	r2, [r3, #24]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f042 0202 	orr.w	r2, r2, #2
 800ce14:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	e006      	b.n	800ce36 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce2c:	f043 0208 	orr.w	r2, r3, #8
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800ce34:	2301      	movs	r3, #1
  }
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b086      	sub	sp, #24
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	60f8      	str	r0, [r7, #12]
 800ce4a:	60b9      	str	r1, [r7, #8]
 800ce4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d12c      	bne.n	800ceb4 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ce62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d007      	beq.n	800ce7a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e023      	b.n	800cec2 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ce82:	0c1b      	lsrs	r3, r3, #16
 800ce84:	f003 0303 	and.w	r3, r3, #3
 800ce88:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f000 fb2b 	bl	800d4ec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	fa01 f202 	lsl.w	r2, r1, r2
 800cea2:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800cea6:	2201      	movs	r2, #1
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	409a      	lsls	r2, r3
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e006      	b.n	800cec2 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ceb8:	f043 0208 	orr.w	r2, r3, #8
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
  }
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
	...

0800cecc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800cecc:	b480      	push	{r7}
 800cece:	b08b      	sub	sp, #44	@ 0x2c
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	607a      	str	r2, [r7, #4]
 800ced8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cee4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800cee6:	7efb      	ldrb	r3, [r7, #27]
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	f040 80e8 	bne.w	800d0be <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b40      	cmp	r3, #64	@ 0x40
 800cef2:	d137      	bne.n	800cf64 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cefc:	f003 030f 	and.w	r3, r3, #15
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d107      	bne.n	800cf14 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e0db      	b.n	800d0cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf24:	d10a      	bne.n	800cf3c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf36:	d101      	bne.n	800cf3c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf44:	0a1b      	lsrs	r3, r3, #8
 800cf46:	f003 0303 	and.w	r3, r3, #3
 800cf4a:	69fa      	ldr	r2, [r7, #28]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800cf54:	69fa      	ldr	r2, [r7, #28]
 800cf56:	4613      	mov	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	4413      	add	r3, r2
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	440b      	add	r3, r1
 800cf60:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf62:	e036      	b.n	800cfd2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cf6c:	f003 030f 	and.w	r3, r3, #15
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d107      	bne.n	800cf84 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e0a3      	b.n	800d0cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cf8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf94:	d10a      	bne.n	800cfac <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfa6:	d101      	bne.n	800cfac <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cfb4:	0a1b      	lsrs	r3, r3, #8
 800cfb6:	f003 0303 	and.w	r3, r3, #3
 800cfba:	69fa      	ldr	r2, [r7, #28]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800cfc4:	69fa      	ldr	r2, [r7, #28]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	00db      	lsls	r3, r3, #3
 800cfca:	4413      	add	r3, r2
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	440b      	add	r3, r1
 800cfd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d107      	bne.n	800cff6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	0c9b      	lsrs	r3, r3, #18
 800cfec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	e005      	b.n	800d002 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800cff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800d002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800d00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	3304      	adds	r3, #4
 800d01e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800d020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	0c1b      	lsrs	r3, r3, #16
 800d030:	f003 020f 	and.w	r2, r3, #15
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800d038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800d044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800d050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	0e1b      	lsrs	r3, r3, #24
 800d056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800d05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	0fda      	lsrs	r2, r3, #31
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	3304      	adds	r3, #4
 800d06c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800d06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d070:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800d072:	2300      	movs	r3, #0
 800d074:	623b      	str	r3, [r7, #32]
 800d076:	e00a      	b.n	800d08e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	441a      	add	r2, r3
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	440b      	add	r3, r1
 800d084:	7812      	ldrb	r2, [r2, #0]
 800d086:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	3301      	adds	r3, #1
 800d08c:	623b      	str	r3, [r7, #32]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	4a11      	ldr	r2, [pc, #68]	@ (800d0d8 <HAL_FDCAN_GetRxMessage+0x20c>)
 800d094:	5cd3      	ldrb	r3, [r2, r3]
 800d096:	461a      	mov	r2, r3
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d3ec      	bcc.n	800d078 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b40      	cmp	r3, #64	@ 0x40
 800d0a2:	d105      	bne.n	800d0b0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	69fa      	ldr	r2, [r7, #28]
 800d0aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800d0ae:	e004      	b.n	800d0ba <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	69fa      	ldr	r2, [r7, #28]
 800d0b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	e006      	b.n	800d0cc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0c2:	f043 0208 	orr.w	r2, r3, #8
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
  }
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	372c      	adds	r7, #44	@ 0x2c
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	08017b7c 	.word	0x08017b7c

0800d0dc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08c      	sub	sp, #48	@ 0x30
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0ea:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800d0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d102:	f003 0307 	and.w	r3, r3, #7
 800d106:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d10e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d110:	4013      	ands	r3, r2
 800d112:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d11a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d11e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d128:	4013      	ands	r3, r2
 800d12a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d132:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800d136:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d13e:	6a3a      	ldr	r2, [r7, #32]
 800d140:	4013      	ands	r3, r2
 800d142:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d14a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800d14e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d156:	69fa      	ldr	r2, [r7, #28]
 800d158:	4013      	ands	r3, r2
 800d15a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d162:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d16a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	099b      	lsrs	r3, r3, #6
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00c      	beq.n	800d192 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	099b      	lsrs	r3, r3, #6
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d006      	beq.n	800d192 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2240      	movs	r2, #64	@ 0x40
 800d18a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f922 	bl	800d3d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	0a1b      	lsrs	r3, r3, #8
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d01a      	beq.n	800d1d4 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	0a1b      	lsrs	r3, r3, #8
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d014      	beq.n	800d1d4 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d1b2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d1bc:	693a      	ldr	r2, [r7, #16]
 800d1be:	4013      	ands	r3, r2
 800d1c0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800d1cc:	6939      	ldr	r1, [r7, #16]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f8e2 	bl	800d398 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d007      	beq.n	800d1ea <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1e0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800d1e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f8ac 	bl	800d342 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d007      	beq.n	800d200 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1f6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800d1f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7fd f9a6 	bl	800a54c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800d200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d202:	2b00      	cmp	r3, #0
 800d204:	d007      	beq.n	800d216 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d20c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800d20e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f8a1 	bl	800d358 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	0a5b      	lsrs	r3, r3, #9
 800d21a:	f003 0301 	and.w	r3, r3, #1
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00d      	beq.n	800d23e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	0a5b      	lsrs	r3, r3, #9
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d236:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 f898 	bl	800d36e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	09db      	lsrs	r3, r3, #7
 800d242:	f003 0301 	and.w	r3, r3, #1
 800d246:	2b00      	cmp	r3, #0
 800d248:	d019      	beq.n	800d27e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	09db      	lsrs	r3, r3, #7
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b00      	cmp	r3, #0
 800d254:	d013      	beq.n	800d27e <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d25e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	4013      	ands	r3, r2
 800d26c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2280      	movs	r2, #128	@ 0x80
 800d274:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800d276:	68f9      	ldr	r1, [r7, #12]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f882 	bl	800d382 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	0b5b      	lsrs	r3, r3, #13
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00d      	beq.n	800d2a6 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	0b5b      	lsrs	r3, r3, #13
 800d28e:	f003 0301 	and.w	r3, r3, #1
 800d292:	2b00      	cmp	r3, #0
 800d294:	d007      	beq.n	800d2a6 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d29e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 f884 	bl	800d3ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	0bdb      	lsrs	r3, r3, #15
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00d      	beq.n	800d2ce <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	0bdb      	lsrs	r3, r3, #15
 800d2b6:	f003 0301 	and.w	r3, r3, #1
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d007      	beq.n	800d2ce <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800d2c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f87a 	bl	800d3c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	0b9b      	lsrs	r3, r3, #14
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d010      	beq.n	800d2fc <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	0b9b      	lsrs	r3, r3, #14
 800d2de:	f003 0301 	and.w	r3, r3, #1
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00a      	beq.n	800d2fc <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800d2ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d007      	beq.n	800d312 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	69fa      	ldr	r2, [r7, #28]
 800d308:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800d30a:	69f9      	ldr	r1, [r7, #28]
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f876 	bl	800d3fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d009      	beq.n	800d32c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6a3a      	ldr	r2, [r7, #32]
 800d31e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d324:	6a3b      	ldr	r3, [r7, #32]
 800d326:	431a      	orrs	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 f858 	bl	800d3ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800d33a:	bf00      	nop
 800d33c:	3730      	adds	r7, #48	@ 0x30
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800d342:	b480      	push	{r7}
 800d344:	b083      	sub	sp, #12
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800d362:	bf00      	nop
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800d36e:	b480      	push	{r7}
 800d370:	b083      	sub	sp, #12
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800d376:	bf00      	nop
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800d38c:	bf00      	nop
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800d3a2:	bf00      	nop
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800d3b6:	bf00      	nop
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800d3c2:	b480      	push	{r7}
 800d3c4:	b083      	sub	sp, #12
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800d3ca:	bf00      	nop
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800d3de:	bf00      	nop
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b083      	sub	sp, #12
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800d3f2:	bf00      	nop
 800d3f4:	370c      	adds	r7, #12
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800d3fe:	b480      	push	{r7}
 800d400:	b083      	sub	sp, #12
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800d41c:	4b30      	ldr	r3, [pc, #192]	@ (800d4e0 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800d41e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a2f      	ldr	r2, [pc, #188]	@ (800d4e4 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d103      	bne.n	800d432 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d430:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a2c      	ldr	r2, [pc, #176]	@ (800d4e8 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d103      	bne.n	800d444 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800d442:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68ba      	ldr	r2, [r7, #8]
 800d448:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d452:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d45a:	041a      	lsls	r2, r3, #16
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	430a      	orrs	r2, r1
 800d462:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d478:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d480:	061a      	lsls	r2, r3, #24
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	430a      	orrs	r2, r1
 800d488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	e005      	b.n	800d4c6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	60fb      	str	r3, [r7, #12]
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d3f3      	bcc.n	800d4ba <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800d4d2:	bf00      	nop
 800d4d4:	bf00      	nop
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	4000a400 	.word	0x4000a400
 800d4e4:	40006800 	.word	0x40006800
 800d4e8:	40006c00 	.word	0x40006c00

0800d4ec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b089      	sub	sp, #36	@ 0x24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
 800d4f8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800d50a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d512:	4313      	orrs	r3, r2
 800d514:	61fb      	str	r3, [r7, #28]
 800d516:	e00a      	b.n	800d52e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800d520:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800d526:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800d528:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d52c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800d538:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800d53e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800d544:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800d54c:	4313      	orrs	r3, r2
 800d54e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	4613      	mov	r3, r2
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	4413      	add	r3, r2
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	440b      	add	r3, r1
 800d560:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	69fa      	ldr	r2, [r7, #28]
 800d566:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	3304      	adds	r3, #4
 800d56c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	3304      	adds	r3, #4
 800d578:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800d57a:	2300      	movs	r3, #0
 800d57c:	617b      	str	r3, [r7, #20]
 800d57e:	e020      	b.n	800d5c2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	3303      	adds	r3, #3
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	4413      	add	r3, r2
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	3302      	adds	r3, #2
 800d590:	6879      	ldr	r1, [r7, #4]
 800d592:	440b      	add	r3, r1
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800d598:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	3301      	adds	r3, #1
 800d59e:	6879      	ldr	r1, [r7, #4]
 800d5a0:	440b      	add	r3, r1
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800d5a6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	440a      	add	r2, r1
 800d5ae:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800d5b0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	3304      	adds	r3, #4
 800d5c0:	617b      	str	r3, [r7, #20]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	4a06      	ldr	r2, [pc, #24]	@ (800d5e0 <FDCAN_CopyMessageToRAM+0xf4>)
 800d5c8:	5cd3      	ldrb	r3, [r2, r3]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d3d6      	bcc.n	800d580 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800d5d2:	bf00      	nop
 800d5d4:	bf00      	nop
 800d5d6:	3724      	adds	r7, #36	@ 0x24
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	08017b7c 	.word	0x08017b7c

0800d5e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d5f2:	e15a      	b.n	800d8aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	2101      	movs	r1, #1
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d600:	4013      	ands	r3, r2
 800d602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 814c 	beq.w	800d8a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	f003 0303 	and.w	r3, r3, #3
 800d614:	2b01      	cmp	r3, #1
 800d616:	d005      	beq.n	800d624 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d620:	2b02      	cmp	r3, #2
 800d622:	d130      	bne.n	800d686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	2203      	movs	r2, #3
 800d630:	fa02 f303 	lsl.w	r3, r2, r3
 800d634:	43db      	mvns	r3, r3
 800d636:	693a      	ldr	r2, [r7, #16]
 800d638:	4013      	ands	r3, r2
 800d63a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	68da      	ldr	r2, [r3, #12]
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	005b      	lsls	r3, r3, #1
 800d644:	fa02 f303 	lsl.w	r3, r2, r3
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	693a      	ldr	r2, [r7, #16]
 800d652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d65a:	2201      	movs	r2, #1
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	fa02 f303 	lsl.w	r3, r2, r3
 800d662:	43db      	mvns	r3, r3
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	4013      	ands	r3, r2
 800d668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	091b      	lsrs	r3, r3, #4
 800d670:	f003 0201 	and.w	r2, r3, #1
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	fa02 f303 	lsl.w	r3, r2, r3
 800d67a:	693a      	ldr	r2, [r7, #16]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	693a      	ldr	r2, [r7, #16]
 800d684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	f003 0303 	and.w	r3, r3, #3
 800d68e:	2b03      	cmp	r3, #3
 800d690:	d017      	beq.n	800d6c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	2203      	movs	r2, #3
 800d69e:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a2:	43db      	mvns	r3, r3
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	689a      	ldr	r2, [r3, #8]
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b6:	693a      	ldr	r2, [r7, #16]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	693a      	ldr	r2, [r7, #16]
 800d6c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f003 0303 	and.w	r3, r3, #3
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d123      	bne.n	800d716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	08da      	lsrs	r2, r3, #3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3208      	adds	r2, #8
 800d6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	f003 0307 	and.w	r3, r3, #7
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	220f      	movs	r2, #15
 800d6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ea:	43db      	mvns	r3, r3
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	691a      	ldr	r2, [r3, #16]
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f003 0307 	and.w	r3, r3, #7
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d702:	693a      	ldr	r2, [r7, #16]
 800d704:	4313      	orrs	r3, r2
 800d706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	08da      	lsrs	r2, r3, #3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	3208      	adds	r2, #8
 800d710:	6939      	ldr	r1, [r7, #16]
 800d712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	005b      	lsls	r3, r3, #1
 800d720:	2203      	movs	r2, #3
 800d722:	fa02 f303 	lsl.w	r3, r2, r3
 800d726:	43db      	mvns	r3, r3
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	4013      	ands	r3, r2
 800d72c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f003 0203 	and.w	r2, r3, #3
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	fa02 f303 	lsl.w	r3, r2, r3
 800d73e:	693a      	ldr	r2, [r7, #16]
 800d740:	4313      	orrs	r3, r2
 800d742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	693a      	ldr	r2, [r7, #16]
 800d748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 80a6 	beq.w	800d8a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d758:	4b5b      	ldr	r3, [pc, #364]	@ (800d8c8 <HAL_GPIO_Init+0x2e4>)
 800d75a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d75c:	4a5a      	ldr	r2, [pc, #360]	@ (800d8c8 <HAL_GPIO_Init+0x2e4>)
 800d75e:	f043 0301 	orr.w	r3, r3, #1
 800d762:	6613      	str	r3, [r2, #96]	@ 0x60
 800d764:	4b58      	ldr	r3, [pc, #352]	@ (800d8c8 <HAL_GPIO_Init+0x2e4>)
 800d766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	60bb      	str	r3, [r7, #8]
 800d76e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d770:	4a56      	ldr	r2, [pc, #344]	@ (800d8cc <HAL_GPIO_Init+0x2e8>)
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	089b      	lsrs	r3, r3, #2
 800d776:	3302      	adds	r3, #2
 800d778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d77c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f003 0303 	and.w	r3, r3, #3
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	220f      	movs	r2, #15
 800d788:	fa02 f303 	lsl.w	r3, r2, r3
 800d78c:	43db      	mvns	r3, r3
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	4013      	ands	r3, r2
 800d792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d79a:	d01f      	beq.n	800d7dc <HAL_GPIO_Init+0x1f8>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a4c      	ldr	r2, [pc, #304]	@ (800d8d0 <HAL_GPIO_Init+0x2ec>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d019      	beq.n	800d7d8 <HAL_GPIO_Init+0x1f4>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a4b      	ldr	r2, [pc, #300]	@ (800d8d4 <HAL_GPIO_Init+0x2f0>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d013      	beq.n	800d7d4 <HAL_GPIO_Init+0x1f0>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a4a      	ldr	r2, [pc, #296]	@ (800d8d8 <HAL_GPIO_Init+0x2f4>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d00d      	beq.n	800d7d0 <HAL_GPIO_Init+0x1ec>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a49      	ldr	r2, [pc, #292]	@ (800d8dc <HAL_GPIO_Init+0x2f8>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d007      	beq.n	800d7cc <HAL_GPIO_Init+0x1e8>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a48      	ldr	r2, [pc, #288]	@ (800d8e0 <HAL_GPIO_Init+0x2fc>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d101      	bne.n	800d7c8 <HAL_GPIO_Init+0x1e4>
 800d7c4:	2305      	movs	r3, #5
 800d7c6:	e00a      	b.n	800d7de <HAL_GPIO_Init+0x1fa>
 800d7c8:	2306      	movs	r3, #6
 800d7ca:	e008      	b.n	800d7de <HAL_GPIO_Init+0x1fa>
 800d7cc:	2304      	movs	r3, #4
 800d7ce:	e006      	b.n	800d7de <HAL_GPIO_Init+0x1fa>
 800d7d0:	2303      	movs	r3, #3
 800d7d2:	e004      	b.n	800d7de <HAL_GPIO_Init+0x1fa>
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	e002      	b.n	800d7de <HAL_GPIO_Init+0x1fa>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e000      	b.n	800d7de <HAL_GPIO_Init+0x1fa>
 800d7dc:	2300      	movs	r3, #0
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	f002 0203 	and.w	r2, r2, #3
 800d7e4:	0092      	lsls	r2, r2, #2
 800d7e6:	4093      	lsls	r3, r2
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d7ee:	4937      	ldr	r1, [pc, #220]	@ (800d8cc <HAL_GPIO_Init+0x2e8>)
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	089b      	lsrs	r3, r3, #2
 800d7f4:	3302      	adds	r3, #2
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d7fc:	4b39      	ldr	r3, [pc, #228]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	43db      	mvns	r3, r3
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	4013      	ands	r3, r2
 800d80a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d814:	2b00      	cmp	r3, #0
 800d816:	d003      	beq.n	800d820 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d820:	4a30      	ldr	r2, [pc, #192]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d826:	4b2f      	ldr	r3, [pc, #188]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	43db      	mvns	r3, r3
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	4013      	ands	r3, r2
 800d834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d003      	beq.n	800d84a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800d842:	693a      	ldr	r2, [r7, #16]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	4313      	orrs	r3, r2
 800d848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d84a:	4a26      	ldr	r2, [pc, #152]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800d850:	4b24      	ldr	r3, [pc, #144]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	43db      	mvns	r3, r3
 800d85a:	693a      	ldr	r2, [r7, #16]
 800d85c:	4013      	ands	r3, r2
 800d85e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	4313      	orrs	r3, r2
 800d872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d874:	4a1b      	ldr	r2, [pc, #108]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800d87a:	4b1a      	ldr	r3, [pc, #104]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	43db      	mvns	r3, r3
 800d884:	693a      	ldr	r2, [r7, #16]
 800d886:	4013      	ands	r3, r2
 800d888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d892:	2b00      	cmp	r3, #0
 800d894:	d003      	beq.n	800d89e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d89e:	4a11      	ldr	r2, [pc, #68]	@ (800d8e4 <HAL_GPIO_Init+0x300>)
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f47f ae9d 	bne.w	800d5f4 <HAL_GPIO_Init+0x10>
  }
}
 800d8ba:	bf00      	nop
 800d8bc:	bf00      	nop
 800d8be:	371c      	adds	r7, #28
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	40021000 	.word	0x40021000
 800d8cc:	40010000 	.word	0x40010000
 800d8d0:	48000400 	.word	0x48000400
 800d8d4:	48000800 	.word	0x48000800
 800d8d8:	48000c00 	.word	0x48000c00
 800d8dc:	48001000 	.word	0x48001000
 800d8e0:	48001400 	.word	0x48001400
 800d8e4:	40010400 	.word	0x40010400

0800d8e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800d8f6:	e0bd      	b.n	800da74 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d900:	683a      	ldr	r2, [r7, #0]
 800d902:	4013      	ands	r3, r2
 800d904:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 80b0 	beq.w	800da6e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800d90e:	4a60      	ldr	r2, [pc, #384]	@ (800da90 <HAL_GPIO_DeInit+0x1a8>)
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	089b      	lsrs	r3, r3, #2
 800d914:	3302      	adds	r3, #2
 800d916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d91a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	f003 0303 	and.w	r3, r3, #3
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	220f      	movs	r2, #15
 800d926:	fa02 f303 	lsl.w	r3, r2, r3
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	4013      	ands	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d936:	d01f      	beq.n	800d978 <HAL_GPIO_DeInit+0x90>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a56      	ldr	r2, [pc, #344]	@ (800da94 <HAL_GPIO_DeInit+0x1ac>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d019      	beq.n	800d974 <HAL_GPIO_DeInit+0x8c>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a55      	ldr	r2, [pc, #340]	@ (800da98 <HAL_GPIO_DeInit+0x1b0>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d013      	beq.n	800d970 <HAL_GPIO_DeInit+0x88>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a54      	ldr	r2, [pc, #336]	@ (800da9c <HAL_GPIO_DeInit+0x1b4>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d00d      	beq.n	800d96c <HAL_GPIO_DeInit+0x84>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a53      	ldr	r2, [pc, #332]	@ (800daa0 <HAL_GPIO_DeInit+0x1b8>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d007      	beq.n	800d968 <HAL_GPIO_DeInit+0x80>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4a52      	ldr	r2, [pc, #328]	@ (800daa4 <HAL_GPIO_DeInit+0x1bc>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d101      	bne.n	800d964 <HAL_GPIO_DeInit+0x7c>
 800d960:	2305      	movs	r3, #5
 800d962:	e00a      	b.n	800d97a <HAL_GPIO_DeInit+0x92>
 800d964:	2306      	movs	r3, #6
 800d966:	e008      	b.n	800d97a <HAL_GPIO_DeInit+0x92>
 800d968:	2304      	movs	r3, #4
 800d96a:	e006      	b.n	800d97a <HAL_GPIO_DeInit+0x92>
 800d96c:	2303      	movs	r3, #3
 800d96e:	e004      	b.n	800d97a <HAL_GPIO_DeInit+0x92>
 800d970:	2302      	movs	r3, #2
 800d972:	e002      	b.n	800d97a <HAL_GPIO_DeInit+0x92>
 800d974:	2301      	movs	r3, #1
 800d976:	e000      	b.n	800d97a <HAL_GPIO_DeInit+0x92>
 800d978:	2300      	movs	r3, #0
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	f002 0203 	and.w	r2, r2, #3
 800d980:	0092      	lsls	r2, r2, #2
 800d982:	4093      	lsls	r3, r2
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	429a      	cmp	r2, r3
 800d988:	d132      	bne.n	800d9f0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800d98a:	4b47      	ldr	r3, [pc, #284]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	43db      	mvns	r3, r3
 800d992:	4945      	ldr	r1, [pc, #276]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d994:	4013      	ands	r3, r2
 800d996:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800d998:	4b43      	ldr	r3, [pc, #268]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	43db      	mvns	r3, r3
 800d9a0:	4941      	ldr	r1, [pc, #260]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d9a6:	4b40      	ldr	r3, [pc, #256]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d9a8:	68da      	ldr	r2, [r3, #12]
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	43db      	mvns	r3, r3
 800d9ae:	493e      	ldr	r1, [pc, #248]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800d9b4:	4b3c      	ldr	r3, [pc, #240]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d9b6:	689a      	ldr	r2, [r3, #8]
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	43db      	mvns	r3, r3
 800d9bc:	493a      	ldr	r1, [pc, #232]	@ (800daa8 <HAL_GPIO_DeInit+0x1c0>)
 800d9be:	4013      	ands	r3, r2
 800d9c0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	220f      	movs	r2, #15
 800d9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d9d2:	4a2f      	ldr	r2, [pc, #188]	@ (800da90 <HAL_GPIO_DeInit+0x1a8>)
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	089b      	lsrs	r3, r3, #2
 800d9d8:	3302      	adds	r3, #2
 800d9da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	43da      	mvns	r2, r3
 800d9e2:	482b      	ldr	r0, [pc, #172]	@ (800da90 <HAL_GPIO_DeInit+0x1a8>)
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	089b      	lsrs	r3, r3, #2
 800d9e8:	400a      	ands	r2, r1
 800d9ea:	3302      	adds	r3, #2
 800d9ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	2103      	movs	r1, #3
 800d9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d9fe:	431a      	orrs	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	08da      	lsrs	r2, r3, #3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	3208      	adds	r2, #8
 800da0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	220f      	movs	r2, #15
 800da1a:	fa02 f303 	lsl.w	r3, r2, r3
 800da1e:	43db      	mvns	r3, r3
 800da20:	697a      	ldr	r2, [r7, #20]
 800da22:	08d2      	lsrs	r2, r2, #3
 800da24:	4019      	ands	r1, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	3208      	adds	r2, #8
 800da2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	68da      	ldr	r2, [r3, #12]
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	2103      	movs	r1, #3
 800da38:	fa01 f303 	lsl.w	r3, r1, r3
 800da3c:	43db      	mvns	r3, r3
 800da3e:	401a      	ands	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	2101      	movs	r1, #1
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	fa01 f303 	lsl.w	r3, r1, r3
 800da50:	43db      	mvns	r3, r3
 800da52:	401a      	ands	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689a      	ldr	r2, [r3, #8]
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	2103      	movs	r1, #3
 800da62:	fa01 f303 	lsl.w	r3, r1, r3
 800da66:	43db      	mvns	r3, r3
 800da68:	401a      	ands	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	3301      	adds	r3, #1
 800da72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	fa22 f303 	lsr.w	r3, r2, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f47f af3b 	bne.w	800d8f8 <HAL_GPIO_DeInit+0x10>
  }
}
 800da82:	bf00      	nop
 800da84:	bf00      	nop
 800da86:	371c      	adds	r7, #28
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	40010000 	.word	0x40010000
 800da94:	48000400 	.word	0x48000400
 800da98:	48000800 	.word	0x48000800
 800da9c:	48000c00 	.word	0x48000c00
 800daa0:	48001000 	.word	0x48001000
 800daa4:	48001400 	.word	0x48001400
 800daa8:	40010400 	.word	0x40010400

0800daac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800daac:	b480      	push	{r7}
 800daae:	b085      	sub	sp, #20
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	691a      	ldr	r2, [r3, #16]
 800dabc:	887b      	ldrh	r3, [r7, #2]
 800dabe:	4013      	ands	r3, r2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d002      	beq.n	800daca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dac4:	2301      	movs	r3, #1
 800dac6:	73fb      	strb	r3, [r7, #15]
 800dac8:	e001      	b.n	800dace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800daca:	2300      	movs	r3, #0
 800dacc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dace:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3714      	adds	r7, #20
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	460b      	mov	r3, r1
 800dae6:	807b      	strh	r3, [r7, #2]
 800dae8:	4613      	mov	r3, r2
 800daea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800daec:	787b      	ldrb	r3, [r7, #1]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d003      	beq.n	800dafa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800daf2:	887a      	ldrh	r2, [r7, #2]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800daf8:	e002      	b.n	800db00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800dafa:	887a      	ldrh	r2, [r7, #2]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800db00:	bf00      	nop
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d101      	bne.n	800db1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	e08d      	b.n	800dc3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fc fe88 	bl	800a848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2224      	movs	r2, #36	@ 0x24
 800db3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f022 0201 	bic.w	r2, r2, #1
 800db4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800db5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	689a      	ldr	r2, [r3, #8]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800db6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d107      	bne.n	800db86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	689a      	ldr	r2, [r3, #8]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800db82:	609a      	str	r2, [r3, #8]
 800db84:	e006      	b.n	800db94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689a      	ldr	r2, [r3, #8]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800db92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d108      	bne.n	800dbae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbaa:	605a      	str	r2, [r3, #4]
 800dbac:	e007      	b.n	800dbbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	685a      	ldr	r2, [r3, #4]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dbbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	6812      	ldr	r2, [r2, #0]
 800dbc8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dbcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	68da      	ldr	r2, [r3, #12]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dbe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	691a      	ldr	r2, [r3, #16]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	695b      	ldr	r3, [r3, #20]
 800dbea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	430a      	orrs	r2, r1
 800dbfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	69d9      	ldr	r1, [r3, #28]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a1a      	ldr	r2, [r3, #32]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	430a      	orrs	r2, r1
 800dc0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f042 0201 	orr.w	r2, r2, #1
 800dc1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2220      	movs	r2, #32
 800dc26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b083      	sub	sp, #12
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b20      	cmp	r3, #32
 800dc56:	d138      	bne.n	800dcca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d101      	bne.n	800dc66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dc62:	2302      	movs	r3, #2
 800dc64:	e032      	b.n	800dccc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2224      	movs	r2, #36	@ 0x24
 800dc72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f022 0201 	bic.w	r2, r2, #1
 800dc84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800dc94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6819      	ldr	r1, [r3, #0]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	683a      	ldr	r2, [r7, #0]
 800dca2:	430a      	orrs	r2, r1
 800dca4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f042 0201 	orr.w	r2, r2, #1
 800dcb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2220      	movs	r2, #32
 800dcba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e000      	b.n	800dccc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dcca:	2302      	movs	r3, #2
  }
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b20      	cmp	r3, #32
 800dcec:	d139      	bne.n	800dd62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d101      	bne.n	800dcfc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	e033      	b.n	800dd64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2224      	movs	r2, #36	@ 0x24
 800dd08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f022 0201 	bic.w	r2, r2, #1
 800dd1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800dd2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	021b      	lsls	r3, r3, #8
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f042 0201 	orr.w	r2, r2, #1
 800dd4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2220      	movs	r2, #32
 800dd52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e000      	b.n	800dd64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dd62:	2302      	movs	r3, #2
  }
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr

0800dd70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d141      	bne.n	800de02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800dd7e:	4b4b      	ldr	r3, [pc, #300]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dd86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd8a:	d131      	bne.n	800ddf0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800dd8c:	4b47      	ldr	r3, [pc, #284]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dd8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd92:	4a46      	ldr	r2, [pc, #280]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dd94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800dd9c:	4b43      	ldr	r3, [pc, #268]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800dda4:	4a41      	ldr	r2, [pc, #260]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dda6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ddaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ddac:	4b40      	ldr	r3, [pc, #256]	@ (800deb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2232      	movs	r2, #50	@ 0x32
 800ddb2:	fb02 f303 	mul.w	r3, r2, r3
 800ddb6:	4a3f      	ldr	r2, [pc, #252]	@ (800deb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ddb8:	fba2 2303 	umull	r2, r3, r2, r3
 800ddbc:	0c9b      	lsrs	r3, r3, #18
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ddc2:	e002      	b.n	800ddca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ddca:	4b38      	ldr	r3, [pc, #224]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ddd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddd6:	d102      	bne.n	800ddde <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d1f2      	bne.n	800ddc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ddde:	4b33      	ldr	r3, [pc, #204]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dde6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddea:	d158      	bne.n	800de9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e057      	b.n	800dea0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ddf0:	4b2e      	ldr	r3, [pc, #184]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ddf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddf6:	4a2d      	ldr	r2, [pc, #180]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ddf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800de00:	e04d      	b.n	800de9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de08:	d141      	bne.n	800de8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800de0a:	4b28      	ldr	r3, [pc, #160]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800de12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de16:	d131      	bne.n	800de7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800de18:	4b24      	ldr	r3, [pc, #144]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de1e:	4a23      	ldr	r2, [pc, #140]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800de28:	4b20      	ldr	r3, [pc, #128]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800de30:	4a1e      	ldr	r2, [pc, #120]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800de36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800de38:	4b1d      	ldr	r3, [pc, #116]	@ (800deb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2232      	movs	r2, #50	@ 0x32
 800de3e:	fb02 f303 	mul.w	r3, r2, r3
 800de42:	4a1c      	ldr	r2, [pc, #112]	@ (800deb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800de44:	fba2 2303 	umull	r2, r3, r2, r3
 800de48:	0c9b      	lsrs	r3, r3, #18
 800de4a:	3301      	adds	r3, #1
 800de4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800de4e:	e002      	b.n	800de56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3b01      	subs	r3, #1
 800de54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800de56:	4b15      	ldr	r3, [pc, #84]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de62:	d102      	bne.n	800de6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1f2      	bne.n	800de50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800de6a:	4b10      	ldr	r3, [pc, #64]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800de72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de76:	d112      	bne.n	800de9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800de78:	2303      	movs	r3, #3
 800de7a:	e011      	b.n	800dea0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800de7c:	4b0b      	ldr	r3, [pc, #44]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800de82:	4a0a      	ldr	r2, [pc, #40]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800de8c:	e007      	b.n	800de9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800de8e:	4b07      	ldr	r3, [pc, #28]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800de96:	4a05      	ldr	r2, [pc, #20]	@ (800deac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800de98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800de9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	40007000 	.word	0x40007000
 800deb0:	20000050 	.word	0x20000050
 800deb4:	431bde83 	.word	0x431bde83

0800deb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800deb8:	b480      	push	{r7}
 800deba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800debc:	4b05      	ldr	r3, [pc, #20]	@ (800ded4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	4a04      	ldr	r2, [pc, #16]	@ (800ded4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800dec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dec6:	6093      	str	r3, [r2, #8]
}
 800dec8:	bf00      	nop
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop
 800ded4:	40007000 	.word	0x40007000

0800ded8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e2fe      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	2b00      	cmp	r3, #0
 800def4:	d075      	beq.n	800dfe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800def6:	4b97      	ldr	r3, [pc, #604]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f003 030c 	and.w	r3, r3, #12
 800defe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800df00:	4b94      	ldr	r3, [pc, #592]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	f003 0303 	and.w	r3, r3, #3
 800df08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	2b0c      	cmp	r3, #12
 800df0e:	d102      	bne.n	800df16 <HAL_RCC_OscConfig+0x3e>
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2b03      	cmp	r3, #3
 800df14:	d002      	beq.n	800df1c <HAL_RCC_OscConfig+0x44>
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	2b08      	cmp	r3, #8
 800df1a:	d10b      	bne.n	800df34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df1c:	4b8d      	ldr	r3, [pc, #564]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d05b      	beq.n	800dfe0 <HAL_RCC_OscConfig+0x108>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d157      	bne.n	800dfe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800df30:	2301      	movs	r3, #1
 800df32:	e2d9      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df3c:	d106      	bne.n	800df4c <HAL_RCC_OscConfig+0x74>
 800df3e:	4b85      	ldr	r3, [pc, #532]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a84      	ldr	r2, [pc, #528]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	e01d      	b.n	800df88 <HAL_RCC_OscConfig+0xb0>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800df54:	d10c      	bne.n	800df70 <HAL_RCC_OscConfig+0x98>
 800df56:	4b7f      	ldr	r3, [pc, #508]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a7e      	ldr	r2, [pc, #504]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	4b7c      	ldr	r3, [pc, #496]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a7b      	ldr	r2, [pc, #492]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df6c:	6013      	str	r3, [r2, #0]
 800df6e:	e00b      	b.n	800df88 <HAL_RCC_OscConfig+0xb0>
 800df70:	4b78      	ldr	r3, [pc, #480]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a77      	ldr	r2, [pc, #476]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	4b75      	ldr	r3, [pc, #468]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a74      	ldr	r2, [pc, #464]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800df82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800df86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	685b      	ldr	r3, [r3, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d013      	beq.n	800dfb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df90:	f7fc ffee 	bl	800af70 <HAL_GetTick>
 800df94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800df96:	e008      	b.n	800dfaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df98:	f7fc ffea 	bl	800af70 <HAL_GetTick>
 800df9c:	4602      	mov	r2, r0
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	2b64      	cmp	r3, #100	@ 0x64
 800dfa4:	d901      	bls.n	800dfaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e29e      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dfaa:	4b6a      	ldr	r3, [pc, #424]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0f0      	beq.n	800df98 <HAL_RCC_OscConfig+0xc0>
 800dfb6:	e014      	b.n	800dfe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfb8:	f7fc ffda 	bl	800af70 <HAL_GetTick>
 800dfbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800dfbe:	e008      	b.n	800dfd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dfc0:	f7fc ffd6 	bl	800af70 <HAL_GetTick>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	2b64      	cmp	r3, #100	@ 0x64
 800dfcc:	d901      	bls.n	800dfd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dfce:	2303      	movs	r3, #3
 800dfd0:	e28a      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800dfd2:	4b60      	ldr	r3, [pc, #384]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1f0      	bne.n	800dfc0 <HAL_RCC_OscConfig+0xe8>
 800dfde:	e000      	b.n	800dfe2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dfe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f003 0302 	and.w	r3, r3, #2
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d075      	beq.n	800e0da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfee:	4b59      	ldr	r3, [pc, #356]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	f003 030c 	and.w	r3, r3, #12
 800dff6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dff8:	4b56      	ldr	r3, [pc, #344]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	f003 0303 	and.w	r3, r3, #3
 800e000:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	2b0c      	cmp	r3, #12
 800e006:	d102      	bne.n	800e00e <HAL_RCC_OscConfig+0x136>
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d002      	beq.n	800e014 <HAL_RCC_OscConfig+0x13c>
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	2b04      	cmp	r3, #4
 800e012:	d11f      	bne.n	800e054 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e014:	4b4f      	ldr	r3, [pc, #316]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d005      	beq.n	800e02c <HAL_RCC_OscConfig+0x154>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d101      	bne.n	800e02c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	e25d      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e02c:	4b49      	ldr	r3, [pc, #292]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	061b      	lsls	r3, r3, #24
 800e03a:	4946      	ldr	r1, [pc, #280]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e03c:	4313      	orrs	r3, r2
 800e03e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800e040:	4b45      	ldr	r3, [pc, #276]	@ (800e158 <HAL_RCC_OscConfig+0x280>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4618      	mov	r0, r3
 800e046:	f7fc ff47 	bl	800aed8 <HAL_InitTick>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d043      	beq.n	800e0d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e249      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d023      	beq.n	800e0a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e05c:	4b3d      	ldr	r3, [pc, #244]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a3c      	ldr	r2, [pc, #240]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e068:	f7fc ff82 	bl	800af70 <HAL_GetTick>
 800e06c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e06e:	e008      	b.n	800e082 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e070:	f7fc ff7e 	bl	800af70 <HAL_GetTick>
 800e074:	4602      	mov	r2, r0
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d901      	bls.n	800e082 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e07e:	2303      	movs	r3, #3
 800e080:	e232      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e082:	4b34      	ldr	r3, [pc, #208]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d0f0      	beq.n	800e070 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e08e:	4b31      	ldr	r3, [pc, #196]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	061b      	lsls	r3, r3, #24
 800e09c:	492d      	ldr	r1, [pc, #180]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	604b      	str	r3, [r1, #4]
 800e0a2:	e01a      	b.n	800e0da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e0a4:	4b2b      	ldr	r3, [pc, #172]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a2a      	ldr	r2, [pc, #168]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e0aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0b0:	f7fc ff5e 	bl	800af70 <HAL_GetTick>
 800e0b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e0b6:	e008      	b.n	800e0ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e0b8:	f7fc ff5a 	bl	800af70 <HAL_GetTick>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d901      	bls.n	800e0ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800e0c6:	2303      	movs	r3, #3
 800e0c8:	e20e      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e0ca:	4b22      	ldr	r3, [pc, #136]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1f0      	bne.n	800e0b8 <HAL_RCC_OscConfig+0x1e0>
 800e0d6:	e000      	b.n	800e0da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e0d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f003 0308 	and.w	r3, r3, #8
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d041      	beq.n	800e16a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	695b      	ldr	r3, [r3, #20]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d01c      	beq.n	800e128 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e0ee:	4b19      	ldr	r3, [pc, #100]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0f4:	4a17      	ldr	r2, [pc, #92]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e0f6:	f043 0301 	orr.w	r3, r3, #1
 800e0fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0fe:	f7fc ff37 	bl	800af70 <HAL_GetTick>
 800e102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e104:	e008      	b.n	800e118 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e106:	f7fc ff33 	bl	800af70 <HAL_GetTick>
 800e10a:	4602      	mov	r2, r0
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	2b02      	cmp	r3, #2
 800e112:	d901      	bls.n	800e118 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800e114:	2303      	movs	r3, #3
 800e116:	e1e7      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e118:	4b0e      	ldr	r3, [pc, #56]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e11a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e11e:	f003 0302 	and.w	r3, r3, #2
 800e122:	2b00      	cmp	r3, #0
 800e124:	d0ef      	beq.n	800e106 <HAL_RCC_OscConfig+0x22e>
 800e126:	e020      	b.n	800e16a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e128:	4b0a      	ldr	r3, [pc, #40]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e12a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e12e:	4a09      	ldr	r2, [pc, #36]	@ (800e154 <HAL_RCC_OscConfig+0x27c>)
 800e130:	f023 0301 	bic.w	r3, r3, #1
 800e134:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e138:	f7fc ff1a 	bl	800af70 <HAL_GetTick>
 800e13c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e13e:	e00d      	b.n	800e15c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e140:	f7fc ff16 	bl	800af70 <HAL_GetTick>
 800e144:	4602      	mov	r2, r0
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	d906      	bls.n	800e15c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	e1ca      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
 800e152:	bf00      	nop
 800e154:	40021000 	.word	0x40021000
 800e158:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e15c:	4b8c      	ldr	r3, [pc, #560]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e15e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e162:	f003 0302 	and.w	r3, r3, #2
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1ea      	bne.n	800e140 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f003 0304 	and.w	r3, r3, #4
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 80a6 	beq.w	800e2c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e178:	2300      	movs	r3, #0
 800e17a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e17c:	4b84      	ldr	r3, [pc, #528]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e17e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <HAL_RCC_OscConfig+0x2b4>
 800e188:	2301      	movs	r3, #1
 800e18a:	e000      	b.n	800e18e <HAL_RCC_OscConfig+0x2b6>
 800e18c:	2300      	movs	r3, #0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00d      	beq.n	800e1ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e192:	4b7f      	ldr	r3, [pc, #508]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e196:	4a7e      	ldr	r2, [pc, #504]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e19c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e19e:	4b7c      	ldr	r3, [pc, #496]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e1a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e1ae:	4b79      	ldr	r3, [pc, #484]	@ (800e394 <HAL_RCC_OscConfig+0x4bc>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d118      	bne.n	800e1ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e1ba:	4b76      	ldr	r3, [pc, #472]	@ (800e394 <HAL_RCC_OscConfig+0x4bc>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4a75      	ldr	r2, [pc, #468]	@ (800e394 <HAL_RCC_OscConfig+0x4bc>)
 800e1c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e1c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e1c6:	f7fc fed3 	bl	800af70 <HAL_GetTick>
 800e1ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e1cc:	e008      	b.n	800e1e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1ce:	f7fc fecf 	bl	800af70 <HAL_GetTick>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d901      	bls.n	800e1e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800e1dc:	2303      	movs	r3, #3
 800e1de:	e183      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e1e0:	4b6c      	ldr	r3, [pc, #432]	@ (800e394 <HAL_RCC_OscConfig+0x4bc>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d0f0      	beq.n	800e1ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d108      	bne.n	800e206 <HAL_RCC_OscConfig+0x32e>
 800e1f4:	4b66      	ldr	r3, [pc, #408]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1fa:	4a65      	ldr	r2, [pc, #404]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e1fc:	f043 0301 	orr.w	r3, r3, #1
 800e200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e204:	e024      	b.n	800e250 <HAL_RCC_OscConfig+0x378>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	2b05      	cmp	r3, #5
 800e20c:	d110      	bne.n	800e230 <HAL_RCC_OscConfig+0x358>
 800e20e:	4b60      	ldr	r3, [pc, #384]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e214:	4a5e      	ldr	r2, [pc, #376]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e216:	f043 0304 	orr.w	r3, r3, #4
 800e21a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e21e:	4b5c      	ldr	r3, [pc, #368]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e224:	4a5a      	ldr	r2, [pc, #360]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e226:	f043 0301 	orr.w	r3, r3, #1
 800e22a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e22e:	e00f      	b.n	800e250 <HAL_RCC_OscConfig+0x378>
 800e230:	4b57      	ldr	r3, [pc, #348]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e236:	4a56      	ldr	r2, [pc, #344]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e238:	f023 0301 	bic.w	r3, r3, #1
 800e23c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e240:	4b53      	ldr	r3, [pc, #332]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e246:	4a52      	ldr	r2, [pc, #328]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e248:	f023 0304 	bic.w	r3, r3, #4
 800e24c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d016      	beq.n	800e286 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e258:	f7fc fe8a 	bl	800af70 <HAL_GetTick>
 800e25c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e25e:	e00a      	b.n	800e276 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e260:	f7fc fe86 	bl	800af70 <HAL_GetTick>
 800e264:	4602      	mov	r2, r0
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e26e:	4293      	cmp	r3, r2
 800e270:	d901      	bls.n	800e276 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800e272:	2303      	movs	r3, #3
 800e274:	e138      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e276:	4b46      	ldr	r3, [pc, #280]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e27c:	f003 0302 	and.w	r3, r3, #2
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0ed      	beq.n	800e260 <HAL_RCC_OscConfig+0x388>
 800e284:	e015      	b.n	800e2b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e286:	f7fc fe73 	bl	800af70 <HAL_GetTick>
 800e28a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e28c:	e00a      	b.n	800e2a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e28e:	f7fc fe6f 	bl	800af70 <HAL_GetTick>
 800e292:	4602      	mov	r2, r0
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d901      	bls.n	800e2a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	e121      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e2a4:	4b3a      	ldr	r3, [pc, #232]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2aa:	f003 0302 	and.w	r3, r3, #2
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1ed      	bne.n	800e28e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e2b2:	7ffb      	ldrb	r3, [r7, #31]
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d105      	bne.n	800e2c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e2b8:	4b35      	ldr	r3, [pc, #212]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e2ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2bc:	4a34      	ldr	r2, [pc, #208]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e2be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 0320 	and.w	r3, r3, #32
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d03c      	beq.n	800e34a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	699b      	ldr	r3, [r3, #24]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d01c      	beq.n	800e312 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e2d8:	4b2d      	ldr	r3, [pc, #180]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e2da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e2de:	4a2c      	ldr	r2, [pc, #176]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e2e0:	f043 0301 	orr.w	r3, r3, #1
 800e2e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2e8:	f7fc fe42 	bl	800af70 <HAL_GetTick>
 800e2ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e2ee:	e008      	b.n	800e302 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e2f0:	f7fc fe3e 	bl	800af70 <HAL_GetTick>
 800e2f4:	4602      	mov	r2, r0
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d901      	bls.n	800e302 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800e2fe:	2303      	movs	r3, #3
 800e300:	e0f2      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e302:	4b23      	ldr	r3, [pc, #140]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e308:	f003 0302 	and.w	r3, r3, #2
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d0ef      	beq.n	800e2f0 <HAL_RCC_OscConfig+0x418>
 800e310:	e01b      	b.n	800e34a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e312:	4b1f      	ldr	r3, [pc, #124]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e318:	4a1d      	ldr	r2, [pc, #116]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e31a:	f023 0301 	bic.w	r3, r3, #1
 800e31e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e322:	f7fc fe25 	bl	800af70 <HAL_GetTick>
 800e326:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e328:	e008      	b.n	800e33c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e32a:	f7fc fe21 	bl	800af70 <HAL_GetTick>
 800e32e:	4602      	mov	r2, r0
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	2b02      	cmp	r3, #2
 800e336:	d901      	bls.n	800e33c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800e338:	2303      	movs	r3, #3
 800e33a:	e0d5      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e33c:	4b14      	ldr	r3, [pc, #80]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e33e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e342:	f003 0302 	and.w	r3, r3, #2
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1ef      	bne.n	800e32a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	69db      	ldr	r3, [r3, #28]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f000 80c9 	beq.w	800e4e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e354:	4b0e      	ldr	r3, [pc, #56]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f003 030c 	and.w	r3, r3, #12
 800e35c:	2b0c      	cmp	r3, #12
 800e35e:	f000 8083 	beq.w	800e468 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	69db      	ldr	r3, [r3, #28]
 800e366:	2b02      	cmp	r3, #2
 800e368:	d15e      	bne.n	800e428 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e36a:	4b09      	ldr	r3, [pc, #36]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a08      	ldr	r2, [pc, #32]	@ (800e390 <HAL_RCC_OscConfig+0x4b8>)
 800e370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e376:	f7fc fdfb 	bl	800af70 <HAL_GetTick>
 800e37a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e37c:	e00c      	b.n	800e398 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e37e:	f7fc fdf7 	bl	800af70 <HAL_GetTick>
 800e382:	4602      	mov	r2, r0
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	2b02      	cmp	r3, #2
 800e38a:	d905      	bls.n	800e398 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800e38c:	2303      	movs	r3, #3
 800e38e:	e0ab      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
 800e390:	40021000 	.word	0x40021000
 800e394:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e398:	4b55      	ldr	r3, [pc, #340]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1ec      	bne.n	800e37e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e3a4:	4b52      	ldr	r3, [pc, #328]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e3a6:	68da      	ldr	r2, [r3, #12]
 800e3a8:	4b52      	ldr	r3, [pc, #328]	@ (800e4f4 <HAL_RCC_OscConfig+0x61c>)
 800e3aa:	4013      	ands	r3, r2
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	6a11      	ldr	r1, [r2, #32]
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e3b4:	3a01      	subs	r2, #1
 800e3b6:	0112      	lsls	r2, r2, #4
 800e3b8:	4311      	orrs	r1, r2
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800e3be:	0212      	lsls	r2, r2, #8
 800e3c0:	4311      	orrs	r1, r2
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e3c6:	0852      	lsrs	r2, r2, #1
 800e3c8:	3a01      	subs	r2, #1
 800e3ca:	0552      	lsls	r2, r2, #21
 800e3cc:	4311      	orrs	r1, r2
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e3d2:	0852      	lsrs	r2, r2, #1
 800e3d4:	3a01      	subs	r2, #1
 800e3d6:	0652      	lsls	r2, r2, #25
 800e3d8:	4311      	orrs	r1, r2
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e3de:	06d2      	lsls	r2, r2, #27
 800e3e0:	430a      	orrs	r2, r1
 800e3e2:	4943      	ldr	r1, [pc, #268]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e3e8:	4b41      	ldr	r3, [pc, #260]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a40      	ldr	r2, [pc, #256]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e3ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e3f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e3f4:	4b3e      	ldr	r3, [pc, #248]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	4a3d      	ldr	r2, [pc, #244]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e3fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e3fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e400:	f7fc fdb6 	bl	800af70 <HAL_GetTick>
 800e404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e406:	e008      	b.n	800e41a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e408:	f7fc fdb2 	bl	800af70 <HAL_GetTick>
 800e40c:	4602      	mov	r2, r0
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	2b02      	cmp	r3, #2
 800e414:	d901      	bls.n	800e41a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800e416:	2303      	movs	r3, #3
 800e418:	e066      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e41a:	4b35      	ldr	r3, [pc, #212]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e422:	2b00      	cmp	r3, #0
 800e424:	d0f0      	beq.n	800e408 <HAL_RCC_OscConfig+0x530>
 800e426:	e05e      	b.n	800e4e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e428:	4b31      	ldr	r3, [pc, #196]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a30      	ldr	r2, [pc, #192]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e42e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e434:	f7fc fd9c 	bl	800af70 <HAL_GetTick>
 800e438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e43a:	e008      	b.n	800e44e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e43c:	f7fc fd98 	bl	800af70 <HAL_GetTick>
 800e440:	4602      	mov	r2, r0
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	2b02      	cmp	r3, #2
 800e448:	d901      	bls.n	800e44e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800e44a:	2303      	movs	r3, #3
 800e44c:	e04c      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e44e:	4b28      	ldr	r3, [pc, #160]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1f0      	bne.n	800e43c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800e45a:	4b25      	ldr	r3, [pc, #148]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e45c:	68da      	ldr	r2, [r3, #12]
 800e45e:	4924      	ldr	r1, [pc, #144]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e460:	4b25      	ldr	r3, [pc, #148]	@ (800e4f8 <HAL_RCC_OscConfig+0x620>)
 800e462:	4013      	ands	r3, r2
 800e464:	60cb      	str	r3, [r1, #12]
 800e466:	e03e      	b.n	800e4e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	69db      	ldr	r3, [r3, #28]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d101      	bne.n	800e474 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	e039      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800e474:	4b1e      	ldr	r3, [pc, #120]	@ (800e4f0 <HAL_RCC_OscConfig+0x618>)
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	f003 0203 	and.w	r2, r3, #3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a1b      	ldr	r3, [r3, #32]
 800e484:	429a      	cmp	r2, r3
 800e486:	d12c      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e492:	3b01      	subs	r3, #1
 800e494:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e496:	429a      	cmp	r2, r3
 800e498:	d123      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d11b      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d113      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4c4:	085b      	lsrs	r3, r3, #1
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d109      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4d8:	085b      	lsrs	r3, r3, #1
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d001      	beq.n	800e4e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e000      	b.n	800e4e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3720      	adds	r7, #32
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	40021000 	.word	0x40021000
 800e4f4:	019f800c 	.word	0x019f800c
 800e4f8:	feeefffc 	.word	0xfeeefffc

0800e4fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b086      	sub	sp, #24
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800e506:	2300      	movs	r3, #0
 800e508:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e510:	2301      	movs	r3, #1
 800e512:	e11e      	b.n	800e752 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e514:	4b91      	ldr	r3, [pc, #580]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f003 030f 	and.w	r3, r3, #15
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d910      	bls.n	800e544 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e522:	4b8e      	ldr	r3, [pc, #568]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f023 020f 	bic.w	r2, r3, #15
 800e52a:	498c      	ldr	r1, [pc, #560]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	4313      	orrs	r3, r2
 800e530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e532:	4b8a      	ldr	r3, [pc, #552]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f003 030f 	and.w	r3, r3, #15
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d001      	beq.n	800e544 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	e106      	b.n	800e752 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d073      	beq.n	800e638 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	2b03      	cmp	r3, #3
 800e556:	d129      	bne.n	800e5ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e558:	4b81      	ldr	r3, [pc, #516]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800e564:	2301      	movs	r3, #1
 800e566:	e0f4      	b.n	800e752 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800e568:	f000 f99e 	bl	800e8a8 <RCC_GetSysClockFreqFromPLLSource>
 800e56c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	4a7c      	ldr	r2, [pc, #496]	@ (800e764 <HAL_RCC_ClockConfig+0x268>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d93f      	bls.n	800e5f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e576:	4b7a      	ldr	r3, [pc, #488]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d009      	beq.n	800e596 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d033      	beq.n	800e5f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e592:	2b00      	cmp	r3, #0
 800e594:	d12f      	bne.n	800e5f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e596:	4b72      	ldr	r3, [pc, #456]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e59e:	4a70      	ldr	r2, [pc, #448]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e5a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800e5a6:	2380      	movs	r3, #128	@ 0x80
 800e5a8:	617b      	str	r3, [r7, #20]
 800e5aa:	e024      	b.n	800e5f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d107      	bne.n	800e5c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e5b4:	4b6a      	ldr	r3, [pc, #424]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d109      	bne.n	800e5d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	e0c6      	b.n	800e752 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e5c4:	4b66      	ldr	r3, [pc, #408]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e0be      	b.n	800e752 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800e5d4:	f000 f8ce 	bl	800e774 <HAL_RCC_GetSysClockFreq>
 800e5d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	4a61      	ldr	r2, [pc, #388]	@ (800e764 <HAL_RCC_ClockConfig+0x268>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d909      	bls.n	800e5f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e5e2:	4b5f      	ldr	r3, [pc, #380]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e5ea:	4a5d      	ldr	r2, [pc, #372]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e5ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800e5f2:	2380      	movs	r3, #128	@ 0x80
 800e5f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e5f6:	4b5a      	ldr	r3, [pc, #360]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	f023 0203 	bic.w	r2, r3, #3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	4957      	ldr	r1, [pc, #348]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e604:	4313      	orrs	r3, r2
 800e606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e608:	f7fc fcb2 	bl	800af70 <HAL_GetTick>
 800e60c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e60e:	e00a      	b.n	800e626 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e610:	f7fc fcae 	bl	800af70 <HAL_GetTick>
 800e614:	4602      	mov	r2, r0
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	1ad3      	subs	r3, r2, r3
 800e61a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e61e:	4293      	cmp	r3, r2
 800e620:	d901      	bls.n	800e626 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800e622:	2303      	movs	r3, #3
 800e624:	e095      	b.n	800e752 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e626:	4b4e      	ldr	r3, [pc, #312]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e628:	689b      	ldr	r3, [r3, #8]
 800e62a:	f003 020c 	and.w	r2, r3, #12
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	429a      	cmp	r2, r3
 800e636:	d1eb      	bne.n	800e610 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 0302 	and.w	r3, r3, #2
 800e640:	2b00      	cmp	r3, #0
 800e642:	d023      	beq.n	800e68c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f003 0304 	and.w	r3, r3, #4
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d005      	beq.n	800e65c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e650:	4b43      	ldr	r3, [pc, #268]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	4a42      	ldr	r2, [pc, #264]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e656:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800e65a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f003 0308 	and.w	r3, r3, #8
 800e664:	2b00      	cmp	r3, #0
 800e666:	d007      	beq.n	800e678 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800e668:	4b3d      	ldr	r3, [pc, #244]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e670:	4a3b      	ldr	r2, [pc, #236]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e672:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800e676:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e678:	4b39      	ldr	r3, [pc, #228]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	689b      	ldr	r3, [r3, #8]
 800e684:	4936      	ldr	r1, [pc, #216]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e686:	4313      	orrs	r3, r2
 800e688:	608b      	str	r3, [r1, #8]
 800e68a:	e008      	b.n	800e69e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	2b80      	cmp	r3, #128	@ 0x80
 800e690:	d105      	bne.n	800e69e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e692:	4b33      	ldr	r3, [pc, #204]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	4a32      	ldr	r2, [pc, #200]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e698:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e69c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e69e:	4b2f      	ldr	r3, [pc, #188]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f003 030f 	and.w	r3, r3, #15
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d21d      	bcs.n	800e6e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f023 020f 	bic.w	r2, r3, #15
 800e6b4:	4929      	ldr	r1, [pc, #164]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e6bc:	f7fc fc58 	bl	800af70 <HAL_GetTick>
 800e6c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6c2:	e00a      	b.n	800e6da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e6c4:	f7fc fc54 	bl	800af70 <HAL_GetTick>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	1ad3      	subs	r3, r2, r3
 800e6ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d901      	bls.n	800e6da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	e03b      	b.n	800e752 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6da:	4b20      	ldr	r3, [pc, #128]	@ (800e75c <HAL_RCC_ClockConfig+0x260>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f003 030f 	and.w	r3, r3, #15
 800e6e2:	683a      	ldr	r2, [r7, #0]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d1ed      	bne.n	800e6c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f003 0304 	and.w	r3, r3, #4
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d008      	beq.n	800e706 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	4917      	ldr	r1, [pc, #92]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e702:	4313      	orrs	r3, r2
 800e704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f003 0308 	and.w	r3, r3, #8
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d009      	beq.n	800e726 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e712:	4b13      	ldr	r3, [pc, #76]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	490f      	ldr	r1, [pc, #60]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e722:	4313      	orrs	r3, r2
 800e724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e726:	f000 f825 	bl	800e774 <HAL_RCC_GetSysClockFreq>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b0c      	ldr	r3, [pc, #48]	@ (800e760 <HAL_RCC_ClockConfig+0x264>)
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	091b      	lsrs	r3, r3, #4
 800e732:	f003 030f 	and.w	r3, r3, #15
 800e736:	490c      	ldr	r1, [pc, #48]	@ (800e768 <HAL_RCC_ClockConfig+0x26c>)
 800e738:	5ccb      	ldrb	r3, [r1, r3]
 800e73a:	f003 031f 	and.w	r3, r3, #31
 800e73e:	fa22 f303 	lsr.w	r3, r2, r3
 800e742:	4a0a      	ldr	r2, [pc, #40]	@ (800e76c <HAL_RCC_ClockConfig+0x270>)
 800e744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e746:	4b0a      	ldr	r3, [pc, #40]	@ (800e770 <HAL_RCC_ClockConfig+0x274>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fc fbc4 	bl	800aed8 <HAL_InitTick>
 800e750:	4603      	mov	r3, r0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	40022000 	.word	0x40022000
 800e760:	40021000 	.word	0x40021000
 800e764:	04c4b400 	.word	0x04c4b400
 800e768:	08017b64 	.word	0x08017b64
 800e76c:	20000050 	.word	0x20000050
 800e770:	20000054 	.word	0x20000054

0800e774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e774:	b480      	push	{r7}
 800e776:	b087      	sub	sp, #28
 800e778:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e77a:	4b2c      	ldr	r3, [pc, #176]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	f003 030c 	and.w	r3, r3, #12
 800e782:	2b04      	cmp	r3, #4
 800e784:	d102      	bne.n	800e78c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e786:	4b2a      	ldr	r3, [pc, #168]	@ (800e830 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e788:	613b      	str	r3, [r7, #16]
 800e78a:	e047      	b.n	800e81c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e78c:	4b27      	ldr	r3, [pc, #156]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	f003 030c 	and.w	r3, r3, #12
 800e794:	2b08      	cmp	r3, #8
 800e796:	d102      	bne.n	800e79e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e798:	4b26      	ldr	r3, [pc, #152]	@ (800e834 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e79a:	613b      	str	r3, [r7, #16]
 800e79c:	e03e      	b.n	800e81c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800e79e:	4b23      	ldr	r3, [pc, #140]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	f003 030c 	and.w	r3, r3, #12
 800e7a6:	2b0c      	cmp	r3, #12
 800e7a8:	d136      	bne.n	800e818 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e7aa:	4b20      	ldr	r3, [pc, #128]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	f003 0303 	and.w	r3, r3, #3
 800e7b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	091b      	lsrs	r3, r3, #4
 800e7ba:	f003 030f 	and.w	r3, r3, #15
 800e7be:	3301      	adds	r3, #1
 800e7c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b03      	cmp	r3, #3
 800e7c6:	d10c      	bne.n	800e7e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e7c8:	4a1a      	ldr	r2, [pc, #104]	@ (800e834 <HAL_RCC_GetSysClockFreq+0xc0>)
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7d0:	4a16      	ldr	r2, [pc, #88]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e7d2:	68d2      	ldr	r2, [r2, #12]
 800e7d4:	0a12      	lsrs	r2, r2, #8
 800e7d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e7da:	fb02 f303 	mul.w	r3, r2, r3
 800e7de:	617b      	str	r3, [r7, #20]
      break;
 800e7e0:	e00c      	b.n	800e7fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e7e2:	4a13      	ldr	r2, [pc, #76]	@ (800e830 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7ea:	4a10      	ldr	r2, [pc, #64]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e7ec:	68d2      	ldr	r2, [r2, #12]
 800e7ee:	0a12      	lsrs	r2, r2, #8
 800e7f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e7f4:	fb02 f303 	mul.w	r3, r2, r3
 800e7f8:	617b      	str	r3, [r7, #20]
      break;
 800e7fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e7fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	0e5b      	lsrs	r3, r3, #25
 800e802:	f003 0303 	and.w	r3, r3, #3
 800e806:	3301      	adds	r3, #1
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	fbb2 f3f3 	udiv	r3, r2, r3
 800e814:	613b      	str	r3, [r7, #16]
 800e816:	e001      	b.n	800e81c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e818:	2300      	movs	r3, #0
 800e81a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e81c:	693b      	ldr	r3, [r7, #16]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	371c      	adds	r7, #28
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	40021000 	.word	0x40021000
 800e830:	00f42400 	.word	0x00f42400
 800e834:	016e3600 	.word	0x016e3600

0800e838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e838:	b480      	push	{r7}
 800e83a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e83c:	4b03      	ldr	r3, [pc, #12]	@ (800e84c <HAL_RCC_GetHCLKFreq+0x14>)
 800e83e:	681b      	ldr	r3, [r3, #0]
}
 800e840:	4618      	mov	r0, r3
 800e842:	46bd      	mov	sp, r7
 800e844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	20000050 	.word	0x20000050

0800e850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e854:	f7ff fff0 	bl	800e838 <HAL_RCC_GetHCLKFreq>
 800e858:	4602      	mov	r2, r0
 800e85a:	4b06      	ldr	r3, [pc, #24]	@ (800e874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	0a1b      	lsrs	r3, r3, #8
 800e860:	f003 0307 	and.w	r3, r3, #7
 800e864:	4904      	ldr	r1, [pc, #16]	@ (800e878 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e866:	5ccb      	ldrb	r3, [r1, r3]
 800e868:	f003 031f 	and.w	r3, r3, #31
 800e86c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e870:	4618      	mov	r0, r3
 800e872:	bd80      	pop	{r7, pc}
 800e874:	40021000 	.word	0x40021000
 800e878:	08017b74 	.word	0x08017b74

0800e87c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e880:	f7ff ffda 	bl	800e838 <HAL_RCC_GetHCLKFreq>
 800e884:	4602      	mov	r2, r0
 800e886:	4b06      	ldr	r3, [pc, #24]	@ (800e8a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	0adb      	lsrs	r3, r3, #11
 800e88c:	f003 0307 	and.w	r3, r3, #7
 800e890:	4904      	ldr	r1, [pc, #16]	@ (800e8a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e892:	5ccb      	ldrb	r3, [r1, r3]
 800e894:	f003 031f 	and.w	r3, r3, #31
 800e898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	40021000 	.word	0x40021000
 800e8a4:	08017b74 	.word	0x08017b74

0800e8a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e8ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	f003 0303 	and.w	r3, r3, #3
 800e8b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e8b8:	4b1b      	ldr	r3, [pc, #108]	@ (800e928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	091b      	lsrs	r3, r3, #4
 800e8be:	f003 030f 	and.w	r3, r3, #15
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	2b03      	cmp	r3, #3
 800e8ca:	d10c      	bne.n	800e8e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e8cc:	4a17      	ldr	r2, [pc, #92]	@ (800e92c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8d4:	4a14      	ldr	r2, [pc, #80]	@ (800e928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e8d6:	68d2      	ldr	r2, [r2, #12]
 800e8d8:	0a12      	lsrs	r2, r2, #8
 800e8da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e8de:	fb02 f303 	mul.w	r3, r2, r3
 800e8e2:	617b      	str	r3, [r7, #20]
    break;
 800e8e4:	e00c      	b.n	800e900 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e8e6:	4a12      	ldr	r2, [pc, #72]	@ (800e930 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8ee:	4a0e      	ldr	r2, [pc, #56]	@ (800e928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e8f0:	68d2      	ldr	r2, [r2, #12]
 800e8f2:	0a12      	lsrs	r2, r2, #8
 800e8f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e8f8:	fb02 f303 	mul.w	r3, r2, r3
 800e8fc:	617b      	str	r3, [r7, #20]
    break;
 800e8fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e900:	4b09      	ldr	r3, [pc, #36]	@ (800e928 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	0e5b      	lsrs	r3, r3, #25
 800e906:	f003 0303 	and.w	r3, r3, #3
 800e90a:	3301      	adds	r3, #1
 800e90c:	005b      	lsls	r3, r3, #1
 800e90e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e910:	697a      	ldr	r2, [r7, #20]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	fbb2 f3f3 	udiv	r3, r2, r3
 800e918:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e91a:	687b      	ldr	r3, [r7, #4]
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	371c      	adds	r7, #28
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	40021000 	.word	0x40021000
 800e92c:	016e3600 	.word	0x016e3600
 800e930:	00f42400 	.word	0x00f42400

0800e934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e93c:	2300      	movs	r3, #0
 800e93e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e940:	2300      	movs	r3, #0
 800e942:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f000 8098 	beq.w	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e952:	2300      	movs	r3, #0
 800e954:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e956:	4b43      	ldr	r3, [pc, #268]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e95a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10d      	bne.n	800e97e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e962:	4b40      	ldr	r3, [pc, #256]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e966:	4a3f      	ldr	r2, [pc, #252]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e96c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e96e:	4b3d      	ldr	r3, [pc, #244]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e976:	60bb      	str	r3, [r7, #8]
 800e978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e97a:	2301      	movs	r3, #1
 800e97c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e97e:	4b3a      	ldr	r3, [pc, #232]	@ (800ea68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a39      	ldr	r2, [pc, #228]	@ (800ea68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e988:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e98a:	f7fc faf1 	bl	800af70 <HAL_GetTick>
 800e98e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e990:	e009      	b.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e992:	f7fc faed 	bl	800af70 <HAL_GetTick>
 800e996:	4602      	mov	r2, r0
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	d902      	bls.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	74fb      	strb	r3, [r7, #19]
        break;
 800e9a4:	e005      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e9a6:	4b30      	ldr	r3, [pc, #192]	@ (800ea68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d0ef      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e9b2:	7cfb      	ldrb	r3, [r7, #19]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d159      	bne.n	800ea6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e9b8:	4b2a      	ldr	r3, [pc, #168]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e9ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e9c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d01e      	beq.n	800ea08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d019      	beq.n	800ea08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e9d4:	4b23      	ldr	r3, [pc, #140]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e9e0:	4b20      	ldr	r3, [pc, #128]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9e6:	4a1f      	ldr	r2, [pc, #124]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e9e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e9f0:	4b1c      	ldr	r3, [pc, #112]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e9f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9f6:	4a1b      	ldr	r2, [pc, #108]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e9f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ea00:	4a18      	ldr	r2, [pc, #96]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d016      	beq.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea12:	f7fc faad 	bl	800af70 <HAL_GetTick>
 800ea16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ea18:	e00b      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea1a:	f7fc faa9 	bl	800af70 <HAL_GetTick>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d902      	bls.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	74fb      	strb	r3, [r7, #19]
            break;
 800ea30:	e006      	b.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ea32:	4b0c      	ldr	r3, [pc, #48]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ea34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea38:	f003 0302 	and.w	r3, r3, #2
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d0ec      	beq.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ea40:	7cfb      	ldrb	r3, [r7, #19]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d10b      	bne.n	800ea5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ea46:	4b07      	ldr	r3, [pc, #28]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ea48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea54:	4903      	ldr	r1, [pc, #12]	@ (800ea64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ea56:	4313      	orrs	r3, r2
 800ea58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ea5c:	e008      	b.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ea5e:	7cfb      	ldrb	r3, [r7, #19]
 800ea60:	74bb      	strb	r3, [r7, #18]
 800ea62:	e005      	b.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ea64:	40021000 	.word	0x40021000
 800ea68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea6c:	7cfb      	ldrb	r3, [r7, #19]
 800ea6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ea70:	7c7b      	ldrb	r3, [r7, #17]
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d105      	bne.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ea76:	4ba7      	ldr	r3, [pc, #668]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea7a:	4aa6      	ldr	r2, [pc, #664]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00a      	beq.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ea8e:	4ba1      	ldr	r3, [pc, #644]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea94:	f023 0203 	bic.w	r2, r3, #3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	499d      	ldr	r1, [pc, #628]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f003 0302 	and.w	r3, r3, #2
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d00a      	beq.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800eab0:	4b98      	ldr	r3, [pc, #608]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eab6:	f023 020c 	bic.w	r2, r3, #12
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	4995      	ldr	r1, [pc, #596]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eac0:	4313      	orrs	r3, r2
 800eac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f003 0304 	and.w	r3, r3, #4
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00a      	beq.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ead2:	4b90      	ldr	r3, [pc, #576]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ead4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ead8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	498c      	ldr	r1, [pc, #560]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eae2:	4313      	orrs	r3, r2
 800eae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f003 0308 	and.w	r3, r3, #8
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00a      	beq.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800eaf4:	4b87      	ldr	r3, [pc, #540]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eaf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eafa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	4984      	ldr	r1, [pc, #528]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb04:	4313      	orrs	r3, r2
 800eb06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f003 0310 	and.w	r3, r3, #16
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00a      	beq.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800eb16:	4b7f      	ldr	r3, [pc, #508]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	695b      	ldr	r3, [r3, #20]
 800eb24:	497b      	ldr	r1, [pc, #492]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb26:	4313      	orrs	r3, r2
 800eb28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f003 0320 	and.w	r3, r3, #32
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00a      	beq.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800eb38:	4b76      	ldr	r3, [pc, #472]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	699b      	ldr	r3, [r3, #24]
 800eb46:	4973      	ldr	r1, [pc, #460]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00a      	beq.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800eb5a:	4b6e      	ldr	r3, [pc, #440]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	496a      	ldr	r1, [pc, #424]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00a      	beq.n	800eb92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800eb7c:	4b65      	ldr	r3, [pc, #404]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	4962      	ldr	r1, [pc, #392]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d00a      	beq.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800eb9e:	4b5d      	ldr	r3, [pc, #372]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eba4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebac:	4959      	ldr	r1, [pc, #356]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00a      	beq.n	800ebd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ebc0:	4b54      	ldr	r3, [pc, #336]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ebc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ebc6:	f023 0203 	bic.w	r2, r3, #3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebce:	4951      	ldr	r1, [pc, #324]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00a      	beq.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ebe2:	4b4c      	ldr	r3, [pc, #304]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ebe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebe8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf0:	4948      	ldr	r1, [pc, #288]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d015      	beq.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ec04:	4b43      	ldr	r3, [pc, #268]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec12:	4940      	ldr	r1, [pc, #256]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec14:	4313      	orrs	r3, r2
 800ec16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec22:	d105      	bne.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ec24:	4b3b      	ldr	r3, [pc, #236]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	4a3a      	ldr	r2, [pc, #232]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d015      	beq.n	800ec68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ec3c:	4b35      	ldr	r3, [pc, #212]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec4a:	4932      	ldr	r1, [pc, #200]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec5a:	d105      	bne.n	800ec68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ec5c:	4b2d      	ldr	r3, [pc, #180]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	4a2c      	ldr	r2, [pc, #176]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d015      	beq.n	800eca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ec74:	4b27      	ldr	r3, [pc, #156]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec82:	4924      	ldr	r1, [pc, #144]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec84:	4313      	orrs	r3, r2
 800ec86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec92:	d105      	bne.n	800eca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ec94:	4b1f      	ldr	r3, [pc, #124]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	4a1e      	ldr	r2, [pc, #120]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ec9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d015      	beq.n	800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ecac:	4b19      	ldr	r3, [pc, #100]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ecae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecba:	4916      	ldr	r1, [pc, #88]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ecca:	d105      	bne.n	800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eccc:	4b11      	ldr	r3, [pc, #68]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	4a10      	ldr	r2, [pc, #64]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ecd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d019      	beq.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ece4:	4b0b      	ldr	r3, [pc, #44]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ece6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecf2:	4908      	ldr	r1, [pc, #32]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed02:	d109      	bne.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ed04:	4b03      	ldr	r3, [pc, #12]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	4a02      	ldr	r2, [pc, #8]	@ (800ed14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ed0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed0e:	60d3      	str	r3, [r2, #12]
 800ed10:	e002      	b.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ed12:	bf00      	nop
 800ed14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d015      	beq.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ed24:	4b29      	ldr	r3, [pc, #164]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed32:	4926      	ldr	r1, [pc, #152]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed34:	4313      	orrs	r3, r2
 800ed36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed42:	d105      	bne.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ed44:	4b21      	ldr	r3, [pc, #132]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	4a20      	ldr	r2, [pc, #128]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d015      	beq.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ed5c:	4b1b      	ldr	r3, [pc, #108]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed6a:	4918      	ldr	r1, [pc, #96]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed7a:	d105      	bne.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ed7c:	4b13      	ldr	r3, [pc, #76]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	4a12      	ldr	r2, [pc, #72]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d015      	beq.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ed94:	4b0d      	ldr	r3, [pc, #52]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ed96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ed9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eda2:	490a      	ldr	r1, [pc, #40]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800eda4:	4313      	orrs	r3, r2
 800eda6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800edb2:	d105      	bne.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800edb4:	4b05      	ldr	r3, [pc, #20]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	4a04      	ldr	r2, [pc, #16]	@ (800edcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800edba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800edbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800edc0:	7cbb      	ldrb	r3, [r7, #18]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3718      	adds	r7, #24
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	40021000 	.word	0x40021000

0800edd0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800edd8:	2301      	movs	r3, #1
 800edda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d070      	beq.n	800eec4 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d106      	bne.n	800edfc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7fb fdd8 	bl	800a9ac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2202      	movs	r2, #2
 800ee00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	f003 0310 	and.w	r3, r3, #16
 800ee0e:	2b10      	cmp	r3, #16
 800ee10:	d04f      	beq.n	800eeb2 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	22ca      	movs	r2, #202	@ 0xca
 800ee18:	625a      	str	r2, [r3, #36]	@ 0x24
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2253      	movs	r2, #83	@ 0x53
 800ee20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f878 	bl	800ef18 <RTC_EnterInitMode>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d126      	bne.n	800ee80 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	6812      	ldr	r2, [r2, #0]
 800ee3c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800ee40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee44:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6999      	ldr	r1, [r3, #24]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685a      	ldr	r2, [r3, #4]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	431a      	orrs	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	431a      	orrs	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	430a      	orrs	r2, r1
 800ee62:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68d9      	ldr	r1, [r3, #12]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	689b      	ldr	r3, [r3, #8]
 800ee6c:	041a      	lsls	r2, r3, #16
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	430a      	orrs	r2, r1
 800ee74:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 f884 	bl	800ef84 <RTC_ExitInitMode>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800ee80:	7bfb      	ldrb	r3, [r7, #15]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d110      	bne.n	800eea8 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6a1a      	ldr	r2, [r3, #32]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	69db      	ldr	r3, [r3, #28]
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	695b      	ldr	r3, [r3, #20]
 800ee9e:	431a      	orrs	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	430a      	orrs	r2, r1
 800eea6:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	22ff      	movs	r2, #255	@ 0xff
 800eeae:	625a      	str	r2, [r3, #36]	@ 0x24
 800eeb0:	e001      	b.n	800eeb6 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d103      	bne.n	800eec4 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
	...

0800eed0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a0d      	ldr	r2, [pc, #52]	@ (800ef14 <HAL_RTC_WaitForSynchro+0x44>)
 800eede:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800eee0:	f7fc f846 	bl	800af70 <HAL_GetTick>
 800eee4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800eee6:	e009      	b.n	800eefc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800eee8:	f7fc f842 	bl	800af70 <HAL_GetTick>
 800eeec:	4602      	mov	r2, r0
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eef6:	d901      	bls.n	800eefc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800eef8:	2303      	movs	r3, #3
 800eefa:	e007      	b.n	800ef0c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	f003 0320 	and.w	r3, r3, #32
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d0ee      	beq.n	800eee8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	0001005f 	.word	0x0001005f

0800ef18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d123      	bne.n	800ef7a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	68da      	ldr	r2, [r3, #12]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ef40:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ef42:	f7fc f815 	bl	800af70 <HAL_GetTick>
 800ef46:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ef48:	e00d      	b.n	800ef66 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ef4a:	f7fc f811 	bl	800af70 <HAL_GetTick>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef58:	d905      	bls.n	800ef66 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2203      	movs	r2, #3
 800ef62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d102      	bne.n	800ef7a <RTC_EnterInitMode+0x62>
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	d1e7      	bne.n	800ef4a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800ef7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68da      	ldr	r2, [r3, #12]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ef9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	699b      	ldr	r3, [r3, #24]
 800efa6:	f003 0320 	and.w	r3, r3, #32
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10c      	bne.n	800efc8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7ff ff8e 	bl	800eed0 <HAL_RTC_WaitForSynchro>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d022      	beq.n	800f000 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2203      	movs	r2, #3
 800efbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800efc2:	2303      	movs	r3, #3
 800efc4:	73fb      	strb	r3, [r7, #15]
 800efc6:	e01b      	b.n	800f000 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	699a      	ldr	r2, [r3, #24]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f022 0220 	bic.w	r2, r2, #32
 800efd6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f7ff ff79 	bl	800eed0 <HAL_RTC_WaitForSynchro>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d005      	beq.n	800eff0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2203      	movs	r2, #3
 800efe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800efec:	2303      	movs	r3, #3
 800efee:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	699a      	ldr	r2, [r3, #24]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f042 0220 	orr.w	r2, r2, #32
 800effe:	619a      	str	r2, [r3, #24]
  }

  return status;
 800f000:	7bfb      	ldrb	r3, [r7, #15]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b084      	sub	sp, #16
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d101      	bne.n	800f01c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	e09d      	b.n	800f158 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f020:	2b00      	cmp	r3, #0
 800f022:	d108      	bne.n	800f036 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f02c:	d009      	beq.n	800f042 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	61da      	str	r2, [r3, #28]
 800f034:	e005      	b.n	800f042 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d106      	bne.n	800f062 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7fb fce1 	bl	800aa24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2202      	movs	r2, #2
 800f066:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f078:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f082:	d902      	bls.n	800f08a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f084:	2300      	movs	r3, #0
 800f086:	60fb      	str	r3, [r7, #12]
 800f088:	e002      	b.n	800f090 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f08a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f08e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800f098:	d007      	beq.n	800f0aa <HAL_SPI_Init+0xa0>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f0a2:	d002      	beq.n	800f0aa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f0ba:	431a      	orrs	r2, r3
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	f003 0302 	and.w	r3, r3, #2
 800f0c4:	431a      	orrs	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	695b      	ldr	r3, [r3, #20]
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	431a      	orrs	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	699b      	ldr	r3, [r3, #24]
 800f0d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f0d8:	431a      	orrs	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	69db      	ldr	r3, [r3, #28]
 800f0de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f0e2:	431a      	orrs	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6a1b      	ldr	r3, [r3, #32]
 800f0e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0ec:	ea42 0103 	orr.w	r1, r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	430a      	orrs	r2, r1
 800f0fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	0c1b      	lsrs	r3, r3, #16
 800f106:	f003 0204 	and.w	r2, r3, #4
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10e:	f003 0310 	and.w	r3, r3, #16
 800f112:	431a      	orrs	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f118:	f003 0308 	and.w	r3, r3, #8
 800f11c:	431a      	orrs	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800f126:	ea42 0103 	orr.w	r1, r2, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	430a      	orrs	r2, r1
 800f136:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	69da      	ldr	r2, [r3, #28]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f146:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2201      	movs	r2, #1
 800f152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b088      	sub	sp, #32
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	4613      	mov	r3, r2
 800f16e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f170:	f7fb fefe 	bl	800af70 <HAL_GetTick>
 800f174:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f176:	88fb      	ldrh	r3, [r7, #6]
 800f178:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f180:	b2db      	uxtb	r3, r3
 800f182:	2b01      	cmp	r3, #1
 800f184:	d001      	beq.n	800f18a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f186:	2302      	movs	r3, #2
 800f188:	e15c      	b.n	800f444 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d002      	beq.n	800f196 <HAL_SPI_Transmit+0x36>
 800f190:	88fb      	ldrh	r3, [r7, #6]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d101      	bne.n	800f19a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f196:	2301      	movs	r3, #1
 800f198:	e154      	b.n	800f444 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d101      	bne.n	800f1a8 <HAL_SPI_Transmit+0x48>
 800f1a4:	2302      	movs	r3, #2
 800f1a6:	e14d      	b.n	800f444 <HAL_SPI_Transmit+0x2e4>
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2203      	movs	r2, #3
 800f1b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	88fa      	ldrh	r2, [r7, #6]
 800f1c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	88fa      	ldrh	r2, [r7, #6]
 800f1ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1fa:	d10f      	bne.n	800f21c <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f20a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f21a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f226:	2b40      	cmp	r3, #64	@ 0x40
 800f228:	d007      	beq.n	800f23a <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f242:	d952      	bls.n	800f2ea <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <HAL_SPI_Transmit+0xf2>
 800f24c:	8b7b      	ldrh	r3, [r7, #26]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d145      	bne.n	800f2de <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f256:	881a      	ldrh	r2, [r3, #0]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f262:	1c9a      	adds	r2, r3, #2
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	3b01      	subs	r3, #1
 800f270:	b29a      	uxth	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f276:	e032      	b.n	800f2de <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	f003 0302 	and.w	r3, r3, #2
 800f282:	2b02      	cmp	r3, #2
 800f284:	d112      	bne.n	800f2ac <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f28a:	881a      	ldrh	r2, [r3, #0]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f296:	1c9a      	adds	r2, r3, #2
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	3b01      	subs	r3, #1
 800f2a4:	b29a      	uxth	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f2aa:	e018      	b.n	800f2de <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2ac:	f7fb fe60 	bl	800af70 <HAL_GetTick>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d803      	bhi.n	800f2c4 <HAL_SPI_Transmit+0x164>
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f2c2:	d102      	bne.n	800f2ca <HAL_SPI_Transmit+0x16a>
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d109      	bne.n	800f2de <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f2da:	2303      	movs	r3, #3
 800f2dc:	e0b2      	b.n	800f444 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1c7      	bne.n	800f278 <HAL_SPI_Transmit+0x118>
 800f2e8:	e083      	b.n	800f3f2 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d002      	beq.n	800f2f8 <HAL_SPI_Transmit+0x198>
 800f2f2:	8b7b      	ldrh	r3, [r7, #26]
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d177      	bne.n	800f3e8 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d912      	bls.n	800f328 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f306:	881a      	ldrh	r2, [r3, #0]
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f312:	1c9a      	adds	r2, r3, #2
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	3b02      	subs	r3, #2
 800f320:	b29a      	uxth	r2, r3
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f326:	e05f      	b.n	800f3e8 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	330c      	adds	r3, #12
 800f332:	7812      	ldrb	r2, [r2, #0]
 800f334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f33a:	1c5a      	adds	r2, r3, #1
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f344:	b29b      	uxth	r3, r3
 800f346:	3b01      	subs	r3, #1
 800f348:	b29a      	uxth	r2, r3
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f34e:	e04b      	b.n	800f3e8 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	f003 0302 	and.w	r3, r3, #2
 800f35a:	2b02      	cmp	r3, #2
 800f35c:	d12b      	bne.n	800f3b6 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f362:	b29b      	uxth	r3, r3
 800f364:	2b01      	cmp	r3, #1
 800f366:	d912      	bls.n	800f38e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f36c:	881a      	ldrh	r2, [r3, #0]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f378:	1c9a      	adds	r2, r3, #2
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f382:	b29b      	uxth	r3, r3
 800f384:	3b02      	subs	r3, #2
 800f386:	b29a      	uxth	r2, r3
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f38c:	e02c      	b.n	800f3e8 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	330c      	adds	r3, #12
 800f398:	7812      	ldrb	r2, [r2, #0]
 800f39a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3a0:	1c5a      	adds	r2, r3, #1
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f3b4:	e018      	b.n	800f3e8 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3b6:	f7fb fddb 	bl	800af70 <HAL_GetTick>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d803      	bhi.n	800f3ce <HAL_SPI_Transmit+0x26e>
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3cc:	d102      	bne.n	800f3d4 <HAL_SPI_Transmit+0x274>
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d109      	bne.n	800f3e8 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f3e4:	2303      	movs	r3, #3
 800f3e6:	e02d      	b.n	800f444 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1ae      	bne.n	800f350 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f3f2:	69fa      	ldr	r2, [r7, #28]
 800f3f4:	6839      	ldr	r1, [r7, #0]
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f000 fcf6 	bl	800fde8 <SPI_EndRxTxTransaction>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d002      	beq.n	800f408 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2220      	movs	r2, #32
 800f406:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d10a      	bne.n	800f426 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800f43e:	2301      	movs	r3, #1
 800f440:	e000      	b.n	800f444 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800f442:	2300      	movs	r3, #0
  }
}
 800f444:	4618      	mov	r0, r3
 800f446:	3720      	adds	r7, #32
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b088      	sub	sp, #32
 800f450:	af02      	add	r7, sp, #8
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	603b      	str	r3, [r7, #0]
 800f458:	4613      	mov	r3, r2
 800f45a:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b01      	cmp	r3, #1
 800f466:	d001      	beq.n	800f46c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800f468:	2302      	movs	r3, #2
 800f46a:	e123      	b.n	800f6b4 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d002      	beq.n	800f478 <HAL_SPI_Receive+0x2c>
 800f472:	88fb      	ldrh	r3, [r7, #6]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d101      	bne.n	800f47c <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800f478:	2301      	movs	r3, #1
 800f47a:	e11b      	b.n	800f6b4 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f484:	d112      	bne.n	800f4ac <HAL_SPI_Receive+0x60>
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d10e      	bne.n	800f4ac <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2204      	movs	r2, #4
 800f492:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f496:	88fa      	ldrh	r2, [r7, #6]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	4613      	mov	r3, r2
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	68b9      	ldr	r1, [r7, #8]
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	f000 f90a 	bl	800f6bc <HAL_SPI_TransmitReceive>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	e103      	b.n	800f6b4 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f4ac:	f7fb fd60 	bl	800af70 <HAL_GetTick>
 800f4b0:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d101      	bne.n	800f4c0 <HAL_SPI_Receive+0x74>
 800f4bc:	2302      	movs	r3, #2
 800f4be:	e0f9      	b.n	800f6b4 <HAL_SPI_Receive+0x268>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2204      	movs	r2, #4
 800f4cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	88fa      	ldrh	r2, [r7, #6]
 800f4e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	88fa      	ldrh	r2, [r7, #6]
 800f4e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2200      	movs	r2, #0
 800f508:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f512:	d908      	bls.n	800f526 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	685a      	ldr	r2, [r3, #4]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f522:	605a      	str	r2, [r3, #4]
 800f524:	e007      	b.n	800f536 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	685a      	ldr	r2, [r3, #4]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f534:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	689b      	ldr	r3, [r3, #8]
 800f53a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f53e:	d10f      	bne.n	800f560 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f54e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f55e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f56a:	2b40      	cmp	r3, #64	@ 0x40
 800f56c:	d007      	beq.n	800f57e <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f57c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	68db      	ldr	r3, [r3, #12]
 800f582:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f586:	d875      	bhi.n	800f674 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f588:	e037      	b.n	800f5fa <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	f003 0301 	and.w	r3, r3, #1
 800f594:	2b01      	cmp	r3, #1
 800f596:	d117      	bne.n	800f5c8 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	f103 020c 	add.w	r2, r3, #12
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5a4:	7812      	ldrb	r2, [r2, #0]
 800f5a6:	b2d2      	uxtb	r2, r2
 800f5a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800f5c6:	e018      	b.n	800f5fa <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5c8:	f7fb fcd2 	bl	800af70 <HAL_GetTick>
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d803      	bhi.n	800f5e0 <HAL_SPI_Receive+0x194>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f5de:	d102      	bne.n	800f5e6 <HAL_SPI_Receive+0x19a>
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f5f6:	2303      	movs	r3, #3
 800f5f8:	e05c      	b.n	800f6b4 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f600:	b29b      	uxth	r3, r3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d1c1      	bne.n	800f58a <HAL_SPI_Receive+0x13e>
 800f606:	e03b      	b.n	800f680 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	f003 0301 	and.w	r3, r3, #1
 800f612:	2b01      	cmp	r3, #1
 800f614:	d115      	bne.n	800f642 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	68da      	ldr	r2, [r3, #12]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f620:	b292      	uxth	r2, r2
 800f622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f628:	1c9a      	adds	r2, r3, #2
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f634:	b29b      	uxth	r3, r3
 800f636:	3b01      	subs	r3, #1
 800f638:	b29a      	uxth	r2, r3
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800f640:	e018      	b.n	800f674 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f642:	f7fb fc95 	bl	800af70 <HAL_GetTick>
 800f646:	4602      	mov	r2, r0
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	683a      	ldr	r2, [r7, #0]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d803      	bhi.n	800f65a <HAL_SPI_Receive+0x20e>
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f658:	d102      	bne.n	800f660 <HAL_SPI_Receive+0x214>
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d109      	bne.n	800f674 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2201      	movs	r2, #1
 800f664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f670:	2303      	movs	r3, #3
 800f672:	e01f      	b.n	800f6b4 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d1c3      	bne.n	800f608 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	6839      	ldr	r1, [r7, #0]
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 fb57 	bl	800fd38 <SPI_EndRxTransaction>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d002      	beq.n	800f696 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2220      	movs	r2, #32
 800f694:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2201      	movs	r2, #1
 800f69a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d001      	beq.n	800f6b2 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e000      	b.n	800f6b4 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800f6b2:	2300      	movs	r3, #0
  }
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3718      	adds	r7, #24
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08a      	sub	sp, #40	@ 0x28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
 800f6c8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f6ce:	f7fb fc4f 	bl	800af70 <HAL_GetTick>
 800f6d2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f6da:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f6e2:	887b      	ldrh	r3, [r7, #2]
 800f6e4:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800f6e6:	887b      	ldrh	r3, [r7, #2]
 800f6e8:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f6ea:	7ffb      	ldrb	r3, [r7, #31]
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d00c      	beq.n	800f70a <HAL_SPI_TransmitReceive+0x4e>
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f6f6:	d106      	bne.n	800f706 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d102      	bne.n	800f706 <HAL_SPI_TransmitReceive+0x4a>
 800f700:	7ffb      	ldrb	r3, [r7, #31]
 800f702:	2b04      	cmp	r3, #4
 800f704:	d001      	beq.n	800f70a <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f706:	2302      	movs	r3, #2
 800f708:	e1f3      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d005      	beq.n	800f71c <HAL_SPI_TransmitReceive+0x60>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d002      	beq.n	800f71c <HAL_SPI_TransmitReceive+0x60>
 800f716:	887b      	ldrh	r3, [r7, #2]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800f71c:	2301      	movs	r3, #1
 800f71e:	e1e8      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f726:	2b01      	cmp	r3, #1
 800f728:	d101      	bne.n	800f72e <HAL_SPI_TransmitReceive+0x72>
 800f72a:	2302      	movs	r3, #2
 800f72c:	e1e1      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x436>
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2201      	movs	r2, #1
 800f732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	2b04      	cmp	r3, #4
 800f740:	d003      	beq.n	800f74a <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2205      	movs	r2, #5
 800f746:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2200      	movs	r2, #0
 800f74e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	887a      	ldrh	r2, [r7, #2]
 800f75a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	887a      	ldrh	r2, [r7, #2]
 800f762:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	887a      	ldrh	r2, [r7, #2]
 800f770:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	887a      	ldrh	r2, [r7, #2]
 800f776:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2200      	movs	r2, #0
 800f77c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2200      	movs	r2, #0
 800f782:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f78c:	d802      	bhi.n	800f794 <HAL_SPI_TransmitReceive+0xd8>
 800f78e:	8abb      	ldrh	r3, [r7, #20]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d908      	bls.n	800f7a6 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	685a      	ldr	r2, [r3, #4]
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f7a2:	605a      	str	r2, [r3, #4]
 800f7a4:	e007      	b.n	800f7b6 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f7b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7c0:	2b40      	cmp	r3, #64	@ 0x40
 800f7c2:	d007      	beq.n	800f7d4 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f7d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f7dc:	f240 8083 	bls.w	800f8e6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d002      	beq.n	800f7ee <HAL_SPI_TransmitReceive+0x132>
 800f7e8:	8afb      	ldrh	r3, [r7, #22]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d16f      	bne.n	800f8ce <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7f2:	881a      	ldrh	r2, [r3, #0]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7fe:	1c9a      	adds	r2, r3, #2
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f808:	b29b      	uxth	r3, r3
 800f80a:	3b01      	subs	r3, #1
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f812:	e05c      	b.n	800f8ce <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	f003 0302 	and.w	r3, r3, #2
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d11b      	bne.n	800f85a <HAL_SPI_TransmitReceive+0x19e>
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f826:	b29b      	uxth	r3, r3
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d016      	beq.n	800f85a <HAL_SPI_TransmitReceive+0x19e>
 800f82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d113      	bne.n	800f85a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f836:	881a      	ldrh	r2, [r3, #0]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f842:	1c9a      	adds	r2, r3, #2
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	3b01      	subs	r3, #1
 800f850:	b29a      	uxth	r2, r3
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f856:	2300      	movs	r3, #0
 800f858:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	f003 0301 	and.w	r3, r3, #1
 800f864:	2b01      	cmp	r3, #1
 800f866:	d11c      	bne.n	800f8a2 <HAL_SPI_TransmitReceive+0x1e6>
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f86e:	b29b      	uxth	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d016      	beq.n	800f8a2 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	68da      	ldr	r2, [r3, #12]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f87e:	b292      	uxth	r2, r2
 800f880:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f886:	1c9a      	adds	r2, r3, #2
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f892:	b29b      	uxth	r3, r3
 800f894:	3b01      	subs	r3, #1
 800f896:	b29a      	uxth	r2, r3
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f8a2:	f7fb fb65 	bl	800af70 <HAL_GetTick>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	1ad3      	subs	r3, r2, r3
 800f8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d80d      	bhi.n	800f8ce <HAL_SPI_TransmitReceive+0x212>
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f8b8:	d009      	beq.n	800f8ce <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f8ca:	2303      	movs	r3, #3
 800f8cc:	e111      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d19d      	bne.n	800f814 <HAL_SPI_TransmitReceive+0x158>
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d197      	bne.n	800f814 <HAL_SPI_TransmitReceive+0x158>
 800f8e4:	e0e5      	b.n	800fab2 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <HAL_SPI_TransmitReceive+0x23a>
 800f8ee:	8afb      	ldrh	r3, [r7, #22]
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	f040 80d1 	bne.w	800fa98 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	2b01      	cmp	r3, #1
 800f8fe:	d912      	bls.n	800f926 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f904:	881a      	ldrh	r2, [r3, #0]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f910:	1c9a      	adds	r2, r3, #2
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	3b02      	subs	r3, #2
 800f91e:	b29a      	uxth	r2, r3
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f924:	e0b8      	b.n	800fa98 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	330c      	adds	r3, #12
 800f930:	7812      	ldrb	r2, [r2, #0]
 800f932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f938:	1c5a      	adds	r2, r3, #1
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f942:	b29b      	uxth	r3, r3
 800f944:	3b01      	subs	r3, #1
 800f946:	b29a      	uxth	r2, r3
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f94c:	e0a4      	b.n	800fa98 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	689b      	ldr	r3, [r3, #8]
 800f954:	f003 0302 	and.w	r3, r3, #2
 800f958:	2b02      	cmp	r3, #2
 800f95a:	d134      	bne.n	800f9c6 <HAL_SPI_TransmitReceive+0x30a>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f960:	b29b      	uxth	r3, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	d02f      	beq.n	800f9c6 <HAL_SPI_TransmitReceive+0x30a>
 800f966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d12c      	bne.n	800f9c6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f970:	b29b      	uxth	r3, r3
 800f972:	2b01      	cmp	r3, #1
 800f974:	d912      	bls.n	800f99c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f97a:	881a      	ldrh	r2, [r3, #0]
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f986:	1c9a      	adds	r2, r3, #2
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f990:	b29b      	uxth	r3, r3
 800f992:	3b02      	subs	r3, #2
 800f994:	b29a      	uxth	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f99a:	e012      	b.n	800f9c2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	330c      	adds	r3, #12
 800f9a6:	7812      	ldrb	r2, [r2, #0]
 800f9a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ae:	1c5a      	adds	r2, r3, #1
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	f003 0301 	and.w	r3, r3, #1
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d148      	bne.n	800fa66 <HAL_SPI_TransmitReceive+0x3aa>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d042      	beq.n	800fa66 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d923      	bls.n	800fa34 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68da      	ldr	r2, [r3, #12]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9f6:	b292      	uxth	r2, r2
 800f9f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9fe:	1c9a      	adds	r2, r3, #2
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	3b02      	subs	r3, #2
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d81f      	bhi.n	800fa62 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fa30:	605a      	str	r2, [r3, #4]
 800fa32:	e016      	b.n	800fa62 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f103 020c 	add.w	r2, r3, #12
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa40:	7812      	ldrb	r2, [r2, #0]
 800fa42:	b2d2      	uxtb	r2, r2
 800fa44:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fa62:	2301      	movs	r3, #1
 800fa64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fa66:	f7fb fa83 	bl	800af70 <HAL_GetTick>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	6a3b      	ldr	r3, [r7, #32]
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d803      	bhi.n	800fa7e <HAL_SPI_TransmitReceive+0x3c2>
 800fa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fa7c:	d102      	bne.n	800fa84 <HAL_SPI_TransmitReceive+0x3c8>
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d109      	bne.n	800fa98 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800fa94:	2303      	movs	r3, #3
 800fa96:	e02c      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f47f af55 	bne.w	800f94e <HAL_SPI_TransmitReceive+0x292>
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800faaa:	b29b      	uxth	r3, r3
 800faac:	2b00      	cmp	r3, #0
 800faae:	f47f af4e 	bne.w	800f94e <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fab2:	6a3a      	ldr	r2, [r7, #32]
 800fab4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fab6:	68f8      	ldr	r0, [r7, #12]
 800fab8:	f000 f996 	bl	800fde8 <SPI_EndRxTxTransaction>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d008      	beq.n	800fad4 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2220      	movs	r2, #32
 800fac6:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800fad0:	2301      	movs	r3, #1
 800fad2:	e00e      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800faec:	2301      	movs	r3, #1
 800faee:	e000      	b.n	800faf2 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800faf0:	2300      	movs	r3, #0
  }
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3728      	adds	r7, #40	@ 0x28
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
	...

0800fafc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b088      	sub	sp, #32
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	4613      	mov	r3, r2
 800fb0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fb0c:	f7fb fa30 	bl	800af70 <HAL_GetTick>
 800fb10:	4602      	mov	r2, r0
 800fb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb14:	1a9b      	subs	r3, r3, r2
 800fb16:	683a      	ldr	r2, [r7, #0]
 800fb18:	4413      	add	r3, r2
 800fb1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fb1c:	f7fb fa28 	bl	800af70 <HAL_GetTick>
 800fb20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fb22:	4b39      	ldr	r3, [pc, #228]	@ (800fc08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	015b      	lsls	r3, r3, #5
 800fb28:	0d1b      	lsrs	r3, r3, #20
 800fb2a:	69fa      	ldr	r2, [r7, #28]
 800fb2c:	fb02 f303 	mul.w	r3, r2, r3
 800fb30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fb32:	e054      	b.n	800fbde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb3a:	d050      	beq.n	800fbde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fb3c:	f7fb fa18 	bl	800af70 <HAL_GetTick>
 800fb40:	4602      	mov	r2, r0
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	69fa      	ldr	r2, [r7, #28]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d902      	bls.n	800fb52 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d13d      	bne.n	800fbce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fb60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb6a:	d111      	bne.n	800fb90 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fb74:	d004      	beq.n	800fb80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	689b      	ldr	r3, [r3, #8]
 800fb7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fb7e:	d107      	bne.n	800fb90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fb8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb98:	d10f      	bne.n	800fbba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fbb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800fbca:	2303      	movs	r3, #3
 800fbcc:	e017      	b.n	800fbfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	3b01      	subs	r3, #1
 800fbdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	689a      	ldr	r2, [r3, #8]
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	4013      	ands	r3, r2
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	bf0c      	ite	eq
 800fbee:	2301      	moveq	r3, #1
 800fbf0:	2300      	movne	r3, #0
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	79fb      	ldrb	r3, [r7, #7]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d19b      	bne.n	800fb34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3720      	adds	r7, #32
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	20000050 	.word	0x20000050

0800fc0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b08a      	sub	sp, #40	@ 0x28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
 800fc18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fc1e:	f7fb f9a7 	bl	800af70 <HAL_GetTick>
 800fc22:	4602      	mov	r2, r0
 800fc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc26:	1a9b      	subs	r3, r3, r2
 800fc28:	683a      	ldr	r2, [r7, #0]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800fc2e:	f7fb f99f 	bl	800af70 <HAL_GetTick>
 800fc32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	330c      	adds	r3, #12
 800fc3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fc3c:	4b3d      	ldr	r3, [pc, #244]	@ (800fd34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	4613      	mov	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	4413      	add	r3, r2
 800fc46:	00da      	lsls	r2, r3, #3
 800fc48:	1ad3      	subs	r3, r2, r3
 800fc4a:	0d1b      	lsrs	r3, r3, #20
 800fc4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc4e:	fb02 f303 	mul.w	r3, r2, r3
 800fc52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fc54:	e060      	b.n	800fd18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fc5c:	d107      	bne.n	800fc6e <SPI_WaitFifoStateUntilTimeout+0x62>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d104      	bne.n	800fc6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fc6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc74:	d050      	beq.n	800fd18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fc76:	f7fb f97b 	bl	800af70 <HAL_GetTick>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	6a3b      	ldr	r3, [r7, #32]
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d902      	bls.n	800fc8c <SPI_WaitFifoStateUntilTimeout+0x80>
 800fc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d13d      	bne.n	800fd08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	685a      	ldr	r2, [r3, #4]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fc9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fca4:	d111      	bne.n	800fcca <SPI_WaitFifoStateUntilTimeout+0xbe>
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fcae:	d004      	beq.n	800fcba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fcb8:	d107      	bne.n	800fcca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fcc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fcd2:	d10f      	bne.n	800fcf4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fce2:	601a      	str	r2, [r3, #0]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fcf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800fd04:	2303      	movs	r3, #3
 800fd06:	e010      	b.n	800fd2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d101      	bne.n	800fd12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800fd12:	69bb      	ldr	r3, [r7, #24]
 800fd14:	3b01      	subs	r3, #1
 800fd16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	689a      	ldr	r2, [r3, #8]
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	4013      	ands	r3, r2
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d196      	bne.n	800fc56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3728      	adds	r7, #40	@ 0x28
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	20000050 	.word	0x20000050

0800fd38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af02      	add	r7, sp, #8
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd4c:	d111      	bne.n	800fd72 <SPI_EndRxTransaction+0x3a>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd56:	d004      	beq.n	800fd62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	689b      	ldr	r3, [r3, #8]
 800fd5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd60:	d107      	bne.n	800fd72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fd70:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	2180      	movs	r1, #128	@ 0x80
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f7ff febd 	bl	800fafc <SPI_WaitFlagStateUntilTimeout>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d007      	beq.n	800fd98 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd8c:	f043 0220 	orr.w	r2, r3, #32
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fd94:	2303      	movs	r3, #3
 800fd96:	e023      	b.n	800fde0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	685b      	ldr	r3, [r3, #4]
 800fd9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fda0:	d11d      	bne.n	800fdde <SPI_EndRxTransaction+0xa6>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fdaa:	d004      	beq.n	800fdb6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fdb4:	d113      	bne.n	800fdde <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f7ff ff22 	bl	800fc0c <SPI_WaitFifoStateUntilTimeout>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d007      	beq.n	800fdde <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fdd2:	f043 0220 	orr.w	r2, r3, #32
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800fdda:	2303      	movs	r3, #3
 800fddc:	e000      	b.n	800fde0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800fdde:	2300      	movs	r3, #0
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af02      	add	r7, sp, #8
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f7ff ff03 	bl	800fc0c <SPI_WaitFifoStateUntilTimeout>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d007      	beq.n	800fe1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe10:	f043 0220 	orr.w	r2, r3, #32
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fe18:	2303      	movs	r3, #3
 800fe1a:	e027      	b.n	800fe6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	2200      	movs	r2, #0
 800fe24:	2180      	movs	r1, #128	@ 0x80
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7ff fe68 	bl	800fafc <SPI_WaitFlagStateUntilTimeout>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d007      	beq.n	800fe42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe36:	f043 0220 	orr.w	r2, r3, #32
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fe3e:	2303      	movs	r3, #3
 800fe40:	e014      	b.n	800fe6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	9300      	str	r3, [sp, #0]
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f7ff fedc 	bl	800fc0c <SPI_WaitFifoStateUntilTimeout>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d007      	beq.n	800fe6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe5e:	f043 0220 	orr.w	r2, r3, #32
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fe66:	2303      	movs	r3, #3
 800fe68:	e000      	b.n	800fe6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3710      	adds	r7, #16
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d101      	bne.n	800fe86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fe82:	2301      	movs	r3, #1
 800fe84:	e049      	b.n	800ff1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d106      	bne.n	800fea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2200      	movs	r2, #0
 800fe96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7fa fe38 	bl	800ab10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2202      	movs	r2, #2
 800fea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	3304      	adds	r3, #4
 800feb0:	4619      	mov	r1, r3
 800feb2:	4610      	mov	r0, r2
 800feb4:	f000 fab6 	bl	8010424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2201      	movs	r2, #1
 800febc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2201      	movs	r2, #1
 800fecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2201      	movs	r2, #1
 800fedc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2201      	movs	r2, #1
 800fefc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2201      	movs	r2, #1
 800ff04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b082      	sub	sp, #8
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d101      	bne.n	800ff34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	e049      	b.n	800ffc8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7fa fdad 	bl	800aaa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2202      	movs	r2, #2
 800ff52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	3304      	adds	r3, #4
 800ff5e:	4619      	mov	r1, r3
 800ff60:	4610      	mov	r0, r2
 800ff62:	f000 fa5f 	bl	8010424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2201      	movs	r2, #1
 800ff6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2201      	movs	r2, #1
 800ff72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2201      	movs	r2, #1
 800ff82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2201      	movs	r2, #1
 800ff8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2201      	movs	r2, #1
 800ff92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2201      	movs	r2, #1
 800ff9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2201      	movs	r2, #1
 800ffb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ffc6:	2300      	movs	r3, #0
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d101      	bne.n	800ffee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ffea:	2302      	movs	r3, #2
 800ffec:	e0ff      	b.n	80101ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2201      	movs	r2, #1
 800fff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b14      	cmp	r3, #20
 800fffa:	f200 80f0 	bhi.w	80101de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fffe:	a201      	add	r2, pc, #4	@ (adr r2, 8010004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010004:	08010059 	.word	0x08010059
 8010008:	080101df 	.word	0x080101df
 801000c:	080101df 	.word	0x080101df
 8010010:	080101df 	.word	0x080101df
 8010014:	08010099 	.word	0x08010099
 8010018:	080101df 	.word	0x080101df
 801001c:	080101df 	.word	0x080101df
 8010020:	080101df 	.word	0x080101df
 8010024:	080100db 	.word	0x080100db
 8010028:	080101df 	.word	0x080101df
 801002c:	080101df 	.word	0x080101df
 8010030:	080101df 	.word	0x080101df
 8010034:	0801011b 	.word	0x0801011b
 8010038:	080101df 	.word	0x080101df
 801003c:	080101df 	.word	0x080101df
 8010040:	080101df 	.word	0x080101df
 8010044:	0801015d 	.word	0x0801015d
 8010048:	080101df 	.word	0x080101df
 801004c:	080101df 	.word	0x080101df
 8010050:	080101df 	.word	0x080101df
 8010054:	0801019d 	.word	0x0801019d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68b9      	ldr	r1, [r7, #8]
 801005e:	4618      	mov	r0, r3
 8010060:	f000 fa94 	bl	801058c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	699a      	ldr	r2, [r3, #24]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f042 0208 	orr.w	r2, r2, #8
 8010072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	699a      	ldr	r2, [r3, #24]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f022 0204 	bic.w	r2, r2, #4
 8010082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	6999      	ldr	r1, [r3, #24]
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	691a      	ldr	r2, [r3, #16]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	430a      	orrs	r2, r1
 8010094:	619a      	str	r2, [r3, #24]
      break;
 8010096:	e0a5      	b.n	80101e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	68b9      	ldr	r1, [r7, #8]
 801009e:	4618      	mov	r0, r3
 80100a0:	f000 fb0e 	bl	80106c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	699a      	ldr	r2, [r3, #24]
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80100b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	699a      	ldr	r2, [r3, #24]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80100c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	6999      	ldr	r1, [r3, #24]
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	021a      	lsls	r2, r3, #8
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	430a      	orrs	r2, r1
 80100d6:	619a      	str	r2, [r3, #24]
      break;
 80100d8:	e084      	b.n	80101e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	68b9      	ldr	r1, [r7, #8]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f000 fb81 	bl	80107e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	69da      	ldr	r2, [r3, #28]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f042 0208 	orr.w	r2, r2, #8
 80100f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	69da      	ldr	r2, [r3, #28]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f022 0204 	bic.w	r2, r2, #4
 8010104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	69d9      	ldr	r1, [r3, #28]
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	691a      	ldr	r2, [r3, #16]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	430a      	orrs	r2, r1
 8010116:	61da      	str	r2, [r3, #28]
      break;
 8010118:	e064      	b.n	80101e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	68b9      	ldr	r1, [r7, #8]
 8010120:	4618      	mov	r0, r3
 8010122:	f000 fbf3 	bl	801090c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	69da      	ldr	r2, [r3, #28]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	69da      	ldr	r2, [r3, #28]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	69d9      	ldr	r1, [r3, #28]
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	691b      	ldr	r3, [r3, #16]
 8010150:	021a      	lsls	r2, r3, #8
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	430a      	orrs	r2, r1
 8010158:	61da      	str	r2, [r3, #28]
      break;
 801015a:	e043      	b.n	80101e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68b9      	ldr	r1, [r7, #8]
 8010162:	4618      	mov	r0, r3
 8010164:	f000 fc66 	bl	8010a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f042 0208 	orr.w	r2, r2, #8
 8010176:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f022 0204 	bic.w	r2, r2, #4
 8010186:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	691a      	ldr	r2, [r3, #16]
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	430a      	orrs	r2, r1
 8010198:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 801019a:	e023      	b.n	80101e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	68b9      	ldr	r1, [r7, #8]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f000 fcb0 	bl	8010b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80101b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80101c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	691b      	ldr	r3, [r3, #16]
 80101d2:	021a      	lsls	r2, r3, #8
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	430a      	orrs	r2, r1
 80101da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80101dc:	e002      	b.n	80101e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80101de:	2301      	movs	r3, #1
 80101e0:	75fb      	strb	r3, [r7, #23]
      break;
 80101e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2200      	movs	r2, #0
 80101e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop

080101f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010202:	2300      	movs	r3, #0
 8010204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801020c:	2b01      	cmp	r3, #1
 801020e:	d101      	bne.n	8010214 <HAL_TIM_ConfigClockSource+0x1c>
 8010210:	2302      	movs	r3, #2
 8010212:	e0f6      	b.n	8010402 <HAL_TIM_ConfigClockSource+0x20a>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2201      	movs	r2, #1
 8010218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2202      	movs	r2, #2
 8010220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8010232:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801023e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	68ba      	ldr	r2, [r7, #8]
 8010246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a6f      	ldr	r2, [pc, #444]	@ (801040c <HAL_TIM_ConfigClockSource+0x214>)
 801024e:	4293      	cmp	r3, r2
 8010250:	f000 80c1 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 8010254:	4a6d      	ldr	r2, [pc, #436]	@ (801040c <HAL_TIM_ConfigClockSource+0x214>)
 8010256:	4293      	cmp	r3, r2
 8010258:	f200 80c6 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 801025c:	4a6c      	ldr	r2, [pc, #432]	@ (8010410 <HAL_TIM_ConfigClockSource+0x218>)
 801025e:	4293      	cmp	r3, r2
 8010260:	f000 80b9 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 8010264:	4a6a      	ldr	r2, [pc, #424]	@ (8010410 <HAL_TIM_ConfigClockSource+0x218>)
 8010266:	4293      	cmp	r3, r2
 8010268:	f200 80be 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 801026c:	4a69      	ldr	r2, [pc, #420]	@ (8010414 <HAL_TIM_ConfigClockSource+0x21c>)
 801026e:	4293      	cmp	r3, r2
 8010270:	f000 80b1 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 8010274:	4a67      	ldr	r2, [pc, #412]	@ (8010414 <HAL_TIM_ConfigClockSource+0x21c>)
 8010276:	4293      	cmp	r3, r2
 8010278:	f200 80b6 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 801027c:	4a66      	ldr	r2, [pc, #408]	@ (8010418 <HAL_TIM_ConfigClockSource+0x220>)
 801027e:	4293      	cmp	r3, r2
 8010280:	f000 80a9 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 8010284:	4a64      	ldr	r2, [pc, #400]	@ (8010418 <HAL_TIM_ConfigClockSource+0x220>)
 8010286:	4293      	cmp	r3, r2
 8010288:	f200 80ae 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 801028c:	4a63      	ldr	r2, [pc, #396]	@ (801041c <HAL_TIM_ConfigClockSource+0x224>)
 801028e:	4293      	cmp	r3, r2
 8010290:	f000 80a1 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 8010294:	4a61      	ldr	r2, [pc, #388]	@ (801041c <HAL_TIM_ConfigClockSource+0x224>)
 8010296:	4293      	cmp	r3, r2
 8010298:	f200 80a6 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 801029c:	4a60      	ldr	r2, [pc, #384]	@ (8010420 <HAL_TIM_ConfigClockSource+0x228>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	f000 8099 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 80102a4:	4a5e      	ldr	r2, [pc, #376]	@ (8010420 <HAL_TIM_ConfigClockSource+0x228>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	f200 809e 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80102ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80102b0:	f000 8091 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 80102b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80102b8:	f200 8096 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80102bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102c0:	f000 8089 	beq.w	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 80102c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102c8:	f200 808e 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80102cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102d0:	d03e      	beq.n	8010350 <HAL_TIM_ConfigClockSource+0x158>
 80102d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102d6:	f200 8087 	bhi.w	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80102da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102de:	f000 8086 	beq.w	80103ee <HAL_TIM_ConfigClockSource+0x1f6>
 80102e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102e6:	d87f      	bhi.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80102e8:	2b70      	cmp	r3, #112	@ 0x70
 80102ea:	d01a      	beq.n	8010322 <HAL_TIM_ConfigClockSource+0x12a>
 80102ec:	2b70      	cmp	r3, #112	@ 0x70
 80102ee:	d87b      	bhi.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80102f0:	2b60      	cmp	r3, #96	@ 0x60
 80102f2:	d050      	beq.n	8010396 <HAL_TIM_ConfigClockSource+0x19e>
 80102f4:	2b60      	cmp	r3, #96	@ 0x60
 80102f6:	d877      	bhi.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80102f8:	2b50      	cmp	r3, #80	@ 0x50
 80102fa:	d03c      	beq.n	8010376 <HAL_TIM_ConfigClockSource+0x17e>
 80102fc:	2b50      	cmp	r3, #80	@ 0x50
 80102fe:	d873      	bhi.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8010300:	2b40      	cmp	r3, #64	@ 0x40
 8010302:	d058      	beq.n	80103b6 <HAL_TIM_ConfigClockSource+0x1be>
 8010304:	2b40      	cmp	r3, #64	@ 0x40
 8010306:	d86f      	bhi.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8010308:	2b30      	cmp	r3, #48	@ 0x30
 801030a:	d064      	beq.n	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 801030c:	2b30      	cmp	r3, #48	@ 0x30
 801030e:	d86b      	bhi.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8010310:	2b20      	cmp	r3, #32
 8010312:	d060      	beq.n	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 8010314:	2b20      	cmp	r3, #32
 8010316:	d867      	bhi.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8010318:	2b00      	cmp	r3, #0
 801031a:	d05c      	beq.n	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 801031c:	2b10      	cmp	r3, #16
 801031e:	d05a      	beq.n	80103d6 <HAL_TIM_ConfigClockSource+0x1de>
 8010320:	e062      	b.n	80103e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010332:	f000 fcd1 	bl	8010cd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	609a      	str	r2, [r3, #8]
      break;
 801034e:	e04f      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010360:	f000 fcba 	bl	8010cd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	689a      	ldr	r2, [r3, #8]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010372:	609a      	str	r2, [r3, #8]
      break;
 8010374:	e03c      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010382:	461a      	mov	r2, r3
 8010384:	f000 fc2c 	bl	8010be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2150      	movs	r1, #80	@ 0x50
 801038e:	4618      	mov	r0, r3
 8010390:	f000 fc85 	bl	8010c9e <TIM_ITRx_SetConfig>
      break;
 8010394:	e02c      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80103a2:	461a      	mov	r2, r3
 80103a4:	f000 fc4b 	bl	8010c3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2160      	movs	r1, #96	@ 0x60
 80103ae:	4618      	mov	r0, r3
 80103b0:	f000 fc75 	bl	8010c9e <TIM_ITRx_SetConfig>
      break;
 80103b4:	e01c      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103c2:	461a      	mov	r2, r3
 80103c4:	f000 fc0c 	bl	8010be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2140      	movs	r1, #64	@ 0x40
 80103ce:	4618      	mov	r0, r3
 80103d0:	f000 fc65 	bl	8010c9e <TIM_ITRx_SetConfig>
      break;
 80103d4:	e00c      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681a      	ldr	r2, [r3, #0]
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4619      	mov	r1, r3
 80103e0:	4610      	mov	r0, r2
 80103e2:	f000 fc5c 	bl	8010c9e <TIM_ITRx_SetConfig>
      break;
 80103e6:	e003      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80103e8:	2301      	movs	r3, #1
 80103ea:	73fb      	strb	r3, [r7, #15]
      break;
 80103ec:	e000      	b.n	80103f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80103ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010400:	7bfb      	ldrb	r3, [r7, #15]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	00100070 	.word	0x00100070
 8010410:	00100060 	.word	0x00100060
 8010414:	00100050 	.word	0x00100050
 8010418:	00100040 	.word	0x00100040
 801041c:	00100030 	.word	0x00100030
 8010420:	00100020 	.word	0x00100020

08010424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4a4c      	ldr	r2, [pc, #304]	@ (8010568 <TIM_Base_SetConfig+0x144>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d017      	beq.n	801046c <TIM_Base_SetConfig+0x48>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010442:	d013      	beq.n	801046c <TIM_Base_SetConfig+0x48>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4a49      	ldr	r2, [pc, #292]	@ (801056c <TIM_Base_SetConfig+0x148>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d00f      	beq.n	801046c <TIM_Base_SetConfig+0x48>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4a48      	ldr	r2, [pc, #288]	@ (8010570 <TIM_Base_SetConfig+0x14c>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d00b      	beq.n	801046c <TIM_Base_SetConfig+0x48>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4a47      	ldr	r2, [pc, #284]	@ (8010574 <TIM_Base_SetConfig+0x150>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d007      	beq.n	801046c <TIM_Base_SetConfig+0x48>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	4a46      	ldr	r2, [pc, #280]	@ (8010578 <TIM_Base_SetConfig+0x154>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d003      	beq.n	801046c <TIM_Base_SetConfig+0x48>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4a45      	ldr	r2, [pc, #276]	@ (801057c <TIM_Base_SetConfig+0x158>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d108      	bne.n	801047e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	4313      	orrs	r3, r2
 801047c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	4a39      	ldr	r2, [pc, #228]	@ (8010568 <TIM_Base_SetConfig+0x144>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d023      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801048c:	d01f      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4a36      	ldr	r2, [pc, #216]	@ (801056c <TIM_Base_SetConfig+0x148>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d01b      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4a35      	ldr	r2, [pc, #212]	@ (8010570 <TIM_Base_SetConfig+0x14c>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d017      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4a34      	ldr	r2, [pc, #208]	@ (8010574 <TIM_Base_SetConfig+0x150>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d013      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4a33      	ldr	r2, [pc, #204]	@ (8010578 <TIM_Base_SetConfig+0x154>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d00f      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4a33      	ldr	r2, [pc, #204]	@ (8010580 <TIM_Base_SetConfig+0x15c>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d00b      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	4a32      	ldr	r2, [pc, #200]	@ (8010584 <TIM_Base_SetConfig+0x160>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d007      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4a31      	ldr	r2, [pc, #196]	@ (8010588 <TIM_Base_SetConfig+0x164>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d003      	beq.n	80104ce <TIM_Base_SetConfig+0xaa>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4a2c      	ldr	r2, [pc, #176]	@ (801057c <TIM_Base_SetConfig+0x158>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d108      	bne.n	80104e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80104d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	68db      	ldr	r3, [r3, #12]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	4313      	orrs	r3, r2
 80104de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	695b      	ldr	r3, [r3, #20]
 80104ea:	4313      	orrs	r3, r2
 80104ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	689a      	ldr	r2, [r3, #8]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4a18      	ldr	r2, [pc, #96]	@ (8010568 <TIM_Base_SetConfig+0x144>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d013      	beq.n	8010534 <TIM_Base_SetConfig+0x110>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4a1a      	ldr	r2, [pc, #104]	@ (8010578 <TIM_Base_SetConfig+0x154>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d00f      	beq.n	8010534 <TIM_Base_SetConfig+0x110>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4a1a      	ldr	r2, [pc, #104]	@ (8010580 <TIM_Base_SetConfig+0x15c>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d00b      	beq.n	8010534 <TIM_Base_SetConfig+0x110>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	4a19      	ldr	r2, [pc, #100]	@ (8010584 <TIM_Base_SetConfig+0x160>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d007      	beq.n	8010534 <TIM_Base_SetConfig+0x110>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	4a18      	ldr	r2, [pc, #96]	@ (8010588 <TIM_Base_SetConfig+0x164>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d003      	beq.n	8010534 <TIM_Base_SetConfig+0x110>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4a13      	ldr	r2, [pc, #76]	@ (801057c <TIM_Base_SetConfig+0x158>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d103      	bne.n	801053c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	691a      	ldr	r2, [r3, #16]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2201      	movs	r2, #1
 8010540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	f003 0301 	and.w	r3, r3, #1
 801054a:	2b01      	cmp	r3, #1
 801054c:	d105      	bne.n	801055a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	691b      	ldr	r3, [r3, #16]
 8010552:	f023 0201 	bic.w	r2, r3, #1
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	611a      	str	r2, [r3, #16]
  }
}
 801055a:	bf00      	nop
 801055c:	3714      	adds	r7, #20
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	40012c00 	.word	0x40012c00
 801056c:	40000400 	.word	0x40000400
 8010570:	40000800 	.word	0x40000800
 8010574:	40000c00 	.word	0x40000c00
 8010578:	40013400 	.word	0x40013400
 801057c:	40015000 	.word	0x40015000
 8010580:	40014000 	.word	0x40014000
 8010584:	40014400 	.word	0x40014400
 8010588:	40014800 	.word	0x40014800

0801058c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801058c:	b480      	push	{r7}
 801058e:	b087      	sub	sp, #28
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6a1b      	ldr	r3, [r3, #32]
 801059a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a1b      	ldr	r3, [r3, #32]
 80105a0:	f023 0201 	bic.w	r2, r3, #1
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80105ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f023 0303 	bic.w	r3, r3, #3
 80105c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	4313      	orrs	r3, r2
 80105d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	f023 0302 	bic.w	r3, r3, #2
 80105d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	689b      	ldr	r3, [r3, #8]
 80105de:	697a      	ldr	r2, [r7, #20]
 80105e0:	4313      	orrs	r3, r2
 80105e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a30      	ldr	r2, [pc, #192]	@ (80106a8 <TIM_OC1_SetConfig+0x11c>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d013      	beq.n	8010614 <TIM_OC1_SetConfig+0x88>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4a2f      	ldr	r2, [pc, #188]	@ (80106ac <TIM_OC1_SetConfig+0x120>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d00f      	beq.n	8010614 <TIM_OC1_SetConfig+0x88>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a2e      	ldr	r2, [pc, #184]	@ (80106b0 <TIM_OC1_SetConfig+0x124>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d00b      	beq.n	8010614 <TIM_OC1_SetConfig+0x88>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4a2d      	ldr	r2, [pc, #180]	@ (80106b4 <TIM_OC1_SetConfig+0x128>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d007      	beq.n	8010614 <TIM_OC1_SetConfig+0x88>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	4a2c      	ldr	r2, [pc, #176]	@ (80106b8 <TIM_OC1_SetConfig+0x12c>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d003      	beq.n	8010614 <TIM_OC1_SetConfig+0x88>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4a2b      	ldr	r2, [pc, #172]	@ (80106bc <TIM_OC1_SetConfig+0x130>)
 8010610:	4293      	cmp	r3, r2
 8010612:	d10c      	bne.n	801062e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	f023 0308 	bic.w	r3, r3, #8
 801061a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	697a      	ldr	r2, [r7, #20]
 8010622:	4313      	orrs	r3, r2
 8010624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	f023 0304 	bic.w	r3, r3, #4
 801062c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4a1d      	ldr	r2, [pc, #116]	@ (80106a8 <TIM_OC1_SetConfig+0x11c>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d013      	beq.n	801065e <TIM_OC1_SetConfig+0xd2>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4a1c      	ldr	r2, [pc, #112]	@ (80106ac <TIM_OC1_SetConfig+0x120>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d00f      	beq.n	801065e <TIM_OC1_SetConfig+0xd2>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4a1b      	ldr	r2, [pc, #108]	@ (80106b0 <TIM_OC1_SetConfig+0x124>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d00b      	beq.n	801065e <TIM_OC1_SetConfig+0xd2>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	4a1a      	ldr	r2, [pc, #104]	@ (80106b4 <TIM_OC1_SetConfig+0x128>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d007      	beq.n	801065e <TIM_OC1_SetConfig+0xd2>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4a19      	ldr	r2, [pc, #100]	@ (80106b8 <TIM_OC1_SetConfig+0x12c>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d003      	beq.n	801065e <TIM_OC1_SetConfig+0xd2>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4a18      	ldr	r2, [pc, #96]	@ (80106bc <TIM_OC1_SetConfig+0x130>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d111      	bne.n	8010682 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801066c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	695b      	ldr	r3, [r3, #20]
 8010672:	693a      	ldr	r2, [r7, #16]
 8010674:	4313      	orrs	r3, r2
 8010676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	699b      	ldr	r3, [r3, #24]
 801067c:	693a      	ldr	r2, [r7, #16]
 801067e:	4313      	orrs	r3, r2
 8010680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	693a      	ldr	r2, [r7, #16]
 8010686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	621a      	str	r2, [r3, #32]
}
 801069c:	bf00      	nop
 801069e:	371c      	adds	r7, #28
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	40012c00 	.word	0x40012c00
 80106ac:	40013400 	.word	0x40013400
 80106b0:	40014000 	.word	0x40014000
 80106b4:	40014400 	.word	0x40014400
 80106b8:	40014800 	.word	0x40014800
 80106bc:	40015000 	.word	0x40015000

080106c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b087      	sub	sp, #28
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6a1b      	ldr	r3, [r3, #32]
 80106d4:	f023 0210 	bic.w	r2, r3, #16
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	699b      	ldr	r3, [r3, #24]
 80106e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80106ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80106fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	021b      	lsls	r3, r3, #8
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	4313      	orrs	r3, r2
 8010706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	f023 0320 	bic.w	r3, r3, #32
 801070e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	011b      	lsls	r3, r3, #4
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	4313      	orrs	r3, r2
 801071a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	4a2c      	ldr	r2, [pc, #176]	@ (80107d0 <TIM_OC2_SetConfig+0x110>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d007      	beq.n	8010734 <TIM_OC2_SetConfig+0x74>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4a2b      	ldr	r2, [pc, #172]	@ (80107d4 <TIM_OC2_SetConfig+0x114>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d003      	beq.n	8010734 <TIM_OC2_SetConfig+0x74>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4a2a      	ldr	r2, [pc, #168]	@ (80107d8 <TIM_OC2_SetConfig+0x118>)
 8010730:	4293      	cmp	r3, r2
 8010732:	d10d      	bne.n	8010750 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801073a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	011b      	lsls	r3, r3, #4
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	4313      	orrs	r3, r2
 8010746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801074e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	4a1f      	ldr	r2, [pc, #124]	@ (80107d0 <TIM_OC2_SetConfig+0x110>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d013      	beq.n	8010780 <TIM_OC2_SetConfig+0xc0>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4a1e      	ldr	r2, [pc, #120]	@ (80107d4 <TIM_OC2_SetConfig+0x114>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d00f      	beq.n	8010780 <TIM_OC2_SetConfig+0xc0>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4a1e      	ldr	r2, [pc, #120]	@ (80107dc <TIM_OC2_SetConfig+0x11c>)
 8010764:	4293      	cmp	r3, r2
 8010766:	d00b      	beq.n	8010780 <TIM_OC2_SetConfig+0xc0>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4a1d      	ldr	r2, [pc, #116]	@ (80107e0 <TIM_OC2_SetConfig+0x120>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d007      	beq.n	8010780 <TIM_OC2_SetConfig+0xc0>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	4a1c      	ldr	r2, [pc, #112]	@ (80107e4 <TIM_OC2_SetConfig+0x124>)
 8010774:	4293      	cmp	r3, r2
 8010776:	d003      	beq.n	8010780 <TIM_OC2_SetConfig+0xc0>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4a17      	ldr	r2, [pc, #92]	@ (80107d8 <TIM_OC2_SetConfig+0x118>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d113      	bne.n	80107a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801078e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	695b      	ldr	r3, [r3, #20]
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	693a      	ldr	r2, [r7, #16]
 8010798:	4313      	orrs	r3, r2
 801079a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	699b      	ldr	r3, [r3, #24]
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	693a      	ldr	r2, [r7, #16]
 80107a4:	4313      	orrs	r3, r2
 80107a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	693a      	ldr	r2, [r7, #16]
 80107ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	685a      	ldr	r2, [r3, #4]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	697a      	ldr	r2, [r7, #20]
 80107c0:	621a      	str	r2, [r3, #32]
}
 80107c2:	bf00      	nop
 80107c4:	371c      	adds	r7, #28
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	40012c00 	.word	0x40012c00
 80107d4:	40013400 	.word	0x40013400
 80107d8:	40015000 	.word	0x40015000
 80107dc:	40014000 	.word	0x40014000
 80107e0:	40014400 	.word	0x40014400
 80107e4:	40014800 	.word	0x40014800

080107e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6a1b      	ldr	r3, [r3, #32]
 80107f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6a1b      	ldr	r3, [r3, #32]
 80107fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	69db      	ldr	r3, [r3, #28]
 801080e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801081a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f023 0303 	bic.w	r3, r3, #3
 8010822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	4313      	orrs	r3, r2
 801082c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	021b      	lsls	r3, r3, #8
 801083c:	697a      	ldr	r2, [r7, #20]
 801083e:	4313      	orrs	r3, r2
 8010840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	4a2b      	ldr	r2, [pc, #172]	@ (80108f4 <TIM_OC3_SetConfig+0x10c>)
 8010846:	4293      	cmp	r3, r2
 8010848:	d007      	beq.n	801085a <TIM_OC3_SetConfig+0x72>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4a2a      	ldr	r2, [pc, #168]	@ (80108f8 <TIM_OC3_SetConfig+0x110>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d003      	beq.n	801085a <TIM_OC3_SetConfig+0x72>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4a29      	ldr	r2, [pc, #164]	@ (80108fc <TIM_OC3_SetConfig+0x114>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d10d      	bne.n	8010876 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	68db      	ldr	r3, [r3, #12]
 8010866:	021b      	lsls	r3, r3, #8
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	4313      	orrs	r3, r2
 801086c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4a1e      	ldr	r2, [pc, #120]	@ (80108f4 <TIM_OC3_SetConfig+0x10c>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d013      	beq.n	80108a6 <TIM_OC3_SetConfig+0xbe>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4a1d      	ldr	r2, [pc, #116]	@ (80108f8 <TIM_OC3_SetConfig+0x110>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d00f      	beq.n	80108a6 <TIM_OC3_SetConfig+0xbe>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4a1d      	ldr	r2, [pc, #116]	@ (8010900 <TIM_OC3_SetConfig+0x118>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d00b      	beq.n	80108a6 <TIM_OC3_SetConfig+0xbe>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4a1c      	ldr	r2, [pc, #112]	@ (8010904 <TIM_OC3_SetConfig+0x11c>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d007      	beq.n	80108a6 <TIM_OC3_SetConfig+0xbe>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4a1b      	ldr	r2, [pc, #108]	@ (8010908 <TIM_OC3_SetConfig+0x120>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d003      	beq.n	80108a6 <TIM_OC3_SetConfig+0xbe>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4a16      	ldr	r2, [pc, #88]	@ (80108fc <TIM_OC3_SetConfig+0x114>)
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d113      	bne.n	80108ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80108ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80108b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	695b      	ldr	r3, [r3, #20]
 80108ba:	011b      	lsls	r3, r3, #4
 80108bc:	693a      	ldr	r2, [r7, #16]
 80108be:	4313      	orrs	r3, r2
 80108c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	699b      	ldr	r3, [r3, #24]
 80108c6:	011b      	lsls	r3, r3, #4
 80108c8:	693a      	ldr	r2, [r7, #16]
 80108ca:	4313      	orrs	r3, r2
 80108cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	693a      	ldr	r2, [r7, #16]
 80108d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	68fa      	ldr	r2, [r7, #12]
 80108d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	685a      	ldr	r2, [r3, #4]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	697a      	ldr	r2, [r7, #20]
 80108e6:	621a      	str	r2, [r3, #32]
}
 80108e8:	bf00      	nop
 80108ea:	371c      	adds	r7, #28
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	40012c00 	.word	0x40012c00
 80108f8:	40013400 	.word	0x40013400
 80108fc:	40015000 	.word	0x40015000
 8010900:	40014000 	.word	0x40014000
 8010904:	40014400 	.word	0x40014400
 8010908:	40014800 	.word	0x40014800

0801090c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801090c:	b480      	push	{r7}
 801090e:	b087      	sub	sp, #28
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6a1b      	ldr	r3, [r3, #32]
 801091a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6a1b      	ldr	r3, [r3, #32]
 8010920:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	69db      	ldr	r3, [r3, #28]
 8010932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801093a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801093e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	021b      	lsls	r3, r3, #8
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	4313      	orrs	r3, r2
 8010952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801095a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	031b      	lsls	r3, r3, #12
 8010962:	697a      	ldr	r2, [r7, #20]
 8010964:	4313      	orrs	r3, r2
 8010966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	4a2c      	ldr	r2, [pc, #176]	@ (8010a1c <TIM_OC4_SetConfig+0x110>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d007      	beq.n	8010980 <TIM_OC4_SetConfig+0x74>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4a2b      	ldr	r2, [pc, #172]	@ (8010a20 <TIM_OC4_SetConfig+0x114>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d003      	beq.n	8010980 <TIM_OC4_SetConfig+0x74>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	4a2a      	ldr	r2, [pc, #168]	@ (8010a24 <TIM_OC4_SetConfig+0x118>)
 801097c:	4293      	cmp	r3, r2
 801097e:	d10d      	bne.n	801099c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	031b      	lsls	r3, r3, #12
 801098e:	697a      	ldr	r2, [r7, #20]
 8010990:	4313      	orrs	r3, r2
 8010992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801099a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	4a1f      	ldr	r2, [pc, #124]	@ (8010a1c <TIM_OC4_SetConfig+0x110>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d013      	beq.n	80109cc <TIM_OC4_SetConfig+0xc0>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	4a1e      	ldr	r2, [pc, #120]	@ (8010a20 <TIM_OC4_SetConfig+0x114>)
 80109a8:	4293      	cmp	r3, r2
 80109aa:	d00f      	beq.n	80109cc <TIM_OC4_SetConfig+0xc0>
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	4a1e      	ldr	r2, [pc, #120]	@ (8010a28 <TIM_OC4_SetConfig+0x11c>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d00b      	beq.n	80109cc <TIM_OC4_SetConfig+0xc0>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	4a1d      	ldr	r2, [pc, #116]	@ (8010a2c <TIM_OC4_SetConfig+0x120>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d007      	beq.n	80109cc <TIM_OC4_SetConfig+0xc0>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	4a1c      	ldr	r2, [pc, #112]	@ (8010a30 <TIM_OC4_SetConfig+0x124>)
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d003      	beq.n	80109cc <TIM_OC4_SetConfig+0xc0>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	4a17      	ldr	r2, [pc, #92]	@ (8010a24 <TIM_OC4_SetConfig+0x118>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d113      	bne.n	80109f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80109d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80109da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	695b      	ldr	r3, [r3, #20]
 80109e0:	019b      	lsls	r3, r3, #6
 80109e2:	693a      	ldr	r2, [r7, #16]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	699b      	ldr	r3, [r3, #24]
 80109ec:	019b      	lsls	r3, r3, #6
 80109ee:	693a      	ldr	r2, [r7, #16]
 80109f0:	4313      	orrs	r3, r2
 80109f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	68fa      	ldr	r2, [r7, #12]
 80109fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	685a      	ldr	r2, [r3, #4]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	697a      	ldr	r2, [r7, #20]
 8010a0c:	621a      	str	r2, [r3, #32]
}
 8010a0e:	bf00      	nop
 8010a10:	371c      	adds	r7, #28
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	40012c00 	.word	0x40012c00
 8010a20:	40013400 	.word	0x40013400
 8010a24:	40015000 	.word	0x40015000
 8010a28:	40014000 	.word	0x40014000
 8010a2c:	40014400 	.word	0x40014400
 8010a30:	40014800 	.word	0x40014800

08010a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b087      	sub	sp, #28
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6a1b      	ldr	r3, [r3, #32]
 8010a42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6a1b      	ldr	r3, [r3, #32]
 8010a48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	689b      	ldr	r3, [r3, #8]
 8010a7e:	041b      	lsls	r3, r3, #16
 8010a80:	693a      	ldr	r2, [r7, #16]
 8010a82:	4313      	orrs	r3, r2
 8010a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4a19      	ldr	r2, [pc, #100]	@ (8010af0 <TIM_OC5_SetConfig+0xbc>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d013      	beq.n	8010ab6 <TIM_OC5_SetConfig+0x82>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4a18      	ldr	r2, [pc, #96]	@ (8010af4 <TIM_OC5_SetConfig+0xc0>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d00f      	beq.n	8010ab6 <TIM_OC5_SetConfig+0x82>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4a17      	ldr	r2, [pc, #92]	@ (8010af8 <TIM_OC5_SetConfig+0xc4>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d00b      	beq.n	8010ab6 <TIM_OC5_SetConfig+0x82>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a16      	ldr	r2, [pc, #88]	@ (8010afc <TIM_OC5_SetConfig+0xc8>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d007      	beq.n	8010ab6 <TIM_OC5_SetConfig+0x82>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4a15      	ldr	r2, [pc, #84]	@ (8010b00 <TIM_OC5_SetConfig+0xcc>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d003      	beq.n	8010ab6 <TIM_OC5_SetConfig+0x82>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4a14      	ldr	r2, [pc, #80]	@ (8010b04 <TIM_OC5_SetConfig+0xd0>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d109      	bne.n	8010aca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010abc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	695b      	ldr	r3, [r3, #20]
 8010ac2:	021b      	lsls	r3, r3, #8
 8010ac4:	697a      	ldr	r2, [r7, #20]
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	697a      	ldr	r2, [r7, #20]
 8010ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	685a      	ldr	r2, [r3, #4]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	621a      	str	r2, [r3, #32]
}
 8010ae4:	bf00      	nop
 8010ae6:	371c      	adds	r7, #28
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr
 8010af0:	40012c00 	.word	0x40012c00
 8010af4:	40013400 	.word	0x40013400
 8010af8:	40014000 	.word	0x40014000
 8010afc:	40014400 	.word	0x40014400
 8010b00:	40014800 	.word	0x40014800
 8010b04:	40015000 	.word	0x40015000

08010b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6a1b      	ldr	r3, [r3, #32]
 8010b16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6a1b      	ldr	r3, [r3, #32]
 8010b1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	021b      	lsls	r3, r3, #8
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	689b      	ldr	r3, [r3, #8]
 8010b54:	051b      	lsls	r3, r3, #20
 8010b56:	693a      	ldr	r2, [r7, #16]
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8010bc8 <TIM_OC6_SetConfig+0xc0>)
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d013      	beq.n	8010b8c <TIM_OC6_SetConfig+0x84>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4a19      	ldr	r2, [pc, #100]	@ (8010bcc <TIM_OC6_SetConfig+0xc4>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d00f      	beq.n	8010b8c <TIM_OC6_SetConfig+0x84>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	4a18      	ldr	r2, [pc, #96]	@ (8010bd0 <TIM_OC6_SetConfig+0xc8>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d00b      	beq.n	8010b8c <TIM_OC6_SetConfig+0x84>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	4a17      	ldr	r2, [pc, #92]	@ (8010bd4 <TIM_OC6_SetConfig+0xcc>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d007      	beq.n	8010b8c <TIM_OC6_SetConfig+0x84>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4a16      	ldr	r2, [pc, #88]	@ (8010bd8 <TIM_OC6_SetConfig+0xd0>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d003      	beq.n	8010b8c <TIM_OC6_SetConfig+0x84>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	4a15      	ldr	r2, [pc, #84]	@ (8010bdc <TIM_OC6_SetConfig+0xd4>)
 8010b88:	4293      	cmp	r3, r2
 8010b8a:	d109      	bne.n	8010ba0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	029b      	lsls	r3, r3, #10
 8010b9a:	697a      	ldr	r2, [r7, #20]
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	697a      	ldr	r2, [r7, #20]
 8010ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	685a      	ldr	r2, [r3, #4]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	693a      	ldr	r2, [r7, #16]
 8010bb8:	621a      	str	r2, [r3, #32]
}
 8010bba:	bf00      	nop
 8010bbc:	371c      	adds	r7, #28
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	40012c00 	.word	0x40012c00
 8010bcc:	40013400 	.word	0x40013400
 8010bd0:	40014000 	.word	0x40014000
 8010bd4:	40014400 	.word	0x40014400
 8010bd8:	40014800 	.word	0x40014800
 8010bdc:	40015000 	.word	0x40015000

08010be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b087      	sub	sp, #28
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	60f8      	str	r0, [r7, #12]
 8010be8:	60b9      	str	r1, [r7, #8]
 8010bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6a1b      	ldr	r3, [r3, #32]
 8010bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6a1b      	ldr	r3, [r3, #32]
 8010bf6:	f023 0201 	bic.w	r2, r3, #1
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	699b      	ldr	r3, [r3, #24]
 8010c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	011b      	lsls	r3, r3, #4
 8010c10:	693a      	ldr	r2, [r7, #16]
 8010c12:	4313      	orrs	r3, r2
 8010c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	f023 030a 	bic.w	r3, r3, #10
 8010c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010c1e:	697a      	ldr	r2, [r7, #20]
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	4313      	orrs	r3, r2
 8010c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	693a      	ldr	r2, [r7, #16]
 8010c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	697a      	ldr	r2, [r7, #20]
 8010c30:	621a      	str	r2, [r3, #32]
}
 8010c32:	bf00      	nop
 8010c34:	371c      	adds	r7, #28
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr

08010c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010c3e:	b480      	push	{r7}
 8010c40:	b087      	sub	sp, #28
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	60f8      	str	r0, [r7, #12]
 8010c46:	60b9      	str	r1, [r7, #8]
 8010c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	6a1b      	ldr	r3, [r3, #32]
 8010c4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6a1b      	ldr	r3, [r3, #32]
 8010c54:	f023 0210 	bic.w	r2, r3, #16
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	699b      	ldr	r3, [r3, #24]
 8010c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	031b      	lsls	r3, r3, #12
 8010c6e:	693a      	ldr	r2, [r7, #16]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	011b      	lsls	r3, r3, #4
 8010c80:	697a      	ldr	r2, [r7, #20]
 8010c82:	4313      	orrs	r3, r2
 8010c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	697a      	ldr	r2, [r7, #20]
 8010c90:	621a      	str	r2, [r3, #32]
}
 8010c92:	bf00      	nop
 8010c94:	371c      	adds	r7, #28
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr

08010c9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010c9e:	b480      	push	{r7}
 8010ca0:	b085      	sub	sp, #20
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
 8010ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	689b      	ldr	r3, [r3, #8]
 8010cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010cba:	683a      	ldr	r2, [r7, #0]
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	4313      	orrs	r3, r2
 8010cc0:	f043 0307 	orr.w	r3, r3, #7
 8010cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	609a      	str	r2, [r3, #8]
}
 8010ccc:	bf00      	nop
 8010cce:	3714      	adds	r7, #20
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	4770      	bx	lr

08010cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b087      	sub	sp, #28
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	689b      	ldr	r3, [r3, #8]
 8010cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	021a      	lsls	r2, r3, #8
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	431a      	orrs	r2, r3
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	697a      	ldr	r2, [r7, #20]
 8010d02:	4313      	orrs	r3, r2
 8010d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	697a      	ldr	r2, [r7, #20]
 8010d0a:	609a      	str	r2, [r3, #8]
}
 8010d0c:	bf00      	nop
 8010d0e:	371c      	adds	r7, #28
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d101      	bne.n	8010d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d2c:	2302      	movs	r3, #2
 8010d2e:	e074      	b.n	8010e1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2201      	movs	r2, #1
 8010d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2202      	movs	r2, #2
 8010d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	689b      	ldr	r3, [r3, #8]
 8010d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a34      	ldr	r2, [pc, #208]	@ (8010e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d009      	beq.n	8010d6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	4a33      	ldr	r2, [pc, #204]	@ (8010e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d004      	beq.n	8010d6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4a31      	ldr	r2, [pc, #196]	@ (8010e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d108      	bne.n	8010d80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010d74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	68fa      	ldr	r2, [r7, #12]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8010d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	68fa      	ldr	r2, [r7, #12]
 8010d92:	4313      	orrs	r3, r2
 8010d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68fa      	ldr	r2, [r7, #12]
 8010d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4a21      	ldr	r2, [pc, #132]	@ (8010e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d022      	beq.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010db0:	d01d      	beq.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4a1f      	ldr	r2, [pc, #124]	@ (8010e34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d018      	beq.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8010e38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d013      	beq.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4a1c      	ldr	r2, [pc, #112]	@ (8010e3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d00e      	beq.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4a15      	ldr	r2, [pc, #84]	@ (8010e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d009      	beq.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	4a18      	ldr	r2, [pc, #96]	@ (8010e40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d004      	beq.n	8010dee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a11      	ldr	r2, [pc, #68]	@ (8010e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d10c      	bne.n	8010e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	689b      	ldr	r3, [r3, #8]
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3714      	adds	r7, #20
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop
 8010e28:	40012c00 	.word	0x40012c00
 8010e2c:	40013400 	.word	0x40013400
 8010e30:	40015000 	.word	0x40015000
 8010e34:	40000400 	.word	0x40000400
 8010e38:	40000800 	.word	0x40000800
 8010e3c:	40000c00 	.word	0x40000c00
 8010e40:	40014000 	.word	0x40014000

08010e44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b085      	sub	sp, #20
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d101      	bne.n	8010e60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010e5c:	2302      	movs	r3, #2
 8010e5e:	e078      	b.n	8010f52 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2201      	movs	r2, #1
 8010e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	4313      	orrs	r3, r2
 8010e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	4313      	orrs	r3, r2
 8010e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	691b      	ldr	r3, [r3, #16]
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	699b      	ldr	r3, [r3, #24]
 8010ed4:	041b      	lsls	r3, r3, #16
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	69db      	ldr	r3, [r3, #28]
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4a1c      	ldr	r2, [pc, #112]	@ (8010f60 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d009      	beq.n	8010f06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8010f64 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d004      	beq.n	8010f06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4a19      	ldr	r2, [pc, #100]	@ (8010f68 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d11c      	bne.n	8010f40 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f10:	051b      	lsls	r3, r3, #20
 8010f12:	4313      	orrs	r3, r2
 8010f14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	6a1b      	ldr	r3, [r3, #32]
 8010f20:	4313      	orrs	r3, r2
 8010f22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010f50:	2300      	movs	r3, #0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3714      	adds	r7, #20
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr
 8010f5e:	bf00      	nop
 8010f60:	40012c00 	.word	0x40012c00
 8010f64:	40013400 	.word	0x40013400
 8010f68:	40015000 	.word	0x40015000

08010f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d101      	bne.n	8010f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e042      	b.n	8011004 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d106      	bne.n	8010f96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7f9 fcb3 	bl	800a8fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2224      	movs	r2, #36	@ 0x24
 8010f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f022 0201 	bic.w	r2, r2, #1
 8010fac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d002      	beq.n	8010fbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 fc7a 	bl	80118b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 f97b 	bl	80112b8 <UART_SetConfig>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d101      	bne.n	8010fcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	e01b      	b.n	8011004 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	685a      	ldr	r2, [r3, #4]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	689a      	ldr	r2, [r3, #8]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f042 0201 	orr.w	r2, r2, #1
 8010ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 fcf9 	bl	80119f4 <UART_CheckIdleState>
 8011002:	4603      	mov	r3, r0
}
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b08a      	sub	sp, #40	@ 0x28
 8011010:	af02      	add	r7, sp, #8
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	603b      	str	r3, [r7, #0]
 8011018:	4613      	mov	r3, r2
 801101a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011022:	2b20      	cmp	r3, #32
 8011024:	d17b      	bne.n	801111e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d002      	beq.n	8011032 <HAL_UART_Transmit+0x26>
 801102c:	88fb      	ldrh	r3, [r7, #6]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d101      	bne.n	8011036 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011032:	2301      	movs	r3, #1
 8011034:	e074      	b.n	8011120 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2200      	movs	r2, #0
 801103a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2221      	movs	r2, #33	@ 0x21
 8011042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011046:	f7f9 ff93 	bl	800af70 <HAL_GetTick>
 801104a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	88fa      	ldrh	r2, [r7, #6]
 8011050:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	88fa      	ldrh	r2, [r7, #6]
 8011058:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	689b      	ldr	r3, [r3, #8]
 8011060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011064:	d108      	bne.n	8011078 <HAL_UART_Transmit+0x6c>
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	691b      	ldr	r3, [r3, #16]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d104      	bne.n	8011078 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801106e:	2300      	movs	r3, #0
 8011070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	61bb      	str	r3, [r7, #24]
 8011076:	e003      	b.n	8011080 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801107c:	2300      	movs	r3, #0
 801107e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011080:	e030      	b.n	80110e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	2200      	movs	r2, #0
 801108a:	2180      	movs	r1, #128	@ 0x80
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f000 fd5b 	bl	8011b48 <UART_WaitOnFlagUntilTimeout>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d005      	beq.n	80110a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2220      	movs	r2, #32
 801109c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80110a0:	2303      	movs	r3, #3
 80110a2:	e03d      	b.n	8011120 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d10b      	bne.n	80110c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	881b      	ldrh	r3, [r3, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80110b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	3302      	adds	r3, #2
 80110be:	61bb      	str	r3, [r7, #24]
 80110c0:	e007      	b.n	80110d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80110c2:	69fb      	ldr	r3, [r7, #28]
 80110c4:	781a      	ldrb	r2, [r3, #0]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	3301      	adds	r3, #1
 80110d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80110d8:	b29b      	uxth	r3, r3
 80110da:	3b01      	subs	r3, #1
 80110dc:	b29a      	uxth	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d1c8      	bne.n	8011082 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	9300      	str	r3, [sp, #0]
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	2200      	movs	r2, #0
 80110f8:	2140      	movs	r1, #64	@ 0x40
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f000 fd24 	bl	8011b48 <UART_WaitOnFlagUntilTimeout>
 8011100:	4603      	mov	r3, r0
 8011102:	2b00      	cmp	r3, #0
 8011104:	d005      	beq.n	8011112 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2220      	movs	r2, #32
 801110a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801110e:	2303      	movs	r3, #3
 8011110:	e006      	b.n	8011120 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2220      	movs	r2, #32
 8011116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801111a:	2300      	movs	r3, #0
 801111c:	e000      	b.n	8011120 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801111e:	2302      	movs	r3, #2
  }
}
 8011120:	4618      	mov	r0, r3
 8011122:	3720      	adds	r7, #32
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b08a      	sub	sp, #40	@ 0x28
 801112c:	af02      	add	r7, sp, #8
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	603b      	str	r3, [r7, #0]
 8011134:	4613      	mov	r3, r2
 8011136:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801113e:	2b20      	cmp	r3, #32
 8011140:	f040 80b5 	bne.w	80112ae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d002      	beq.n	8011150 <HAL_UART_Receive+0x28>
 801114a:	88fb      	ldrh	r3, [r7, #6]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d101      	bne.n	8011154 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8011150:	2301      	movs	r3, #1
 8011152:	e0ad      	b.n	80112b0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2200      	movs	r2, #0
 8011158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	2222      	movs	r2, #34	@ 0x22
 8011160:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2200      	movs	r2, #0
 8011168:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801116a:	f7f9 ff01 	bl	800af70 <HAL_GetTick>
 801116e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	88fa      	ldrh	r2, [r7, #6]
 8011174:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	88fa      	ldrh	r2, [r7, #6]
 801117c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011188:	d10e      	bne.n	80111a8 <HAL_UART_Receive+0x80>
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	691b      	ldr	r3, [r3, #16]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d105      	bne.n	801119e <HAL_UART_Receive+0x76>
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011198:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801119c:	e02d      	b.n	80111fa <HAL_UART_Receive+0xd2>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	22ff      	movs	r2, #255	@ 0xff
 80111a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80111a6:	e028      	b.n	80111fa <HAL_UART_Receive+0xd2>
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d10d      	bne.n	80111cc <HAL_UART_Receive+0xa4>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	691b      	ldr	r3, [r3, #16]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d104      	bne.n	80111c2 <HAL_UART_Receive+0x9a>
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	22ff      	movs	r2, #255	@ 0xff
 80111bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80111c0:	e01b      	b.n	80111fa <HAL_UART_Receive+0xd2>
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	227f      	movs	r2, #127	@ 0x7f
 80111c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80111ca:	e016      	b.n	80111fa <HAL_UART_Receive+0xd2>
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	689b      	ldr	r3, [r3, #8]
 80111d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80111d4:	d10d      	bne.n	80111f2 <HAL_UART_Receive+0xca>
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	691b      	ldr	r3, [r3, #16]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d104      	bne.n	80111e8 <HAL_UART_Receive+0xc0>
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	227f      	movs	r2, #127	@ 0x7f
 80111e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80111e6:	e008      	b.n	80111fa <HAL_UART_Receive+0xd2>
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	223f      	movs	r2, #63	@ 0x3f
 80111ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80111f0:	e003      	b.n	80111fa <HAL_UART_Receive+0xd2>
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2200      	movs	r2, #0
 80111f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011200:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801120a:	d108      	bne.n	801121e <HAL_UART_Receive+0xf6>
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	691b      	ldr	r3, [r3, #16]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d104      	bne.n	801121e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8011214:	2300      	movs	r3, #0
 8011216:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	61bb      	str	r3, [r7, #24]
 801121c:	e003      	b.n	8011226 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011222:	2300      	movs	r3, #0
 8011224:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8011226:	e036      	b.n	8011296 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	2200      	movs	r2, #0
 8011230:	2120      	movs	r1, #32
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f000 fc88 	bl	8011b48 <UART_WaitOnFlagUntilTimeout>
 8011238:	4603      	mov	r3, r0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d005      	beq.n	801124a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2220      	movs	r2, #32
 8011242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8011246:	2303      	movs	r3, #3
 8011248:	e032      	b.n	80112b0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d10c      	bne.n	801126a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011256:	b29a      	uxth	r2, r3
 8011258:	8a7b      	ldrh	r3, [r7, #18]
 801125a:	4013      	ands	r3, r2
 801125c:	b29a      	uxth	r2, r3
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	3302      	adds	r3, #2
 8011266:	61bb      	str	r3, [r7, #24]
 8011268:	e00c      	b.n	8011284 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011270:	b2da      	uxtb	r2, r3
 8011272:	8a7b      	ldrh	r3, [r7, #18]
 8011274:	b2db      	uxtb	r3, r3
 8011276:	4013      	ands	r3, r2
 8011278:	b2da      	uxtb	r2, r3
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	3301      	adds	r3, #1
 8011282:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801128a:	b29b      	uxth	r3, r3
 801128c:	3b01      	subs	r3, #1
 801128e:	b29a      	uxth	r2, r3
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801129c:	b29b      	uxth	r3, r3
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d1c2      	bne.n	8011228 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2220      	movs	r2, #32
 80112a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80112aa:	2300      	movs	r3, #0
 80112ac:	e000      	b.n	80112b0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80112ae:	2302      	movs	r3, #2
  }
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3720      	adds	r7, #32
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80112b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112bc:	b08c      	sub	sp, #48	@ 0x30
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80112c2:	2300      	movs	r3, #0
 80112c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80112c8:	697b      	ldr	r3, [r7, #20]
 80112ca:	689a      	ldr	r2, [r3, #8]
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	431a      	orrs	r2, r3
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	695b      	ldr	r3, [r3, #20]
 80112d6:	431a      	orrs	r2, r3
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	69db      	ldr	r3, [r3, #28]
 80112dc:	4313      	orrs	r3, r2
 80112de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	4baa      	ldr	r3, [pc, #680]	@ (8011590 <UART_SetConfig+0x2d8>)
 80112e8:	4013      	ands	r3, r2
 80112ea:	697a      	ldr	r2, [r7, #20]
 80112ec:	6812      	ldr	r2, [r2, #0]
 80112ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80112f0:	430b      	orrs	r3, r1
 80112f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	68da      	ldr	r2, [r3, #12]
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	430a      	orrs	r2, r1
 8011308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	4a9f      	ldr	r2, [pc, #636]	@ (8011594 <UART_SetConfig+0x2dc>)
 8011316:	4293      	cmp	r3, r2
 8011318:	d004      	beq.n	8011324 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	6a1b      	ldr	r3, [r3, #32]
 801131e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011320:	4313      	orrs	r3, r2
 8011322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	689b      	ldr	r3, [r3, #8]
 801132a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801132e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8011332:	697a      	ldr	r2, [r7, #20]
 8011334:	6812      	ldr	r2, [r2, #0]
 8011336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011338:	430b      	orrs	r3, r1
 801133a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011342:	f023 010f 	bic.w	r1, r3, #15
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	430a      	orrs	r2, r1
 8011350:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	4a90      	ldr	r2, [pc, #576]	@ (8011598 <UART_SetConfig+0x2e0>)
 8011358:	4293      	cmp	r3, r2
 801135a:	d125      	bne.n	80113a8 <UART_SetConfig+0xf0>
 801135c:	4b8f      	ldr	r3, [pc, #572]	@ (801159c <UART_SetConfig+0x2e4>)
 801135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011362:	f003 0303 	and.w	r3, r3, #3
 8011366:	2b03      	cmp	r3, #3
 8011368:	d81a      	bhi.n	80113a0 <UART_SetConfig+0xe8>
 801136a:	a201      	add	r2, pc, #4	@ (adr r2, 8011370 <UART_SetConfig+0xb8>)
 801136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011370:	08011381 	.word	0x08011381
 8011374:	08011391 	.word	0x08011391
 8011378:	08011389 	.word	0x08011389
 801137c:	08011399 	.word	0x08011399
 8011380:	2301      	movs	r3, #1
 8011382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011386:	e116      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011388:	2302      	movs	r3, #2
 801138a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801138e:	e112      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011390:	2304      	movs	r3, #4
 8011392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011396:	e10e      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011398:	2308      	movs	r3, #8
 801139a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801139e:	e10a      	b.n	80115b6 <UART_SetConfig+0x2fe>
 80113a0:	2310      	movs	r3, #16
 80113a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80113a6:	e106      	b.n	80115b6 <UART_SetConfig+0x2fe>
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	4a7c      	ldr	r2, [pc, #496]	@ (80115a0 <UART_SetConfig+0x2e8>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d138      	bne.n	8011424 <UART_SetConfig+0x16c>
 80113b2:	4b7a      	ldr	r3, [pc, #488]	@ (801159c <UART_SetConfig+0x2e4>)
 80113b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80113b8:	f003 030c 	and.w	r3, r3, #12
 80113bc:	2b0c      	cmp	r3, #12
 80113be:	d82d      	bhi.n	801141c <UART_SetConfig+0x164>
 80113c0:	a201      	add	r2, pc, #4	@ (adr r2, 80113c8 <UART_SetConfig+0x110>)
 80113c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c6:	bf00      	nop
 80113c8:	080113fd 	.word	0x080113fd
 80113cc:	0801141d 	.word	0x0801141d
 80113d0:	0801141d 	.word	0x0801141d
 80113d4:	0801141d 	.word	0x0801141d
 80113d8:	0801140d 	.word	0x0801140d
 80113dc:	0801141d 	.word	0x0801141d
 80113e0:	0801141d 	.word	0x0801141d
 80113e4:	0801141d 	.word	0x0801141d
 80113e8:	08011405 	.word	0x08011405
 80113ec:	0801141d 	.word	0x0801141d
 80113f0:	0801141d 	.word	0x0801141d
 80113f4:	0801141d 	.word	0x0801141d
 80113f8:	08011415 	.word	0x08011415
 80113fc:	2300      	movs	r3, #0
 80113fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011402:	e0d8      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011404:	2302      	movs	r3, #2
 8011406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801140a:	e0d4      	b.n	80115b6 <UART_SetConfig+0x2fe>
 801140c:	2304      	movs	r3, #4
 801140e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011412:	e0d0      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011414:	2308      	movs	r3, #8
 8011416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801141a:	e0cc      	b.n	80115b6 <UART_SetConfig+0x2fe>
 801141c:	2310      	movs	r3, #16
 801141e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011422:	e0c8      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4a5e      	ldr	r2, [pc, #376]	@ (80115a4 <UART_SetConfig+0x2ec>)
 801142a:	4293      	cmp	r3, r2
 801142c:	d125      	bne.n	801147a <UART_SetConfig+0x1c2>
 801142e:	4b5b      	ldr	r3, [pc, #364]	@ (801159c <UART_SetConfig+0x2e4>)
 8011430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011434:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011438:	2b30      	cmp	r3, #48	@ 0x30
 801143a:	d016      	beq.n	801146a <UART_SetConfig+0x1b2>
 801143c:	2b30      	cmp	r3, #48	@ 0x30
 801143e:	d818      	bhi.n	8011472 <UART_SetConfig+0x1ba>
 8011440:	2b20      	cmp	r3, #32
 8011442:	d00a      	beq.n	801145a <UART_SetConfig+0x1a2>
 8011444:	2b20      	cmp	r3, #32
 8011446:	d814      	bhi.n	8011472 <UART_SetConfig+0x1ba>
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <UART_SetConfig+0x19a>
 801144c:	2b10      	cmp	r3, #16
 801144e:	d008      	beq.n	8011462 <UART_SetConfig+0x1aa>
 8011450:	e00f      	b.n	8011472 <UART_SetConfig+0x1ba>
 8011452:	2300      	movs	r3, #0
 8011454:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011458:	e0ad      	b.n	80115b6 <UART_SetConfig+0x2fe>
 801145a:	2302      	movs	r3, #2
 801145c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011460:	e0a9      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011462:	2304      	movs	r3, #4
 8011464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011468:	e0a5      	b.n	80115b6 <UART_SetConfig+0x2fe>
 801146a:	2308      	movs	r3, #8
 801146c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011470:	e0a1      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011472:	2310      	movs	r3, #16
 8011474:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011478:	e09d      	b.n	80115b6 <UART_SetConfig+0x2fe>
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	4a4a      	ldr	r2, [pc, #296]	@ (80115a8 <UART_SetConfig+0x2f0>)
 8011480:	4293      	cmp	r3, r2
 8011482:	d125      	bne.n	80114d0 <UART_SetConfig+0x218>
 8011484:	4b45      	ldr	r3, [pc, #276]	@ (801159c <UART_SetConfig+0x2e4>)
 8011486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801148a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801148e:	2bc0      	cmp	r3, #192	@ 0xc0
 8011490:	d016      	beq.n	80114c0 <UART_SetConfig+0x208>
 8011492:	2bc0      	cmp	r3, #192	@ 0xc0
 8011494:	d818      	bhi.n	80114c8 <UART_SetConfig+0x210>
 8011496:	2b80      	cmp	r3, #128	@ 0x80
 8011498:	d00a      	beq.n	80114b0 <UART_SetConfig+0x1f8>
 801149a:	2b80      	cmp	r3, #128	@ 0x80
 801149c:	d814      	bhi.n	80114c8 <UART_SetConfig+0x210>
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d002      	beq.n	80114a8 <UART_SetConfig+0x1f0>
 80114a2:	2b40      	cmp	r3, #64	@ 0x40
 80114a4:	d008      	beq.n	80114b8 <UART_SetConfig+0x200>
 80114a6:	e00f      	b.n	80114c8 <UART_SetConfig+0x210>
 80114a8:	2300      	movs	r3, #0
 80114aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114ae:	e082      	b.n	80115b6 <UART_SetConfig+0x2fe>
 80114b0:	2302      	movs	r3, #2
 80114b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114b6:	e07e      	b.n	80115b6 <UART_SetConfig+0x2fe>
 80114b8:	2304      	movs	r3, #4
 80114ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114be:	e07a      	b.n	80115b6 <UART_SetConfig+0x2fe>
 80114c0:	2308      	movs	r3, #8
 80114c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114c6:	e076      	b.n	80115b6 <UART_SetConfig+0x2fe>
 80114c8:	2310      	movs	r3, #16
 80114ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114ce:	e072      	b.n	80115b6 <UART_SetConfig+0x2fe>
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4a35      	ldr	r2, [pc, #212]	@ (80115ac <UART_SetConfig+0x2f4>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d12a      	bne.n	8011530 <UART_SetConfig+0x278>
 80114da:	4b30      	ldr	r3, [pc, #192]	@ (801159c <UART_SetConfig+0x2e4>)
 80114dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80114e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80114e8:	d01a      	beq.n	8011520 <UART_SetConfig+0x268>
 80114ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80114ee:	d81b      	bhi.n	8011528 <UART_SetConfig+0x270>
 80114f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114f4:	d00c      	beq.n	8011510 <UART_SetConfig+0x258>
 80114f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114fa:	d815      	bhi.n	8011528 <UART_SetConfig+0x270>
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d003      	beq.n	8011508 <UART_SetConfig+0x250>
 8011500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011504:	d008      	beq.n	8011518 <UART_SetConfig+0x260>
 8011506:	e00f      	b.n	8011528 <UART_SetConfig+0x270>
 8011508:	2300      	movs	r3, #0
 801150a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801150e:	e052      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011510:	2302      	movs	r3, #2
 8011512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011516:	e04e      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011518:	2304      	movs	r3, #4
 801151a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801151e:	e04a      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011520:	2308      	movs	r3, #8
 8011522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011526:	e046      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011528:	2310      	movs	r3, #16
 801152a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801152e:	e042      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	4a17      	ldr	r2, [pc, #92]	@ (8011594 <UART_SetConfig+0x2dc>)
 8011536:	4293      	cmp	r3, r2
 8011538:	d13a      	bne.n	80115b0 <UART_SetConfig+0x2f8>
 801153a:	4b18      	ldr	r3, [pc, #96]	@ (801159c <UART_SetConfig+0x2e4>)
 801153c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011540:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011544:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011548:	d01a      	beq.n	8011580 <UART_SetConfig+0x2c8>
 801154a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801154e:	d81b      	bhi.n	8011588 <UART_SetConfig+0x2d0>
 8011550:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011554:	d00c      	beq.n	8011570 <UART_SetConfig+0x2b8>
 8011556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801155a:	d815      	bhi.n	8011588 <UART_SetConfig+0x2d0>
 801155c:	2b00      	cmp	r3, #0
 801155e:	d003      	beq.n	8011568 <UART_SetConfig+0x2b0>
 8011560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011564:	d008      	beq.n	8011578 <UART_SetConfig+0x2c0>
 8011566:	e00f      	b.n	8011588 <UART_SetConfig+0x2d0>
 8011568:	2300      	movs	r3, #0
 801156a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801156e:	e022      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011570:	2302      	movs	r3, #2
 8011572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011576:	e01e      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011578:	2304      	movs	r3, #4
 801157a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801157e:	e01a      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011580:	2308      	movs	r3, #8
 8011582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011586:	e016      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011588:	2310      	movs	r3, #16
 801158a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801158e:	e012      	b.n	80115b6 <UART_SetConfig+0x2fe>
 8011590:	cfff69f3 	.word	0xcfff69f3
 8011594:	40008000 	.word	0x40008000
 8011598:	40013800 	.word	0x40013800
 801159c:	40021000 	.word	0x40021000
 80115a0:	40004400 	.word	0x40004400
 80115a4:	40004800 	.word	0x40004800
 80115a8:	40004c00 	.word	0x40004c00
 80115ac:	40005000 	.word	0x40005000
 80115b0:	2310      	movs	r3, #16
 80115b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	4aae      	ldr	r2, [pc, #696]	@ (8011874 <UART_SetConfig+0x5bc>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	f040 8097 	bne.w	80116f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80115c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115c6:	2b08      	cmp	r3, #8
 80115c8:	d823      	bhi.n	8011612 <UART_SetConfig+0x35a>
 80115ca:	a201      	add	r2, pc, #4	@ (adr r2, 80115d0 <UART_SetConfig+0x318>)
 80115cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d0:	080115f5 	.word	0x080115f5
 80115d4:	08011613 	.word	0x08011613
 80115d8:	080115fd 	.word	0x080115fd
 80115dc:	08011613 	.word	0x08011613
 80115e0:	08011603 	.word	0x08011603
 80115e4:	08011613 	.word	0x08011613
 80115e8:	08011613 	.word	0x08011613
 80115ec:	08011613 	.word	0x08011613
 80115f0:	0801160b 	.word	0x0801160b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115f4:	f7fd f92c 	bl	800e850 <HAL_RCC_GetPCLK1Freq>
 80115f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80115fa:	e010      	b.n	801161e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80115fc:	4b9e      	ldr	r3, [pc, #632]	@ (8011878 <UART_SetConfig+0x5c0>)
 80115fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011600:	e00d      	b.n	801161e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011602:	f7fd f8b7 	bl	800e774 <HAL_RCC_GetSysClockFreq>
 8011606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011608:	e009      	b.n	801161e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801160a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801160e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011610:	e005      	b.n	801161e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8011612:	2300      	movs	r3, #0
 8011614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801161c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011620:	2b00      	cmp	r3, #0
 8011622:	f000 8130 	beq.w	8011886 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801162a:	4a94      	ldr	r2, [pc, #592]	@ (801187c <UART_SetConfig+0x5c4>)
 801162c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011630:	461a      	mov	r2, r3
 8011632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011634:	fbb3 f3f2 	udiv	r3, r3, r2
 8011638:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	685a      	ldr	r2, [r3, #4]
 801163e:	4613      	mov	r3, r2
 8011640:	005b      	lsls	r3, r3, #1
 8011642:	4413      	add	r3, r2
 8011644:	69ba      	ldr	r2, [r7, #24]
 8011646:	429a      	cmp	r2, r3
 8011648:	d305      	bcc.n	8011656 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011650:	69ba      	ldr	r2, [r7, #24]
 8011652:	429a      	cmp	r2, r3
 8011654:	d903      	bls.n	801165e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8011656:	2301      	movs	r3, #1
 8011658:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801165c:	e113      	b.n	8011886 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011660:	2200      	movs	r2, #0
 8011662:	60bb      	str	r3, [r7, #8]
 8011664:	60fa      	str	r2, [r7, #12]
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166a:	4a84      	ldr	r2, [pc, #528]	@ (801187c <UART_SetConfig+0x5c4>)
 801166c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011670:	b29b      	uxth	r3, r3
 8011672:	2200      	movs	r2, #0
 8011674:	603b      	str	r3, [r7, #0]
 8011676:	607a      	str	r2, [r7, #4]
 8011678:	e9d7 2300 	ldrd	r2, r3, [r7]
 801167c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011680:	f7ef fb0a 	bl	8000c98 <__aeabi_uldivmod>
 8011684:	4602      	mov	r2, r0
 8011686:	460b      	mov	r3, r1
 8011688:	4610      	mov	r0, r2
 801168a:	4619      	mov	r1, r3
 801168c:	f04f 0200 	mov.w	r2, #0
 8011690:	f04f 0300 	mov.w	r3, #0
 8011694:	020b      	lsls	r3, r1, #8
 8011696:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801169a:	0202      	lsls	r2, r0, #8
 801169c:	6979      	ldr	r1, [r7, #20]
 801169e:	6849      	ldr	r1, [r1, #4]
 80116a0:	0849      	lsrs	r1, r1, #1
 80116a2:	2000      	movs	r0, #0
 80116a4:	460c      	mov	r4, r1
 80116a6:	4605      	mov	r5, r0
 80116a8:	eb12 0804 	adds.w	r8, r2, r4
 80116ac:	eb43 0905 	adc.w	r9, r3, r5
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	2200      	movs	r2, #0
 80116b6:	469a      	mov	sl, r3
 80116b8:	4693      	mov	fp, r2
 80116ba:	4652      	mov	r2, sl
 80116bc:	465b      	mov	r3, fp
 80116be:	4640      	mov	r0, r8
 80116c0:	4649      	mov	r1, r9
 80116c2:	f7ef fae9 	bl	8000c98 <__aeabi_uldivmod>
 80116c6:	4602      	mov	r2, r0
 80116c8:	460b      	mov	r3, r1
 80116ca:	4613      	mov	r3, r2
 80116cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80116ce:	6a3b      	ldr	r3, [r7, #32]
 80116d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80116d4:	d308      	bcc.n	80116e8 <UART_SetConfig+0x430>
 80116d6:	6a3b      	ldr	r3, [r7, #32]
 80116d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80116dc:	d204      	bcs.n	80116e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	6a3a      	ldr	r2, [r7, #32]
 80116e4:	60da      	str	r2, [r3, #12]
 80116e6:	e0ce      	b.n	8011886 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80116e8:	2301      	movs	r3, #1
 80116ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80116ee:	e0ca      	b.n	8011886 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	69db      	ldr	r3, [r3, #28]
 80116f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80116f8:	d166      	bne.n	80117c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80116fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80116fe:	2b08      	cmp	r3, #8
 8011700:	d827      	bhi.n	8011752 <UART_SetConfig+0x49a>
 8011702:	a201      	add	r2, pc, #4	@ (adr r2, 8011708 <UART_SetConfig+0x450>)
 8011704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011708:	0801172d 	.word	0x0801172d
 801170c:	08011735 	.word	0x08011735
 8011710:	0801173d 	.word	0x0801173d
 8011714:	08011753 	.word	0x08011753
 8011718:	08011743 	.word	0x08011743
 801171c:	08011753 	.word	0x08011753
 8011720:	08011753 	.word	0x08011753
 8011724:	08011753 	.word	0x08011753
 8011728:	0801174b 	.word	0x0801174b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801172c:	f7fd f890 	bl	800e850 <HAL_RCC_GetPCLK1Freq>
 8011730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011732:	e014      	b.n	801175e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011734:	f7fd f8a2 	bl	800e87c <HAL_RCC_GetPCLK2Freq>
 8011738:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801173a:	e010      	b.n	801175e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801173c:	4b4e      	ldr	r3, [pc, #312]	@ (8011878 <UART_SetConfig+0x5c0>)
 801173e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011740:	e00d      	b.n	801175e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011742:	f7fd f817 	bl	800e774 <HAL_RCC_GetSysClockFreq>
 8011746:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011748:	e009      	b.n	801175e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801174a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801174e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011750:	e005      	b.n	801175e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011752:	2300      	movs	r3, #0
 8011754:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011756:	2301      	movs	r3, #1
 8011758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801175c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 8090 	beq.w	8011886 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801176a:	4a44      	ldr	r2, [pc, #272]	@ (801187c <UART_SetConfig+0x5c4>)
 801176c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011770:	461a      	mov	r2, r3
 8011772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011774:	fbb3 f3f2 	udiv	r3, r3, r2
 8011778:	005a      	lsls	r2, r3, #1
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	085b      	lsrs	r3, r3, #1
 8011780:	441a      	add	r2, r3
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	fbb2 f3f3 	udiv	r3, r2, r3
 801178a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801178c:	6a3b      	ldr	r3, [r7, #32]
 801178e:	2b0f      	cmp	r3, #15
 8011790:	d916      	bls.n	80117c0 <UART_SetConfig+0x508>
 8011792:	6a3b      	ldr	r3, [r7, #32]
 8011794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011798:	d212      	bcs.n	80117c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801179a:	6a3b      	ldr	r3, [r7, #32]
 801179c:	b29b      	uxth	r3, r3
 801179e:	f023 030f 	bic.w	r3, r3, #15
 80117a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80117a4:	6a3b      	ldr	r3, [r7, #32]
 80117a6:	085b      	lsrs	r3, r3, #1
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	f003 0307 	and.w	r3, r3, #7
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	8bfb      	ldrh	r3, [r7, #30]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	8bfa      	ldrh	r2, [r7, #30]
 80117bc:	60da      	str	r2, [r3, #12]
 80117be:	e062      	b.n	8011886 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80117c0:	2301      	movs	r3, #1
 80117c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80117c6:	e05e      	b.n	8011886 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80117c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80117cc:	2b08      	cmp	r3, #8
 80117ce:	d828      	bhi.n	8011822 <UART_SetConfig+0x56a>
 80117d0:	a201      	add	r2, pc, #4	@ (adr r2, 80117d8 <UART_SetConfig+0x520>)
 80117d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d6:	bf00      	nop
 80117d8:	080117fd 	.word	0x080117fd
 80117dc:	08011805 	.word	0x08011805
 80117e0:	0801180d 	.word	0x0801180d
 80117e4:	08011823 	.word	0x08011823
 80117e8:	08011813 	.word	0x08011813
 80117ec:	08011823 	.word	0x08011823
 80117f0:	08011823 	.word	0x08011823
 80117f4:	08011823 	.word	0x08011823
 80117f8:	0801181b 	.word	0x0801181b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117fc:	f7fd f828 	bl	800e850 <HAL_RCC_GetPCLK1Freq>
 8011800:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011802:	e014      	b.n	801182e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011804:	f7fd f83a 	bl	800e87c <HAL_RCC_GetPCLK2Freq>
 8011808:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801180a:	e010      	b.n	801182e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801180c:	4b1a      	ldr	r3, [pc, #104]	@ (8011878 <UART_SetConfig+0x5c0>)
 801180e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011810:	e00d      	b.n	801182e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011812:	f7fc ffaf 	bl	800e774 <HAL_RCC_GetSysClockFreq>
 8011816:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011818:	e009      	b.n	801182e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801181a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801181e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011820:	e005      	b.n	801182e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8011822:	2300      	movs	r3, #0
 8011824:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801182c:	bf00      	nop
    }

    if (pclk != 0U)
 801182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011830:	2b00      	cmp	r3, #0
 8011832:	d028      	beq.n	8011886 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011838:	4a10      	ldr	r2, [pc, #64]	@ (801187c <UART_SetConfig+0x5c4>)
 801183a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801183e:	461a      	mov	r2, r3
 8011840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011842:	fbb3 f2f2 	udiv	r2, r3, r2
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	085b      	lsrs	r3, r3, #1
 801184c:	441a      	add	r2, r3
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	fbb2 f3f3 	udiv	r3, r2, r3
 8011856:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	2b0f      	cmp	r3, #15
 801185c:	d910      	bls.n	8011880 <UART_SetConfig+0x5c8>
 801185e:	6a3b      	ldr	r3, [r7, #32]
 8011860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011864:	d20c      	bcs.n	8011880 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011866:	6a3b      	ldr	r3, [r7, #32]
 8011868:	b29a      	uxth	r2, r3
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	60da      	str	r2, [r3, #12]
 8011870:	e009      	b.n	8011886 <UART_SetConfig+0x5ce>
 8011872:	bf00      	nop
 8011874:	40008000 	.word	0x40008000
 8011878:	00f42400 	.word	0x00f42400
 801187c:	08017b8c 	.word	0x08017b8c
      }
      else
      {
        ret = HAL_ERROR;
 8011880:	2301      	movs	r3, #1
 8011882:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	2201      	movs	r2, #1
 801188a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	2201      	movs	r2, #1
 8011892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	2200      	movs	r2, #0
 801189a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	2200      	movs	r2, #0
 80118a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80118a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3730      	adds	r7, #48	@ 0x30
 80118aa:	46bd      	mov	sp, r7
 80118ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080118b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118bc:	f003 0308 	and.w	r3, r3, #8
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d00a      	beq.n	80118da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	430a      	orrs	r2, r1
 80118d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118de:	f003 0301 	and.w	r3, r3, #1
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00a      	beq.n	80118fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	685b      	ldr	r3, [r3, #4]
 80118ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	430a      	orrs	r2, r1
 80118fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011900:	f003 0302 	and.w	r3, r3, #2
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00a      	beq.n	801191e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	430a      	orrs	r2, r1
 801191c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011922:	f003 0304 	and.w	r3, r3, #4
 8011926:	2b00      	cmp	r3, #0
 8011928:	d00a      	beq.n	8011940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	430a      	orrs	r2, r1
 801193e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011944:	f003 0310 	and.w	r3, r3, #16
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00a      	beq.n	8011962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	430a      	orrs	r2, r1
 8011960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011966:	f003 0320 	and.w	r3, r3, #32
 801196a:	2b00      	cmp	r3, #0
 801196c:	d00a      	beq.n	8011984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	689b      	ldr	r3, [r3, #8]
 8011974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	430a      	orrs	r2, r1
 8011982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801198c:	2b00      	cmp	r3, #0
 801198e:	d01a      	beq.n	80119c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	430a      	orrs	r2, r1
 80119a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80119ae:	d10a      	bne.n	80119c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	430a      	orrs	r2, r1
 80119c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	430a      	orrs	r2, r1
 80119e6:	605a      	str	r2, [r3, #4]
  }
}
 80119e8:	bf00      	nop
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr

080119f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b098      	sub	sp, #96	@ 0x60
 80119f8:	af02      	add	r7, sp, #8
 80119fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a04:	f7f9 fab4 	bl	800af70 <HAL_GetTick>
 8011a08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f003 0308 	and.w	r3, r3, #8
 8011a14:	2b08      	cmp	r3, #8
 8011a16:	d12f      	bne.n	8011a78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a20:	2200      	movs	r2, #0
 8011a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f000 f88e 	bl	8011b48 <UART_WaitOnFlagUntilTimeout>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d022      	beq.n	8011a78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a3a:	e853 3f00 	ldrex	r3, [r3]
 8011a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a58:	e841 2300 	strex	r3, r2, [r1]
 8011a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1e6      	bne.n	8011a32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2220      	movs	r2, #32
 8011a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a74:	2303      	movs	r3, #3
 8011a76:	e063      	b.n	8011b40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f003 0304 	and.w	r3, r3, #4
 8011a82:	2b04      	cmp	r3, #4
 8011a84:	d149      	bne.n	8011b1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a8e:	2200      	movs	r2, #0
 8011a90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f857 	bl	8011b48 <UART_WaitOnFlagUntilTimeout>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d03c      	beq.n	8011b1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aa8:	e853 3f00 	ldrex	r3, [r3]
 8011aac:	623b      	str	r3, [r7, #32]
   return(result);
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	461a      	mov	r2, r3
 8011abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ac6:	e841 2300 	strex	r3, r2, [r1]
 8011aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1e6      	bne.n	8011aa0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	e853 3f00 	ldrex	r3, [r3]
 8011ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	f023 0301 	bic.w	r3, r3, #1
 8011ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	3308      	adds	r3, #8
 8011af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011af2:	61fa      	str	r2, [r7, #28]
 8011af4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011af6:	69b9      	ldr	r1, [r7, #24]
 8011af8:	69fa      	ldr	r2, [r7, #28]
 8011afa:	e841 2300 	strex	r3, r2, [r1]
 8011afe:	617b      	str	r3, [r7, #20]
   return(result);
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d1e5      	bne.n	8011ad2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2220      	movs	r2, #32
 8011b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2200      	movs	r2, #0
 8011b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b16:	2303      	movs	r3, #3
 8011b18:	e012      	b.n	8011b40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2220      	movs	r2, #32
 8011b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2220      	movs	r2, #32
 8011b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3758      	adds	r7, #88	@ 0x58
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	603b      	str	r3, [r7, #0]
 8011b54:	4613      	mov	r3, r2
 8011b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b58:	e04f      	b.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b60:	d04b      	beq.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b62:	f7f9 fa05 	bl	800af70 <HAL_GetTick>
 8011b66:	4602      	mov	r2, r0
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	69ba      	ldr	r2, [r7, #24]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d302      	bcc.n	8011b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d101      	bne.n	8011b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011b78:	2303      	movs	r3, #3
 8011b7a:	e04e      	b.n	8011c1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f003 0304 	and.w	r3, r3, #4
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d037      	beq.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2b80      	cmp	r3, #128	@ 0x80
 8011b8e:	d034      	beq.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	2b40      	cmp	r3, #64	@ 0x40
 8011b94:	d031      	beq.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	69db      	ldr	r3, [r3, #28]
 8011b9c:	f003 0308 	and.w	r3, r3, #8
 8011ba0:	2b08      	cmp	r3, #8
 8011ba2:	d110      	bne.n	8011bc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2208      	movs	r2, #8
 8011baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	f000 f838 	bl	8011c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2208      	movs	r2, #8
 8011bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	e029      	b.n	8011c1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	69db      	ldr	r3, [r3, #28]
 8011bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bd4:	d111      	bne.n	8011bfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011be0:	68f8      	ldr	r0, [r7, #12]
 8011be2:	f000 f81e 	bl	8011c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2220      	movs	r2, #32
 8011bea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011bf6:	2303      	movs	r3, #3
 8011bf8:	e00f      	b.n	8011c1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	69da      	ldr	r2, [r3, #28]
 8011c00:	68bb      	ldr	r3, [r7, #8]
 8011c02:	4013      	ands	r3, r2
 8011c04:	68ba      	ldr	r2, [r7, #8]
 8011c06:	429a      	cmp	r2, r3
 8011c08:	bf0c      	ite	eq
 8011c0a:	2301      	moveq	r3, #1
 8011c0c:	2300      	movne	r3, #0
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	461a      	mov	r2, r3
 8011c12:	79fb      	ldrb	r3, [r7, #7]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d0a0      	beq.n	8011b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c18:	2300      	movs	r3, #0
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c22:	b480      	push	{r7}
 8011c24:	b095      	sub	sp, #84	@ 0x54
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c32:	e853 3f00 	ldrex	r3, [r3]
 8011c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	461a      	mov	r2, r3
 8011c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c50:	e841 2300 	strex	r3, r2, [r1]
 8011c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d1e6      	bne.n	8011c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	3308      	adds	r3, #8
 8011c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	e853 3f00 	ldrex	r3, [r3]
 8011c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011c72:	f023 0301 	bic.w	r3, r3, #1
 8011c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	3308      	adds	r3, #8
 8011c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c88:	e841 2300 	strex	r3, r2, [r1]
 8011c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d1e3      	bne.n	8011c5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d118      	bne.n	8011cce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	e853 3f00 	ldrex	r3, [r3]
 8011ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	f023 0310 	bic.w	r3, r3, #16
 8011cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cba:	61bb      	str	r3, [r7, #24]
 8011cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cbe:	6979      	ldr	r1, [r7, #20]
 8011cc0:	69ba      	ldr	r2, [r7, #24]
 8011cc2:	e841 2300 	strex	r3, r2, [r1]
 8011cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1e6      	bne.n	8011c9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2220      	movs	r2, #32
 8011cd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2200      	movs	r2, #0
 8011cda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011ce2:	bf00      	nop
 8011ce4:	3754      	adds	r7, #84	@ 0x54
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr

08011cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011cee:	b480      	push	{r7}
 8011cf0:	b085      	sub	sp, #20
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d101      	bne.n	8011d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8011d00:	2302      	movs	r3, #2
 8011d02:	e027      	b.n	8011d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2201      	movs	r2, #1
 8011d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2224      	movs	r2, #36	@ 0x24
 8011d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f022 0201 	bic.w	r2, r2, #1
 8011d2a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2200      	movs	r2, #0
 8011d38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	68fa      	ldr	r2, [r7, #12]
 8011d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2220      	movs	r2, #32
 8011d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011d52:	2300      	movs	r3, #0
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3714      	adds	r7, #20
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d101      	bne.n	8011d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d74:	2302      	movs	r3, #2
 8011d76:	e02d      	b.n	8011dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2224      	movs	r2, #36	@ 0x24
 8011d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f022 0201 	bic.w	r2, r2, #1
 8011d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	683a      	ldr	r2, [r7, #0]
 8011db0:	430a      	orrs	r2, r1
 8011db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 f84f 	bl	8011e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	68fa      	ldr	r2, [r7, #12]
 8011dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2220      	movs	r2, #32
 8011dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011dd2:	2300      	movs	r3, #0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3710      	adds	r7, #16
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d101      	bne.n	8011df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011df0:	2302      	movs	r3, #2
 8011df2:	e02d      	b.n	8011e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2224      	movs	r2, #36	@ 0x24
 8011e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	681a      	ldr	r2, [r3, #0]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f022 0201 	bic.w	r2, r2, #1
 8011e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	689b      	ldr	r3, [r3, #8]
 8011e22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	430a      	orrs	r2, r1
 8011e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 f811 	bl	8011e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	68fa      	ldr	r2, [r7, #12]
 8011e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2220      	movs	r2, #32
 8011e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011e4e:	2300      	movs	r3, #0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3710      	adds	r7, #16
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d108      	bne.n	8011e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2201      	movs	r2, #1
 8011e74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e78:	e031      	b.n	8011ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e7a:	2308      	movs	r3, #8
 8011e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e7e:	2308      	movs	r3, #8
 8011e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	689b      	ldr	r3, [r3, #8]
 8011e88:	0e5b      	lsrs	r3, r3, #25
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	f003 0307 	and.w	r3, r3, #7
 8011e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	0f5b      	lsrs	r3, r3, #29
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	f003 0307 	and.w	r3, r3, #7
 8011ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ea2:	7bbb      	ldrb	r3, [r7, #14]
 8011ea4:	7b3a      	ldrb	r2, [r7, #12]
 8011ea6:	4911      	ldr	r1, [pc, #68]	@ (8011eec <UARTEx_SetNbDataToProcess+0x94>)
 8011ea8:	5c8a      	ldrb	r2, [r1, r2]
 8011eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011eae:	7b3a      	ldrb	r2, [r7, #12]
 8011eb0:	490f      	ldr	r1, [pc, #60]	@ (8011ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8011eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ec0:	7bfb      	ldrb	r3, [r7, #15]
 8011ec2:	7b7a      	ldrb	r2, [r7, #13]
 8011ec4:	4909      	ldr	r1, [pc, #36]	@ (8011eec <UARTEx_SetNbDataToProcess+0x94>)
 8011ec6:	5c8a      	ldrb	r2, [r1, r2]
 8011ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ecc:	7b7a      	ldrb	r2, [r7, #13]
 8011ece:	4908      	ldr	r1, [pc, #32]	@ (8011ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8011ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011ede:	bf00      	nop
 8011ee0:	3714      	adds	r7, #20
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr
 8011eea:	bf00      	nop
 8011eec:	08017ba4 	.word	0x08017ba4
 8011ef0:	08017bac 	.word	0x08017bac

08011ef4 <calloc>:
 8011ef4:	4b02      	ldr	r3, [pc, #8]	@ (8011f00 <calloc+0xc>)
 8011ef6:	460a      	mov	r2, r1
 8011ef8:	4601      	mov	r1, r0
 8011efa:	6818      	ldr	r0, [r3, #0]
 8011efc:	f000 b802 	b.w	8011f04 <_calloc_r>
 8011f00:	200001d4 	.word	0x200001d4

08011f04 <_calloc_r>:
 8011f04:	b570      	push	{r4, r5, r6, lr}
 8011f06:	fba1 5402 	umull	r5, r4, r1, r2
 8011f0a:	b934      	cbnz	r4, 8011f1a <_calloc_r+0x16>
 8011f0c:	4629      	mov	r1, r5
 8011f0e:	f000 fb1b 	bl	8012548 <_malloc_r>
 8011f12:	4606      	mov	r6, r0
 8011f14:	b928      	cbnz	r0, 8011f22 <_calloc_r+0x1e>
 8011f16:	4630      	mov	r0, r6
 8011f18:	bd70      	pop	{r4, r5, r6, pc}
 8011f1a:	220c      	movs	r2, #12
 8011f1c:	6002      	str	r2, [r0, #0]
 8011f1e:	2600      	movs	r6, #0
 8011f20:	e7f9      	b.n	8011f16 <_calloc_r+0x12>
 8011f22:	462a      	mov	r2, r5
 8011f24:	4621      	mov	r1, r4
 8011f26:	f001 ff17 	bl	8013d58 <memset>
 8011f2a:	e7f4      	b.n	8011f16 <_calloc_r+0x12>

08011f2c <exit>:
 8011f2c:	b508      	push	{r3, lr}
 8011f2e:	4b06      	ldr	r3, [pc, #24]	@ (8011f48 <exit+0x1c>)
 8011f30:	4604      	mov	r4, r0
 8011f32:	b113      	cbz	r3, 8011f3a <exit+0xe>
 8011f34:	2100      	movs	r1, #0
 8011f36:	f3af 8000 	nop.w
 8011f3a:	4b04      	ldr	r3, [pc, #16]	@ (8011f4c <exit+0x20>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	b103      	cbz	r3, 8011f42 <exit+0x16>
 8011f40:	4798      	blx	r3
 8011f42:	4620      	mov	r0, r4
 8011f44:	f7f8 fec6 	bl	800acd4 <_exit>
 8011f48:	00000000 	.word	0x00000000
 8011f4c:	200024b4 	.word	0x200024b4

08011f50 <__cvt>:
 8011f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f54:	ec57 6b10 	vmov	r6, r7, d0
 8011f58:	2f00      	cmp	r7, #0
 8011f5a:	460c      	mov	r4, r1
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	463b      	mov	r3, r7
 8011f60:	bfbb      	ittet	lt
 8011f62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011f66:	461f      	movlt	r7, r3
 8011f68:	2300      	movge	r3, #0
 8011f6a:	232d      	movlt	r3, #45	@ 0x2d
 8011f6c:	700b      	strb	r3, [r1, #0]
 8011f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011f74:	4691      	mov	r9, r2
 8011f76:	f023 0820 	bic.w	r8, r3, #32
 8011f7a:	bfbc      	itt	lt
 8011f7c:	4632      	movlt	r2, r6
 8011f7e:	4616      	movlt	r6, r2
 8011f80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011f84:	d005      	beq.n	8011f92 <__cvt+0x42>
 8011f86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011f8a:	d100      	bne.n	8011f8e <__cvt+0x3e>
 8011f8c:	3401      	adds	r4, #1
 8011f8e:	2102      	movs	r1, #2
 8011f90:	e000      	b.n	8011f94 <__cvt+0x44>
 8011f92:	2103      	movs	r1, #3
 8011f94:	ab03      	add	r3, sp, #12
 8011f96:	9301      	str	r3, [sp, #4]
 8011f98:	ab02      	add	r3, sp, #8
 8011f9a:	9300      	str	r3, [sp, #0]
 8011f9c:	ec47 6b10 	vmov	d0, r6, r7
 8011fa0:	4653      	mov	r3, sl
 8011fa2:	4622      	mov	r2, r4
 8011fa4:	f001 ffdc 	bl	8013f60 <_dtoa_r>
 8011fa8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011fac:	4605      	mov	r5, r0
 8011fae:	d119      	bne.n	8011fe4 <__cvt+0x94>
 8011fb0:	f019 0f01 	tst.w	r9, #1
 8011fb4:	d00e      	beq.n	8011fd4 <__cvt+0x84>
 8011fb6:	eb00 0904 	add.w	r9, r0, r4
 8011fba:	2200      	movs	r2, #0
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	4630      	mov	r0, r6
 8011fc0:	4639      	mov	r1, r7
 8011fc2:	f7ee fd89 	bl	8000ad8 <__aeabi_dcmpeq>
 8011fc6:	b108      	cbz	r0, 8011fcc <__cvt+0x7c>
 8011fc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8011fcc:	2230      	movs	r2, #48	@ 0x30
 8011fce:	9b03      	ldr	r3, [sp, #12]
 8011fd0:	454b      	cmp	r3, r9
 8011fd2:	d31e      	bcc.n	8012012 <__cvt+0xc2>
 8011fd4:	9b03      	ldr	r3, [sp, #12]
 8011fd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011fd8:	1b5b      	subs	r3, r3, r5
 8011fda:	4628      	mov	r0, r5
 8011fdc:	6013      	str	r3, [r2, #0]
 8011fde:	b004      	add	sp, #16
 8011fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fe4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011fe8:	eb00 0904 	add.w	r9, r0, r4
 8011fec:	d1e5      	bne.n	8011fba <__cvt+0x6a>
 8011fee:	7803      	ldrb	r3, [r0, #0]
 8011ff0:	2b30      	cmp	r3, #48	@ 0x30
 8011ff2:	d10a      	bne.n	801200a <__cvt+0xba>
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	4639      	mov	r1, r7
 8011ffc:	f7ee fd6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8012000:	b918      	cbnz	r0, 801200a <__cvt+0xba>
 8012002:	f1c4 0401 	rsb	r4, r4, #1
 8012006:	f8ca 4000 	str.w	r4, [sl]
 801200a:	f8da 3000 	ldr.w	r3, [sl]
 801200e:	4499      	add	r9, r3
 8012010:	e7d3      	b.n	8011fba <__cvt+0x6a>
 8012012:	1c59      	adds	r1, r3, #1
 8012014:	9103      	str	r1, [sp, #12]
 8012016:	701a      	strb	r2, [r3, #0]
 8012018:	e7d9      	b.n	8011fce <__cvt+0x7e>

0801201a <__exponent>:
 801201a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801201c:	2900      	cmp	r1, #0
 801201e:	bfba      	itte	lt
 8012020:	4249      	neglt	r1, r1
 8012022:	232d      	movlt	r3, #45	@ 0x2d
 8012024:	232b      	movge	r3, #43	@ 0x2b
 8012026:	2909      	cmp	r1, #9
 8012028:	7002      	strb	r2, [r0, #0]
 801202a:	7043      	strb	r3, [r0, #1]
 801202c:	dd29      	ble.n	8012082 <__exponent+0x68>
 801202e:	f10d 0307 	add.w	r3, sp, #7
 8012032:	461d      	mov	r5, r3
 8012034:	270a      	movs	r7, #10
 8012036:	461a      	mov	r2, r3
 8012038:	fbb1 f6f7 	udiv	r6, r1, r7
 801203c:	fb07 1416 	mls	r4, r7, r6, r1
 8012040:	3430      	adds	r4, #48	@ 0x30
 8012042:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012046:	460c      	mov	r4, r1
 8012048:	2c63      	cmp	r4, #99	@ 0x63
 801204a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801204e:	4631      	mov	r1, r6
 8012050:	dcf1      	bgt.n	8012036 <__exponent+0x1c>
 8012052:	3130      	adds	r1, #48	@ 0x30
 8012054:	1e94      	subs	r4, r2, #2
 8012056:	f803 1c01 	strb.w	r1, [r3, #-1]
 801205a:	1c41      	adds	r1, r0, #1
 801205c:	4623      	mov	r3, r4
 801205e:	42ab      	cmp	r3, r5
 8012060:	d30a      	bcc.n	8012078 <__exponent+0x5e>
 8012062:	f10d 0309 	add.w	r3, sp, #9
 8012066:	1a9b      	subs	r3, r3, r2
 8012068:	42ac      	cmp	r4, r5
 801206a:	bf88      	it	hi
 801206c:	2300      	movhi	r3, #0
 801206e:	3302      	adds	r3, #2
 8012070:	4403      	add	r3, r0
 8012072:	1a18      	subs	r0, r3, r0
 8012074:	b003      	add	sp, #12
 8012076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012078:	f813 6b01 	ldrb.w	r6, [r3], #1
 801207c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012080:	e7ed      	b.n	801205e <__exponent+0x44>
 8012082:	2330      	movs	r3, #48	@ 0x30
 8012084:	3130      	adds	r1, #48	@ 0x30
 8012086:	7083      	strb	r3, [r0, #2]
 8012088:	70c1      	strb	r1, [r0, #3]
 801208a:	1d03      	adds	r3, r0, #4
 801208c:	e7f1      	b.n	8012072 <__exponent+0x58>
	...

08012090 <_printf_float>:
 8012090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012094:	b08d      	sub	sp, #52	@ 0x34
 8012096:	460c      	mov	r4, r1
 8012098:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801209c:	4616      	mov	r6, r2
 801209e:	461f      	mov	r7, r3
 80120a0:	4605      	mov	r5, r0
 80120a2:	f001 feb1 	bl	8013e08 <_localeconv_r>
 80120a6:	6803      	ldr	r3, [r0, #0]
 80120a8:	9304      	str	r3, [sp, #16]
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7ee f8e8 	bl	8000280 <strlen>
 80120b0:	2300      	movs	r3, #0
 80120b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80120b4:	f8d8 3000 	ldr.w	r3, [r8]
 80120b8:	9005      	str	r0, [sp, #20]
 80120ba:	3307      	adds	r3, #7
 80120bc:	f023 0307 	bic.w	r3, r3, #7
 80120c0:	f103 0208 	add.w	r2, r3, #8
 80120c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80120c8:	f8d4 b000 	ldr.w	fp, [r4]
 80120cc:	f8c8 2000 	str.w	r2, [r8]
 80120d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80120d8:	9307      	str	r3, [sp, #28]
 80120da:	f8cd 8018 	str.w	r8, [sp, #24]
 80120de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80120e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120e6:	4b9c      	ldr	r3, [pc, #624]	@ (8012358 <_printf_float+0x2c8>)
 80120e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80120ec:	f7ee fd26 	bl	8000b3c <__aeabi_dcmpun>
 80120f0:	bb70      	cbnz	r0, 8012150 <_printf_float+0xc0>
 80120f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120f6:	4b98      	ldr	r3, [pc, #608]	@ (8012358 <_printf_float+0x2c8>)
 80120f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80120fc:	f7ee fd00 	bl	8000b00 <__aeabi_dcmple>
 8012100:	bb30      	cbnz	r0, 8012150 <_printf_float+0xc0>
 8012102:	2200      	movs	r2, #0
 8012104:	2300      	movs	r3, #0
 8012106:	4640      	mov	r0, r8
 8012108:	4649      	mov	r1, r9
 801210a:	f7ee fcef 	bl	8000aec <__aeabi_dcmplt>
 801210e:	b110      	cbz	r0, 8012116 <_printf_float+0x86>
 8012110:	232d      	movs	r3, #45	@ 0x2d
 8012112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012116:	4a91      	ldr	r2, [pc, #580]	@ (801235c <_printf_float+0x2cc>)
 8012118:	4b91      	ldr	r3, [pc, #580]	@ (8012360 <_printf_float+0x2d0>)
 801211a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801211e:	bf8c      	ite	hi
 8012120:	4690      	movhi	r8, r2
 8012122:	4698      	movls	r8, r3
 8012124:	2303      	movs	r3, #3
 8012126:	6123      	str	r3, [r4, #16]
 8012128:	f02b 0304 	bic.w	r3, fp, #4
 801212c:	6023      	str	r3, [r4, #0]
 801212e:	f04f 0900 	mov.w	r9, #0
 8012132:	9700      	str	r7, [sp, #0]
 8012134:	4633      	mov	r3, r6
 8012136:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012138:	4621      	mov	r1, r4
 801213a:	4628      	mov	r0, r5
 801213c:	f000 fa84 	bl	8012648 <_printf_common>
 8012140:	3001      	adds	r0, #1
 8012142:	f040 808d 	bne.w	8012260 <_printf_float+0x1d0>
 8012146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801214a:	b00d      	add	sp, #52	@ 0x34
 801214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012150:	4642      	mov	r2, r8
 8012152:	464b      	mov	r3, r9
 8012154:	4640      	mov	r0, r8
 8012156:	4649      	mov	r1, r9
 8012158:	f7ee fcf0 	bl	8000b3c <__aeabi_dcmpun>
 801215c:	b140      	cbz	r0, 8012170 <_printf_float+0xe0>
 801215e:	464b      	mov	r3, r9
 8012160:	2b00      	cmp	r3, #0
 8012162:	bfbc      	itt	lt
 8012164:	232d      	movlt	r3, #45	@ 0x2d
 8012166:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801216a:	4a7e      	ldr	r2, [pc, #504]	@ (8012364 <_printf_float+0x2d4>)
 801216c:	4b7e      	ldr	r3, [pc, #504]	@ (8012368 <_printf_float+0x2d8>)
 801216e:	e7d4      	b.n	801211a <_printf_float+0x8a>
 8012170:	6863      	ldr	r3, [r4, #4]
 8012172:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012176:	9206      	str	r2, [sp, #24]
 8012178:	1c5a      	adds	r2, r3, #1
 801217a:	d13b      	bne.n	80121f4 <_printf_float+0x164>
 801217c:	2306      	movs	r3, #6
 801217e:	6063      	str	r3, [r4, #4]
 8012180:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012184:	2300      	movs	r3, #0
 8012186:	6022      	str	r2, [r4, #0]
 8012188:	9303      	str	r3, [sp, #12]
 801218a:	ab0a      	add	r3, sp, #40	@ 0x28
 801218c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012190:	ab09      	add	r3, sp, #36	@ 0x24
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	6861      	ldr	r1, [r4, #4]
 8012196:	ec49 8b10 	vmov	d0, r8, r9
 801219a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801219e:	4628      	mov	r0, r5
 80121a0:	f7ff fed6 	bl	8011f50 <__cvt>
 80121a4:	9b06      	ldr	r3, [sp, #24]
 80121a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80121a8:	2b47      	cmp	r3, #71	@ 0x47
 80121aa:	4680      	mov	r8, r0
 80121ac:	d129      	bne.n	8012202 <_printf_float+0x172>
 80121ae:	1cc8      	adds	r0, r1, #3
 80121b0:	db02      	blt.n	80121b8 <_printf_float+0x128>
 80121b2:	6863      	ldr	r3, [r4, #4]
 80121b4:	4299      	cmp	r1, r3
 80121b6:	dd41      	ble.n	801223c <_printf_float+0x1ac>
 80121b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80121bc:	fa5f fa8a 	uxtb.w	sl, sl
 80121c0:	3901      	subs	r1, #1
 80121c2:	4652      	mov	r2, sl
 80121c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80121c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80121ca:	f7ff ff26 	bl	801201a <__exponent>
 80121ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121d0:	1813      	adds	r3, r2, r0
 80121d2:	2a01      	cmp	r2, #1
 80121d4:	4681      	mov	r9, r0
 80121d6:	6123      	str	r3, [r4, #16]
 80121d8:	dc02      	bgt.n	80121e0 <_printf_float+0x150>
 80121da:	6822      	ldr	r2, [r4, #0]
 80121dc:	07d2      	lsls	r2, r2, #31
 80121de:	d501      	bpl.n	80121e4 <_printf_float+0x154>
 80121e0:	3301      	adds	r3, #1
 80121e2:	6123      	str	r3, [r4, #16]
 80121e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d0a2      	beq.n	8012132 <_printf_float+0xa2>
 80121ec:	232d      	movs	r3, #45	@ 0x2d
 80121ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121f2:	e79e      	b.n	8012132 <_printf_float+0xa2>
 80121f4:	9a06      	ldr	r2, [sp, #24]
 80121f6:	2a47      	cmp	r2, #71	@ 0x47
 80121f8:	d1c2      	bne.n	8012180 <_printf_float+0xf0>
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d1c0      	bne.n	8012180 <_printf_float+0xf0>
 80121fe:	2301      	movs	r3, #1
 8012200:	e7bd      	b.n	801217e <_printf_float+0xee>
 8012202:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012206:	d9db      	bls.n	80121c0 <_printf_float+0x130>
 8012208:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801220c:	d118      	bne.n	8012240 <_printf_float+0x1b0>
 801220e:	2900      	cmp	r1, #0
 8012210:	6863      	ldr	r3, [r4, #4]
 8012212:	dd0b      	ble.n	801222c <_printf_float+0x19c>
 8012214:	6121      	str	r1, [r4, #16]
 8012216:	b913      	cbnz	r3, 801221e <_printf_float+0x18e>
 8012218:	6822      	ldr	r2, [r4, #0]
 801221a:	07d0      	lsls	r0, r2, #31
 801221c:	d502      	bpl.n	8012224 <_printf_float+0x194>
 801221e:	3301      	adds	r3, #1
 8012220:	440b      	add	r3, r1
 8012222:	6123      	str	r3, [r4, #16]
 8012224:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012226:	f04f 0900 	mov.w	r9, #0
 801222a:	e7db      	b.n	80121e4 <_printf_float+0x154>
 801222c:	b913      	cbnz	r3, 8012234 <_printf_float+0x1a4>
 801222e:	6822      	ldr	r2, [r4, #0]
 8012230:	07d2      	lsls	r2, r2, #31
 8012232:	d501      	bpl.n	8012238 <_printf_float+0x1a8>
 8012234:	3302      	adds	r3, #2
 8012236:	e7f4      	b.n	8012222 <_printf_float+0x192>
 8012238:	2301      	movs	r3, #1
 801223a:	e7f2      	b.n	8012222 <_printf_float+0x192>
 801223c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012242:	4299      	cmp	r1, r3
 8012244:	db05      	blt.n	8012252 <_printf_float+0x1c2>
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	6121      	str	r1, [r4, #16]
 801224a:	07d8      	lsls	r0, r3, #31
 801224c:	d5ea      	bpl.n	8012224 <_printf_float+0x194>
 801224e:	1c4b      	adds	r3, r1, #1
 8012250:	e7e7      	b.n	8012222 <_printf_float+0x192>
 8012252:	2900      	cmp	r1, #0
 8012254:	bfd4      	ite	le
 8012256:	f1c1 0202 	rsble	r2, r1, #2
 801225a:	2201      	movgt	r2, #1
 801225c:	4413      	add	r3, r2
 801225e:	e7e0      	b.n	8012222 <_printf_float+0x192>
 8012260:	6823      	ldr	r3, [r4, #0]
 8012262:	055a      	lsls	r2, r3, #21
 8012264:	d407      	bmi.n	8012276 <_printf_float+0x1e6>
 8012266:	6923      	ldr	r3, [r4, #16]
 8012268:	4642      	mov	r2, r8
 801226a:	4631      	mov	r1, r6
 801226c:	4628      	mov	r0, r5
 801226e:	47b8      	blx	r7
 8012270:	3001      	adds	r0, #1
 8012272:	d12b      	bne.n	80122cc <_printf_float+0x23c>
 8012274:	e767      	b.n	8012146 <_printf_float+0xb6>
 8012276:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801227a:	f240 80dd 	bls.w	8012438 <_printf_float+0x3a8>
 801227e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012282:	2200      	movs	r2, #0
 8012284:	2300      	movs	r3, #0
 8012286:	f7ee fc27 	bl	8000ad8 <__aeabi_dcmpeq>
 801228a:	2800      	cmp	r0, #0
 801228c:	d033      	beq.n	80122f6 <_printf_float+0x266>
 801228e:	4a37      	ldr	r2, [pc, #220]	@ (801236c <_printf_float+0x2dc>)
 8012290:	2301      	movs	r3, #1
 8012292:	4631      	mov	r1, r6
 8012294:	4628      	mov	r0, r5
 8012296:	47b8      	blx	r7
 8012298:	3001      	adds	r0, #1
 801229a:	f43f af54 	beq.w	8012146 <_printf_float+0xb6>
 801229e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80122a2:	4543      	cmp	r3, r8
 80122a4:	db02      	blt.n	80122ac <_printf_float+0x21c>
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	07d8      	lsls	r0, r3, #31
 80122aa:	d50f      	bpl.n	80122cc <_printf_float+0x23c>
 80122ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122b0:	4631      	mov	r1, r6
 80122b2:	4628      	mov	r0, r5
 80122b4:	47b8      	blx	r7
 80122b6:	3001      	adds	r0, #1
 80122b8:	f43f af45 	beq.w	8012146 <_printf_float+0xb6>
 80122bc:	f04f 0900 	mov.w	r9, #0
 80122c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80122c4:	f104 0a1a 	add.w	sl, r4, #26
 80122c8:	45c8      	cmp	r8, r9
 80122ca:	dc09      	bgt.n	80122e0 <_printf_float+0x250>
 80122cc:	6823      	ldr	r3, [r4, #0]
 80122ce:	079b      	lsls	r3, r3, #30
 80122d0:	f100 8103 	bmi.w	80124da <_printf_float+0x44a>
 80122d4:	68e0      	ldr	r0, [r4, #12]
 80122d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122d8:	4298      	cmp	r0, r3
 80122da:	bfb8      	it	lt
 80122dc:	4618      	movlt	r0, r3
 80122de:	e734      	b.n	801214a <_printf_float+0xba>
 80122e0:	2301      	movs	r3, #1
 80122e2:	4652      	mov	r2, sl
 80122e4:	4631      	mov	r1, r6
 80122e6:	4628      	mov	r0, r5
 80122e8:	47b8      	blx	r7
 80122ea:	3001      	adds	r0, #1
 80122ec:	f43f af2b 	beq.w	8012146 <_printf_float+0xb6>
 80122f0:	f109 0901 	add.w	r9, r9, #1
 80122f4:	e7e8      	b.n	80122c8 <_printf_float+0x238>
 80122f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	dc39      	bgt.n	8012370 <_printf_float+0x2e0>
 80122fc:	4a1b      	ldr	r2, [pc, #108]	@ (801236c <_printf_float+0x2dc>)
 80122fe:	2301      	movs	r3, #1
 8012300:	4631      	mov	r1, r6
 8012302:	4628      	mov	r0, r5
 8012304:	47b8      	blx	r7
 8012306:	3001      	adds	r0, #1
 8012308:	f43f af1d 	beq.w	8012146 <_printf_float+0xb6>
 801230c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012310:	ea59 0303 	orrs.w	r3, r9, r3
 8012314:	d102      	bne.n	801231c <_printf_float+0x28c>
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	07d9      	lsls	r1, r3, #31
 801231a:	d5d7      	bpl.n	80122cc <_printf_float+0x23c>
 801231c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012320:	4631      	mov	r1, r6
 8012322:	4628      	mov	r0, r5
 8012324:	47b8      	blx	r7
 8012326:	3001      	adds	r0, #1
 8012328:	f43f af0d 	beq.w	8012146 <_printf_float+0xb6>
 801232c:	f04f 0a00 	mov.w	sl, #0
 8012330:	f104 0b1a 	add.w	fp, r4, #26
 8012334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012336:	425b      	negs	r3, r3
 8012338:	4553      	cmp	r3, sl
 801233a:	dc01      	bgt.n	8012340 <_printf_float+0x2b0>
 801233c:	464b      	mov	r3, r9
 801233e:	e793      	b.n	8012268 <_printf_float+0x1d8>
 8012340:	2301      	movs	r3, #1
 8012342:	465a      	mov	r2, fp
 8012344:	4631      	mov	r1, r6
 8012346:	4628      	mov	r0, r5
 8012348:	47b8      	blx	r7
 801234a:	3001      	adds	r0, #1
 801234c:	f43f aefb 	beq.w	8012146 <_printf_float+0xb6>
 8012350:	f10a 0a01 	add.w	sl, sl, #1
 8012354:	e7ee      	b.n	8012334 <_printf_float+0x2a4>
 8012356:	bf00      	nop
 8012358:	7fefffff 	.word	0x7fefffff
 801235c:	08017bb8 	.word	0x08017bb8
 8012360:	08017bb4 	.word	0x08017bb4
 8012364:	08017bc0 	.word	0x08017bc0
 8012368:	08017bbc 	.word	0x08017bbc
 801236c:	08017bc4 	.word	0x08017bc4
 8012370:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012372:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012376:	4553      	cmp	r3, sl
 8012378:	bfa8      	it	ge
 801237a:	4653      	movge	r3, sl
 801237c:	2b00      	cmp	r3, #0
 801237e:	4699      	mov	r9, r3
 8012380:	dc36      	bgt.n	80123f0 <_printf_float+0x360>
 8012382:	f04f 0b00 	mov.w	fp, #0
 8012386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801238a:	f104 021a 	add.w	r2, r4, #26
 801238e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012390:	9306      	str	r3, [sp, #24]
 8012392:	eba3 0309 	sub.w	r3, r3, r9
 8012396:	455b      	cmp	r3, fp
 8012398:	dc31      	bgt.n	80123fe <_printf_float+0x36e>
 801239a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801239c:	459a      	cmp	sl, r3
 801239e:	dc3a      	bgt.n	8012416 <_printf_float+0x386>
 80123a0:	6823      	ldr	r3, [r4, #0]
 80123a2:	07da      	lsls	r2, r3, #31
 80123a4:	d437      	bmi.n	8012416 <_printf_float+0x386>
 80123a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123a8:	ebaa 0903 	sub.w	r9, sl, r3
 80123ac:	9b06      	ldr	r3, [sp, #24]
 80123ae:	ebaa 0303 	sub.w	r3, sl, r3
 80123b2:	4599      	cmp	r9, r3
 80123b4:	bfa8      	it	ge
 80123b6:	4699      	movge	r9, r3
 80123b8:	f1b9 0f00 	cmp.w	r9, #0
 80123bc:	dc33      	bgt.n	8012426 <_printf_float+0x396>
 80123be:	f04f 0800 	mov.w	r8, #0
 80123c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123c6:	f104 0b1a 	add.w	fp, r4, #26
 80123ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123cc:	ebaa 0303 	sub.w	r3, sl, r3
 80123d0:	eba3 0309 	sub.w	r3, r3, r9
 80123d4:	4543      	cmp	r3, r8
 80123d6:	f77f af79 	ble.w	80122cc <_printf_float+0x23c>
 80123da:	2301      	movs	r3, #1
 80123dc:	465a      	mov	r2, fp
 80123de:	4631      	mov	r1, r6
 80123e0:	4628      	mov	r0, r5
 80123e2:	47b8      	blx	r7
 80123e4:	3001      	adds	r0, #1
 80123e6:	f43f aeae 	beq.w	8012146 <_printf_float+0xb6>
 80123ea:	f108 0801 	add.w	r8, r8, #1
 80123ee:	e7ec      	b.n	80123ca <_printf_float+0x33a>
 80123f0:	4642      	mov	r2, r8
 80123f2:	4631      	mov	r1, r6
 80123f4:	4628      	mov	r0, r5
 80123f6:	47b8      	blx	r7
 80123f8:	3001      	adds	r0, #1
 80123fa:	d1c2      	bne.n	8012382 <_printf_float+0x2f2>
 80123fc:	e6a3      	b.n	8012146 <_printf_float+0xb6>
 80123fe:	2301      	movs	r3, #1
 8012400:	4631      	mov	r1, r6
 8012402:	4628      	mov	r0, r5
 8012404:	9206      	str	r2, [sp, #24]
 8012406:	47b8      	blx	r7
 8012408:	3001      	adds	r0, #1
 801240a:	f43f ae9c 	beq.w	8012146 <_printf_float+0xb6>
 801240e:	9a06      	ldr	r2, [sp, #24]
 8012410:	f10b 0b01 	add.w	fp, fp, #1
 8012414:	e7bb      	b.n	801238e <_printf_float+0x2fe>
 8012416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801241a:	4631      	mov	r1, r6
 801241c:	4628      	mov	r0, r5
 801241e:	47b8      	blx	r7
 8012420:	3001      	adds	r0, #1
 8012422:	d1c0      	bne.n	80123a6 <_printf_float+0x316>
 8012424:	e68f      	b.n	8012146 <_printf_float+0xb6>
 8012426:	9a06      	ldr	r2, [sp, #24]
 8012428:	464b      	mov	r3, r9
 801242a:	4442      	add	r2, r8
 801242c:	4631      	mov	r1, r6
 801242e:	4628      	mov	r0, r5
 8012430:	47b8      	blx	r7
 8012432:	3001      	adds	r0, #1
 8012434:	d1c3      	bne.n	80123be <_printf_float+0x32e>
 8012436:	e686      	b.n	8012146 <_printf_float+0xb6>
 8012438:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801243c:	f1ba 0f01 	cmp.w	sl, #1
 8012440:	dc01      	bgt.n	8012446 <_printf_float+0x3b6>
 8012442:	07db      	lsls	r3, r3, #31
 8012444:	d536      	bpl.n	80124b4 <_printf_float+0x424>
 8012446:	2301      	movs	r3, #1
 8012448:	4642      	mov	r2, r8
 801244a:	4631      	mov	r1, r6
 801244c:	4628      	mov	r0, r5
 801244e:	47b8      	blx	r7
 8012450:	3001      	adds	r0, #1
 8012452:	f43f ae78 	beq.w	8012146 <_printf_float+0xb6>
 8012456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801245a:	4631      	mov	r1, r6
 801245c:	4628      	mov	r0, r5
 801245e:	47b8      	blx	r7
 8012460:	3001      	adds	r0, #1
 8012462:	f43f ae70 	beq.w	8012146 <_printf_float+0xb6>
 8012466:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801246a:	2200      	movs	r2, #0
 801246c:	2300      	movs	r3, #0
 801246e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012472:	f7ee fb31 	bl	8000ad8 <__aeabi_dcmpeq>
 8012476:	b9c0      	cbnz	r0, 80124aa <_printf_float+0x41a>
 8012478:	4653      	mov	r3, sl
 801247a:	f108 0201 	add.w	r2, r8, #1
 801247e:	4631      	mov	r1, r6
 8012480:	4628      	mov	r0, r5
 8012482:	47b8      	blx	r7
 8012484:	3001      	adds	r0, #1
 8012486:	d10c      	bne.n	80124a2 <_printf_float+0x412>
 8012488:	e65d      	b.n	8012146 <_printf_float+0xb6>
 801248a:	2301      	movs	r3, #1
 801248c:	465a      	mov	r2, fp
 801248e:	4631      	mov	r1, r6
 8012490:	4628      	mov	r0, r5
 8012492:	47b8      	blx	r7
 8012494:	3001      	adds	r0, #1
 8012496:	f43f ae56 	beq.w	8012146 <_printf_float+0xb6>
 801249a:	f108 0801 	add.w	r8, r8, #1
 801249e:	45d0      	cmp	r8, sl
 80124a0:	dbf3      	blt.n	801248a <_printf_float+0x3fa>
 80124a2:	464b      	mov	r3, r9
 80124a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80124a8:	e6df      	b.n	801226a <_printf_float+0x1da>
 80124aa:	f04f 0800 	mov.w	r8, #0
 80124ae:	f104 0b1a 	add.w	fp, r4, #26
 80124b2:	e7f4      	b.n	801249e <_printf_float+0x40e>
 80124b4:	2301      	movs	r3, #1
 80124b6:	4642      	mov	r2, r8
 80124b8:	e7e1      	b.n	801247e <_printf_float+0x3ee>
 80124ba:	2301      	movs	r3, #1
 80124bc:	464a      	mov	r2, r9
 80124be:	4631      	mov	r1, r6
 80124c0:	4628      	mov	r0, r5
 80124c2:	47b8      	blx	r7
 80124c4:	3001      	adds	r0, #1
 80124c6:	f43f ae3e 	beq.w	8012146 <_printf_float+0xb6>
 80124ca:	f108 0801 	add.w	r8, r8, #1
 80124ce:	68e3      	ldr	r3, [r4, #12]
 80124d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80124d2:	1a5b      	subs	r3, r3, r1
 80124d4:	4543      	cmp	r3, r8
 80124d6:	dcf0      	bgt.n	80124ba <_printf_float+0x42a>
 80124d8:	e6fc      	b.n	80122d4 <_printf_float+0x244>
 80124da:	f04f 0800 	mov.w	r8, #0
 80124de:	f104 0919 	add.w	r9, r4, #25
 80124e2:	e7f4      	b.n	80124ce <_printf_float+0x43e>

080124e4 <malloc>:
 80124e4:	4b02      	ldr	r3, [pc, #8]	@ (80124f0 <malloc+0xc>)
 80124e6:	4601      	mov	r1, r0
 80124e8:	6818      	ldr	r0, [r3, #0]
 80124ea:	f000 b82d 	b.w	8012548 <_malloc_r>
 80124ee:	bf00      	nop
 80124f0:	200001d4 	.word	0x200001d4

080124f4 <free>:
 80124f4:	4b02      	ldr	r3, [pc, #8]	@ (8012500 <free+0xc>)
 80124f6:	4601      	mov	r1, r0
 80124f8:	6818      	ldr	r0, [r3, #0]
 80124fa:	f002 bb01 	b.w	8014b00 <_free_r>
 80124fe:	bf00      	nop
 8012500:	200001d4 	.word	0x200001d4

08012504 <sbrk_aligned>:
 8012504:	b570      	push	{r4, r5, r6, lr}
 8012506:	4e0f      	ldr	r6, [pc, #60]	@ (8012544 <sbrk_aligned+0x40>)
 8012508:	460c      	mov	r4, r1
 801250a:	6831      	ldr	r1, [r6, #0]
 801250c:	4605      	mov	r5, r0
 801250e:	b911      	cbnz	r1, 8012516 <sbrk_aligned+0x12>
 8012510:	f001 fc3c 	bl	8013d8c <_sbrk_r>
 8012514:	6030      	str	r0, [r6, #0]
 8012516:	4621      	mov	r1, r4
 8012518:	4628      	mov	r0, r5
 801251a:	f001 fc37 	bl	8013d8c <_sbrk_r>
 801251e:	1c43      	adds	r3, r0, #1
 8012520:	d103      	bne.n	801252a <sbrk_aligned+0x26>
 8012522:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012526:	4620      	mov	r0, r4
 8012528:	bd70      	pop	{r4, r5, r6, pc}
 801252a:	1cc4      	adds	r4, r0, #3
 801252c:	f024 0403 	bic.w	r4, r4, #3
 8012530:	42a0      	cmp	r0, r4
 8012532:	d0f8      	beq.n	8012526 <sbrk_aligned+0x22>
 8012534:	1a21      	subs	r1, r4, r0
 8012536:	4628      	mov	r0, r5
 8012538:	f001 fc28 	bl	8013d8c <_sbrk_r>
 801253c:	3001      	adds	r0, #1
 801253e:	d1f2      	bne.n	8012526 <sbrk_aligned+0x22>
 8012540:	e7ef      	b.n	8012522 <sbrk_aligned+0x1e>
 8012542:	bf00      	nop
 8012544:	20002374 	.word	0x20002374

08012548 <_malloc_r>:
 8012548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801254c:	1ccd      	adds	r5, r1, #3
 801254e:	f025 0503 	bic.w	r5, r5, #3
 8012552:	3508      	adds	r5, #8
 8012554:	2d0c      	cmp	r5, #12
 8012556:	bf38      	it	cc
 8012558:	250c      	movcc	r5, #12
 801255a:	2d00      	cmp	r5, #0
 801255c:	4606      	mov	r6, r0
 801255e:	db01      	blt.n	8012564 <_malloc_r+0x1c>
 8012560:	42a9      	cmp	r1, r5
 8012562:	d904      	bls.n	801256e <_malloc_r+0x26>
 8012564:	230c      	movs	r3, #12
 8012566:	6033      	str	r3, [r6, #0]
 8012568:	2000      	movs	r0, #0
 801256a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801256e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012644 <_malloc_r+0xfc>
 8012572:	f000 fc03 	bl	8012d7c <__malloc_lock>
 8012576:	f8d8 3000 	ldr.w	r3, [r8]
 801257a:	461c      	mov	r4, r3
 801257c:	bb44      	cbnz	r4, 80125d0 <_malloc_r+0x88>
 801257e:	4629      	mov	r1, r5
 8012580:	4630      	mov	r0, r6
 8012582:	f7ff ffbf 	bl	8012504 <sbrk_aligned>
 8012586:	1c43      	adds	r3, r0, #1
 8012588:	4604      	mov	r4, r0
 801258a:	d158      	bne.n	801263e <_malloc_r+0xf6>
 801258c:	f8d8 4000 	ldr.w	r4, [r8]
 8012590:	4627      	mov	r7, r4
 8012592:	2f00      	cmp	r7, #0
 8012594:	d143      	bne.n	801261e <_malloc_r+0xd6>
 8012596:	2c00      	cmp	r4, #0
 8012598:	d04b      	beq.n	8012632 <_malloc_r+0xea>
 801259a:	6823      	ldr	r3, [r4, #0]
 801259c:	4639      	mov	r1, r7
 801259e:	4630      	mov	r0, r6
 80125a0:	eb04 0903 	add.w	r9, r4, r3
 80125a4:	f001 fbf2 	bl	8013d8c <_sbrk_r>
 80125a8:	4581      	cmp	r9, r0
 80125aa:	d142      	bne.n	8012632 <_malloc_r+0xea>
 80125ac:	6821      	ldr	r1, [r4, #0]
 80125ae:	1a6d      	subs	r5, r5, r1
 80125b0:	4629      	mov	r1, r5
 80125b2:	4630      	mov	r0, r6
 80125b4:	f7ff ffa6 	bl	8012504 <sbrk_aligned>
 80125b8:	3001      	adds	r0, #1
 80125ba:	d03a      	beq.n	8012632 <_malloc_r+0xea>
 80125bc:	6823      	ldr	r3, [r4, #0]
 80125be:	442b      	add	r3, r5
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	f8d8 3000 	ldr.w	r3, [r8]
 80125c6:	685a      	ldr	r2, [r3, #4]
 80125c8:	bb62      	cbnz	r2, 8012624 <_malloc_r+0xdc>
 80125ca:	f8c8 7000 	str.w	r7, [r8]
 80125ce:	e00f      	b.n	80125f0 <_malloc_r+0xa8>
 80125d0:	6822      	ldr	r2, [r4, #0]
 80125d2:	1b52      	subs	r2, r2, r5
 80125d4:	d420      	bmi.n	8012618 <_malloc_r+0xd0>
 80125d6:	2a0b      	cmp	r2, #11
 80125d8:	d917      	bls.n	801260a <_malloc_r+0xc2>
 80125da:	1961      	adds	r1, r4, r5
 80125dc:	42a3      	cmp	r3, r4
 80125de:	6025      	str	r5, [r4, #0]
 80125e0:	bf18      	it	ne
 80125e2:	6059      	strne	r1, [r3, #4]
 80125e4:	6863      	ldr	r3, [r4, #4]
 80125e6:	bf08      	it	eq
 80125e8:	f8c8 1000 	streq.w	r1, [r8]
 80125ec:	5162      	str	r2, [r4, r5]
 80125ee:	604b      	str	r3, [r1, #4]
 80125f0:	4630      	mov	r0, r6
 80125f2:	f000 fbc9 	bl	8012d88 <__malloc_unlock>
 80125f6:	f104 000b 	add.w	r0, r4, #11
 80125fa:	1d23      	adds	r3, r4, #4
 80125fc:	f020 0007 	bic.w	r0, r0, #7
 8012600:	1ac2      	subs	r2, r0, r3
 8012602:	bf1c      	itt	ne
 8012604:	1a1b      	subne	r3, r3, r0
 8012606:	50a3      	strne	r3, [r4, r2]
 8012608:	e7af      	b.n	801256a <_malloc_r+0x22>
 801260a:	6862      	ldr	r2, [r4, #4]
 801260c:	42a3      	cmp	r3, r4
 801260e:	bf0c      	ite	eq
 8012610:	f8c8 2000 	streq.w	r2, [r8]
 8012614:	605a      	strne	r2, [r3, #4]
 8012616:	e7eb      	b.n	80125f0 <_malloc_r+0xa8>
 8012618:	4623      	mov	r3, r4
 801261a:	6864      	ldr	r4, [r4, #4]
 801261c:	e7ae      	b.n	801257c <_malloc_r+0x34>
 801261e:	463c      	mov	r4, r7
 8012620:	687f      	ldr	r7, [r7, #4]
 8012622:	e7b6      	b.n	8012592 <_malloc_r+0x4a>
 8012624:	461a      	mov	r2, r3
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	42a3      	cmp	r3, r4
 801262a:	d1fb      	bne.n	8012624 <_malloc_r+0xdc>
 801262c:	2300      	movs	r3, #0
 801262e:	6053      	str	r3, [r2, #4]
 8012630:	e7de      	b.n	80125f0 <_malloc_r+0xa8>
 8012632:	230c      	movs	r3, #12
 8012634:	6033      	str	r3, [r6, #0]
 8012636:	4630      	mov	r0, r6
 8012638:	f000 fba6 	bl	8012d88 <__malloc_unlock>
 801263c:	e794      	b.n	8012568 <_malloc_r+0x20>
 801263e:	6005      	str	r5, [r0, #0]
 8012640:	e7d6      	b.n	80125f0 <_malloc_r+0xa8>
 8012642:	bf00      	nop
 8012644:	20002378 	.word	0x20002378

08012648 <_printf_common>:
 8012648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801264c:	4616      	mov	r6, r2
 801264e:	4698      	mov	r8, r3
 8012650:	688a      	ldr	r2, [r1, #8]
 8012652:	690b      	ldr	r3, [r1, #16]
 8012654:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012658:	4293      	cmp	r3, r2
 801265a:	bfb8      	it	lt
 801265c:	4613      	movlt	r3, r2
 801265e:	6033      	str	r3, [r6, #0]
 8012660:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012664:	4607      	mov	r7, r0
 8012666:	460c      	mov	r4, r1
 8012668:	b10a      	cbz	r2, 801266e <_printf_common+0x26>
 801266a:	3301      	adds	r3, #1
 801266c:	6033      	str	r3, [r6, #0]
 801266e:	6823      	ldr	r3, [r4, #0]
 8012670:	0699      	lsls	r1, r3, #26
 8012672:	bf42      	ittt	mi
 8012674:	6833      	ldrmi	r3, [r6, #0]
 8012676:	3302      	addmi	r3, #2
 8012678:	6033      	strmi	r3, [r6, #0]
 801267a:	6825      	ldr	r5, [r4, #0]
 801267c:	f015 0506 	ands.w	r5, r5, #6
 8012680:	d106      	bne.n	8012690 <_printf_common+0x48>
 8012682:	f104 0a19 	add.w	sl, r4, #25
 8012686:	68e3      	ldr	r3, [r4, #12]
 8012688:	6832      	ldr	r2, [r6, #0]
 801268a:	1a9b      	subs	r3, r3, r2
 801268c:	42ab      	cmp	r3, r5
 801268e:	dc26      	bgt.n	80126de <_printf_common+0x96>
 8012690:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012694:	6822      	ldr	r2, [r4, #0]
 8012696:	3b00      	subs	r3, #0
 8012698:	bf18      	it	ne
 801269a:	2301      	movne	r3, #1
 801269c:	0692      	lsls	r2, r2, #26
 801269e:	d42b      	bmi.n	80126f8 <_printf_common+0xb0>
 80126a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80126a4:	4641      	mov	r1, r8
 80126a6:	4638      	mov	r0, r7
 80126a8:	47c8      	blx	r9
 80126aa:	3001      	adds	r0, #1
 80126ac:	d01e      	beq.n	80126ec <_printf_common+0xa4>
 80126ae:	6823      	ldr	r3, [r4, #0]
 80126b0:	6922      	ldr	r2, [r4, #16]
 80126b2:	f003 0306 	and.w	r3, r3, #6
 80126b6:	2b04      	cmp	r3, #4
 80126b8:	bf02      	ittt	eq
 80126ba:	68e5      	ldreq	r5, [r4, #12]
 80126bc:	6833      	ldreq	r3, [r6, #0]
 80126be:	1aed      	subeq	r5, r5, r3
 80126c0:	68a3      	ldr	r3, [r4, #8]
 80126c2:	bf0c      	ite	eq
 80126c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80126c8:	2500      	movne	r5, #0
 80126ca:	4293      	cmp	r3, r2
 80126cc:	bfc4      	itt	gt
 80126ce:	1a9b      	subgt	r3, r3, r2
 80126d0:	18ed      	addgt	r5, r5, r3
 80126d2:	2600      	movs	r6, #0
 80126d4:	341a      	adds	r4, #26
 80126d6:	42b5      	cmp	r5, r6
 80126d8:	d11a      	bne.n	8012710 <_printf_common+0xc8>
 80126da:	2000      	movs	r0, #0
 80126dc:	e008      	b.n	80126f0 <_printf_common+0xa8>
 80126de:	2301      	movs	r3, #1
 80126e0:	4652      	mov	r2, sl
 80126e2:	4641      	mov	r1, r8
 80126e4:	4638      	mov	r0, r7
 80126e6:	47c8      	blx	r9
 80126e8:	3001      	adds	r0, #1
 80126ea:	d103      	bne.n	80126f4 <_printf_common+0xac>
 80126ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126f4:	3501      	adds	r5, #1
 80126f6:	e7c6      	b.n	8012686 <_printf_common+0x3e>
 80126f8:	18e1      	adds	r1, r4, r3
 80126fa:	1c5a      	adds	r2, r3, #1
 80126fc:	2030      	movs	r0, #48	@ 0x30
 80126fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012702:	4422      	add	r2, r4
 8012704:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012708:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801270c:	3302      	adds	r3, #2
 801270e:	e7c7      	b.n	80126a0 <_printf_common+0x58>
 8012710:	2301      	movs	r3, #1
 8012712:	4622      	mov	r2, r4
 8012714:	4641      	mov	r1, r8
 8012716:	4638      	mov	r0, r7
 8012718:	47c8      	blx	r9
 801271a:	3001      	adds	r0, #1
 801271c:	d0e6      	beq.n	80126ec <_printf_common+0xa4>
 801271e:	3601      	adds	r6, #1
 8012720:	e7d9      	b.n	80126d6 <_printf_common+0x8e>
	...

08012724 <_printf_i>:
 8012724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012728:	7e0f      	ldrb	r7, [r1, #24]
 801272a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801272c:	2f78      	cmp	r7, #120	@ 0x78
 801272e:	4691      	mov	r9, r2
 8012730:	4680      	mov	r8, r0
 8012732:	460c      	mov	r4, r1
 8012734:	469a      	mov	sl, r3
 8012736:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801273a:	d807      	bhi.n	801274c <_printf_i+0x28>
 801273c:	2f62      	cmp	r7, #98	@ 0x62
 801273e:	d80a      	bhi.n	8012756 <_printf_i+0x32>
 8012740:	2f00      	cmp	r7, #0
 8012742:	f000 80d1 	beq.w	80128e8 <_printf_i+0x1c4>
 8012746:	2f58      	cmp	r7, #88	@ 0x58
 8012748:	f000 80b8 	beq.w	80128bc <_printf_i+0x198>
 801274c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012750:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012754:	e03a      	b.n	80127cc <_printf_i+0xa8>
 8012756:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801275a:	2b15      	cmp	r3, #21
 801275c:	d8f6      	bhi.n	801274c <_printf_i+0x28>
 801275e:	a101      	add	r1, pc, #4	@ (adr r1, 8012764 <_printf_i+0x40>)
 8012760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012764:	080127bd 	.word	0x080127bd
 8012768:	080127d1 	.word	0x080127d1
 801276c:	0801274d 	.word	0x0801274d
 8012770:	0801274d 	.word	0x0801274d
 8012774:	0801274d 	.word	0x0801274d
 8012778:	0801274d 	.word	0x0801274d
 801277c:	080127d1 	.word	0x080127d1
 8012780:	0801274d 	.word	0x0801274d
 8012784:	0801274d 	.word	0x0801274d
 8012788:	0801274d 	.word	0x0801274d
 801278c:	0801274d 	.word	0x0801274d
 8012790:	080128cf 	.word	0x080128cf
 8012794:	080127fb 	.word	0x080127fb
 8012798:	08012889 	.word	0x08012889
 801279c:	0801274d 	.word	0x0801274d
 80127a0:	0801274d 	.word	0x0801274d
 80127a4:	080128f1 	.word	0x080128f1
 80127a8:	0801274d 	.word	0x0801274d
 80127ac:	080127fb 	.word	0x080127fb
 80127b0:	0801274d 	.word	0x0801274d
 80127b4:	0801274d 	.word	0x0801274d
 80127b8:	08012891 	.word	0x08012891
 80127bc:	6833      	ldr	r3, [r6, #0]
 80127be:	1d1a      	adds	r2, r3, #4
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	6032      	str	r2, [r6, #0]
 80127c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80127c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80127cc:	2301      	movs	r3, #1
 80127ce:	e09c      	b.n	801290a <_printf_i+0x1e6>
 80127d0:	6833      	ldr	r3, [r6, #0]
 80127d2:	6820      	ldr	r0, [r4, #0]
 80127d4:	1d19      	adds	r1, r3, #4
 80127d6:	6031      	str	r1, [r6, #0]
 80127d8:	0606      	lsls	r6, r0, #24
 80127da:	d501      	bpl.n	80127e0 <_printf_i+0xbc>
 80127dc:	681d      	ldr	r5, [r3, #0]
 80127de:	e003      	b.n	80127e8 <_printf_i+0xc4>
 80127e0:	0645      	lsls	r5, r0, #25
 80127e2:	d5fb      	bpl.n	80127dc <_printf_i+0xb8>
 80127e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80127e8:	2d00      	cmp	r5, #0
 80127ea:	da03      	bge.n	80127f4 <_printf_i+0xd0>
 80127ec:	232d      	movs	r3, #45	@ 0x2d
 80127ee:	426d      	negs	r5, r5
 80127f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127f4:	4858      	ldr	r0, [pc, #352]	@ (8012958 <_printf_i+0x234>)
 80127f6:	230a      	movs	r3, #10
 80127f8:	e011      	b.n	801281e <_printf_i+0xfa>
 80127fa:	6821      	ldr	r1, [r4, #0]
 80127fc:	6833      	ldr	r3, [r6, #0]
 80127fe:	0608      	lsls	r0, r1, #24
 8012800:	f853 5b04 	ldr.w	r5, [r3], #4
 8012804:	d402      	bmi.n	801280c <_printf_i+0xe8>
 8012806:	0649      	lsls	r1, r1, #25
 8012808:	bf48      	it	mi
 801280a:	b2ad      	uxthmi	r5, r5
 801280c:	2f6f      	cmp	r7, #111	@ 0x6f
 801280e:	4852      	ldr	r0, [pc, #328]	@ (8012958 <_printf_i+0x234>)
 8012810:	6033      	str	r3, [r6, #0]
 8012812:	bf14      	ite	ne
 8012814:	230a      	movne	r3, #10
 8012816:	2308      	moveq	r3, #8
 8012818:	2100      	movs	r1, #0
 801281a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801281e:	6866      	ldr	r6, [r4, #4]
 8012820:	60a6      	str	r6, [r4, #8]
 8012822:	2e00      	cmp	r6, #0
 8012824:	db05      	blt.n	8012832 <_printf_i+0x10e>
 8012826:	6821      	ldr	r1, [r4, #0]
 8012828:	432e      	orrs	r6, r5
 801282a:	f021 0104 	bic.w	r1, r1, #4
 801282e:	6021      	str	r1, [r4, #0]
 8012830:	d04b      	beq.n	80128ca <_printf_i+0x1a6>
 8012832:	4616      	mov	r6, r2
 8012834:	fbb5 f1f3 	udiv	r1, r5, r3
 8012838:	fb03 5711 	mls	r7, r3, r1, r5
 801283c:	5dc7      	ldrb	r7, [r0, r7]
 801283e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012842:	462f      	mov	r7, r5
 8012844:	42bb      	cmp	r3, r7
 8012846:	460d      	mov	r5, r1
 8012848:	d9f4      	bls.n	8012834 <_printf_i+0x110>
 801284a:	2b08      	cmp	r3, #8
 801284c:	d10b      	bne.n	8012866 <_printf_i+0x142>
 801284e:	6823      	ldr	r3, [r4, #0]
 8012850:	07df      	lsls	r7, r3, #31
 8012852:	d508      	bpl.n	8012866 <_printf_i+0x142>
 8012854:	6923      	ldr	r3, [r4, #16]
 8012856:	6861      	ldr	r1, [r4, #4]
 8012858:	4299      	cmp	r1, r3
 801285a:	bfde      	ittt	le
 801285c:	2330      	movle	r3, #48	@ 0x30
 801285e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012862:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012866:	1b92      	subs	r2, r2, r6
 8012868:	6122      	str	r2, [r4, #16]
 801286a:	f8cd a000 	str.w	sl, [sp]
 801286e:	464b      	mov	r3, r9
 8012870:	aa03      	add	r2, sp, #12
 8012872:	4621      	mov	r1, r4
 8012874:	4640      	mov	r0, r8
 8012876:	f7ff fee7 	bl	8012648 <_printf_common>
 801287a:	3001      	adds	r0, #1
 801287c:	d14a      	bne.n	8012914 <_printf_i+0x1f0>
 801287e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012882:	b004      	add	sp, #16
 8012884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	f043 0320 	orr.w	r3, r3, #32
 801288e:	6023      	str	r3, [r4, #0]
 8012890:	4832      	ldr	r0, [pc, #200]	@ (801295c <_printf_i+0x238>)
 8012892:	2778      	movs	r7, #120	@ 0x78
 8012894:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012898:	6823      	ldr	r3, [r4, #0]
 801289a:	6831      	ldr	r1, [r6, #0]
 801289c:	061f      	lsls	r7, r3, #24
 801289e:	f851 5b04 	ldr.w	r5, [r1], #4
 80128a2:	d402      	bmi.n	80128aa <_printf_i+0x186>
 80128a4:	065f      	lsls	r7, r3, #25
 80128a6:	bf48      	it	mi
 80128a8:	b2ad      	uxthmi	r5, r5
 80128aa:	6031      	str	r1, [r6, #0]
 80128ac:	07d9      	lsls	r1, r3, #31
 80128ae:	bf44      	itt	mi
 80128b0:	f043 0320 	orrmi.w	r3, r3, #32
 80128b4:	6023      	strmi	r3, [r4, #0]
 80128b6:	b11d      	cbz	r5, 80128c0 <_printf_i+0x19c>
 80128b8:	2310      	movs	r3, #16
 80128ba:	e7ad      	b.n	8012818 <_printf_i+0xf4>
 80128bc:	4826      	ldr	r0, [pc, #152]	@ (8012958 <_printf_i+0x234>)
 80128be:	e7e9      	b.n	8012894 <_printf_i+0x170>
 80128c0:	6823      	ldr	r3, [r4, #0]
 80128c2:	f023 0320 	bic.w	r3, r3, #32
 80128c6:	6023      	str	r3, [r4, #0]
 80128c8:	e7f6      	b.n	80128b8 <_printf_i+0x194>
 80128ca:	4616      	mov	r6, r2
 80128cc:	e7bd      	b.n	801284a <_printf_i+0x126>
 80128ce:	6833      	ldr	r3, [r6, #0]
 80128d0:	6825      	ldr	r5, [r4, #0]
 80128d2:	6961      	ldr	r1, [r4, #20]
 80128d4:	1d18      	adds	r0, r3, #4
 80128d6:	6030      	str	r0, [r6, #0]
 80128d8:	062e      	lsls	r6, r5, #24
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	d501      	bpl.n	80128e2 <_printf_i+0x1be>
 80128de:	6019      	str	r1, [r3, #0]
 80128e0:	e002      	b.n	80128e8 <_printf_i+0x1c4>
 80128e2:	0668      	lsls	r0, r5, #25
 80128e4:	d5fb      	bpl.n	80128de <_printf_i+0x1ba>
 80128e6:	8019      	strh	r1, [r3, #0]
 80128e8:	2300      	movs	r3, #0
 80128ea:	6123      	str	r3, [r4, #16]
 80128ec:	4616      	mov	r6, r2
 80128ee:	e7bc      	b.n	801286a <_printf_i+0x146>
 80128f0:	6833      	ldr	r3, [r6, #0]
 80128f2:	1d1a      	adds	r2, r3, #4
 80128f4:	6032      	str	r2, [r6, #0]
 80128f6:	681e      	ldr	r6, [r3, #0]
 80128f8:	6862      	ldr	r2, [r4, #4]
 80128fa:	2100      	movs	r1, #0
 80128fc:	4630      	mov	r0, r6
 80128fe:	f7ed fc6f 	bl	80001e0 <memchr>
 8012902:	b108      	cbz	r0, 8012908 <_printf_i+0x1e4>
 8012904:	1b80      	subs	r0, r0, r6
 8012906:	6060      	str	r0, [r4, #4]
 8012908:	6863      	ldr	r3, [r4, #4]
 801290a:	6123      	str	r3, [r4, #16]
 801290c:	2300      	movs	r3, #0
 801290e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012912:	e7aa      	b.n	801286a <_printf_i+0x146>
 8012914:	6923      	ldr	r3, [r4, #16]
 8012916:	4632      	mov	r2, r6
 8012918:	4649      	mov	r1, r9
 801291a:	4640      	mov	r0, r8
 801291c:	47d0      	blx	sl
 801291e:	3001      	adds	r0, #1
 8012920:	d0ad      	beq.n	801287e <_printf_i+0x15a>
 8012922:	6823      	ldr	r3, [r4, #0]
 8012924:	079b      	lsls	r3, r3, #30
 8012926:	d413      	bmi.n	8012950 <_printf_i+0x22c>
 8012928:	68e0      	ldr	r0, [r4, #12]
 801292a:	9b03      	ldr	r3, [sp, #12]
 801292c:	4298      	cmp	r0, r3
 801292e:	bfb8      	it	lt
 8012930:	4618      	movlt	r0, r3
 8012932:	e7a6      	b.n	8012882 <_printf_i+0x15e>
 8012934:	2301      	movs	r3, #1
 8012936:	4632      	mov	r2, r6
 8012938:	4649      	mov	r1, r9
 801293a:	4640      	mov	r0, r8
 801293c:	47d0      	blx	sl
 801293e:	3001      	adds	r0, #1
 8012940:	d09d      	beq.n	801287e <_printf_i+0x15a>
 8012942:	3501      	adds	r5, #1
 8012944:	68e3      	ldr	r3, [r4, #12]
 8012946:	9903      	ldr	r1, [sp, #12]
 8012948:	1a5b      	subs	r3, r3, r1
 801294a:	42ab      	cmp	r3, r5
 801294c:	dcf2      	bgt.n	8012934 <_printf_i+0x210>
 801294e:	e7eb      	b.n	8012928 <_printf_i+0x204>
 8012950:	2500      	movs	r5, #0
 8012952:	f104 0619 	add.w	r6, r4, #25
 8012956:	e7f5      	b.n	8012944 <_printf_i+0x220>
 8012958:	08017bc6 	.word	0x08017bc6
 801295c:	08017bd7 	.word	0x08017bd7

08012960 <_scanf_float>:
 8012960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012964:	b087      	sub	sp, #28
 8012966:	4691      	mov	r9, r2
 8012968:	9303      	str	r3, [sp, #12]
 801296a:	688b      	ldr	r3, [r1, #8]
 801296c:	1e5a      	subs	r2, r3, #1
 801296e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012972:	bf81      	itttt	hi
 8012974:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012978:	eb03 0b05 	addhi.w	fp, r3, r5
 801297c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012980:	608b      	strhi	r3, [r1, #8]
 8012982:	680b      	ldr	r3, [r1, #0]
 8012984:	460a      	mov	r2, r1
 8012986:	f04f 0500 	mov.w	r5, #0
 801298a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801298e:	f842 3b1c 	str.w	r3, [r2], #28
 8012992:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012996:	4680      	mov	r8, r0
 8012998:	460c      	mov	r4, r1
 801299a:	bf98      	it	ls
 801299c:	f04f 0b00 	movls.w	fp, #0
 80129a0:	9201      	str	r2, [sp, #4]
 80129a2:	4616      	mov	r6, r2
 80129a4:	46aa      	mov	sl, r5
 80129a6:	462f      	mov	r7, r5
 80129a8:	9502      	str	r5, [sp, #8]
 80129aa:	68a2      	ldr	r2, [r4, #8]
 80129ac:	b15a      	cbz	r2, 80129c6 <_scanf_float+0x66>
 80129ae:	f8d9 3000 	ldr.w	r3, [r9]
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80129b6:	d863      	bhi.n	8012a80 <_scanf_float+0x120>
 80129b8:	2b40      	cmp	r3, #64	@ 0x40
 80129ba:	d83b      	bhi.n	8012a34 <_scanf_float+0xd4>
 80129bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80129c0:	b2c8      	uxtb	r0, r1
 80129c2:	280e      	cmp	r0, #14
 80129c4:	d939      	bls.n	8012a3a <_scanf_float+0xda>
 80129c6:	b11f      	cbz	r7, 80129d0 <_scanf_float+0x70>
 80129c8:	6823      	ldr	r3, [r4, #0]
 80129ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80129ce:	6023      	str	r3, [r4, #0]
 80129d0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80129d4:	f1ba 0f01 	cmp.w	sl, #1
 80129d8:	f200 8114 	bhi.w	8012c04 <_scanf_float+0x2a4>
 80129dc:	9b01      	ldr	r3, [sp, #4]
 80129de:	429e      	cmp	r6, r3
 80129e0:	f200 8105 	bhi.w	8012bee <_scanf_float+0x28e>
 80129e4:	2001      	movs	r0, #1
 80129e6:	b007      	add	sp, #28
 80129e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ec:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80129f0:	2a0d      	cmp	r2, #13
 80129f2:	d8e8      	bhi.n	80129c6 <_scanf_float+0x66>
 80129f4:	a101      	add	r1, pc, #4	@ (adr r1, 80129fc <_scanf_float+0x9c>)
 80129f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80129fa:	bf00      	nop
 80129fc:	08012b45 	.word	0x08012b45
 8012a00:	080129c7 	.word	0x080129c7
 8012a04:	080129c7 	.word	0x080129c7
 8012a08:	080129c7 	.word	0x080129c7
 8012a0c:	08012ba1 	.word	0x08012ba1
 8012a10:	08012b7b 	.word	0x08012b7b
 8012a14:	080129c7 	.word	0x080129c7
 8012a18:	080129c7 	.word	0x080129c7
 8012a1c:	08012b53 	.word	0x08012b53
 8012a20:	080129c7 	.word	0x080129c7
 8012a24:	080129c7 	.word	0x080129c7
 8012a28:	080129c7 	.word	0x080129c7
 8012a2c:	080129c7 	.word	0x080129c7
 8012a30:	08012b0f 	.word	0x08012b0f
 8012a34:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8012a38:	e7da      	b.n	80129f0 <_scanf_float+0x90>
 8012a3a:	290e      	cmp	r1, #14
 8012a3c:	d8c3      	bhi.n	80129c6 <_scanf_float+0x66>
 8012a3e:	a001      	add	r0, pc, #4	@ (adr r0, 8012a44 <_scanf_float+0xe4>)
 8012a40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012a44:	08012aff 	.word	0x08012aff
 8012a48:	080129c7 	.word	0x080129c7
 8012a4c:	08012aff 	.word	0x08012aff
 8012a50:	08012b8f 	.word	0x08012b8f
 8012a54:	080129c7 	.word	0x080129c7
 8012a58:	08012aa1 	.word	0x08012aa1
 8012a5c:	08012ae5 	.word	0x08012ae5
 8012a60:	08012ae5 	.word	0x08012ae5
 8012a64:	08012ae5 	.word	0x08012ae5
 8012a68:	08012ae5 	.word	0x08012ae5
 8012a6c:	08012ae5 	.word	0x08012ae5
 8012a70:	08012ae5 	.word	0x08012ae5
 8012a74:	08012ae5 	.word	0x08012ae5
 8012a78:	08012ae5 	.word	0x08012ae5
 8012a7c:	08012ae5 	.word	0x08012ae5
 8012a80:	2b6e      	cmp	r3, #110	@ 0x6e
 8012a82:	d809      	bhi.n	8012a98 <_scanf_float+0x138>
 8012a84:	2b60      	cmp	r3, #96	@ 0x60
 8012a86:	d8b1      	bhi.n	80129ec <_scanf_float+0x8c>
 8012a88:	2b54      	cmp	r3, #84	@ 0x54
 8012a8a:	d07b      	beq.n	8012b84 <_scanf_float+0x224>
 8012a8c:	2b59      	cmp	r3, #89	@ 0x59
 8012a8e:	d19a      	bne.n	80129c6 <_scanf_float+0x66>
 8012a90:	2d07      	cmp	r5, #7
 8012a92:	d198      	bne.n	80129c6 <_scanf_float+0x66>
 8012a94:	2508      	movs	r5, #8
 8012a96:	e02f      	b.n	8012af8 <_scanf_float+0x198>
 8012a98:	2b74      	cmp	r3, #116	@ 0x74
 8012a9a:	d073      	beq.n	8012b84 <_scanf_float+0x224>
 8012a9c:	2b79      	cmp	r3, #121	@ 0x79
 8012a9e:	e7f6      	b.n	8012a8e <_scanf_float+0x12e>
 8012aa0:	6821      	ldr	r1, [r4, #0]
 8012aa2:	05c8      	lsls	r0, r1, #23
 8012aa4:	d51e      	bpl.n	8012ae4 <_scanf_float+0x184>
 8012aa6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8012aaa:	6021      	str	r1, [r4, #0]
 8012aac:	3701      	adds	r7, #1
 8012aae:	f1bb 0f00 	cmp.w	fp, #0
 8012ab2:	d003      	beq.n	8012abc <_scanf_float+0x15c>
 8012ab4:	3201      	adds	r2, #1
 8012ab6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8012aba:	60a2      	str	r2, [r4, #8]
 8012abc:	68a3      	ldr	r3, [r4, #8]
 8012abe:	3b01      	subs	r3, #1
 8012ac0:	60a3      	str	r3, [r4, #8]
 8012ac2:	6923      	ldr	r3, [r4, #16]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	6123      	str	r3, [r4, #16]
 8012ac8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012acc:	3b01      	subs	r3, #1
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f8c9 3004 	str.w	r3, [r9, #4]
 8012ad4:	f340 8082 	ble.w	8012bdc <_scanf_float+0x27c>
 8012ad8:	f8d9 3000 	ldr.w	r3, [r9]
 8012adc:	3301      	adds	r3, #1
 8012ade:	f8c9 3000 	str.w	r3, [r9]
 8012ae2:	e762      	b.n	80129aa <_scanf_float+0x4a>
 8012ae4:	eb1a 0105 	adds.w	r1, sl, r5
 8012ae8:	f47f af6d 	bne.w	80129c6 <_scanf_float+0x66>
 8012aec:	6822      	ldr	r2, [r4, #0]
 8012aee:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8012af2:	6022      	str	r2, [r4, #0]
 8012af4:	460d      	mov	r5, r1
 8012af6:	468a      	mov	sl, r1
 8012af8:	f806 3b01 	strb.w	r3, [r6], #1
 8012afc:	e7de      	b.n	8012abc <_scanf_float+0x15c>
 8012afe:	6822      	ldr	r2, [r4, #0]
 8012b00:	0610      	lsls	r0, r2, #24
 8012b02:	f57f af60 	bpl.w	80129c6 <_scanf_float+0x66>
 8012b06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012b0a:	6022      	str	r2, [r4, #0]
 8012b0c:	e7f4      	b.n	8012af8 <_scanf_float+0x198>
 8012b0e:	f1ba 0f00 	cmp.w	sl, #0
 8012b12:	d10c      	bne.n	8012b2e <_scanf_float+0x1ce>
 8012b14:	b977      	cbnz	r7, 8012b34 <_scanf_float+0x1d4>
 8012b16:	6822      	ldr	r2, [r4, #0]
 8012b18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8012b1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8012b20:	d108      	bne.n	8012b34 <_scanf_float+0x1d4>
 8012b22:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012b26:	6022      	str	r2, [r4, #0]
 8012b28:	f04f 0a01 	mov.w	sl, #1
 8012b2c:	e7e4      	b.n	8012af8 <_scanf_float+0x198>
 8012b2e:	f1ba 0f02 	cmp.w	sl, #2
 8012b32:	d050      	beq.n	8012bd6 <_scanf_float+0x276>
 8012b34:	2d01      	cmp	r5, #1
 8012b36:	d002      	beq.n	8012b3e <_scanf_float+0x1de>
 8012b38:	2d04      	cmp	r5, #4
 8012b3a:	f47f af44 	bne.w	80129c6 <_scanf_float+0x66>
 8012b3e:	3501      	adds	r5, #1
 8012b40:	b2ed      	uxtb	r5, r5
 8012b42:	e7d9      	b.n	8012af8 <_scanf_float+0x198>
 8012b44:	f1ba 0f01 	cmp.w	sl, #1
 8012b48:	f47f af3d 	bne.w	80129c6 <_scanf_float+0x66>
 8012b4c:	f04f 0a02 	mov.w	sl, #2
 8012b50:	e7d2      	b.n	8012af8 <_scanf_float+0x198>
 8012b52:	b975      	cbnz	r5, 8012b72 <_scanf_float+0x212>
 8012b54:	2f00      	cmp	r7, #0
 8012b56:	f47f af37 	bne.w	80129c8 <_scanf_float+0x68>
 8012b5a:	6822      	ldr	r2, [r4, #0]
 8012b5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8012b60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8012b64:	f040 8103 	bne.w	8012d6e <_scanf_float+0x40e>
 8012b68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012b6c:	6022      	str	r2, [r4, #0]
 8012b6e:	2501      	movs	r5, #1
 8012b70:	e7c2      	b.n	8012af8 <_scanf_float+0x198>
 8012b72:	2d03      	cmp	r5, #3
 8012b74:	d0e3      	beq.n	8012b3e <_scanf_float+0x1de>
 8012b76:	2d05      	cmp	r5, #5
 8012b78:	e7df      	b.n	8012b3a <_scanf_float+0x1da>
 8012b7a:	2d02      	cmp	r5, #2
 8012b7c:	f47f af23 	bne.w	80129c6 <_scanf_float+0x66>
 8012b80:	2503      	movs	r5, #3
 8012b82:	e7b9      	b.n	8012af8 <_scanf_float+0x198>
 8012b84:	2d06      	cmp	r5, #6
 8012b86:	f47f af1e 	bne.w	80129c6 <_scanf_float+0x66>
 8012b8a:	2507      	movs	r5, #7
 8012b8c:	e7b4      	b.n	8012af8 <_scanf_float+0x198>
 8012b8e:	6822      	ldr	r2, [r4, #0]
 8012b90:	0591      	lsls	r1, r2, #22
 8012b92:	f57f af18 	bpl.w	80129c6 <_scanf_float+0x66>
 8012b96:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8012b9a:	6022      	str	r2, [r4, #0]
 8012b9c:	9702      	str	r7, [sp, #8]
 8012b9e:	e7ab      	b.n	8012af8 <_scanf_float+0x198>
 8012ba0:	6822      	ldr	r2, [r4, #0]
 8012ba2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8012ba6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012baa:	d005      	beq.n	8012bb8 <_scanf_float+0x258>
 8012bac:	0550      	lsls	r0, r2, #21
 8012bae:	f57f af0a 	bpl.w	80129c6 <_scanf_float+0x66>
 8012bb2:	2f00      	cmp	r7, #0
 8012bb4:	f000 80db 	beq.w	8012d6e <_scanf_float+0x40e>
 8012bb8:	0591      	lsls	r1, r2, #22
 8012bba:	bf58      	it	pl
 8012bbc:	9902      	ldrpl	r1, [sp, #8]
 8012bbe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012bc2:	bf58      	it	pl
 8012bc4:	1a79      	subpl	r1, r7, r1
 8012bc6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8012bca:	bf58      	it	pl
 8012bcc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012bd0:	6022      	str	r2, [r4, #0]
 8012bd2:	2700      	movs	r7, #0
 8012bd4:	e790      	b.n	8012af8 <_scanf_float+0x198>
 8012bd6:	f04f 0a03 	mov.w	sl, #3
 8012bda:	e78d      	b.n	8012af8 <_scanf_float+0x198>
 8012bdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012be0:	4649      	mov	r1, r9
 8012be2:	4640      	mov	r0, r8
 8012be4:	4798      	blx	r3
 8012be6:	2800      	cmp	r0, #0
 8012be8:	f43f aedf 	beq.w	80129aa <_scanf_float+0x4a>
 8012bec:	e6eb      	b.n	80129c6 <_scanf_float+0x66>
 8012bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012bf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012bf6:	464a      	mov	r2, r9
 8012bf8:	4640      	mov	r0, r8
 8012bfa:	4798      	blx	r3
 8012bfc:	6923      	ldr	r3, [r4, #16]
 8012bfe:	3b01      	subs	r3, #1
 8012c00:	6123      	str	r3, [r4, #16]
 8012c02:	e6eb      	b.n	80129dc <_scanf_float+0x7c>
 8012c04:	1e6b      	subs	r3, r5, #1
 8012c06:	2b06      	cmp	r3, #6
 8012c08:	d824      	bhi.n	8012c54 <_scanf_float+0x2f4>
 8012c0a:	2d02      	cmp	r5, #2
 8012c0c:	d836      	bhi.n	8012c7c <_scanf_float+0x31c>
 8012c0e:	9b01      	ldr	r3, [sp, #4]
 8012c10:	429e      	cmp	r6, r3
 8012c12:	f67f aee7 	bls.w	80129e4 <_scanf_float+0x84>
 8012c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012c1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012c1e:	464a      	mov	r2, r9
 8012c20:	4640      	mov	r0, r8
 8012c22:	4798      	blx	r3
 8012c24:	6923      	ldr	r3, [r4, #16]
 8012c26:	3b01      	subs	r3, #1
 8012c28:	6123      	str	r3, [r4, #16]
 8012c2a:	e7f0      	b.n	8012c0e <_scanf_float+0x2ae>
 8012c2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012c30:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8012c34:	464a      	mov	r2, r9
 8012c36:	4640      	mov	r0, r8
 8012c38:	4798      	blx	r3
 8012c3a:	6923      	ldr	r3, [r4, #16]
 8012c3c:	3b01      	subs	r3, #1
 8012c3e:	6123      	str	r3, [r4, #16]
 8012c40:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012c44:	fa5f fa8a 	uxtb.w	sl, sl
 8012c48:	f1ba 0f02 	cmp.w	sl, #2
 8012c4c:	d1ee      	bne.n	8012c2c <_scanf_float+0x2cc>
 8012c4e:	3d03      	subs	r5, #3
 8012c50:	b2ed      	uxtb	r5, r5
 8012c52:	1b76      	subs	r6, r6, r5
 8012c54:	6823      	ldr	r3, [r4, #0]
 8012c56:	05da      	lsls	r2, r3, #23
 8012c58:	d530      	bpl.n	8012cbc <_scanf_float+0x35c>
 8012c5a:	055b      	lsls	r3, r3, #21
 8012c5c:	d511      	bpl.n	8012c82 <_scanf_float+0x322>
 8012c5e:	9b01      	ldr	r3, [sp, #4]
 8012c60:	429e      	cmp	r6, r3
 8012c62:	f67f aebf 	bls.w	80129e4 <_scanf_float+0x84>
 8012c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012c6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012c6e:	464a      	mov	r2, r9
 8012c70:	4640      	mov	r0, r8
 8012c72:	4798      	blx	r3
 8012c74:	6923      	ldr	r3, [r4, #16]
 8012c76:	3b01      	subs	r3, #1
 8012c78:	6123      	str	r3, [r4, #16]
 8012c7a:	e7f0      	b.n	8012c5e <_scanf_float+0x2fe>
 8012c7c:	46aa      	mov	sl, r5
 8012c7e:	46b3      	mov	fp, r6
 8012c80:	e7de      	b.n	8012c40 <_scanf_float+0x2e0>
 8012c82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012c86:	6923      	ldr	r3, [r4, #16]
 8012c88:	2965      	cmp	r1, #101	@ 0x65
 8012c8a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012c8e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8012c92:	6123      	str	r3, [r4, #16]
 8012c94:	d00c      	beq.n	8012cb0 <_scanf_float+0x350>
 8012c96:	2945      	cmp	r1, #69	@ 0x45
 8012c98:	d00a      	beq.n	8012cb0 <_scanf_float+0x350>
 8012c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012c9e:	464a      	mov	r2, r9
 8012ca0:	4640      	mov	r0, r8
 8012ca2:	4798      	blx	r3
 8012ca4:	6923      	ldr	r3, [r4, #16]
 8012ca6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012caa:	3b01      	subs	r3, #1
 8012cac:	1eb5      	subs	r5, r6, #2
 8012cae:	6123      	str	r3, [r4, #16]
 8012cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012cb4:	464a      	mov	r2, r9
 8012cb6:	4640      	mov	r0, r8
 8012cb8:	4798      	blx	r3
 8012cba:	462e      	mov	r6, r5
 8012cbc:	6822      	ldr	r2, [r4, #0]
 8012cbe:	f012 0210 	ands.w	r2, r2, #16
 8012cc2:	d001      	beq.n	8012cc8 <_scanf_float+0x368>
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	e68e      	b.n	80129e6 <_scanf_float+0x86>
 8012cc8:	7032      	strb	r2, [r6, #0]
 8012cca:	6823      	ldr	r3, [r4, #0]
 8012ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8012cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012cd4:	d125      	bne.n	8012d22 <_scanf_float+0x3c2>
 8012cd6:	9b02      	ldr	r3, [sp, #8]
 8012cd8:	429f      	cmp	r7, r3
 8012cda:	d00a      	beq.n	8012cf2 <_scanf_float+0x392>
 8012cdc:	1bda      	subs	r2, r3, r7
 8012cde:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8012ce2:	429e      	cmp	r6, r3
 8012ce4:	bf28      	it	cs
 8012ce6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8012cea:	4922      	ldr	r1, [pc, #136]	@ (8012d74 <_scanf_float+0x414>)
 8012cec:	4630      	mov	r0, r6
 8012cee:	f000 f851 	bl	8012d94 <siprintf>
 8012cf2:	9901      	ldr	r1, [sp, #4]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	4640      	mov	r0, r8
 8012cf8:	f000 ff16 	bl	8013b28 <_strtod_r>
 8012cfc:	9b03      	ldr	r3, [sp, #12]
 8012cfe:	6821      	ldr	r1, [r4, #0]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f011 0f02 	tst.w	r1, #2
 8012d06:	ec57 6b10 	vmov	r6, r7, d0
 8012d0a:	f103 0204 	add.w	r2, r3, #4
 8012d0e:	d015      	beq.n	8012d3c <_scanf_float+0x3dc>
 8012d10:	9903      	ldr	r1, [sp, #12]
 8012d12:	600a      	str	r2, [r1, #0]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	e9c3 6700 	strd	r6, r7, [r3]
 8012d1a:	68e3      	ldr	r3, [r4, #12]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	60e3      	str	r3, [r4, #12]
 8012d20:	e7d0      	b.n	8012cc4 <_scanf_float+0x364>
 8012d22:	9b04      	ldr	r3, [sp, #16]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d0e4      	beq.n	8012cf2 <_scanf_float+0x392>
 8012d28:	9905      	ldr	r1, [sp, #20]
 8012d2a:	230a      	movs	r3, #10
 8012d2c:	3101      	adds	r1, #1
 8012d2e:	4640      	mov	r0, r8
 8012d30:	f000 ff7a 	bl	8013c28 <_strtol_r>
 8012d34:	9b04      	ldr	r3, [sp, #16]
 8012d36:	9e05      	ldr	r6, [sp, #20]
 8012d38:	1ac2      	subs	r2, r0, r3
 8012d3a:	e7d0      	b.n	8012cde <_scanf_float+0x37e>
 8012d3c:	f011 0f04 	tst.w	r1, #4
 8012d40:	9903      	ldr	r1, [sp, #12]
 8012d42:	600a      	str	r2, [r1, #0]
 8012d44:	d1e6      	bne.n	8012d14 <_scanf_float+0x3b4>
 8012d46:	681d      	ldr	r5, [r3, #0]
 8012d48:	4632      	mov	r2, r6
 8012d4a:	463b      	mov	r3, r7
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	4639      	mov	r1, r7
 8012d50:	f7ed fef4 	bl	8000b3c <__aeabi_dcmpun>
 8012d54:	b128      	cbz	r0, 8012d62 <_scanf_float+0x402>
 8012d56:	4808      	ldr	r0, [pc, #32]	@ (8012d78 <_scanf_float+0x418>)
 8012d58:	f001 f872 	bl	8013e40 <nanf>
 8012d5c:	ed85 0a00 	vstr	s0, [r5]
 8012d60:	e7db      	b.n	8012d1a <_scanf_float+0x3ba>
 8012d62:	4630      	mov	r0, r6
 8012d64:	4639      	mov	r1, r7
 8012d66:	f7ed ff47 	bl	8000bf8 <__aeabi_d2f>
 8012d6a:	6028      	str	r0, [r5, #0]
 8012d6c:	e7d5      	b.n	8012d1a <_scanf_float+0x3ba>
 8012d6e:	2700      	movs	r7, #0
 8012d70:	e62e      	b.n	80129d0 <_scanf_float+0x70>
 8012d72:	bf00      	nop
 8012d74:	08017be8 	.word	0x08017be8
 8012d78:	08017d89 	.word	0x08017d89

08012d7c <__malloc_lock>:
 8012d7c:	4801      	ldr	r0, [pc, #4]	@ (8012d84 <__malloc_lock+0x8>)
 8012d7e:	f001 b840 	b.w	8013e02 <__retarget_lock_acquire_recursive>
 8012d82:	bf00      	nop
 8012d84:	200024b8 	.word	0x200024b8

08012d88 <__malloc_unlock>:
 8012d88:	4801      	ldr	r0, [pc, #4]	@ (8012d90 <__malloc_unlock+0x8>)
 8012d8a:	f001 b83b 	b.w	8013e04 <__retarget_lock_release_recursive>
 8012d8e:	bf00      	nop
 8012d90:	200024b8 	.word	0x200024b8

08012d94 <siprintf>:
 8012d94:	b40e      	push	{r1, r2, r3}
 8012d96:	b510      	push	{r4, lr}
 8012d98:	b09d      	sub	sp, #116	@ 0x74
 8012d9a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012d9c:	9002      	str	r0, [sp, #8]
 8012d9e:	9006      	str	r0, [sp, #24]
 8012da0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012da4:	480a      	ldr	r0, [pc, #40]	@ (8012dd0 <siprintf+0x3c>)
 8012da6:	9107      	str	r1, [sp, #28]
 8012da8:	9104      	str	r1, [sp, #16]
 8012daa:	490a      	ldr	r1, [pc, #40]	@ (8012dd4 <siprintf+0x40>)
 8012dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8012db0:	9105      	str	r1, [sp, #20]
 8012db2:	2400      	movs	r4, #0
 8012db4:	a902      	add	r1, sp, #8
 8012db6:	6800      	ldr	r0, [r0, #0]
 8012db8:	9301      	str	r3, [sp, #4]
 8012dba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012dbc:	f002 fa7e 	bl	80152bc <_svfiprintf_r>
 8012dc0:	9b02      	ldr	r3, [sp, #8]
 8012dc2:	701c      	strb	r4, [r3, #0]
 8012dc4:	b01d      	add	sp, #116	@ 0x74
 8012dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dca:	b003      	add	sp, #12
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	200001d4 	.word	0x200001d4
 8012dd4:	ffff0208 	.word	0xffff0208

08012dd8 <std>:
 8012dd8:	2300      	movs	r3, #0
 8012dda:	b510      	push	{r4, lr}
 8012ddc:	4604      	mov	r4, r0
 8012dde:	e9c0 3300 	strd	r3, r3, [r0]
 8012de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012de6:	6083      	str	r3, [r0, #8]
 8012de8:	8181      	strh	r1, [r0, #12]
 8012dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8012dec:	81c2      	strh	r2, [r0, #14]
 8012dee:	6183      	str	r3, [r0, #24]
 8012df0:	4619      	mov	r1, r3
 8012df2:	2208      	movs	r2, #8
 8012df4:	305c      	adds	r0, #92	@ 0x5c
 8012df6:	f000 ffaf 	bl	8013d58 <memset>
 8012dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8012e30 <std+0x58>)
 8012dfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8012dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8012e34 <std+0x5c>)
 8012e00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012e02:	4b0d      	ldr	r3, [pc, #52]	@ (8012e38 <std+0x60>)
 8012e04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012e06:	4b0d      	ldr	r3, [pc, #52]	@ (8012e3c <std+0x64>)
 8012e08:	6323      	str	r3, [r4, #48]	@ 0x30
 8012e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8012e40 <std+0x68>)
 8012e0c:	6224      	str	r4, [r4, #32]
 8012e0e:	429c      	cmp	r4, r3
 8012e10:	d006      	beq.n	8012e20 <std+0x48>
 8012e12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012e16:	4294      	cmp	r4, r2
 8012e18:	d002      	beq.n	8012e20 <std+0x48>
 8012e1a:	33d0      	adds	r3, #208	@ 0xd0
 8012e1c:	429c      	cmp	r4, r3
 8012e1e:	d105      	bne.n	8012e2c <std+0x54>
 8012e20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e28:	f000 bfea 	b.w	8013e00 <__retarget_lock_init_recursive>
 8012e2c:	bd10      	pop	{r4, pc}
 8012e2e:	bf00      	nop
 8012e30:	08016209 	.word	0x08016209
 8012e34:	0801622b 	.word	0x0801622b
 8012e38:	08016263 	.word	0x08016263
 8012e3c:	08016287 	.word	0x08016287
 8012e40:	2000237c 	.word	0x2000237c

08012e44 <stdio_exit_handler>:
 8012e44:	4a02      	ldr	r2, [pc, #8]	@ (8012e50 <stdio_exit_handler+0xc>)
 8012e46:	4903      	ldr	r1, [pc, #12]	@ (8012e54 <stdio_exit_handler+0x10>)
 8012e48:	4803      	ldr	r0, [pc, #12]	@ (8012e58 <stdio_exit_handler+0x14>)
 8012e4a:	f000 beef 	b.w	8013c2c <_fwalk_sglue>
 8012e4e:	bf00      	nop
 8012e50:	2000005c 	.word	0x2000005c
 8012e54:	08015865 	.word	0x08015865
 8012e58:	200001d8 	.word	0x200001d8

08012e5c <cleanup_stdio>:
 8012e5c:	6841      	ldr	r1, [r0, #4]
 8012e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8012e90 <cleanup_stdio+0x34>)
 8012e60:	4299      	cmp	r1, r3
 8012e62:	b510      	push	{r4, lr}
 8012e64:	4604      	mov	r4, r0
 8012e66:	d001      	beq.n	8012e6c <cleanup_stdio+0x10>
 8012e68:	f002 fcfc 	bl	8015864 <_fflush_r>
 8012e6c:	68a1      	ldr	r1, [r4, #8]
 8012e6e:	4b09      	ldr	r3, [pc, #36]	@ (8012e94 <cleanup_stdio+0x38>)
 8012e70:	4299      	cmp	r1, r3
 8012e72:	d002      	beq.n	8012e7a <cleanup_stdio+0x1e>
 8012e74:	4620      	mov	r0, r4
 8012e76:	f002 fcf5 	bl	8015864 <_fflush_r>
 8012e7a:	68e1      	ldr	r1, [r4, #12]
 8012e7c:	4b06      	ldr	r3, [pc, #24]	@ (8012e98 <cleanup_stdio+0x3c>)
 8012e7e:	4299      	cmp	r1, r3
 8012e80:	d004      	beq.n	8012e8c <cleanup_stdio+0x30>
 8012e82:	4620      	mov	r0, r4
 8012e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e88:	f002 bcec 	b.w	8015864 <_fflush_r>
 8012e8c:	bd10      	pop	{r4, pc}
 8012e8e:	bf00      	nop
 8012e90:	2000237c 	.word	0x2000237c
 8012e94:	200023e4 	.word	0x200023e4
 8012e98:	2000244c 	.word	0x2000244c

08012e9c <global_stdio_init.part.0>:
 8012e9c:	b510      	push	{r4, lr}
 8012e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8012ecc <global_stdio_init.part.0+0x30>)
 8012ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8012ed0 <global_stdio_init.part.0+0x34>)
 8012ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8012ed4 <global_stdio_init.part.0+0x38>)
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2104      	movs	r1, #4
 8012eac:	f7ff ff94 	bl	8012dd8 <std>
 8012eb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	2109      	movs	r1, #9
 8012eb8:	f7ff ff8e 	bl	8012dd8 <std>
 8012ebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ec0:	2202      	movs	r2, #2
 8012ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec6:	2112      	movs	r1, #18
 8012ec8:	f7ff bf86 	b.w	8012dd8 <std>
 8012ecc:	200024b4 	.word	0x200024b4
 8012ed0:	2000237c 	.word	0x2000237c
 8012ed4:	08012e45 	.word	0x08012e45

08012ed8 <__sfp_lock_acquire>:
 8012ed8:	4801      	ldr	r0, [pc, #4]	@ (8012ee0 <__sfp_lock_acquire+0x8>)
 8012eda:	f000 bf92 	b.w	8013e02 <__retarget_lock_acquire_recursive>
 8012ede:	bf00      	nop
 8012ee0:	200024b9 	.word	0x200024b9

08012ee4 <__sfp_lock_release>:
 8012ee4:	4801      	ldr	r0, [pc, #4]	@ (8012eec <__sfp_lock_release+0x8>)
 8012ee6:	f000 bf8d 	b.w	8013e04 <__retarget_lock_release_recursive>
 8012eea:	bf00      	nop
 8012eec:	200024b9 	.word	0x200024b9

08012ef0 <__sinit>:
 8012ef0:	b510      	push	{r4, lr}
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	f7ff fff0 	bl	8012ed8 <__sfp_lock_acquire>
 8012ef8:	6a23      	ldr	r3, [r4, #32]
 8012efa:	b11b      	cbz	r3, 8012f04 <__sinit+0x14>
 8012efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f00:	f7ff bff0 	b.w	8012ee4 <__sfp_lock_release>
 8012f04:	4b04      	ldr	r3, [pc, #16]	@ (8012f18 <__sinit+0x28>)
 8012f06:	6223      	str	r3, [r4, #32]
 8012f08:	4b04      	ldr	r3, [pc, #16]	@ (8012f1c <__sinit+0x2c>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d1f5      	bne.n	8012efc <__sinit+0xc>
 8012f10:	f7ff ffc4 	bl	8012e9c <global_stdio_init.part.0>
 8012f14:	e7f2      	b.n	8012efc <__sinit+0xc>
 8012f16:	bf00      	nop
 8012f18:	08012e5d 	.word	0x08012e5d
 8012f1c:	200024b4 	.word	0x200024b4

08012f20 <sulp>:
 8012f20:	b570      	push	{r4, r5, r6, lr}
 8012f22:	4604      	mov	r4, r0
 8012f24:	460d      	mov	r5, r1
 8012f26:	ec45 4b10 	vmov	d0, r4, r5
 8012f2a:	4616      	mov	r6, r2
 8012f2c:	f003 f82e 	bl	8015f8c <__ulp>
 8012f30:	ec51 0b10 	vmov	r0, r1, d0
 8012f34:	b17e      	cbz	r6, 8012f56 <sulp+0x36>
 8012f36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f3a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	dd09      	ble.n	8012f56 <sulp+0x36>
 8012f42:	051b      	lsls	r3, r3, #20
 8012f44:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012f48:	2400      	movs	r4, #0
 8012f4a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012f4e:	4622      	mov	r2, r4
 8012f50:	462b      	mov	r3, r5
 8012f52:	f7ed fb59 	bl	8000608 <__aeabi_dmul>
 8012f56:	ec41 0b10 	vmov	d0, r0, r1
 8012f5a:	bd70      	pop	{r4, r5, r6, pc}
 8012f5c:	0000      	movs	r0, r0
	...

08012f60 <_strtod_l>:
 8012f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f64:	b09f      	sub	sp, #124	@ 0x7c
 8012f66:	460c      	mov	r4, r1
 8012f68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8012f6e:	9005      	str	r0, [sp, #20]
 8012f70:	f04f 0a00 	mov.w	sl, #0
 8012f74:	f04f 0b00 	mov.w	fp, #0
 8012f78:	460a      	mov	r2, r1
 8012f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f7c:	7811      	ldrb	r1, [r2, #0]
 8012f7e:	292b      	cmp	r1, #43	@ 0x2b
 8012f80:	d04a      	beq.n	8013018 <_strtod_l+0xb8>
 8012f82:	d838      	bhi.n	8012ff6 <_strtod_l+0x96>
 8012f84:	290d      	cmp	r1, #13
 8012f86:	d832      	bhi.n	8012fee <_strtod_l+0x8e>
 8012f88:	2908      	cmp	r1, #8
 8012f8a:	d832      	bhi.n	8012ff2 <_strtod_l+0x92>
 8012f8c:	2900      	cmp	r1, #0
 8012f8e:	d03b      	beq.n	8013008 <_strtod_l+0xa8>
 8012f90:	2200      	movs	r2, #0
 8012f92:	920e      	str	r2, [sp, #56]	@ 0x38
 8012f94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012f96:	782a      	ldrb	r2, [r5, #0]
 8012f98:	2a30      	cmp	r2, #48	@ 0x30
 8012f9a:	f040 80b2 	bne.w	8013102 <_strtod_l+0x1a2>
 8012f9e:	786a      	ldrb	r2, [r5, #1]
 8012fa0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012fa4:	2a58      	cmp	r2, #88	@ 0x58
 8012fa6:	d16e      	bne.n	8013086 <_strtod_l+0x126>
 8012fa8:	9302      	str	r3, [sp, #8]
 8012faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fac:	9301      	str	r3, [sp, #4]
 8012fae:	ab1a      	add	r3, sp, #104	@ 0x68
 8012fb0:	9300      	str	r3, [sp, #0]
 8012fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80131f0 <_strtod_l+0x290>)
 8012fb4:	9805      	ldr	r0, [sp, #20]
 8012fb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012fb8:	a919      	add	r1, sp, #100	@ 0x64
 8012fba:	f001 fe53 	bl	8014c64 <__gethex>
 8012fbe:	f010 060f 	ands.w	r6, r0, #15
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	d005      	beq.n	8012fd2 <_strtod_l+0x72>
 8012fc6:	2e06      	cmp	r6, #6
 8012fc8:	d128      	bne.n	801301c <_strtod_l+0xbc>
 8012fca:	3501      	adds	r5, #1
 8012fcc:	2300      	movs	r3, #0
 8012fce:	9519      	str	r5, [sp, #100]	@ 0x64
 8012fd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8012fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f040 858e 	bne.w	8013af6 <_strtod_l+0xb96>
 8012fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fdc:	b1cb      	cbz	r3, 8013012 <_strtod_l+0xb2>
 8012fde:	4652      	mov	r2, sl
 8012fe0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012fe4:	ec43 2b10 	vmov	d0, r2, r3
 8012fe8:	b01f      	add	sp, #124	@ 0x7c
 8012fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fee:	2920      	cmp	r1, #32
 8012ff0:	d1ce      	bne.n	8012f90 <_strtod_l+0x30>
 8012ff2:	3201      	adds	r2, #1
 8012ff4:	e7c1      	b.n	8012f7a <_strtod_l+0x1a>
 8012ff6:	292d      	cmp	r1, #45	@ 0x2d
 8012ff8:	d1ca      	bne.n	8012f90 <_strtod_l+0x30>
 8012ffa:	2101      	movs	r1, #1
 8012ffc:	910e      	str	r1, [sp, #56]	@ 0x38
 8012ffe:	1c51      	adds	r1, r2, #1
 8013000:	9119      	str	r1, [sp, #100]	@ 0x64
 8013002:	7852      	ldrb	r2, [r2, #1]
 8013004:	2a00      	cmp	r2, #0
 8013006:	d1c5      	bne.n	8012f94 <_strtod_l+0x34>
 8013008:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801300a:	9419      	str	r4, [sp, #100]	@ 0x64
 801300c:	2b00      	cmp	r3, #0
 801300e:	f040 8570 	bne.w	8013af2 <_strtod_l+0xb92>
 8013012:	4652      	mov	r2, sl
 8013014:	465b      	mov	r3, fp
 8013016:	e7e5      	b.n	8012fe4 <_strtod_l+0x84>
 8013018:	2100      	movs	r1, #0
 801301a:	e7ef      	b.n	8012ffc <_strtod_l+0x9c>
 801301c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801301e:	b13a      	cbz	r2, 8013030 <_strtod_l+0xd0>
 8013020:	2135      	movs	r1, #53	@ 0x35
 8013022:	a81c      	add	r0, sp, #112	@ 0x70
 8013024:	f003 f8ac 	bl	8016180 <__copybits>
 8013028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801302a:	9805      	ldr	r0, [sp, #20]
 801302c:	f002 fc82 	bl	8015934 <_Bfree>
 8013030:	3e01      	subs	r6, #1
 8013032:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013034:	2e04      	cmp	r6, #4
 8013036:	d806      	bhi.n	8013046 <_strtod_l+0xe6>
 8013038:	e8df f006 	tbb	[pc, r6]
 801303c:	201d0314 	.word	0x201d0314
 8013040:	14          	.byte	0x14
 8013041:	00          	.byte	0x00
 8013042:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013046:	05e1      	lsls	r1, r4, #23
 8013048:	bf48      	it	mi
 801304a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801304e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013052:	0d1b      	lsrs	r3, r3, #20
 8013054:	051b      	lsls	r3, r3, #20
 8013056:	2b00      	cmp	r3, #0
 8013058:	d1bb      	bne.n	8012fd2 <_strtod_l+0x72>
 801305a:	f000 fea7 	bl	8013dac <__errno>
 801305e:	2322      	movs	r3, #34	@ 0x22
 8013060:	6003      	str	r3, [r0, #0]
 8013062:	e7b6      	b.n	8012fd2 <_strtod_l+0x72>
 8013064:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013068:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801306c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013070:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013074:	e7e7      	b.n	8013046 <_strtod_l+0xe6>
 8013076:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80131f8 <_strtod_l+0x298>
 801307a:	e7e4      	b.n	8013046 <_strtod_l+0xe6>
 801307c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013080:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013084:	e7df      	b.n	8013046 <_strtod_l+0xe6>
 8013086:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013088:	1c5a      	adds	r2, r3, #1
 801308a:	9219      	str	r2, [sp, #100]	@ 0x64
 801308c:	785b      	ldrb	r3, [r3, #1]
 801308e:	2b30      	cmp	r3, #48	@ 0x30
 8013090:	d0f9      	beq.n	8013086 <_strtod_l+0x126>
 8013092:	2b00      	cmp	r3, #0
 8013094:	d09d      	beq.n	8012fd2 <_strtod_l+0x72>
 8013096:	2301      	movs	r3, #1
 8013098:	2700      	movs	r7, #0
 801309a:	9308      	str	r3, [sp, #32]
 801309c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801309e:	930c      	str	r3, [sp, #48]	@ 0x30
 80130a0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80130a2:	46b9      	mov	r9, r7
 80130a4:	220a      	movs	r2, #10
 80130a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80130a8:	7805      	ldrb	r5, [r0, #0]
 80130aa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80130ae:	b2d9      	uxtb	r1, r3
 80130b0:	2909      	cmp	r1, #9
 80130b2:	d928      	bls.n	8013106 <_strtod_l+0x1a6>
 80130b4:	494f      	ldr	r1, [pc, #316]	@ (80131f4 <_strtod_l+0x294>)
 80130b6:	2201      	movs	r2, #1
 80130b8:	f000 fe56 	bl	8013d68 <strncmp>
 80130bc:	2800      	cmp	r0, #0
 80130be:	d032      	beq.n	8013126 <_strtod_l+0x1c6>
 80130c0:	2000      	movs	r0, #0
 80130c2:	462a      	mov	r2, r5
 80130c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80130c6:	464d      	mov	r5, r9
 80130c8:	4603      	mov	r3, r0
 80130ca:	2a65      	cmp	r2, #101	@ 0x65
 80130cc:	d001      	beq.n	80130d2 <_strtod_l+0x172>
 80130ce:	2a45      	cmp	r2, #69	@ 0x45
 80130d0:	d114      	bne.n	80130fc <_strtod_l+0x19c>
 80130d2:	b91d      	cbnz	r5, 80130dc <_strtod_l+0x17c>
 80130d4:	9a08      	ldr	r2, [sp, #32]
 80130d6:	4302      	orrs	r2, r0
 80130d8:	d096      	beq.n	8013008 <_strtod_l+0xa8>
 80130da:	2500      	movs	r5, #0
 80130dc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80130de:	1c62      	adds	r2, r4, #1
 80130e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80130e2:	7862      	ldrb	r2, [r4, #1]
 80130e4:	2a2b      	cmp	r2, #43	@ 0x2b
 80130e6:	d07a      	beq.n	80131de <_strtod_l+0x27e>
 80130e8:	2a2d      	cmp	r2, #45	@ 0x2d
 80130ea:	d07e      	beq.n	80131ea <_strtod_l+0x28a>
 80130ec:	f04f 0c00 	mov.w	ip, #0
 80130f0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80130f4:	2909      	cmp	r1, #9
 80130f6:	f240 8085 	bls.w	8013204 <_strtod_l+0x2a4>
 80130fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80130fc:	f04f 0800 	mov.w	r8, #0
 8013100:	e0a5      	b.n	801324e <_strtod_l+0x2ee>
 8013102:	2300      	movs	r3, #0
 8013104:	e7c8      	b.n	8013098 <_strtod_l+0x138>
 8013106:	f1b9 0f08 	cmp.w	r9, #8
 801310a:	bfd8      	it	le
 801310c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801310e:	f100 0001 	add.w	r0, r0, #1
 8013112:	bfda      	itte	le
 8013114:	fb02 3301 	mlale	r3, r2, r1, r3
 8013118:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801311a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801311e:	f109 0901 	add.w	r9, r9, #1
 8013122:	9019      	str	r0, [sp, #100]	@ 0x64
 8013124:	e7bf      	b.n	80130a6 <_strtod_l+0x146>
 8013126:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013128:	1c5a      	adds	r2, r3, #1
 801312a:	9219      	str	r2, [sp, #100]	@ 0x64
 801312c:	785a      	ldrb	r2, [r3, #1]
 801312e:	f1b9 0f00 	cmp.w	r9, #0
 8013132:	d03b      	beq.n	80131ac <_strtod_l+0x24c>
 8013134:	900a      	str	r0, [sp, #40]	@ 0x28
 8013136:	464d      	mov	r5, r9
 8013138:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801313c:	2b09      	cmp	r3, #9
 801313e:	d912      	bls.n	8013166 <_strtod_l+0x206>
 8013140:	2301      	movs	r3, #1
 8013142:	e7c2      	b.n	80130ca <_strtod_l+0x16a>
 8013144:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013146:	1c5a      	adds	r2, r3, #1
 8013148:	9219      	str	r2, [sp, #100]	@ 0x64
 801314a:	785a      	ldrb	r2, [r3, #1]
 801314c:	3001      	adds	r0, #1
 801314e:	2a30      	cmp	r2, #48	@ 0x30
 8013150:	d0f8      	beq.n	8013144 <_strtod_l+0x1e4>
 8013152:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013156:	2b08      	cmp	r3, #8
 8013158:	f200 84d2 	bhi.w	8013b00 <_strtod_l+0xba0>
 801315c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801315e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013160:	2000      	movs	r0, #0
 8013162:	930c      	str	r3, [sp, #48]	@ 0x30
 8013164:	4605      	mov	r5, r0
 8013166:	3a30      	subs	r2, #48	@ 0x30
 8013168:	f100 0301 	add.w	r3, r0, #1
 801316c:	d018      	beq.n	80131a0 <_strtod_l+0x240>
 801316e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013170:	4419      	add	r1, r3
 8013172:	910a      	str	r1, [sp, #40]	@ 0x28
 8013174:	462e      	mov	r6, r5
 8013176:	f04f 0e0a 	mov.w	lr, #10
 801317a:	1c71      	adds	r1, r6, #1
 801317c:	eba1 0c05 	sub.w	ip, r1, r5
 8013180:	4563      	cmp	r3, ip
 8013182:	dc15      	bgt.n	80131b0 <_strtod_l+0x250>
 8013184:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013188:	182b      	adds	r3, r5, r0
 801318a:	2b08      	cmp	r3, #8
 801318c:	f105 0501 	add.w	r5, r5, #1
 8013190:	4405      	add	r5, r0
 8013192:	dc1a      	bgt.n	80131ca <_strtod_l+0x26a>
 8013194:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013196:	230a      	movs	r3, #10
 8013198:	fb03 2301 	mla	r3, r3, r1, r2
 801319c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801319e:	2300      	movs	r3, #0
 80131a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131a2:	1c51      	adds	r1, r2, #1
 80131a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80131a6:	7852      	ldrb	r2, [r2, #1]
 80131a8:	4618      	mov	r0, r3
 80131aa:	e7c5      	b.n	8013138 <_strtod_l+0x1d8>
 80131ac:	4648      	mov	r0, r9
 80131ae:	e7ce      	b.n	801314e <_strtod_l+0x1ee>
 80131b0:	2e08      	cmp	r6, #8
 80131b2:	dc05      	bgt.n	80131c0 <_strtod_l+0x260>
 80131b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80131b6:	fb0e f606 	mul.w	r6, lr, r6
 80131ba:	960b      	str	r6, [sp, #44]	@ 0x2c
 80131bc:	460e      	mov	r6, r1
 80131be:	e7dc      	b.n	801317a <_strtod_l+0x21a>
 80131c0:	2910      	cmp	r1, #16
 80131c2:	bfd8      	it	le
 80131c4:	fb0e f707 	mulle.w	r7, lr, r7
 80131c8:	e7f8      	b.n	80131bc <_strtod_l+0x25c>
 80131ca:	2b0f      	cmp	r3, #15
 80131cc:	bfdc      	itt	le
 80131ce:	230a      	movle	r3, #10
 80131d0:	fb03 2707 	mlale	r7, r3, r7, r2
 80131d4:	e7e3      	b.n	801319e <_strtod_l+0x23e>
 80131d6:	2300      	movs	r3, #0
 80131d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80131da:	2301      	movs	r3, #1
 80131dc:	e77a      	b.n	80130d4 <_strtod_l+0x174>
 80131de:	f04f 0c00 	mov.w	ip, #0
 80131e2:	1ca2      	adds	r2, r4, #2
 80131e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80131e6:	78a2      	ldrb	r2, [r4, #2]
 80131e8:	e782      	b.n	80130f0 <_strtod_l+0x190>
 80131ea:	f04f 0c01 	mov.w	ip, #1
 80131ee:	e7f8      	b.n	80131e2 <_strtod_l+0x282>
 80131f0:	08017da0 	.word	0x08017da0
 80131f4:	08017bed 	.word	0x08017bed
 80131f8:	7ff00000 	.word	0x7ff00000
 80131fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131fe:	1c51      	adds	r1, r2, #1
 8013200:	9119      	str	r1, [sp, #100]	@ 0x64
 8013202:	7852      	ldrb	r2, [r2, #1]
 8013204:	2a30      	cmp	r2, #48	@ 0x30
 8013206:	d0f9      	beq.n	80131fc <_strtod_l+0x29c>
 8013208:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801320c:	2908      	cmp	r1, #8
 801320e:	f63f af75 	bhi.w	80130fc <_strtod_l+0x19c>
 8013212:	3a30      	subs	r2, #48	@ 0x30
 8013214:	9209      	str	r2, [sp, #36]	@ 0x24
 8013216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013218:	920f      	str	r2, [sp, #60]	@ 0x3c
 801321a:	f04f 080a 	mov.w	r8, #10
 801321e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013220:	1c56      	adds	r6, r2, #1
 8013222:	9619      	str	r6, [sp, #100]	@ 0x64
 8013224:	7852      	ldrb	r2, [r2, #1]
 8013226:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801322a:	f1be 0f09 	cmp.w	lr, #9
 801322e:	d939      	bls.n	80132a4 <_strtod_l+0x344>
 8013230:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013232:	1a76      	subs	r6, r6, r1
 8013234:	2e08      	cmp	r6, #8
 8013236:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801323a:	dc03      	bgt.n	8013244 <_strtod_l+0x2e4>
 801323c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801323e:	4588      	cmp	r8, r1
 8013240:	bfa8      	it	ge
 8013242:	4688      	movge	r8, r1
 8013244:	f1bc 0f00 	cmp.w	ip, #0
 8013248:	d001      	beq.n	801324e <_strtod_l+0x2ee>
 801324a:	f1c8 0800 	rsb	r8, r8, #0
 801324e:	2d00      	cmp	r5, #0
 8013250:	d14e      	bne.n	80132f0 <_strtod_l+0x390>
 8013252:	9908      	ldr	r1, [sp, #32]
 8013254:	4308      	orrs	r0, r1
 8013256:	f47f aebc 	bne.w	8012fd2 <_strtod_l+0x72>
 801325a:	2b00      	cmp	r3, #0
 801325c:	f47f aed4 	bne.w	8013008 <_strtod_l+0xa8>
 8013260:	2a69      	cmp	r2, #105	@ 0x69
 8013262:	d028      	beq.n	80132b6 <_strtod_l+0x356>
 8013264:	dc25      	bgt.n	80132b2 <_strtod_l+0x352>
 8013266:	2a49      	cmp	r2, #73	@ 0x49
 8013268:	d025      	beq.n	80132b6 <_strtod_l+0x356>
 801326a:	2a4e      	cmp	r2, #78	@ 0x4e
 801326c:	f47f aecc 	bne.w	8013008 <_strtod_l+0xa8>
 8013270:	499a      	ldr	r1, [pc, #616]	@ (80134dc <_strtod_l+0x57c>)
 8013272:	a819      	add	r0, sp, #100	@ 0x64
 8013274:	f001 ff18 	bl	80150a8 <__match>
 8013278:	2800      	cmp	r0, #0
 801327a:	f43f aec5 	beq.w	8013008 <_strtod_l+0xa8>
 801327e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	2b28      	cmp	r3, #40	@ 0x28
 8013284:	d12e      	bne.n	80132e4 <_strtod_l+0x384>
 8013286:	4996      	ldr	r1, [pc, #600]	@ (80134e0 <_strtod_l+0x580>)
 8013288:	aa1c      	add	r2, sp, #112	@ 0x70
 801328a:	a819      	add	r0, sp, #100	@ 0x64
 801328c:	f001 ff20 	bl	80150d0 <__hexnan>
 8013290:	2805      	cmp	r0, #5
 8013292:	d127      	bne.n	80132e4 <_strtod_l+0x384>
 8013294:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013296:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801329a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801329e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80132a2:	e696      	b.n	8012fd2 <_strtod_l+0x72>
 80132a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80132a6:	fb08 2101 	mla	r1, r8, r1, r2
 80132aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80132ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80132b0:	e7b5      	b.n	801321e <_strtod_l+0x2be>
 80132b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80132b4:	e7da      	b.n	801326c <_strtod_l+0x30c>
 80132b6:	498b      	ldr	r1, [pc, #556]	@ (80134e4 <_strtod_l+0x584>)
 80132b8:	a819      	add	r0, sp, #100	@ 0x64
 80132ba:	f001 fef5 	bl	80150a8 <__match>
 80132be:	2800      	cmp	r0, #0
 80132c0:	f43f aea2 	beq.w	8013008 <_strtod_l+0xa8>
 80132c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132c6:	4988      	ldr	r1, [pc, #544]	@ (80134e8 <_strtod_l+0x588>)
 80132c8:	3b01      	subs	r3, #1
 80132ca:	a819      	add	r0, sp, #100	@ 0x64
 80132cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80132ce:	f001 feeb 	bl	80150a8 <__match>
 80132d2:	b910      	cbnz	r0, 80132da <_strtod_l+0x37a>
 80132d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132d6:	3301      	adds	r3, #1
 80132d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80132da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80134f8 <_strtod_l+0x598>
 80132de:	f04f 0a00 	mov.w	sl, #0
 80132e2:	e676      	b.n	8012fd2 <_strtod_l+0x72>
 80132e4:	4881      	ldr	r0, [pc, #516]	@ (80134ec <_strtod_l+0x58c>)
 80132e6:	f000 fda3 	bl	8013e30 <nan>
 80132ea:	ec5b ab10 	vmov	sl, fp, d0
 80132ee:	e670      	b.n	8012fd2 <_strtod_l+0x72>
 80132f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80132f4:	eba8 0303 	sub.w	r3, r8, r3
 80132f8:	f1b9 0f00 	cmp.w	r9, #0
 80132fc:	bf08      	it	eq
 80132fe:	46a9      	moveq	r9, r5
 8013300:	2d10      	cmp	r5, #16
 8013302:	9309      	str	r3, [sp, #36]	@ 0x24
 8013304:	462c      	mov	r4, r5
 8013306:	bfa8      	it	ge
 8013308:	2410      	movge	r4, #16
 801330a:	f7ed f903 	bl	8000514 <__aeabi_ui2d>
 801330e:	2d09      	cmp	r5, #9
 8013310:	4682      	mov	sl, r0
 8013312:	468b      	mov	fp, r1
 8013314:	dc13      	bgt.n	801333e <_strtod_l+0x3de>
 8013316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013318:	2b00      	cmp	r3, #0
 801331a:	f43f ae5a 	beq.w	8012fd2 <_strtod_l+0x72>
 801331e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013320:	dd78      	ble.n	8013414 <_strtod_l+0x4b4>
 8013322:	2b16      	cmp	r3, #22
 8013324:	dc5f      	bgt.n	80133e6 <_strtod_l+0x486>
 8013326:	4972      	ldr	r1, [pc, #456]	@ (80134f0 <_strtod_l+0x590>)
 8013328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801332c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013330:	4652      	mov	r2, sl
 8013332:	465b      	mov	r3, fp
 8013334:	f7ed f968 	bl	8000608 <__aeabi_dmul>
 8013338:	4682      	mov	sl, r0
 801333a:	468b      	mov	fp, r1
 801333c:	e649      	b.n	8012fd2 <_strtod_l+0x72>
 801333e:	4b6c      	ldr	r3, [pc, #432]	@ (80134f0 <_strtod_l+0x590>)
 8013340:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013344:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013348:	f7ed f95e 	bl	8000608 <__aeabi_dmul>
 801334c:	4682      	mov	sl, r0
 801334e:	4638      	mov	r0, r7
 8013350:	468b      	mov	fp, r1
 8013352:	f7ed f8df 	bl	8000514 <__aeabi_ui2d>
 8013356:	4602      	mov	r2, r0
 8013358:	460b      	mov	r3, r1
 801335a:	4650      	mov	r0, sl
 801335c:	4659      	mov	r1, fp
 801335e:	f7ec ff9d 	bl	800029c <__adddf3>
 8013362:	2d0f      	cmp	r5, #15
 8013364:	4682      	mov	sl, r0
 8013366:	468b      	mov	fp, r1
 8013368:	ddd5      	ble.n	8013316 <_strtod_l+0x3b6>
 801336a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801336c:	1b2c      	subs	r4, r5, r4
 801336e:	441c      	add	r4, r3
 8013370:	2c00      	cmp	r4, #0
 8013372:	f340 8093 	ble.w	801349c <_strtod_l+0x53c>
 8013376:	f014 030f 	ands.w	r3, r4, #15
 801337a:	d00a      	beq.n	8013392 <_strtod_l+0x432>
 801337c:	495c      	ldr	r1, [pc, #368]	@ (80134f0 <_strtod_l+0x590>)
 801337e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013382:	4652      	mov	r2, sl
 8013384:	465b      	mov	r3, fp
 8013386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801338a:	f7ed f93d 	bl	8000608 <__aeabi_dmul>
 801338e:	4682      	mov	sl, r0
 8013390:	468b      	mov	fp, r1
 8013392:	f034 040f 	bics.w	r4, r4, #15
 8013396:	d073      	beq.n	8013480 <_strtod_l+0x520>
 8013398:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801339c:	dd49      	ble.n	8013432 <_strtod_l+0x4d2>
 801339e:	2400      	movs	r4, #0
 80133a0:	46a0      	mov	r8, r4
 80133a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80133a4:	46a1      	mov	r9, r4
 80133a6:	9a05      	ldr	r2, [sp, #20]
 80133a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80134f8 <_strtod_l+0x598>
 80133ac:	2322      	movs	r3, #34	@ 0x22
 80133ae:	6013      	str	r3, [r2, #0]
 80133b0:	f04f 0a00 	mov.w	sl, #0
 80133b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	f43f ae0b 	beq.w	8012fd2 <_strtod_l+0x72>
 80133bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80133be:	9805      	ldr	r0, [sp, #20]
 80133c0:	f002 fab8 	bl	8015934 <_Bfree>
 80133c4:	9805      	ldr	r0, [sp, #20]
 80133c6:	4649      	mov	r1, r9
 80133c8:	f002 fab4 	bl	8015934 <_Bfree>
 80133cc:	9805      	ldr	r0, [sp, #20]
 80133ce:	4641      	mov	r1, r8
 80133d0:	f002 fab0 	bl	8015934 <_Bfree>
 80133d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80133d6:	9805      	ldr	r0, [sp, #20]
 80133d8:	f002 faac 	bl	8015934 <_Bfree>
 80133dc:	9805      	ldr	r0, [sp, #20]
 80133de:	4621      	mov	r1, r4
 80133e0:	f002 faa8 	bl	8015934 <_Bfree>
 80133e4:	e5f5      	b.n	8012fd2 <_strtod_l+0x72>
 80133e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80133ec:	4293      	cmp	r3, r2
 80133ee:	dbbc      	blt.n	801336a <_strtod_l+0x40a>
 80133f0:	4c3f      	ldr	r4, [pc, #252]	@ (80134f0 <_strtod_l+0x590>)
 80133f2:	f1c5 050f 	rsb	r5, r5, #15
 80133f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80133fa:	4652      	mov	r2, sl
 80133fc:	465b      	mov	r3, fp
 80133fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013402:	f7ed f901 	bl	8000608 <__aeabi_dmul>
 8013406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013408:	1b5d      	subs	r5, r3, r5
 801340a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801340e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013412:	e78f      	b.n	8013334 <_strtod_l+0x3d4>
 8013414:	3316      	adds	r3, #22
 8013416:	dba8      	blt.n	801336a <_strtod_l+0x40a>
 8013418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801341a:	eba3 0808 	sub.w	r8, r3, r8
 801341e:	4b34      	ldr	r3, [pc, #208]	@ (80134f0 <_strtod_l+0x590>)
 8013420:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013424:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013428:	4650      	mov	r0, sl
 801342a:	4659      	mov	r1, fp
 801342c:	f7ed fa16 	bl	800085c <__aeabi_ddiv>
 8013430:	e782      	b.n	8013338 <_strtod_l+0x3d8>
 8013432:	2300      	movs	r3, #0
 8013434:	4f2f      	ldr	r7, [pc, #188]	@ (80134f4 <_strtod_l+0x594>)
 8013436:	1124      	asrs	r4, r4, #4
 8013438:	4650      	mov	r0, sl
 801343a:	4659      	mov	r1, fp
 801343c:	461e      	mov	r6, r3
 801343e:	2c01      	cmp	r4, #1
 8013440:	dc21      	bgt.n	8013486 <_strtod_l+0x526>
 8013442:	b10b      	cbz	r3, 8013448 <_strtod_l+0x4e8>
 8013444:	4682      	mov	sl, r0
 8013446:	468b      	mov	fp, r1
 8013448:	492a      	ldr	r1, [pc, #168]	@ (80134f4 <_strtod_l+0x594>)
 801344a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801344e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013452:	4652      	mov	r2, sl
 8013454:	465b      	mov	r3, fp
 8013456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801345a:	f7ed f8d5 	bl	8000608 <__aeabi_dmul>
 801345e:	4b26      	ldr	r3, [pc, #152]	@ (80134f8 <_strtod_l+0x598>)
 8013460:	460a      	mov	r2, r1
 8013462:	400b      	ands	r3, r1
 8013464:	4925      	ldr	r1, [pc, #148]	@ (80134fc <_strtod_l+0x59c>)
 8013466:	428b      	cmp	r3, r1
 8013468:	4682      	mov	sl, r0
 801346a:	d898      	bhi.n	801339e <_strtod_l+0x43e>
 801346c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013470:	428b      	cmp	r3, r1
 8013472:	bf86      	itte	hi
 8013474:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013500 <_strtod_l+0x5a0>
 8013478:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801347c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013480:	2300      	movs	r3, #0
 8013482:	9308      	str	r3, [sp, #32]
 8013484:	e076      	b.n	8013574 <_strtod_l+0x614>
 8013486:	07e2      	lsls	r2, r4, #31
 8013488:	d504      	bpl.n	8013494 <_strtod_l+0x534>
 801348a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801348e:	f7ed f8bb 	bl	8000608 <__aeabi_dmul>
 8013492:	2301      	movs	r3, #1
 8013494:	3601      	adds	r6, #1
 8013496:	1064      	asrs	r4, r4, #1
 8013498:	3708      	adds	r7, #8
 801349a:	e7d0      	b.n	801343e <_strtod_l+0x4de>
 801349c:	d0f0      	beq.n	8013480 <_strtod_l+0x520>
 801349e:	4264      	negs	r4, r4
 80134a0:	f014 020f 	ands.w	r2, r4, #15
 80134a4:	d00a      	beq.n	80134bc <_strtod_l+0x55c>
 80134a6:	4b12      	ldr	r3, [pc, #72]	@ (80134f0 <_strtod_l+0x590>)
 80134a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134ac:	4650      	mov	r0, sl
 80134ae:	4659      	mov	r1, fp
 80134b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b4:	f7ed f9d2 	bl	800085c <__aeabi_ddiv>
 80134b8:	4682      	mov	sl, r0
 80134ba:	468b      	mov	fp, r1
 80134bc:	1124      	asrs	r4, r4, #4
 80134be:	d0df      	beq.n	8013480 <_strtod_l+0x520>
 80134c0:	2c1f      	cmp	r4, #31
 80134c2:	dd1f      	ble.n	8013504 <_strtod_l+0x5a4>
 80134c4:	2400      	movs	r4, #0
 80134c6:	46a0      	mov	r8, r4
 80134c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80134ca:	46a1      	mov	r9, r4
 80134cc:	9a05      	ldr	r2, [sp, #20]
 80134ce:	2322      	movs	r3, #34	@ 0x22
 80134d0:	f04f 0a00 	mov.w	sl, #0
 80134d4:	f04f 0b00 	mov.w	fp, #0
 80134d8:	6013      	str	r3, [r2, #0]
 80134da:	e76b      	b.n	80133b4 <_strtod_l+0x454>
 80134dc:	08017bc1 	.word	0x08017bc1
 80134e0:	08017d8c 	.word	0x08017d8c
 80134e4:	08017bb9 	.word	0x08017bb9
 80134e8:	08017bfa 	.word	0x08017bfa
 80134ec:	08017d89 	.word	0x08017d89
 80134f0:	08017f18 	.word	0x08017f18
 80134f4:	08017ef0 	.word	0x08017ef0
 80134f8:	7ff00000 	.word	0x7ff00000
 80134fc:	7ca00000 	.word	0x7ca00000
 8013500:	7fefffff 	.word	0x7fefffff
 8013504:	f014 0310 	ands.w	r3, r4, #16
 8013508:	bf18      	it	ne
 801350a:	236a      	movne	r3, #106	@ 0x6a
 801350c:	4ea9      	ldr	r6, [pc, #676]	@ (80137b4 <_strtod_l+0x854>)
 801350e:	9308      	str	r3, [sp, #32]
 8013510:	4650      	mov	r0, sl
 8013512:	4659      	mov	r1, fp
 8013514:	2300      	movs	r3, #0
 8013516:	07e7      	lsls	r7, r4, #31
 8013518:	d504      	bpl.n	8013524 <_strtod_l+0x5c4>
 801351a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801351e:	f7ed f873 	bl	8000608 <__aeabi_dmul>
 8013522:	2301      	movs	r3, #1
 8013524:	1064      	asrs	r4, r4, #1
 8013526:	f106 0608 	add.w	r6, r6, #8
 801352a:	d1f4      	bne.n	8013516 <_strtod_l+0x5b6>
 801352c:	b10b      	cbz	r3, 8013532 <_strtod_l+0x5d2>
 801352e:	4682      	mov	sl, r0
 8013530:	468b      	mov	fp, r1
 8013532:	9b08      	ldr	r3, [sp, #32]
 8013534:	b1b3      	cbz	r3, 8013564 <_strtod_l+0x604>
 8013536:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801353a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801353e:	2b00      	cmp	r3, #0
 8013540:	4659      	mov	r1, fp
 8013542:	dd0f      	ble.n	8013564 <_strtod_l+0x604>
 8013544:	2b1f      	cmp	r3, #31
 8013546:	dd56      	ble.n	80135f6 <_strtod_l+0x696>
 8013548:	2b34      	cmp	r3, #52	@ 0x34
 801354a:	bfde      	ittt	le
 801354c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8013550:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013554:	4093      	lslle	r3, r2
 8013556:	f04f 0a00 	mov.w	sl, #0
 801355a:	bfcc      	ite	gt
 801355c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013560:	ea03 0b01 	andle.w	fp, r3, r1
 8013564:	2200      	movs	r2, #0
 8013566:	2300      	movs	r3, #0
 8013568:	4650      	mov	r0, sl
 801356a:	4659      	mov	r1, fp
 801356c:	f7ed fab4 	bl	8000ad8 <__aeabi_dcmpeq>
 8013570:	2800      	cmp	r0, #0
 8013572:	d1a7      	bne.n	80134c4 <_strtod_l+0x564>
 8013574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013576:	9300      	str	r3, [sp, #0]
 8013578:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801357a:	9805      	ldr	r0, [sp, #20]
 801357c:	462b      	mov	r3, r5
 801357e:	464a      	mov	r2, r9
 8013580:	f002 fa40 	bl	8015a04 <__s2b>
 8013584:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013586:	2800      	cmp	r0, #0
 8013588:	f43f af09 	beq.w	801339e <_strtod_l+0x43e>
 801358c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801358e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013590:	2a00      	cmp	r2, #0
 8013592:	eba3 0308 	sub.w	r3, r3, r8
 8013596:	bfa8      	it	ge
 8013598:	2300      	movge	r3, #0
 801359a:	9312      	str	r3, [sp, #72]	@ 0x48
 801359c:	2400      	movs	r4, #0
 801359e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80135a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80135a4:	46a0      	mov	r8, r4
 80135a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135a8:	9805      	ldr	r0, [sp, #20]
 80135aa:	6859      	ldr	r1, [r3, #4]
 80135ac:	f002 f982 	bl	80158b4 <_Balloc>
 80135b0:	4681      	mov	r9, r0
 80135b2:	2800      	cmp	r0, #0
 80135b4:	f43f aef7 	beq.w	80133a6 <_strtod_l+0x446>
 80135b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135ba:	691a      	ldr	r2, [r3, #16]
 80135bc:	3202      	adds	r2, #2
 80135be:	f103 010c 	add.w	r1, r3, #12
 80135c2:	0092      	lsls	r2, r2, #2
 80135c4:	300c      	adds	r0, #12
 80135c6:	f000 fc23 	bl	8013e10 <memcpy>
 80135ca:	ec4b ab10 	vmov	d0, sl, fp
 80135ce:	9805      	ldr	r0, [sp, #20]
 80135d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80135d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80135d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80135d8:	f002 fd48 	bl	801606c <__d2b>
 80135dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80135de:	2800      	cmp	r0, #0
 80135e0:	f43f aee1 	beq.w	80133a6 <_strtod_l+0x446>
 80135e4:	9805      	ldr	r0, [sp, #20]
 80135e6:	2101      	movs	r1, #1
 80135e8:	f002 faa2 	bl	8015b30 <__i2b>
 80135ec:	4680      	mov	r8, r0
 80135ee:	b948      	cbnz	r0, 8013604 <_strtod_l+0x6a4>
 80135f0:	f04f 0800 	mov.w	r8, #0
 80135f4:	e6d7      	b.n	80133a6 <_strtod_l+0x446>
 80135f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80135fa:	fa02 f303 	lsl.w	r3, r2, r3
 80135fe:	ea03 0a0a 	and.w	sl, r3, sl
 8013602:	e7af      	b.n	8013564 <_strtod_l+0x604>
 8013604:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013606:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013608:	2d00      	cmp	r5, #0
 801360a:	bfab      	itete	ge
 801360c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801360e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013610:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013612:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013614:	bfac      	ite	ge
 8013616:	18ef      	addge	r7, r5, r3
 8013618:	1b5e      	sublt	r6, r3, r5
 801361a:	9b08      	ldr	r3, [sp, #32]
 801361c:	1aed      	subs	r5, r5, r3
 801361e:	4415      	add	r5, r2
 8013620:	4b65      	ldr	r3, [pc, #404]	@ (80137b8 <_strtod_l+0x858>)
 8013622:	3d01      	subs	r5, #1
 8013624:	429d      	cmp	r5, r3
 8013626:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801362a:	da50      	bge.n	80136ce <_strtod_l+0x76e>
 801362c:	1b5b      	subs	r3, r3, r5
 801362e:	2b1f      	cmp	r3, #31
 8013630:	eba2 0203 	sub.w	r2, r2, r3
 8013634:	f04f 0101 	mov.w	r1, #1
 8013638:	dc3d      	bgt.n	80136b6 <_strtod_l+0x756>
 801363a:	fa01 f303 	lsl.w	r3, r1, r3
 801363e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013640:	2300      	movs	r3, #0
 8013642:	9310      	str	r3, [sp, #64]	@ 0x40
 8013644:	18bd      	adds	r5, r7, r2
 8013646:	9b08      	ldr	r3, [sp, #32]
 8013648:	42af      	cmp	r7, r5
 801364a:	4416      	add	r6, r2
 801364c:	441e      	add	r6, r3
 801364e:	463b      	mov	r3, r7
 8013650:	bfa8      	it	ge
 8013652:	462b      	movge	r3, r5
 8013654:	42b3      	cmp	r3, r6
 8013656:	bfa8      	it	ge
 8013658:	4633      	movge	r3, r6
 801365a:	2b00      	cmp	r3, #0
 801365c:	bfc2      	ittt	gt
 801365e:	1aed      	subgt	r5, r5, r3
 8013660:	1af6      	subgt	r6, r6, r3
 8013662:	1aff      	subgt	r7, r7, r3
 8013664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013666:	2b00      	cmp	r3, #0
 8013668:	dd16      	ble.n	8013698 <_strtod_l+0x738>
 801366a:	4641      	mov	r1, r8
 801366c:	9805      	ldr	r0, [sp, #20]
 801366e:	461a      	mov	r2, r3
 8013670:	f002 fb16 	bl	8015ca0 <__pow5mult>
 8013674:	4680      	mov	r8, r0
 8013676:	2800      	cmp	r0, #0
 8013678:	d0ba      	beq.n	80135f0 <_strtod_l+0x690>
 801367a:	4601      	mov	r1, r0
 801367c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801367e:	9805      	ldr	r0, [sp, #20]
 8013680:	f002 fa6c 	bl	8015b5c <__multiply>
 8013684:	900a      	str	r0, [sp, #40]	@ 0x28
 8013686:	2800      	cmp	r0, #0
 8013688:	f43f ae8d 	beq.w	80133a6 <_strtod_l+0x446>
 801368c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801368e:	9805      	ldr	r0, [sp, #20]
 8013690:	f002 f950 	bl	8015934 <_Bfree>
 8013694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013696:	931a      	str	r3, [sp, #104]	@ 0x68
 8013698:	2d00      	cmp	r5, #0
 801369a:	dc1d      	bgt.n	80136d8 <_strtod_l+0x778>
 801369c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801369e:	2b00      	cmp	r3, #0
 80136a0:	dd23      	ble.n	80136ea <_strtod_l+0x78a>
 80136a2:	4649      	mov	r1, r9
 80136a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80136a6:	9805      	ldr	r0, [sp, #20]
 80136a8:	f002 fafa 	bl	8015ca0 <__pow5mult>
 80136ac:	4681      	mov	r9, r0
 80136ae:	b9e0      	cbnz	r0, 80136ea <_strtod_l+0x78a>
 80136b0:	f04f 0900 	mov.w	r9, #0
 80136b4:	e677      	b.n	80133a6 <_strtod_l+0x446>
 80136b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80136ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80136be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80136c2:	35e2      	adds	r5, #226	@ 0xe2
 80136c4:	fa01 f305 	lsl.w	r3, r1, r5
 80136c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80136ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80136cc:	e7ba      	b.n	8013644 <_strtod_l+0x6e4>
 80136ce:	2300      	movs	r3, #0
 80136d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80136d2:	2301      	movs	r3, #1
 80136d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80136d6:	e7b5      	b.n	8013644 <_strtod_l+0x6e4>
 80136d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136da:	9805      	ldr	r0, [sp, #20]
 80136dc:	462a      	mov	r2, r5
 80136de:	f002 fb39 	bl	8015d54 <__lshift>
 80136e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d1d9      	bne.n	801369c <_strtod_l+0x73c>
 80136e8:	e65d      	b.n	80133a6 <_strtod_l+0x446>
 80136ea:	2e00      	cmp	r6, #0
 80136ec:	dd07      	ble.n	80136fe <_strtod_l+0x79e>
 80136ee:	4649      	mov	r1, r9
 80136f0:	9805      	ldr	r0, [sp, #20]
 80136f2:	4632      	mov	r2, r6
 80136f4:	f002 fb2e 	bl	8015d54 <__lshift>
 80136f8:	4681      	mov	r9, r0
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d0d8      	beq.n	80136b0 <_strtod_l+0x750>
 80136fe:	2f00      	cmp	r7, #0
 8013700:	dd08      	ble.n	8013714 <_strtod_l+0x7b4>
 8013702:	4641      	mov	r1, r8
 8013704:	9805      	ldr	r0, [sp, #20]
 8013706:	463a      	mov	r2, r7
 8013708:	f002 fb24 	bl	8015d54 <__lshift>
 801370c:	4680      	mov	r8, r0
 801370e:	2800      	cmp	r0, #0
 8013710:	f43f ae49 	beq.w	80133a6 <_strtod_l+0x446>
 8013714:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013716:	9805      	ldr	r0, [sp, #20]
 8013718:	464a      	mov	r2, r9
 801371a:	f002 fba3 	bl	8015e64 <__mdiff>
 801371e:	4604      	mov	r4, r0
 8013720:	2800      	cmp	r0, #0
 8013722:	f43f ae40 	beq.w	80133a6 <_strtod_l+0x446>
 8013726:	68c3      	ldr	r3, [r0, #12]
 8013728:	930f      	str	r3, [sp, #60]	@ 0x3c
 801372a:	2300      	movs	r3, #0
 801372c:	60c3      	str	r3, [r0, #12]
 801372e:	4641      	mov	r1, r8
 8013730:	f002 fb7c 	bl	8015e2c <__mcmp>
 8013734:	2800      	cmp	r0, #0
 8013736:	da45      	bge.n	80137c4 <_strtod_l+0x864>
 8013738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801373a:	ea53 030a 	orrs.w	r3, r3, sl
 801373e:	d16b      	bne.n	8013818 <_strtod_l+0x8b8>
 8013740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013744:	2b00      	cmp	r3, #0
 8013746:	d167      	bne.n	8013818 <_strtod_l+0x8b8>
 8013748:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801374c:	0d1b      	lsrs	r3, r3, #20
 801374e:	051b      	lsls	r3, r3, #20
 8013750:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013754:	d960      	bls.n	8013818 <_strtod_l+0x8b8>
 8013756:	6963      	ldr	r3, [r4, #20]
 8013758:	b913      	cbnz	r3, 8013760 <_strtod_l+0x800>
 801375a:	6923      	ldr	r3, [r4, #16]
 801375c:	2b01      	cmp	r3, #1
 801375e:	dd5b      	ble.n	8013818 <_strtod_l+0x8b8>
 8013760:	4621      	mov	r1, r4
 8013762:	2201      	movs	r2, #1
 8013764:	9805      	ldr	r0, [sp, #20]
 8013766:	f002 faf5 	bl	8015d54 <__lshift>
 801376a:	4641      	mov	r1, r8
 801376c:	4604      	mov	r4, r0
 801376e:	f002 fb5d 	bl	8015e2c <__mcmp>
 8013772:	2800      	cmp	r0, #0
 8013774:	dd50      	ble.n	8013818 <_strtod_l+0x8b8>
 8013776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801377a:	9a08      	ldr	r2, [sp, #32]
 801377c:	0d1b      	lsrs	r3, r3, #20
 801377e:	051b      	lsls	r3, r3, #20
 8013780:	2a00      	cmp	r2, #0
 8013782:	d06a      	beq.n	801385a <_strtod_l+0x8fa>
 8013784:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013788:	d867      	bhi.n	801385a <_strtod_l+0x8fa>
 801378a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801378e:	f67f ae9d 	bls.w	80134cc <_strtod_l+0x56c>
 8013792:	4b0a      	ldr	r3, [pc, #40]	@ (80137bc <_strtod_l+0x85c>)
 8013794:	4650      	mov	r0, sl
 8013796:	4659      	mov	r1, fp
 8013798:	2200      	movs	r2, #0
 801379a:	f7ec ff35 	bl	8000608 <__aeabi_dmul>
 801379e:	4b08      	ldr	r3, [pc, #32]	@ (80137c0 <_strtod_l+0x860>)
 80137a0:	400b      	ands	r3, r1
 80137a2:	4682      	mov	sl, r0
 80137a4:	468b      	mov	fp, r1
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f47f ae08 	bne.w	80133bc <_strtod_l+0x45c>
 80137ac:	9a05      	ldr	r2, [sp, #20]
 80137ae:	2322      	movs	r3, #34	@ 0x22
 80137b0:	6013      	str	r3, [r2, #0]
 80137b2:	e603      	b.n	80133bc <_strtod_l+0x45c>
 80137b4:	08017db8 	.word	0x08017db8
 80137b8:	fffffc02 	.word	0xfffffc02
 80137bc:	39500000 	.word	0x39500000
 80137c0:	7ff00000 	.word	0x7ff00000
 80137c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80137c8:	d165      	bne.n	8013896 <_strtod_l+0x936>
 80137ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80137cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137d0:	b35a      	cbz	r2, 801382a <_strtod_l+0x8ca>
 80137d2:	4a9f      	ldr	r2, [pc, #636]	@ (8013a50 <_strtod_l+0xaf0>)
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d12b      	bne.n	8013830 <_strtod_l+0x8d0>
 80137d8:	9b08      	ldr	r3, [sp, #32]
 80137da:	4651      	mov	r1, sl
 80137dc:	b303      	cbz	r3, 8013820 <_strtod_l+0x8c0>
 80137de:	4b9d      	ldr	r3, [pc, #628]	@ (8013a54 <_strtod_l+0xaf4>)
 80137e0:	465a      	mov	r2, fp
 80137e2:	4013      	ands	r3, r2
 80137e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80137e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80137ec:	d81b      	bhi.n	8013826 <_strtod_l+0x8c6>
 80137ee:	0d1b      	lsrs	r3, r3, #20
 80137f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80137f4:	fa02 f303 	lsl.w	r3, r2, r3
 80137f8:	4299      	cmp	r1, r3
 80137fa:	d119      	bne.n	8013830 <_strtod_l+0x8d0>
 80137fc:	4b96      	ldr	r3, [pc, #600]	@ (8013a58 <_strtod_l+0xaf8>)
 80137fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013800:	429a      	cmp	r2, r3
 8013802:	d102      	bne.n	801380a <_strtod_l+0x8aa>
 8013804:	3101      	adds	r1, #1
 8013806:	f43f adce 	beq.w	80133a6 <_strtod_l+0x446>
 801380a:	4b92      	ldr	r3, [pc, #584]	@ (8013a54 <_strtod_l+0xaf4>)
 801380c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801380e:	401a      	ands	r2, r3
 8013810:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013814:	f04f 0a00 	mov.w	sl, #0
 8013818:	9b08      	ldr	r3, [sp, #32]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d1b9      	bne.n	8013792 <_strtod_l+0x832>
 801381e:	e5cd      	b.n	80133bc <_strtod_l+0x45c>
 8013820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013824:	e7e8      	b.n	80137f8 <_strtod_l+0x898>
 8013826:	4613      	mov	r3, r2
 8013828:	e7e6      	b.n	80137f8 <_strtod_l+0x898>
 801382a:	ea53 030a 	orrs.w	r3, r3, sl
 801382e:	d0a2      	beq.n	8013776 <_strtod_l+0x816>
 8013830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013832:	b1db      	cbz	r3, 801386c <_strtod_l+0x90c>
 8013834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013836:	4213      	tst	r3, r2
 8013838:	d0ee      	beq.n	8013818 <_strtod_l+0x8b8>
 801383a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801383c:	9a08      	ldr	r2, [sp, #32]
 801383e:	4650      	mov	r0, sl
 8013840:	4659      	mov	r1, fp
 8013842:	b1bb      	cbz	r3, 8013874 <_strtod_l+0x914>
 8013844:	f7ff fb6c 	bl	8012f20 <sulp>
 8013848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801384c:	ec53 2b10 	vmov	r2, r3, d0
 8013850:	f7ec fd24 	bl	800029c <__adddf3>
 8013854:	4682      	mov	sl, r0
 8013856:	468b      	mov	fp, r1
 8013858:	e7de      	b.n	8013818 <_strtod_l+0x8b8>
 801385a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801385e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013862:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013866:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801386a:	e7d5      	b.n	8013818 <_strtod_l+0x8b8>
 801386c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801386e:	ea13 0f0a 	tst.w	r3, sl
 8013872:	e7e1      	b.n	8013838 <_strtod_l+0x8d8>
 8013874:	f7ff fb54 	bl	8012f20 <sulp>
 8013878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801387c:	ec53 2b10 	vmov	r2, r3, d0
 8013880:	f7ec fd0a 	bl	8000298 <__aeabi_dsub>
 8013884:	2200      	movs	r2, #0
 8013886:	2300      	movs	r3, #0
 8013888:	4682      	mov	sl, r0
 801388a:	468b      	mov	fp, r1
 801388c:	f7ed f924 	bl	8000ad8 <__aeabi_dcmpeq>
 8013890:	2800      	cmp	r0, #0
 8013892:	d0c1      	beq.n	8013818 <_strtod_l+0x8b8>
 8013894:	e61a      	b.n	80134cc <_strtod_l+0x56c>
 8013896:	4641      	mov	r1, r8
 8013898:	4620      	mov	r0, r4
 801389a:	f002 fc3f 	bl	801611c <__ratio>
 801389e:	ec57 6b10 	vmov	r6, r7, d0
 80138a2:	2200      	movs	r2, #0
 80138a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80138a8:	4630      	mov	r0, r6
 80138aa:	4639      	mov	r1, r7
 80138ac:	f7ed f928 	bl	8000b00 <__aeabi_dcmple>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d06f      	beq.n	8013994 <_strtod_l+0xa34>
 80138b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d17a      	bne.n	80139b0 <_strtod_l+0xa50>
 80138ba:	f1ba 0f00 	cmp.w	sl, #0
 80138be:	d158      	bne.n	8013972 <_strtod_l+0xa12>
 80138c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d15a      	bne.n	8013980 <_strtod_l+0xa20>
 80138ca:	4b64      	ldr	r3, [pc, #400]	@ (8013a5c <_strtod_l+0xafc>)
 80138cc:	2200      	movs	r2, #0
 80138ce:	4630      	mov	r0, r6
 80138d0:	4639      	mov	r1, r7
 80138d2:	f7ed f90b 	bl	8000aec <__aeabi_dcmplt>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	d159      	bne.n	801398e <_strtod_l+0xa2e>
 80138da:	4630      	mov	r0, r6
 80138dc:	4639      	mov	r1, r7
 80138de:	4b60      	ldr	r3, [pc, #384]	@ (8013a60 <_strtod_l+0xb00>)
 80138e0:	2200      	movs	r2, #0
 80138e2:	f7ec fe91 	bl	8000608 <__aeabi_dmul>
 80138e6:	4606      	mov	r6, r0
 80138e8:	460f      	mov	r7, r1
 80138ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80138ee:	9606      	str	r6, [sp, #24]
 80138f0:	9307      	str	r3, [sp, #28]
 80138f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80138f6:	4d57      	ldr	r5, [pc, #348]	@ (8013a54 <_strtod_l+0xaf4>)
 80138f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80138fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138fe:	401d      	ands	r5, r3
 8013900:	4b58      	ldr	r3, [pc, #352]	@ (8013a64 <_strtod_l+0xb04>)
 8013902:	429d      	cmp	r5, r3
 8013904:	f040 80b2 	bne.w	8013a6c <_strtod_l+0xb0c>
 8013908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801390a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801390e:	ec4b ab10 	vmov	d0, sl, fp
 8013912:	f002 fb3b 	bl	8015f8c <__ulp>
 8013916:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801391a:	ec51 0b10 	vmov	r0, r1, d0
 801391e:	f7ec fe73 	bl	8000608 <__aeabi_dmul>
 8013922:	4652      	mov	r2, sl
 8013924:	465b      	mov	r3, fp
 8013926:	f7ec fcb9 	bl	800029c <__adddf3>
 801392a:	460b      	mov	r3, r1
 801392c:	4949      	ldr	r1, [pc, #292]	@ (8013a54 <_strtod_l+0xaf4>)
 801392e:	4a4e      	ldr	r2, [pc, #312]	@ (8013a68 <_strtod_l+0xb08>)
 8013930:	4019      	ands	r1, r3
 8013932:	4291      	cmp	r1, r2
 8013934:	4682      	mov	sl, r0
 8013936:	d942      	bls.n	80139be <_strtod_l+0xa5e>
 8013938:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801393a:	4b47      	ldr	r3, [pc, #284]	@ (8013a58 <_strtod_l+0xaf8>)
 801393c:	429a      	cmp	r2, r3
 801393e:	d103      	bne.n	8013948 <_strtod_l+0x9e8>
 8013940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013942:	3301      	adds	r3, #1
 8013944:	f43f ad2f 	beq.w	80133a6 <_strtod_l+0x446>
 8013948:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013a58 <_strtod_l+0xaf8>
 801394c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013950:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013952:	9805      	ldr	r0, [sp, #20]
 8013954:	f001 ffee 	bl	8015934 <_Bfree>
 8013958:	9805      	ldr	r0, [sp, #20]
 801395a:	4649      	mov	r1, r9
 801395c:	f001 ffea 	bl	8015934 <_Bfree>
 8013960:	9805      	ldr	r0, [sp, #20]
 8013962:	4641      	mov	r1, r8
 8013964:	f001 ffe6 	bl	8015934 <_Bfree>
 8013968:	9805      	ldr	r0, [sp, #20]
 801396a:	4621      	mov	r1, r4
 801396c:	f001 ffe2 	bl	8015934 <_Bfree>
 8013970:	e619      	b.n	80135a6 <_strtod_l+0x646>
 8013972:	f1ba 0f01 	cmp.w	sl, #1
 8013976:	d103      	bne.n	8013980 <_strtod_l+0xa20>
 8013978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801397a:	2b00      	cmp	r3, #0
 801397c:	f43f ada6 	beq.w	80134cc <_strtod_l+0x56c>
 8013980:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013a30 <_strtod_l+0xad0>
 8013984:	4f35      	ldr	r7, [pc, #212]	@ (8013a5c <_strtod_l+0xafc>)
 8013986:	ed8d 7b06 	vstr	d7, [sp, #24]
 801398a:	2600      	movs	r6, #0
 801398c:	e7b1      	b.n	80138f2 <_strtod_l+0x992>
 801398e:	4f34      	ldr	r7, [pc, #208]	@ (8013a60 <_strtod_l+0xb00>)
 8013990:	2600      	movs	r6, #0
 8013992:	e7aa      	b.n	80138ea <_strtod_l+0x98a>
 8013994:	4b32      	ldr	r3, [pc, #200]	@ (8013a60 <_strtod_l+0xb00>)
 8013996:	4630      	mov	r0, r6
 8013998:	4639      	mov	r1, r7
 801399a:	2200      	movs	r2, #0
 801399c:	f7ec fe34 	bl	8000608 <__aeabi_dmul>
 80139a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139a2:	4606      	mov	r6, r0
 80139a4:	460f      	mov	r7, r1
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d09f      	beq.n	80138ea <_strtod_l+0x98a>
 80139aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80139ae:	e7a0      	b.n	80138f2 <_strtod_l+0x992>
 80139b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013a38 <_strtod_l+0xad8>
 80139b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139b8:	ec57 6b17 	vmov	r6, r7, d7
 80139bc:	e799      	b.n	80138f2 <_strtod_l+0x992>
 80139be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80139c2:	9b08      	ldr	r3, [sp, #32]
 80139c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d1c1      	bne.n	8013950 <_strtod_l+0x9f0>
 80139cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80139d0:	0d1b      	lsrs	r3, r3, #20
 80139d2:	051b      	lsls	r3, r3, #20
 80139d4:	429d      	cmp	r5, r3
 80139d6:	d1bb      	bne.n	8013950 <_strtod_l+0x9f0>
 80139d8:	4630      	mov	r0, r6
 80139da:	4639      	mov	r1, r7
 80139dc:	f7ed f974 	bl	8000cc8 <__aeabi_d2lz>
 80139e0:	f7ec fde4 	bl	80005ac <__aeabi_l2d>
 80139e4:	4602      	mov	r2, r0
 80139e6:	460b      	mov	r3, r1
 80139e8:	4630      	mov	r0, r6
 80139ea:	4639      	mov	r1, r7
 80139ec:	f7ec fc54 	bl	8000298 <__aeabi_dsub>
 80139f0:	460b      	mov	r3, r1
 80139f2:	4602      	mov	r2, r0
 80139f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80139f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80139fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139fe:	ea46 060a 	orr.w	r6, r6, sl
 8013a02:	431e      	orrs	r6, r3
 8013a04:	d06f      	beq.n	8013ae6 <_strtod_l+0xb86>
 8013a06:	a30e      	add	r3, pc, #56	@ (adr r3, 8013a40 <_strtod_l+0xae0>)
 8013a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0c:	f7ed f86e 	bl	8000aec <__aeabi_dcmplt>
 8013a10:	2800      	cmp	r0, #0
 8013a12:	f47f acd3 	bne.w	80133bc <_strtod_l+0x45c>
 8013a16:	a30c      	add	r3, pc, #48	@ (adr r3, 8013a48 <_strtod_l+0xae8>)
 8013a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a20:	f7ed f882 	bl	8000b28 <__aeabi_dcmpgt>
 8013a24:	2800      	cmp	r0, #0
 8013a26:	d093      	beq.n	8013950 <_strtod_l+0x9f0>
 8013a28:	e4c8      	b.n	80133bc <_strtod_l+0x45c>
 8013a2a:	bf00      	nop
 8013a2c:	f3af 8000 	nop.w
 8013a30:	00000000 	.word	0x00000000
 8013a34:	bff00000 	.word	0xbff00000
 8013a38:	00000000 	.word	0x00000000
 8013a3c:	3ff00000 	.word	0x3ff00000
 8013a40:	94a03595 	.word	0x94a03595
 8013a44:	3fdfffff 	.word	0x3fdfffff
 8013a48:	35afe535 	.word	0x35afe535
 8013a4c:	3fe00000 	.word	0x3fe00000
 8013a50:	000fffff 	.word	0x000fffff
 8013a54:	7ff00000 	.word	0x7ff00000
 8013a58:	7fefffff 	.word	0x7fefffff
 8013a5c:	3ff00000 	.word	0x3ff00000
 8013a60:	3fe00000 	.word	0x3fe00000
 8013a64:	7fe00000 	.word	0x7fe00000
 8013a68:	7c9fffff 	.word	0x7c9fffff
 8013a6c:	9b08      	ldr	r3, [sp, #32]
 8013a6e:	b323      	cbz	r3, 8013aba <_strtod_l+0xb5a>
 8013a70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013a74:	d821      	bhi.n	8013aba <_strtod_l+0xb5a>
 8013a76:	a328      	add	r3, pc, #160	@ (adr r3, 8013b18 <_strtod_l+0xbb8>)
 8013a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	4639      	mov	r1, r7
 8013a80:	f7ed f83e 	bl	8000b00 <__aeabi_dcmple>
 8013a84:	b1a0      	cbz	r0, 8013ab0 <_strtod_l+0xb50>
 8013a86:	4639      	mov	r1, r7
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f7ed f895 	bl	8000bb8 <__aeabi_d2uiz>
 8013a8e:	2801      	cmp	r0, #1
 8013a90:	bf38      	it	cc
 8013a92:	2001      	movcc	r0, #1
 8013a94:	f7ec fd3e 	bl	8000514 <__aeabi_ui2d>
 8013a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	460f      	mov	r7, r1
 8013a9e:	b9fb      	cbnz	r3, 8013ae0 <_strtod_l+0xb80>
 8013aa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013aa4:	9014      	str	r0, [sp, #80]	@ 0x50
 8013aa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8013aa8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013aac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013ab0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013ab2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013ab6:	1b5b      	subs	r3, r3, r5
 8013ab8:	9311      	str	r3, [sp, #68]	@ 0x44
 8013aba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013abe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013ac2:	f002 fa63 	bl	8015f8c <__ulp>
 8013ac6:	4650      	mov	r0, sl
 8013ac8:	ec53 2b10 	vmov	r2, r3, d0
 8013acc:	4659      	mov	r1, fp
 8013ace:	f7ec fd9b 	bl	8000608 <__aeabi_dmul>
 8013ad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013ad6:	f7ec fbe1 	bl	800029c <__adddf3>
 8013ada:	4682      	mov	sl, r0
 8013adc:	468b      	mov	fp, r1
 8013ade:	e770      	b.n	80139c2 <_strtod_l+0xa62>
 8013ae0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013ae4:	e7e0      	b.n	8013aa8 <_strtod_l+0xb48>
 8013ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013b20 <_strtod_l+0xbc0>)
 8013ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aec:	f7ec fffe 	bl	8000aec <__aeabi_dcmplt>
 8013af0:	e798      	b.n	8013a24 <_strtod_l+0xac4>
 8013af2:	2300      	movs	r3, #0
 8013af4:	930e      	str	r3, [sp, #56]	@ 0x38
 8013af6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013afa:	6013      	str	r3, [r2, #0]
 8013afc:	f7ff ba6d 	b.w	8012fda <_strtod_l+0x7a>
 8013b00:	2a65      	cmp	r2, #101	@ 0x65
 8013b02:	f43f ab68 	beq.w	80131d6 <_strtod_l+0x276>
 8013b06:	2a45      	cmp	r2, #69	@ 0x45
 8013b08:	f43f ab65 	beq.w	80131d6 <_strtod_l+0x276>
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	f7ff bba0 	b.w	8013252 <_strtod_l+0x2f2>
 8013b12:	bf00      	nop
 8013b14:	f3af 8000 	nop.w
 8013b18:	ffc00000 	.word	0xffc00000
 8013b1c:	41dfffff 	.word	0x41dfffff
 8013b20:	94a03595 	.word	0x94a03595
 8013b24:	3fcfffff 	.word	0x3fcfffff

08013b28 <_strtod_r>:
 8013b28:	4b01      	ldr	r3, [pc, #4]	@ (8013b30 <_strtod_r+0x8>)
 8013b2a:	f7ff ba19 	b.w	8012f60 <_strtod_l>
 8013b2e:	bf00      	nop
 8013b30:	20000068 	.word	0x20000068

08013b34 <_strtol_l.isra.0>:
 8013b34:	2b24      	cmp	r3, #36	@ 0x24
 8013b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b3a:	4686      	mov	lr, r0
 8013b3c:	4690      	mov	r8, r2
 8013b3e:	d801      	bhi.n	8013b44 <_strtol_l.isra.0+0x10>
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	d106      	bne.n	8013b52 <_strtol_l.isra.0+0x1e>
 8013b44:	f000 f932 	bl	8013dac <__errno>
 8013b48:	2316      	movs	r3, #22
 8013b4a:	6003      	str	r3, [r0, #0]
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b52:	4834      	ldr	r0, [pc, #208]	@ (8013c24 <_strtol_l.isra.0+0xf0>)
 8013b54:	460d      	mov	r5, r1
 8013b56:	462a      	mov	r2, r5
 8013b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b5c:	5d06      	ldrb	r6, [r0, r4]
 8013b5e:	f016 0608 	ands.w	r6, r6, #8
 8013b62:	d1f8      	bne.n	8013b56 <_strtol_l.isra.0+0x22>
 8013b64:	2c2d      	cmp	r4, #45	@ 0x2d
 8013b66:	d110      	bne.n	8013b8a <_strtol_l.isra.0+0x56>
 8013b68:	782c      	ldrb	r4, [r5, #0]
 8013b6a:	2601      	movs	r6, #1
 8013b6c:	1c95      	adds	r5, r2, #2
 8013b6e:	f033 0210 	bics.w	r2, r3, #16
 8013b72:	d115      	bne.n	8013ba0 <_strtol_l.isra.0+0x6c>
 8013b74:	2c30      	cmp	r4, #48	@ 0x30
 8013b76:	d10d      	bne.n	8013b94 <_strtol_l.isra.0+0x60>
 8013b78:	782a      	ldrb	r2, [r5, #0]
 8013b7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013b7e:	2a58      	cmp	r2, #88	@ 0x58
 8013b80:	d108      	bne.n	8013b94 <_strtol_l.isra.0+0x60>
 8013b82:	786c      	ldrb	r4, [r5, #1]
 8013b84:	3502      	adds	r5, #2
 8013b86:	2310      	movs	r3, #16
 8013b88:	e00a      	b.n	8013ba0 <_strtol_l.isra.0+0x6c>
 8013b8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8013b8c:	bf04      	itt	eq
 8013b8e:	782c      	ldrbeq	r4, [r5, #0]
 8013b90:	1c95      	addeq	r5, r2, #2
 8013b92:	e7ec      	b.n	8013b6e <_strtol_l.isra.0+0x3a>
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1f6      	bne.n	8013b86 <_strtol_l.isra.0+0x52>
 8013b98:	2c30      	cmp	r4, #48	@ 0x30
 8013b9a:	bf14      	ite	ne
 8013b9c:	230a      	movne	r3, #10
 8013b9e:	2308      	moveq	r3, #8
 8013ba0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013ba4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8013ba8:	2200      	movs	r2, #0
 8013baa:	fbbc f9f3 	udiv	r9, ip, r3
 8013bae:	4610      	mov	r0, r2
 8013bb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8013bb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013bb8:	2f09      	cmp	r7, #9
 8013bba:	d80f      	bhi.n	8013bdc <_strtol_l.isra.0+0xa8>
 8013bbc:	463c      	mov	r4, r7
 8013bbe:	42a3      	cmp	r3, r4
 8013bc0:	dd1b      	ble.n	8013bfa <_strtol_l.isra.0+0xc6>
 8013bc2:	1c57      	adds	r7, r2, #1
 8013bc4:	d007      	beq.n	8013bd6 <_strtol_l.isra.0+0xa2>
 8013bc6:	4581      	cmp	r9, r0
 8013bc8:	d314      	bcc.n	8013bf4 <_strtol_l.isra.0+0xc0>
 8013bca:	d101      	bne.n	8013bd0 <_strtol_l.isra.0+0x9c>
 8013bcc:	45a2      	cmp	sl, r4
 8013bce:	db11      	blt.n	8013bf4 <_strtol_l.isra.0+0xc0>
 8013bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013bda:	e7eb      	b.n	8013bb4 <_strtol_l.isra.0+0x80>
 8013bdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013be0:	2f19      	cmp	r7, #25
 8013be2:	d801      	bhi.n	8013be8 <_strtol_l.isra.0+0xb4>
 8013be4:	3c37      	subs	r4, #55	@ 0x37
 8013be6:	e7ea      	b.n	8013bbe <_strtol_l.isra.0+0x8a>
 8013be8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013bec:	2f19      	cmp	r7, #25
 8013bee:	d804      	bhi.n	8013bfa <_strtol_l.isra.0+0xc6>
 8013bf0:	3c57      	subs	r4, #87	@ 0x57
 8013bf2:	e7e4      	b.n	8013bbe <_strtol_l.isra.0+0x8a>
 8013bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013bf8:	e7ed      	b.n	8013bd6 <_strtol_l.isra.0+0xa2>
 8013bfa:	1c53      	adds	r3, r2, #1
 8013bfc:	d108      	bne.n	8013c10 <_strtol_l.isra.0+0xdc>
 8013bfe:	2322      	movs	r3, #34	@ 0x22
 8013c00:	f8ce 3000 	str.w	r3, [lr]
 8013c04:	4660      	mov	r0, ip
 8013c06:	f1b8 0f00 	cmp.w	r8, #0
 8013c0a:	d0a0      	beq.n	8013b4e <_strtol_l.isra.0+0x1a>
 8013c0c:	1e69      	subs	r1, r5, #1
 8013c0e:	e006      	b.n	8013c1e <_strtol_l.isra.0+0xea>
 8013c10:	b106      	cbz	r6, 8013c14 <_strtol_l.isra.0+0xe0>
 8013c12:	4240      	negs	r0, r0
 8013c14:	f1b8 0f00 	cmp.w	r8, #0
 8013c18:	d099      	beq.n	8013b4e <_strtol_l.isra.0+0x1a>
 8013c1a:	2a00      	cmp	r2, #0
 8013c1c:	d1f6      	bne.n	8013c0c <_strtol_l.isra.0+0xd8>
 8013c1e:	f8c8 1000 	str.w	r1, [r8]
 8013c22:	e794      	b.n	8013b4e <_strtol_l.isra.0+0x1a>
 8013c24:	08017de1 	.word	0x08017de1

08013c28 <_strtol_r>:
 8013c28:	f7ff bf84 	b.w	8013b34 <_strtol_l.isra.0>

08013c2c <_fwalk_sglue>:
 8013c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c30:	4607      	mov	r7, r0
 8013c32:	4688      	mov	r8, r1
 8013c34:	4614      	mov	r4, r2
 8013c36:	2600      	movs	r6, #0
 8013c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8013c40:	d505      	bpl.n	8013c4e <_fwalk_sglue+0x22>
 8013c42:	6824      	ldr	r4, [r4, #0]
 8013c44:	2c00      	cmp	r4, #0
 8013c46:	d1f7      	bne.n	8013c38 <_fwalk_sglue+0xc>
 8013c48:	4630      	mov	r0, r6
 8013c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c4e:	89ab      	ldrh	r3, [r5, #12]
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d907      	bls.n	8013c64 <_fwalk_sglue+0x38>
 8013c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c58:	3301      	adds	r3, #1
 8013c5a:	d003      	beq.n	8013c64 <_fwalk_sglue+0x38>
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	4638      	mov	r0, r7
 8013c60:	47c0      	blx	r8
 8013c62:	4306      	orrs	r6, r0
 8013c64:	3568      	adds	r5, #104	@ 0x68
 8013c66:	e7e9      	b.n	8013c3c <_fwalk_sglue+0x10>

08013c68 <iprintf>:
 8013c68:	b40f      	push	{r0, r1, r2, r3}
 8013c6a:	b507      	push	{r0, r1, r2, lr}
 8013c6c:	4906      	ldr	r1, [pc, #24]	@ (8013c88 <iprintf+0x20>)
 8013c6e:	ab04      	add	r3, sp, #16
 8013c70:	6808      	ldr	r0, [r1, #0]
 8013c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c76:	6881      	ldr	r1, [r0, #8]
 8013c78:	9301      	str	r3, [sp, #4]
 8013c7a:	f001 fc45 	bl	8015508 <_vfiprintf_r>
 8013c7e:	b003      	add	sp, #12
 8013c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c84:	b004      	add	sp, #16
 8013c86:	4770      	bx	lr
 8013c88:	200001d4 	.word	0x200001d4

08013c8c <putchar>:
 8013c8c:	4b02      	ldr	r3, [pc, #8]	@ (8013c98 <putchar+0xc>)
 8013c8e:	4601      	mov	r1, r0
 8013c90:	6818      	ldr	r0, [r3, #0]
 8013c92:	6882      	ldr	r2, [r0, #8]
 8013c94:	f002 bc2d 	b.w	80164f2 <_putc_r>
 8013c98:	200001d4 	.word	0x200001d4

08013c9c <_puts_r>:
 8013c9c:	6a03      	ldr	r3, [r0, #32]
 8013c9e:	b570      	push	{r4, r5, r6, lr}
 8013ca0:	6884      	ldr	r4, [r0, #8]
 8013ca2:	4605      	mov	r5, r0
 8013ca4:	460e      	mov	r6, r1
 8013ca6:	b90b      	cbnz	r3, 8013cac <_puts_r+0x10>
 8013ca8:	f7ff f922 	bl	8012ef0 <__sinit>
 8013cac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013cae:	07db      	lsls	r3, r3, #31
 8013cb0:	d405      	bmi.n	8013cbe <_puts_r+0x22>
 8013cb2:	89a3      	ldrh	r3, [r4, #12]
 8013cb4:	0598      	lsls	r0, r3, #22
 8013cb6:	d402      	bmi.n	8013cbe <_puts_r+0x22>
 8013cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013cba:	f000 f8a2 	bl	8013e02 <__retarget_lock_acquire_recursive>
 8013cbe:	89a3      	ldrh	r3, [r4, #12]
 8013cc0:	0719      	lsls	r1, r3, #28
 8013cc2:	d502      	bpl.n	8013cca <_puts_r+0x2e>
 8013cc4:	6923      	ldr	r3, [r4, #16]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d135      	bne.n	8013d36 <_puts_r+0x9a>
 8013cca:	4621      	mov	r1, r4
 8013ccc:	4628      	mov	r0, r5
 8013cce:	f002 fb4b 	bl	8016368 <__swsetup_r>
 8013cd2:	b380      	cbz	r0, 8013d36 <_puts_r+0x9a>
 8013cd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8013cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013cda:	07da      	lsls	r2, r3, #31
 8013cdc:	d405      	bmi.n	8013cea <_puts_r+0x4e>
 8013cde:	89a3      	ldrh	r3, [r4, #12]
 8013ce0:	059b      	lsls	r3, r3, #22
 8013ce2:	d402      	bmi.n	8013cea <_puts_r+0x4e>
 8013ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ce6:	f000 f88d 	bl	8013e04 <__retarget_lock_release_recursive>
 8013cea:	4628      	mov	r0, r5
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	da04      	bge.n	8013cfc <_puts_r+0x60>
 8013cf2:	69a2      	ldr	r2, [r4, #24]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	dc17      	bgt.n	8013d28 <_puts_r+0x8c>
 8013cf8:	290a      	cmp	r1, #10
 8013cfa:	d015      	beq.n	8013d28 <_puts_r+0x8c>
 8013cfc:	6823      	ldr	r3, [r4, #0]
 8013cfe:	1c5a      	adds	r2, r3, #1
 8013d00:	6022      	str	r2, [r4, #0]
 8013d02:	7019      	strb	r1, [r3, #0]
 8013d04:	68a3      	ldr	r3, [r4, #8]
 8013d06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	60a3      	str	r3, [r4, #8]
 8013d0e:	2900      	cmp	r1, #0
 8013d10:	d1ed      	bne.n	8013cee <_puts_r+0x52>
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	da11      	bge.n	8013d3a <_puts_r+0x9e>
 8013d16:	4622      	mov	r2, r4
 8013d18:	210a      	movs	r1, #10
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	f002 fae5 	bl	80162ea <__swbuf_r>
 8013d20:	3001      	adds	r0, #1
 8013d22:	d0d7      	beq.n	8013cd4 <_puts_r+0x38>
 8013d24:	250a      	movs	r5, #10
 8013d26:	e7d7      	b.n	8013cd8 <_puts_r+0x3c>
 8013d28:	4622      	mov	r2, r4
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	f002 fadd 	bl	80162ea <__swbuf_r>
 8013d30:	3001      	adds	r0, #1
 8013d32:	d1e7      	bne.n	8013d04 <_puts_r+0x68>
 8013d34:	e7ce      	b.n	8013cd4 <_puts_r+0x38>
 8013d36:	3e01      	subs	r6, #1
 8013d38:	e7e4      	b.n	8013d04 <_puts_r+0x68>
 8013d3a:	6823      	ldr	r3, [r4, #0]
 8013d3c:	1c5a      	adds	r2, r3, #1
 8013d3e:	6022      	str	r2, [r4, #0]
 8013d40:	220a      	movs	r2, #10
 8013d42:	701a      	strb	r2, [r3, #0]
 8013d44:	e7ee      	b.n	8013d24 <_puts_r+0x88>
	...

08013d48 <puts>:
 8013d48:	4b02      	ldr	r3, [pc, #8]	@ (8013d54 <puts+0xc>)
 8013d4a:	4601      	mov	r1, r0
 8013d4c:	6818      	ldr	r0, [r3, #0]
 8013d4e:	f7ff bfa5 	b.w	8013c9c <_puts_r>
 8013d52:	bf00      	nop
 8013d54:	200001d4 	.word	0x200001d4

08013d58 <memset>:
 8013d58:	4402      	add	r2, r0
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d100      	bne.n	8013d62 <memset+0xa>
 8013d60:	4770      	bx	lr
 8013d62:	f803 1b01 	strb.w	r1, [r3], #1
 8013d66:	e7f9      	b.n	8013d5c <memset+0x4>

08013d68 <strncmp>:
 8013d68:	b510      	push	{r4, lr}
 8013d6a:	b16a      	cbz	r2, 8013d88 <strncmp+0x20>
 8013d6c:	3901      	subs	r1, #1
 8013d6e:	1884      	adds	r4, r0, r2
 8013d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d103      	bne.n	8013d84 <strncmp+0x1c>
 8013d7c:	42a0      	cmp	r0, r4
 8013d7e:	d001      	beq.n	8013d84 <strncmp+0x1c>
 8013d80:	2a00      	cmp	r2, #0
 8013d82:	d1f5      	bne.n	8013d70 <strncmp+0x8>
 8013d84:	1ad0      	subs	r0, r2, r3
 8013d86:	bd10      	pop	{r4, pc}
 8013d88:	4610      	mov	r0, r2
 8013d8a:	e7fc      	b.n	8013d86 <strncmp+0x1e>

08013d8c <_sbrk_r>:
 8013d8c:	b538      	push	{r3, r4, r5, lr}
 8013d8e:	4d06      	ldr	r5, [pc, #24]	@ (8013da8 <_sbrk_r+0x1c>)
 8013d90:	2300      	movs	r3, #0
 8013d92:	4604      	mov	r4, r0
 8013d94:	4608      	mov	r0, r1
 8013d96:	602b      	str	r3, [r5, #0]
 8013d98:	f7f7 f814 	bl	800adc4 <_sbrk>
 8013d9c:	1c43      	adds	r3, r0, #1
 8013d9e:	d102      	bne.n	8013da6 <_sbrk_r+0x1a>
 8013da0:	682b      	ldr	r3, [r5, #0]
 8013da2:	b103      	cbz	r3, 8013da6 <_sbrk_r+0x1a>
 8013da4:	6023      	str	r3, [r4, #0]
 8013da6:	bd38      	pop	{r3, r4, r5, pc}
 8013da8:	200024bc 	.word	0x200024bc

08013dac <__errno>:
 8013dac:	4b01      	ldr	r3, [pc, #4]	@ (8013db4 <__errno+0x8>)
 8013dae:	6818      	ldr	r0, [r3, #0]
 8013db0:	4770      	bx	lr
 8013db2:	bf00      	nop
 8013db4:	200001d4 	.word	0x200001d4

08013db8 <__libc_init_array>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	4d0d      	ldr	r5, [pc, #52]	@ (8013df0 <__libc_init_array+0x38>)
 8013dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8013df4 <__libc_init_array+0x3c>)
 8013dbe:	1b64      	subs	r4, r4, r5
 8013dc0:	10a4      	asrs	r4, r4, #2
 8013dc2:	2600      	movs	r6, #0
 8013dc4:	42a6      	cmp	r6, r4
 8013dc6:	d109      	bne.n	8013ddc <__libc_init_array+0x24>
 8013dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8013df8 <__libc_init_array+0x40>)
 8013dca:	4c0c      	ldr	r4, [pc, #48]	@ (8013dfc <__libc_init_array+0x44>)
 8013dcc:	f002 fccc 	bl	8016768 <_init>
 8013dd0:	1b64      	subs	r4, r4, r5
 8013dd2:	10a4      	asrs	r4, r4, #2
 8013dd4:	2600      	movs	r6, #0
 8013dd6:	42a6      	cmp	r6, r4
 8013dd8:	d105      	bne.n	8013de6 <__libc_init_array+0x2e>
 8013dda:	bd70      	pop	{r4, r5, r6, pc}
 8013ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013de0:	4798      	blx	r3
 8013de2:	3601      	adds	r6, #1
 8013de4:	e7ee      	b.n	8013dc4 <__libc_init_array+0xc>
 8013de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013dea:	4798      	blx	r3
 8013dec:	3601      	adds	r6, #1
 8013dee:	e7f2      	b.n	8013dd6 <__libc_init_array+0x1e>
	...

08013e00 <__retarget_lock_init_recursive>:
 8013e00:	4770      	bx	lr

08013e02 <__retarget_lock_acquire_recursive>:
 8013e02:	4770      	bx	lr

08013e04 <__retarget_lock_release_recursive>:
 8013e04:	4770      	bx	lr
	...

08013e08 <_localeconv_r>:
 8013e08:	4800      	ldr	r0, [pc, #0]	@ (8013e0c <_localeconv_r+0x4>)
 8013e0a:	4770      	bx	lr
 8013e0c:	20000158 	.word	0x20000158

08013e10 <memcpy>:
 8013e10:	440a      	add	r2, r1
 8013e12:	4291      	cmp	r1, r2
 8013e14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013e18:	d100      	bne.n	8013e1c <memcpy+0xc>
 8013e1a:	4770      	bx	lr
 8013e1c:	b510      	push	{r4, lr}
 8013e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e26:	4291      	cmp	r1, r2
 8013e28:	d1f9      	bne.n	8013e1e <memcpy+0xe>
 8013e2a:	bd10      	pop	{r4, pc}
 8013e2c:	0000      	movs	r0, r0
	...

08013e30 <nan>:
 8013e30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013e38 <nan+0x8>
 8013e34:	4770      	bx	lr
 8013e36:	bf00      	nop
 8013e38:	00000000 	.word	0x00000000
 8013e3c:	7ff80000 	.word	0x7ff80000

08013e40 <nanf>:
 8013e40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013e48 <nanf+0x8>
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	7fc00000 	.word	0x7fc00000

08013e4c <quorem>:
 8013e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e50:	6903      	ldr	r3, [r0, #16]
 8013e52:	690c      	ldr	r4, [r1, #16]
 8013e54:	42a3      	cmp	r3, r4
 8013e56:	4607      	mov	r7, r0
 8013e58:	db7e      	blt.n	8013f58 <quorem+0x10c>
 8013e5a:	3c01      	subs	r4, #1
 8013e5c:	f101 0814 	add.w	r8, r1, #20
 8013e60:	00a3      	lsls	r3, r4, #2
 8013e62:	f100 0514 	add.w	r5, r0, #20
 8013e66:	9300      	str	r3, [sp, #0]
 8013e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013e6c:	9301      	str	r3, [sp, #4]
 8013e6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013e72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013e76:	3301      	adds	r3, #1
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013e7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013e82:	d32e      	bcc.n	8013ee2 <quorem+0x96>
 8013e84:	f04f 0a00 	mov.w	sl, #0
 8013e88:	46c4      	mov	ip, r8
 8013e8a:	46ae      	mov	lr, r5
 8013e8c:	46d3      	mov	fp, sl
 8013e8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013e92:	b298      	uxth	r0, r3
 8013e94:	fb06 a000 	mla	r0, r6, r0, sl
 8013e98:	0c02      	lsrs	r2, r0, #16
 8013e9a:	0c1b      	lsrs	r3, r3, #16
 8013e9c:	fb06 2303 	mla	r3, r6, r3, r2
 8013ea0:	f8de 2000 	ldr.w	r2, [lr]
 8013ea4:	b280      	uxth	r0, r0
 8013ea6:	b292      	uxth	r2, r2
 8013ea8:	1a12      	subs	r2, r2, r0
 8013eaa:	445a      	add	r2, fp
 8013eac:	f8de 0000 	ldr.w	r0, [lr]
 8013eb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013eba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013ebe:	b292      	uxth	r2, r2
 8013ec0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013ec4:	45e1      	cmp	r9, ip
 8013ec6:	f84e 2b04 	str.w	r2, [lr], #4
 8013eca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013ece:	d2de      	bcs.n	8013e8e <quorem+0x42>
 8013ed0:	9b00      	ldr	r3, [sp, #0]
 8013ed2:	58eb      	ldr	r3, [r5, r3]
 8013ed4:	b92b      	cbnz	r3, 8013ee2 <quorem+0x96>
 8013ed6:	9b01      	ldr	r3, [sp, #4]
 8013ed8:	3b04      	subs	r3, #4
 8013eda:	429d      	cmp	r5, r3
 8013edc:	461a      	mov	r2, r3
 8013ede:	d32f      	bcc.n	8013f40 <quorem+0xf4>
 8013ee0:	613c      	str	r4, [r7, #16]
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	f001 ffa2 	bl	8015e2c <__mcmp>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	db25      	blt.n	8013f38 <quorem+0xec>
 8013eec:	4629      	mov	r1, r5
 8013eee:	2000      	movs	r0, #0
 8013ef0:	f858 2b04 	ldr.w	r2, [r8], #4
 8013ef4:	f8d1 c000 	ldr.w	ip, [r1]
 8013ef8:	fa1f fe82 	uxth.w	lr, r2
 8013efc:	fa1f f38c 	uxth.w	r3, ip
 8013f00:	eba3 030e 	sub.w	r3, r3, lr
 8013f04:	4403      	add	r3, r0
 8013f06:	0c12      	lsrs	r2, r2, #16
 8013f08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013f0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f16:	45c1      	cmp	r9, r8
 8013f18:	f841 3b04 	str.w	r3, [r1], #4
 8013f1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013f20:	d2e6      	bcs.n	8013ef0 <quorem+0xa4>
 8013f22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f2a:	b922      	cbnz	r2, 8013f36 <quorem+0xea>
 8013f2c:	3b04      	subs	r3, #4
 8013f2e:	429d      	cmp	r5, r3
 8013f30:	461a      	mov	r2, r3
 8013f32:	d30b      	bcc.n	8013f4c <quorem+0x100>
 8013f34:	613c      	str	r4, [r7, #16]
 8013f36:	3601      	adds	r6, #1
 8013f38:	4630      	mov	r0, r6
 8013f3a:	b003      	add	sp, #12
 8013f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f40:	6812      	ldr	r2, [r2, #0]
 8013f42:	3b04      	subs	r3, #4
 8013f44:	2a00      	cmp	r2, #0
 8013f46:	d1cb      	bne.n	8013ee0 <quorem+0x94>
 8013f48:	3c01      	subs	r4, #1
 8013f4a:	e7c6      	b.n	8013eda <quorem+0x8e>
 8013f4c:	6812      	ldr	r2, [r2, #0]
 8013f4e:	3b04      	subs	r3, #4
 8013f50:	2a00      	cmp	r2, #0
 8013f52:	d1ef      	bne.n	8013f34 <quorem+0xe8>
 8013f54:	3c01      	subs	r4, #1
 8013f56:	e7ea      	b.n	8013f2e <quorem+0xe2>
 8013f58:	2000      	movs	r0, #0
 8013f5a:	e7ee      	b.n	8013f3a <quorem+0xee>
 8013f5c:	0000      	movs	r0, r0
	...

08013f60 <_dtoa_r>:
 8013f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f64:	69c7      	ldr	r7, [r0, #28]
 8013f66:	b097      	sub	sp, #92	@ 0x5c
 8013f68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013f6c:	ec55 4b10 	vmov	r4, r5, d0
 8013f70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8013f72:	9107      	str	r1, [sp, #28]
 8013f74:	4681      	mov	r9, r0
 8013f76:	920c      	str	r2, [sp, #48]	@ 0x30
 8013f78:	9311      	str	r3, [sp, #68]	@ 0x44
 8013f7a:	b97f      	cbnz	r7, 8013f9c <_dtoa_r+0x3c>
 8013f7c:	2010      	movs	r0, #16
 8013f7e:	f7fe fab1 	bl	80124e4 <malloc>
 8013f82:	4602      	mov	r2, r0
 8013f84:	f8c9 001c 	str.w	r0, [r9, #28]
 8013f88:	b920      	cbnz	r0, 8013f94 <_dtoa_r+0x34>
 8013f8a:	4ba9      	ldr	r3, [pc, #676]	@ (8014230 <_dtoa_r+0x2d0>)
 8013f8c:	21ef      	movs	r1, #239	@ 0xef
 8013f8e:	48a9      	ldr	r0, [pc, #676]	@ (8014234 <_dtoa_r+0x2d4>)
 8013f90:	f002 fb66 	bl	8016660 <__assert_func>
 8013f94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013f98:	6007      	str	r7, [r0, #0]
 8013f9a:	60c7      	str	r7, [r0, #12]
 8013f9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013fa0:	6819      	ldr	r1, [r3, #0]
 8013fa2:	b159      	cbz	r1, 8013fbc <_dtoa_r+0x5c>
 8013fa4:	685a      	ldr	r2, [r3, #4]
 8013fa6:	604a      	str	r2, [r1, #4]
 8013fa8:	2301      	movs	r3, #1
 8013faa:	4093      	lsls	r3, r2
 8013fac:	608b      	str	r3, [r1, #8]
 8013fae:	4648      	mov	r0, r9
 8013fb0:	f001 fcc0 	bl	8015934 <_Bfree>
 8013fb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	601a      	str	r2, [r3, #0]
 8013fbc:	1e2b      	subs	r3, r5, #0
 8013fbe:	bfb9      	ittee	lt
 8013fc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013fc4:	9305      	strlt	r3, [sp, #20]
 8013fc6:	2300      	movge	r3, #0
 8013fc8:	6033      	strge	r3, [r6, #0]
 8013fca:	9f05      	ldr	r7, [sp, #20]
 8013fcc:	4b9a      	ldr	r3, [pc, #616]	@ (8014238 <_dtoa_r+0x2d8>)
 8013fce:	bfbc      	itt	lt
 8013fd0:	2201      	movlt	r2, #1
 8013fd2:	6032      	strlt	r2, [r6, #0]
 8013fd4:	43bb      	bics	r3, r7
 8013fd6:	d112      	bne.n	8013ffe <_dtoa_r+0x9e>
 8013fd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013fda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013fde:	6013      	str	r3, [r2, #0]
 8013fe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013fe4:	4323      	orrs	r3, r4
 8013fe6:	f000 855a 	beq.w	8014a9e <_dtoa_r+0xb3e>
 8013fea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013fec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801424c <_dtoa_r+0x2ec>
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f000 855c 	beq.w	8014aae <_dtoa_r+0xb4e>
 8013ff6:	f10a 0303 	add.w	r3, sl, #3
 8013ffa:	f000 bd56 	b.w	8014aaa <_dtoa_r+0xb4a>
 8013ffe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014002:	2200      	movs	r2, #0
 8014004:	ec51 0b17 	vmov	r0, r1, d7
 8014008:	2300      	movs	r3, #0
 801400a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801400e:	f7ec fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 8014012:	4680      	mov	r8, r0
 8014014:	b158      	cbz	r0, 801402e <_dtoa_r+0xce>
 8014016:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014018:	2301      	movs	r3, #1
 801401a:	6013      	str	r3, [r2, #0]
 801401c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801401e:	b113      	cbz	r3, 8014026 <_dtoa_r+0xc6>
 8014020:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014022:	4b86      	ldr	r3, [pc, #536]	@ (801423c <_dtoa_r+0x2dc>)
 8014024:	6013      	str	r3, [r2, #0]
 8014026:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014250 <_dtoa_r+0x2f0>
 801402a:	f000 bd40 	b.w	8014aae <_dtoa_r+0xb4e>
 801402e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014032:	aa14      	add	r2, sp, #80	@ 0x50
 8014034:	a915      	add	r1, sp, #84	@ 0x54
 8014036:	4648      	mov	r0, r9
 8014038:	f002 f818 	bl	801606c <__d2b>
 801403c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014040:	9002      	str	r0, [sp, #8]
 8014042:	2e00      	cmp	r6, #0
 8014044:	d078      	beq.n	8014138 <_dtoa_r+0x1d8>
 8014046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014048:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801404c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014054:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014058:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801405c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014060:	4619      	mov	r1, r3
 8014062:	2200      	movs	r2, #0
 8014064:	4b76      	ldr	r3, [pc, #472]	@ (8014240 <_dtoa_r+0x2e0>)
 8014066:	f7ec f917 	bl	8000298 <__aeabi_dsub>
 801406a:	a36b      	add	r3, pc, #428	@ (adr r3, 8014218 <_dtoa_r+0x2b8>)
 801406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014070:	f7ec faca 	bl	8000608 <__aeabi_dmul>
 8014074:	a36a      	add	r3, pc, #424	@ (adr r3, 8014220 <_dtoa_r+0x2c0>)
 8014076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407a:	f7ec f90f 	bl	800029c <__adddf3>
 801407e:	4604      	mov	r4, r0
 8014080:	4630      	mov	r0, r6
 8014082:	460d      	mov	r5, r1
 8014084:	f7ec fa56 	bl	8000534 <__aeabi_i2d>
 8014088:	a367      	add	r3, pc, #412	@ (adr r3, 8014228 <_dtoa_r+0x2c8>)
 801408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408e:	f7ec fabb 	bl	8000608 <__aeabi_dmul>
 8014092:	4602      	mov	r2, r0
 8014094:	460b      	mov	r3, r1
 8014096:	4620      	mov	r0, r4
 8014098:	4629      	mov	r1, r5
 801409a:	f7ec f8ff 	bl	800029c <__adddf3>
 801409e:	4604      	mov	r4, r0
 80140a0:	460d      	mov	r5, r1
 80140a2:	f7ec fd61 	bl	8000b68 <__aeabi_d2iz>
 80140a6:	2200      	movs	r2, #0
 80140a8:	4607      	mov	r7, r0
 80140aa:	2300      	movs	r3, #0
 80140ac:	4620      	mov	r0, r4
 80140ae:	4629      	mov	r1, r5
 80140b0:	f7ec fd1c 	bl	8000aec <__aeabi_dcmplt>
 80140b4:	b140      	cbz	r0, 80140c8 <_dtoa_r+0x168>
 80140b6:	4638      	mov	r0, r7
 80140b8:	f7ec fa3c 	bl	8000534 <__aeabi_i2d>
 80140bc:	4622      	mov	r2, r4
 80140be:	462b      	mov	r3, r5
 80140c0:	f7ec fd0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80140c4:	b900      	cbnz	r0, 80140c8 <_dtoa_r+0x168>
 80140c6:	3f01      	subs	r7, #1
 80140c8:	2f16      	cmp	r7, #22
 80140ca:	d852      	bhi.n	8014172 <_dtoa_r+0x212>
 80140cc:	4b5d      	ldr	r3, [pc, #372]	@ (8014244 <_dtoa_r+0x2e4>)
 80140ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80140d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80140da:	f7ec fd07 	bl	8000aec <__aeabi_dcmplt>
 80140de:	2800      	cmp	r0, #0
 80140e0:	d049      	beq.n	8014176 <_dtoa_r+0x216>
 80140e2:	3f01      	subs	r7, #1
 80140e4:	2300      	movs	r3, #0
 80140e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80140e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80140ea:	1b9b      	subs	r3, r3, r6
 80140ec:	1e5a      	subs	r2, r3, #1
 80140ee:	bf45      	ittet	mi
 80140f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80140f4:	9300      	strmi	r3, [sp, #0]
 80140f6:	2300      	movpl	r3, #0
 80140f8:	2300      	movmi	r3, #0
 80140fa:	9206      	str	r2, [sp, #24]
 80140fc:	bf54      	ite	pl
 80140fe:	9300      	strpl	r3, [sp, #0]
 8014100:	9306      	strmi	r3, [sp, #24]
 8014102:	2f00      	cmp	r7, #0
 8014104:	db39      	blt.n	801417a <_dtoa_r+0x21a>
 8014106:	9b06      	ldr	r3, [sp, #24]
 8014108:	970d      	str	r7, [sp, #52]	@ 0x34
 801410a:	443b      	add	r3, r7
 801410c:	9306      	str	r3, [sp, #24]
 801410e:	2300      	movs	r3, #0
 8014110:	9308      	str	r3, [sp, #32]
 8014112:	9b07      	ldr	r3, [sp, #28]
 8014114:	2b09      	cmp	r3, #9
 8014116:	d863      	bhi.n	80141e0 <_dtoa_r+0x280>
 8014118:	2b05      	cmp	r3, #5
 801411a:	bfc4      	itt	gt
 801411c:	3b04      	subgt	r3, #4
 801411e:	9307      	strgt	r3, [sp, #28]
 8014120:	9b07      	ldr	r3, [sp, #28]
 8014122:	f1a3 0302 	sub.w	r3, r3, #2
 8014126:	bfcc      	ite	gt
 8014128:	2400      	movgt	r4, #0
 801412a:	2401      	movle	r4, #1
 801412c:	2b03      	cmp	r3, #3
 801412e:	d863      	bhi.n	80141f8 <_dtoa_r+0x298>
 8014130:	e8df f003 	tbb	[pc, r3]
 8014134:	2b375452 	.word	0x2b375452
 8014138:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801413c:	441e      	add	r6, r3
 801413e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014142:	2b20      	cmp	r3, #32
 8014144:	bfc1      	itttt	gt
 8014146:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801414a:	409f      	lslgt	r7, r3
 801414c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014150:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014154:	bfd6      	itet	le
 8014156:	f1c3 0320 	rsble	r3, r3, #32
 801415a:	ea47 0003 	orrgt.w	r0, r7, r3
 801415e:	fa04 f003 	lslle.w	r0, r4, r3
 8014162:	f7ec f9d7 	bl	8000514 <__aeabi_ui2d>
 8014166:	2201      	movs	r2, #1
 8014168:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801416c:	3e01      	subs	r6, #1
 801416e:	9212      	str	r2, [sp, #72]	@ 0x48
 8014170:	e776      	b.n	8014060 <_dtoa_r+0x100>
 8014172:	2301      	movs	r3, #1
 8014174:	e7b7      	b.n	80140e6 <_dtoa_r+0x186>
 8014176:	9010      	str	r0, [sp, #64]	@ 0x40
 8014178:	e7b6      	b.n	80140e8 <_dtoa_r+0x188>
 801417a:	9b00      	ldr	r3, [sp, #0]
 801417c:	1bdb      	subs	r3, r3, r7
 801417e:	9300      	str	r3, [sp, #0]
 8014180:	427b      	negs	r3, r7
 8014182:	9308      	str	r3, [sp, #32]
 8014184:	2300      	movs	r3, #0
 8014186:	930d      	str	r3, [sp, #52]	@ 0x34
 8014188:	e7c3      	b.n	8014112 <_dtoa_r+0x1b2>
 801418a:	2301      	movs	r3, #1
 801418c:	9309      	str	r3, [sp, #36]	@ 0x24
 801418e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014190:	eb07 0b03 	add.w	fp, r7, r3
 8014194:	f10b 0301 	add.w	r3, fp, #1
 8014198:	2b01      	cmp	r3, #1
 801419a:	9303      	str	r3, [sp, #12]
 801419c:	bfb8      	it	lt
 801419e:	2301      	movlt	r3, #1
 80141a0:	e006      	b.n	80141b0 <_dtoa_r+0x250>
 80141a2:	2301      	movs	r3, #1
 80141a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80141a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	dd28      	ble.n	80141fe <_dtoa_r+0x29e>
 80141ac:	469b      	mov	fp, r3
 80141ae:	9303      	str	r3, [sp, #12]
 80141b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80141b4:	2100      	movs	r1, #0
 80141b6:	2204      	movs	r2, #4
 80141b8:	f102 0514 	add.w	r5, r2, #20
 80141bc:	429d      	cmp	r5, r3
 80141be:	d926      	bls.n	801420e <_dtoa_r+0x2ae>
 80141c0:	6041      	str	r1, [r0, #4]
 80141c2:	4648      	mov	r0, r9
 80141c4:	f001 fb76 	bl	80158b4 <_Balloc>
 80141c8:	4682      	mov	sl, r0
 80141ca:	2800      	cmp	r0, #0
 80141cc:	d142      	bne.n	8014254 <_dtoa_r+0x2f4>
 80141ce:	4b1e      	ldr	r3, [pc, #120]	@ (8014248 <_dtoa_r+0x2e8>)
 80141d0:	4602      	mov	r2, r0
 80141d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80141d6:	e6da      	b.n	8013f8e <_dtoa_r+0x2e>
 80141d8:	2300      	movs	r3, #0
 80141da:	e7e3      	b.n	80141a4 <_dtoa_r+0x244>
 80141dc:	2300      	movs	r3, #0
 80141de:	e7d5      	b.n	801418c <_dtoa_r+0x22c>
 80141e0:	2401      	movs	r4, #1
 80141e2:	2300      	movs	r3, #0
 80141e4:	9307      	str	r3, [sp, #28]
 80141e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80141e8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80141ec:	2200      	movs	r2, #0
 80141ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80141f2:	2312      	movs	r3, #18
 80141f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80141f6:	e7db      	b.n	80141b0 <_dtoa_r+0x250>
 80141f8:	2301      	movs	r3, #1
 80141fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80141fc:	e7f4      	b.n	80141e8 <_dtoa_r+0x288>
 80141fe:	f04f 0b01 	mov.w	fp, #1
 8014202:	f8cd b00c 	str.w	fp, [sp, #12]
 8014206:	465b      	mov	r3, fp
 8014208:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801420c:	e7d0      	b.n	80141b0 <_dtoa_r+0x250>
 801420e:	3101      	adds	r1, #1
 8014210:	0052      	lsls	r2, r2, #1
 8014212:	e7d1      	b.n	80141b8 <_dtoa_r+0x258>
 8014214:	f3af 8000 	nop.w
 8014218:	636f4361 	.word	0x636f4361
 801421c:	3fd287a7 	.word	0x3fd287a7
 8014220:	8b60c8b3 	.word	0x8b60c8b3
 8014224:	3fc68a28 	.word	0x3fc68a28
 8014228:	509f79fb 	.word	0x509f79fb
 801422c:	3fd34413 	.word	0x3fd34413
 8014230:	08017c04 	.word	0x08017c04
 8014234:	08017c1b 	.word	0x08017c1b
 8014238:	7ff00000 	.word	0x7ff00000
 801423c:	08017bc5 	.word	0x08017bc5
 8014240:	3ff80000 	.word	0x3ff80000
 8014244:	08017f18 	.word	0x08017f18
 8014248:	08017c73 	.word	0x08017c73
 801424c:	08017c00 	.word	0x08017c00
 8014250:	08017bc4 	.word	0x08017bc4
 8014254:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014258:	6018      	str	r0, [r3, #0]
 801425a:	9b03      	ldr	r3, [sp, #12]
 801425c:	2b0e      	cmp	r3, #14
 801425e:	f200 80a1 	bhi.w	80143a4 <_dtoa_r+0x444>
 8014262:	2c00      	cmp	r4, #0
 8014264:	f000 809e 	beq.w	80143a4 <_dtoa_r+0x444>
 8014268:	2f00      	cmp	r7, #0
 801426a:	dd33      	ble.n	80142d4 <_dtoa_r+0x374>
 801426c:	4b9c      	ldr	r3, [pc, #624]	@ (80144e0 <_dtoa_r+0x580>)
 801426e:	f007 020f 	and.w	r2, r7, #15
 8014272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014276:	ed93 7b00 	vldr	d7, [r3]
 801427a:	05f8      	lsls	r0, r7, #23
 801427c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014280:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014284:	d516      	bpl.n	80142b4 <_dtoa_r+0x354>
 8014286:	4b97      	ldr	r3, [pc, #604]	@ (80144e4 <_dtoa_r+0x584>)
 8014288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801428c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014290:	f7ec fae4 	bl	800085c <__aeabi_ddiv>
 8014294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014298:	f004 040f 	and.w	r4, r4, #15
 801429c:	2603      	movs	r6, #3
 801429e:	4d91      	ldr	r5, [pc, #580]	@ (80144e4 <_dtoa_r+0x584>)
 80142a0:	b954      	cbnz	r4, 80142b8 <_dtoa_r+0x358>
 80142a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80142a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80142aa:	f7ec fad7 	bl	800085c <__aeabi_ddiv>
 80142ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142b2:	e028      	b.n	8014306 <_dtoa_r+0x3a6>
 80142b4:	2602      	movs	r6, #2
 80142b6:	e7f2      	b.n	801429e <_dtoa_r+0x33e>
 80142b8:	07e1      	lsls	r1, r4, #31
 80142ba:	d508      	bpl.n	80142ce <_dtoa_r+0x36e>
 80142bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80142c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80142c4:	f7ec f9a0 	bl	8000608 <__aeabi_dmul>
 80142c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80142cc:	3601      	adds	r6, #1
 80142ce:	1064      	asrs	r4, r4, #1
 80142d0:	3508      	adds	r5, #8
 80142d2:	e7e5      	b.n	80142a0 <_dtoa_r+0x340>
 80142d4:	f000 80af 	beq.w	8014436 <_dtoa_r+0x4d6>
 80142d8:	427c      	negs	r4, r7
 80142da:	4b81      	ldr	r3, [pc, #516]	@ (80144e0 <_dtoa_r+0x580>)
 80142dc:	4d81      	ldr	r5, [pc, #516]	@ (80144e4 <_dtoa_r+0x584>)
 80142de:	f004 020f 	and.w	r2, r4, #15
 80142e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80142e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80142ee:	f7ec f98b 	bl	8000608 <__aeabi_dmul>
 80142f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142f6:	1124      	asrs	r4, r4, #4
 80142f8:	2300      	movs	r3, #0
 80142fa:	2602      	movs	r6, #2
 80142fc:	2c00      	cmp	r4, #0
 80142fe:	f040 808f 	bne.w	8014420 <_dtoa_r+0x4c0>
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1d3      	bne.n	80142ae <_dtoa_r+0x34e>
 8014306:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014308:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801430c:	2b00      	cmp	r3, #0
 801430e:	f000 8094 	beq.w	801443a <_dtoa_r+0x4da>
 8014312:	4b75      	ldr	r3, [pc, #468]	@ (80144e8 <_dtoa_r+0x588>)
 8014314:	2200      	movs	r2, #0
 8014316:	4620      	mov	r0, r4
 8014318:	4629      	mov	r1, r5
 801431a:	f7ec fbe7 	bl	8000aec <__aeabi_dcmplt>
 801431e:	2800      	cmp	r0, #0
 8014320:	f000 808b 	beq.w	801443a <_dtoa_r+0x4da>
 8014324:	9b03      	ldr	r3, [sp, #12]
 8014326:	2b00      	cmp	r3, #0
 8014328:	f000 8087 	beq.w	801443a <_dtoa_r+0x4da>
 801432c:	f1bb 0f00 	cmp.w	fp, #0
 8014330:	dd34      	ble.n	801439c <_dtoa_r+0x43c>
 8014332:	4620      	mov	r0, r4
 8014334:	4b6d      	ldr	r3, [pc, #436]	@ (80144ec <_dtoa_r+0x58c>)
 8014336:	2200      	movs	r2, #0
 8014338:	4629      	mov	r1, r5
 801433a:	f7ec f965 	bl	8000608 <__aeabi_dmul>
 801433e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014342:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8014346:	3601      	adds	r6, #1
 8014348:	465c      	mov	r4, fp
 801434a:	4630      	mov	r0, r6
 801434c:	f7ec f8f2 	bl	8000534 <__aeabi_i2d>
 8014350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014354:	f7ec f958 	bl	8000608 <__aeabi_dmul>
 8014358:	4b65      	ldr	r3, [pc, #404]	@ (80144f0 <_dtoa_r+0x590>)
 801435a:	2200      	movs	r2, #0
 801435c:	f7eb ff9e 	bl	800029c <__adddf3>
 8014360:	4605      	mov	r5, r0
 8014362:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014366:	2c00      	cmp	r4, #0
 8014368:	d16a      	bne.n	8014440 <_dtoa_r+0x4e0>
 801436a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801436e:	4b61      	ldr	r3, [pc, #388]	@ (80144f4 <_dtoa_r+0x594>)
 8014370:	2200      	movs	r2, #0
 8014372:	f7eb ff91 	bl	8000298 <__aeabi_dsub>
 8014376:	4602      	mov	r2, r0
 8014378:	460b      	mov	r3, r1
 801437a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801437e:	462a      	mov	r2, r5
 8014380:	4633      	mov	r3, r6
 8014382:	f7ec fbd1 	bl	8000b28 <__aeabi_dcmpgt>
 8014386:	2800      	cmp	r0, #0
 8014388:	f040 8298 	bne.w	80148bc <_dtoa_r+0x95c>
 801438c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014390:	462a      	mov	r2, r5
 8014392:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014396:	f7ec fba9 	bl	8000aec <__aeabi_dcmplt>
 801439a:	bb38      	cbnz	r0, 80143ec <_dtoa_r+0x48c>
 801439c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80143a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80143a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	f2c0 8157 	blt.w	801465a <_dtoa_r+0x6fa>
 80143ac:	2f0e      	cmp	r7, #14
 80143ae:	f300 8154 	bgt.w	801465a <_dtoa_r+0x6fa>
 80143b2:	4b4b      	ldr	r3, [pc, #300]	@ (80144e0 <_dtoa_r+0x580>)
 80143b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80143b8:	ed93 7b00 	vldr	d7, [r3]
 80143bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143be:	2b00      	cmp	r3, #0
 80143c0:	ed8d 7b00 	vstr	d7, [sp]
 80143c4:	f280 80e5 	bge.w	8014592 <_dtoa_r+0x632>
 80143c8:	9b03      	ldr	r3, [sp, #12]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	f300 80e1 	bgt.w	8014592 <_dtoa_r+0x632>
 80143d0:	d10c      	bne.n	80143ec <_dtoa_r+0x48c>
 80143d2:	4b48      	ldr	r3, [pc, #288]	@ (80144f4 <_dtoa_r+0x594>)
 80143d4:	2200      	movs	r2, #0
 80143d6:	ec51 0b17 	vmov	r0, r1, d7
 80143da:	f7ec f915 	bl	8000608 <__aeabi_dmul>
 80143de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143e2:	f7ec fb97 	bl	8000b14 <__aeabi_dcmpge>
 80143e6:	2800      	cmp	r0, #0
 80143e8:	f000 8266 	beq.w	80148b8 <_dtoa_r+0x958>
 80143ec:	2400      	movs	r4, #0
 80143ee:	4625      	mov	r5, r4
 80143f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143f2:	4656      	mov	r6, sl
 80143f4:	ea6f 0803 	mvn.w	r8, r3
 80143f8:	2700      	movs	r7, #0
 80143fa:	4621      	mov	r1, r4
 80143fc:	4648      	mov	r0, r9
 80143fe:	f001 fa99 	bl	8015934 <_Bfree>
 8014402:	2d00      	cmp	r5, #0
 8014404:	f000 80bd 	beq.w	8014582 <_dtoa_r+0x622>
 8014408:	b12f      	cbz	r7, 8014416 <_dtoa_r+0x4b6>
 801440a:	42af      	cmp	r7, r5
 801440c:	d003      	beq.n	8014416 <_dtoa_r+0x4b6>
 801440e:	4639      	mov	r1, r7
 8014410:	4648      	mov	r0, r9
 8014412:	f001 fa8f 	bl	8015934 <_Bfree>
 8014416:	4629      	mov	r1, r5
 8014418:	4648      	mov	r0, r9
 801441a:	f001 fa8b 	bl	8015934 <_Bfree>
 801441e:	e0b0      	b.n	8014582 <_dtoa_r+0x622>
 8014420:	07e2      	lsls	r2, r4, #31
 8014422:	d505      	bpl.n	8014430 <_dtoa_r+0x4d0>
 8014424:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014428:	f7ec f8ee 	bl	8000608 <__aeabi_dmul>
 801442c:	3601      	adds	r6, #1
 801442e:	2301      	movs	r3, #1
 8014430:	1064      	asrs	r4, r4, #1
 8014432:	3508      	adds	r5, #8
 8014434:	e762      	b.n	80142fc <_dtoa_r+0x39c>
 8014436:	2602      	movs	r6, #2
 8014438:	e765      	b.n	8014306 <_dtoa_r+0x3a6>
 801443a:	9c03      	ldr	r4, [sp, #12]
 801443c:	46b8      	mov	r8, r7
 801443e:	e784      	b.n	801434a <_dtoa_r+0x3ea>
 8014440:	4b27      	ldr	r3, [pc, #156]	@ (80144e0 <_dtoa_r+0x580>)
 8014442:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014444:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014448:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801444c:	4454      	add	r4, sl
 801444e:	2900      	cmp	r1, #0
 8014450:	d054      	beq.n	80144fc <_dtoa_r+0x59c>
 8014452:	4929      	ldr	r1, [pc, #164]	@ (80144f8 <_dtoa_r+0x598>)
 8014454:	2000      	movs	r0, #0
 8014456:	f7ec fa01 	bl	800085c <__aeabi_ddiv>
 801445a:	4633      	mov	r3, r6
 801445c:	462a      	mov	r2, r5
 801445e:	f7eb ff1b 	bl	8000298 <__aeabi_dsub>
 8014462:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014466:	4656      	mov	r6, sl
 8014468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801446c:	f7ec fb7c 	bl	8000b68 <__aeabi_d2iz>
 8014470:	4605      	mov	r5, r0
 8014472:	f7ec f85f 	bl	8000534 <__aeabi_i2d>
 8014476:	4602      	mov	r2, r0
 8014478:	460b      	mov	r3, r1
 801447a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801447e:	f7eb ff0b 	bl	8000298 <__aeabi_dsub>
 8014482:	3530      	adds	r5, #48	@ 0x30
 8014484:	4602      	mov	r2, r0
 8014486:	460b      	mov	r3, r1
 8014488:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801448c:	f806 5b01 	strb.w	r5, [r6], #1
 8014490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014494:	f7ec fb2a 	bl	8000aec <__aeabi_dcmplt>
 8014498:	2800      	cmp	r0, #0
 801449a:	d172      	bne.n	8014582 <_dtoa_r+0x622>
 801449c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144a0:	4911      	ldr	r1, [pc, #68]	@ (80144e8 <_dtoa_r+0x588>)
 80144a2:	2000      	movs	r0, #0
 80144a4:	f7eb fef8 	bl	8000298 <__aeabi_dsub>
 80144a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80144ac:	f7ec fb1e 	bl	8000aec <__aeabi_dcmplt>
 80144b0:	2800      	cmp	r0, #0
 80144b2:	f040 80b4 	bne.w	801461e <_dtoa_r+0x6be>
 80144b6:	42a6      	cmp	r6, r4
 80144b8:	f43f af70 	beq.w	801439c <_dtoa_r+0x43c>
 80144bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80144c0:	4b0a      	ldr	r3, [pc, #40]	@ (80144ec <_dtoa_r+0x58c>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	f7ec f8a0 	bl	8000608 <__aeabi_dmul>
 80144c8:	4b08      	ldr	r3, [pc, #32]	@ (80144ec <_dtoa_r+0x58c>)
 80144ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80144ce:	2200      	movs	r2, #0
 80144d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144d4:	f7ec f898 	bl	8000608 <__aeabi_dmul>
 80144d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144dc:	e7c4      	b.n	8014468 <_dtoa_r+0x508>
 80144de:	bf00      	nop
 80144e0:	08017f18 	.word	0x08017f18
 80144e4:	08017ef0 	.word	0x08017ef0
 80144e8:	3ff00000 	.word	0x3ff00000
 80144ec:	40240000 	.word	0x40240000
 80144f0:	401c0000 	.word	0x401c0000
 80144f4:	40140000 	.word	0x40140000
 80144f8:	3fe00000 	.word	0x3fe00000
 80144fc:	4631      	mov	r1, r6
 80144fe:	4628      	mov	r0, r5
 8014500:	f7ec f882 	bl	8000608 <__aeabi_dmul>
 8014504:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014508:	9413      	str	r4, [sp, #76]	@ 0x4c
 801450a:	4656      	mov	r6, sl
 801450c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014510:	f7ec fb2a 	bl	8000b68 <__aeabi_d2iz>
 8014514:	4605      	mov	r5, r0
 8014516:	f7ec f80d 	bl	8000534 <__aeabi_i2d>
 801451a:	4602      	mov	r2, r0
 801451c:	460b      	mov	r3, r1
 801451e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014522:	f7eb feb9 	bl	8000298 <__aeabi_dsub>
 8014526:	3530      	adds	r5, #48	@ 0x30
 8014528:	f806 5b01 	strb.w	r5, [r6], #1
 801452c:	4602      	mov	r2, r0
 801452e:	460b      	mov	r3, r1
 8014530:	42a6      	cmp	r6, r4
 8014532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014536:	f04f 0200 	mov.w	r2, #0
 801453a:	d124      	bne.n	8014586 <_dtoa_r+0x626>
 801453c:	4baf      	ldr	r3, [pc, #700]	@ (80147fc <_dtoa_r+0x89c>)
 801453e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014542:	f7eb feab 	bl	800029c <__adddf3>
 8014546:	4602      	mov	r2, r0
 8014548:	460b      	mov	r3, r1
 801454a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801454e:	f7ec faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8014552:	2800      	cmp	r0, #0
 8014554:	d163      	bne.n	801461e <_dtoa_r+0x6be>
 8014556:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801455a:	49a8      	ldr	r1, [pc, #672]	@ (80147fc <_dtoa_r+0x89c>)
 801455c:	2000      	movs	r0, #0
 801455e:	f7eb fe9b 	bl	8000298 <__aeabi_dsub>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801456a:	f7ec fabf 	bl	8000aec <__aeabi_dcmplt>
 801456e:	2800      	cmp	r0, #0
 8014570:	f43f af14 	beq.w	801439c <_dtoa_r+0x43c>
 8014574:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8014576:	1e73      	subs	r3, r6, #1
 8014578:	9313      	str	r3, [sp, #76]	@ 0x4c
 801457a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801457e:	2b30      	cmp	r3, #48	@ 0x30
 8014580:	d0f8      	beq.n	8014574 <_dtoa_r+0x614>
 8014582:	4647      	mov	r7, r8
 8014584:	e03b      	b.n	80145fe <_dtoa_r+0x69e>
 8014586:	4b9e      	ldr	r3, [pc, #632]	@ (8014800 <_dtoa_r+0x8a0>)
 8014588:	f7ec f83e 	bl	8000608 <__aeabi_dmul>
 801458c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014590:	e7bc      	b.n	801450c <_dtoa_r+0x5ac>
 8014592:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014596:	4656      	mov	r6, sl
 8014598:	e9dd 2300 	ldrd	r2, r3, [sp]
 801459c:	4620      	mov	r0, r4
 801459e:	4629      	mov	r1, r5
 80145a0:	f7ec f95c 	bl	800085c <__aeabi_ddiv>
 80145a4:	f7ec fae0 	bl	8000b68 <__aeabi_d2iz>
 80145a8:	4680      	mov	r8, r0
 80145aa:	f7eb ffc3 	bl	8000534 <__aeabi_i2d>
 80145ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145b2:	f7ec f829 	bl	8000608 <__aeabi_dmul>
 80145b6:	4602      	mov	r2, r0
 80145b8:	460b      	mov	r3, r1
 80145ba:	4620      	mov	r0, r4
 80145bc:	4629      	mov	r1, r5
 80145be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80145c2:	f7eb fe69 	bl	8000298 <__aeabi_dsub>
 80145c6:	f806 4b01 	strb.w	r4, [r6], #1
 80145ca:	9d03      	ldr	r5, [sp, #12]
 80145cc:	eba6 040a 	sub.w	r4, r6, sl
 80145d0:	42a5      	cmp	r5, r4
 80145d2:	4602      	mov	r2, r0
 80145d4:	460b      	mov	r3, r1
 80145d6:	d133      	bne.n	8014640 <_dtoa_r+0x6e0>
 80145d8:	f7eb fe60 	bl	800029c <__adddf3>
 80145dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145e0:	4604      	mov	r4, r0
 80145e2:	460d      	mov	r5, r1
 80145e4:	f7ec faa0 	bl	8000b28 <__aeabi_dcmpgt>
 80145e8:	b9c0      	cbnz	r0, 801461c <_dtoa_r+0x6bc>
 80145ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145ee:	4620      	mov	r0, r4
 80145f0:	4629      	mov	r1, r5
 80145f2:	f7ec fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 80145f6:	b110      	cbz	r0, 80145fe <_dtoa_r+0x69e>
 80145f8:	f018 0f01 	tst.w	r8, #1
 80145fc:	d10e      	bne.n	801461c <_dtoa_r+0x6bc>
 80145fe:	9902      	ldr	r1, [sp, #8]
 8014600:	4648      	mov	r0, r9
 8014602:	f001 f997 	bl	8015934 <_Bfree>
 8014606:	2300      	movs	r3, #0
 8014608:	7033      	strb	r3, [r6, #0]
 801460a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801460c:	3701      	adds	r7, #1
 801460e:	601f      	str	r7, [r3, #0]
 8014610:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 824b 	beq.w	8014aae <_dtoa_r+0xb4e>
 8014618:	601e      	str	r6, [r3, #0]
 801461a:	e248      	b.n	8014aae <_dtoa_r+0xb4e>
 801461c:	46b8      	mov	r8, r7
 801461e:	4633      	mov	r3, r6
 8014620:	461e      	mov	r6, r3
 8014622:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014626:	2a39      	cmp	r2, #57	@ 0x39
 8014628:	d106      	bne.n	8014638 <_dtoa_r+0x6d8>
 801462a:	459a      	cmp	sl, r3
 801462c:	d1f8      	bne.n	8014620 <_dtoa_r+0x6c0>
 801462e:	2230      	movs	r2, #48	@ 0x30
 8014630:	f108 0801 	add.w	r8, r8, #1
 8014634:	f88a 2000 	strb.w	r2, [sl]
 8014638:	781a      	ldrb	r2, [r3, #0]
 801463a:	3201      	adds	r2, #1
 801463c:	701a      	strb	r2, [r3, #0]
 801463e:	e7a0      	b.n	8014582 <_dtoa_r+0x622>
 8014640:	4b6f      	ldr	r3, [pc, #444]	@ (8014800 <_dtoa_r+0x8a0>)
 8014642:	2200      	movs	r2, #0
 8014644:	f7eb ffe0 	bl	8000608 <__aeabi_dmul>
 8014648:	2200      	movs	r2, #0
 801464a:	2300      	movs	r3, #0
 801464c:	4604      	mov	r4, r0
 801464e:	460d      	mov	r5, r1
 8014650:	f7ec fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 8014654:	2800      	cmp	r0, #0
 8014656:	d09f      	beq.n	8014598 <_dtoa_r+0x638>
 8014658:	e7d1      	b.n	80145fe <_dtoa_r+0x69e>
 801465a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801465c:	2a00      	cmp	r2, #0
 801465e:	f000 80ea 	beq.w	8014836 <_dtoa_r+0x8d6>
 8014662:	9a07      	ldr	r2, [sp, #28]
 8014664:	2a01      	cmp	r2, #1
 8014666:	f300 80cd 	bgt.w	8014804 <_dtoa_r+0x8a4>
 801466a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801466c:	2a00      	cmp	r2, #0
 801466e:	f000 80c1 	beq.w	80147f4 <_dtoa_r+0x894>
 8014672:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014676:	9c08      	ldr	r4, [sp, #32]
 8014678:	9e00      	ldr	r6, [sp, #0]
 801467a:	9a00      	ldr	r2, [sp, #0]
 801467c:	441a      	add	r2, r3
 801467e:	9200      	str	r2, [sp, #0]
 8014680:	9a06      	ldr	r2, [sp, #24]
 8014682:	2101      	movs	r1, #1
 8014684:	441a      	add	r2, r3
 8014686:	4648      	mov	r0, r9
 8014688:	9206      	str	r2, [sp, #24]
 801468a:	f001 fa51 	bl	8015b30 <__i2b>
 801468e:	4605      	mov	r5, r0
 8014690:	b166      	cbz	r6, 80146ac <_dtoa_r+0x74c>
 8014692:	9b06      	ldr	r3, [sp, #24]
 8014694:	2b00      	cmp	r3, #0
 8014696:	dd09      	ble.n	80146ac <_dtoa_r+0x74c>
 8014698:	42b3      	cmp	r3, r6
 801469a:	9a00      	ldr	r2, [sp, #0]
 801469c:	bfa8      	it	ge
 801469e:	4633      	movge	r3, r6
 80146a0:	1ad2      	subs	r2, r2, r3
 80146a2:	9200      	str	r2, [sp, #0]
 80146a4:	9a06      	ldr	r2, [sp, #24]
 80146a6:	1af6      	subs	r6, r6, r3
 80146a8:	1ad3      	subs	r3, r2, r3
 80146aa:	9306      	str	r3, [sp, #24]
 80146ac:	9b08      	ldr	r3, [sp, #32]
 80146ae:	b30b      	cbz	r3, 80146f4 <_dtoa_r+0x794>
 80146b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	f000 80c6 	beq.w	8014844 <_dtoa_r+0x8e4>
 80146b8:	2c00      	cmp	r4, #0
 80146ba:	f000 80c0 	beq.w	801483e <_dtoa_r+0x8de>
 80146be:	4629      	mov	r1, r5
 80146c0:	4622      	mov	r2, r4
 80146c2:	4648      	mov	r0, r9
 80146c4:	f001 faec 	bl	8015ca0 <__pow5mult>
 80146c8:	9a02      	ldr	r2, [sp, #8]
 80146ca:	4601      	mov	r1, r0
 80146cc:	4605      	mov	r5, r0
 80146ce:	4648      	mov	r0, r9
 80146d0:	f001 fa44 	bl	8015b5c <__multiply>
 80146d4:	9902      	ldr	r1, [sp, #8]
 80146d6:	4680      	mov	r8, r0
 80146d8:	4648      	mov	r0, r9
 80146da:	f001 f92b 	bl	8015934 <_Bfree>
 80146de:	9b08      	ldr	r3, [sp, #32]
 80146e0:	1b1b      	subs	r3, r3, r4
 80146e2:	9308      	str	r3, [sp, #32]
 80146e4:	f000 80b1 	beq.w	801484a <_dtoa_r+0x8ea>
 80146e8:	9a08      	ldr	r2, [sp, #32]
 80146ea:	4641      	mov	r1, r8
 80146ec:	4648      	mov	r0, r9
 80146ee:	f001 fad7 	bl	8015ca0 <__pow5mult>
 80146f2:	9002      	str	r0, [sp, #8]
 80146f4:	2101      	movs	r1, #1
 80146f6:	4648      	mov	r0, r9
 80146f8:	f001 fa1a 	bl	8015b30 <__i2b>
 80146fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80146fe:	4604      	mov	r4, r0
 8014700:	2b00      	cmp	r3, #0
 8014702:	f000 81d8 	beq.w	8014ab6 <_dtoa_r+0xb56>
 8014706:	461a      	mov	r2, r3
 8014708:	4601      	mov	r1, r0
 801470a:	4648      	mov	r0, r9
 801470c:	f001 fac8 	bl	8015ca0 <__pow5mult>
 8014710:	9b07      	ldr	r3, [sp, #28]
 8014712:	2b01      	cmp	r3, #1
 8014714:	4604      	mov	r4, r0
 8014716:	f300 809f 	bgt.w	8014858 <_dtoa_r+0x8f8>
 801471a:	9b04      	ldr	r3, [sp, #16]
 801471c:	2b00      	cmp	r3, #0
 801471e:	f040 8097 	bne.w	8014850 <_dtoa_r+0x8f0>
 8014722:	9b05      	ldr	r3, [sp, #20]
 8014724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014728:	2b00      	cmp	r3, #0
 801472a:	f040 8093 	bne.w	8014854 <_dtoa_r+0x8f4>
 801472e:	9b05      	ldr	r3, [sp, #20]
 8014730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014734:	0d1b      	lsrs	r3, r3, #20
 8014736:	051b      	lsls	r3, r3, #20
 8014738:	b133      	cbz	r3, 8014748 <_dtoa_r+0x7e8>
 801473a:	9b00      	ldr	r3, [sp, #0]
 801473c:	3301      	adds	r3, #1
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	9b06      	ldr	r3, [sp, #24]
 8014742:	3301      	adds	r3, #1
 8014744:	9306      	str	r3, [sp, #24]
 8014746:	2301      	movs	r3, #1
 8014748:	9308      	str	r3, [sp, #32]
 801474a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801474c:	2b00      	cmp	r3, #0
 801474e:	f000 81b8 	beq.w	8014ac2 <_dtoa_r+0xb62>
 8014752:	6923      	ldr	r3, [r4, #16]
 8014754:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014758:	6918      	ldr	r0, [r3, #16]
 801475a:	f001 f99d 	bl	8015a98 <__hi0bits>
 801475e:	f1c0 0020 	rsb	r0, r0, #32
 8014762:	9b06      	ldr	r3, [sp, #24]
 8014764:	4418      	add	r0, r3
 8014766:	f010 001f 	ands.w	r0, r0, #31
 801476a:	f000 8082 	beq.w	8014872 <_dtoa_r+0x912>
 801476e:	f1c0 0320 	rsb	r3, r0, #32
 8014772:	2b04      	cmp	r3, #4
 8014774:	dd73      	ble.n	801485e <_dtoa_r+0x8fe>
 8014776:	9b00      	ldr	r3, [sp, #0]
 8014778:	f1c0 001c 	rsb	r0, r0, #28
 801477c:	4403      	add	r3, r0
 801477e:	9300      	str	r3, [sp, #0]
 8014780:	9b06      	ldr	r3, [sp, #24]
 8014782:	4403      	add	r3, r0
 8014784:	4406      	add	r6, r0
 8014786:	9306      	str	r3, [sp, #24]
 8014788:	9b00      	ldr	r3, [sp, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	dd05      	ble.n	801479a <_dtoa_r+0x83a>
 801478e:	9902      	ldr	r1, [sp, #8]
 8014790:	461a      	mov	r2, r3
 8014792:	4648      	mov	r0, r9
 8014794:	f001 fade 	bl	8015d54 <__lshift>
 8014798:	9002      	str	r0, [sp, #8]
 801479a:	9b06      	ldr	r3, [sp, #24]
 801479c:	2b00      	cmp	r3, #0
 801479e:	dd05      	ble.n	80147ac <_dtoa_r+0x84c>
 80147a0:	4621      	mov	r1, r4
 80147a2:	461a      	mov	r2, r3
 80147a4:	4648      	mov	r0, r9
 80147a6:	f001 fad5 	bl	8015d54 <__lshift>
 80147aa:	4604      	mov	r4, r0
 80147ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d061      	beq.n	8014876 <_dtoa_r+0x916>
 80147b2:	9802      	ldr	r0, [sp, #8]
 80147b4:	4621      	mov	r1, r4
 80147b6:	f001 fb39 	bl	8015e2c <__mcmp>
 80147ba:	2800      	cmp	r0, #0
 80147bc:	da5b      	bge.n	8014876 <_dtoa_r+0x916>
 80147be:	2300      	movs	r3, #0
 80147c0:	9902      	ldr	r1, [sp, #8]
 80147c2:	220a      	movs	r2, #10
 80147c4:	4648      	mov	r0, r9
 80147c6:	f001 f8d7 	bl	8015978 <__multadd>
 80147ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147cc:	9002      	str	r0, [sp, #8]
 80147ce:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	f000 8177 	beq.w	8014ac6 <_dtoa_r+0xb66>
 80147d8:	4629      	mov	r1, r5
 80147da:	2300      	movs	r3, #0
 80147dc:	220a      	movs	r2, #10
 80147de:	4648      	mov	r0, r9
 80147e0:	f001 f8ca 	bl	8015978 <__multadd>
 80147e4:	f1bb 0f00 	cmp.w	fp, #0
 80147e8:	4605      	mov	r5, r0
 80147ea:	dc6f      	bgt.n	80148cc <_dtoa_r+0x96c>
 80147ec:	9b07      	ldr	r3, [sp, #28]
 80147ee:	2b02      	cmp	r3, #2
 80147f0:	dc49      	bgt.n	8014886 <_dtoa_r+0x926>
 80147f2:	e06b      	b.n	80148cc <_dtoa_r+0x96c>
 80147f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80147f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80147fa:	e73c      	b.n	8014676 <_dtoa_r+0x716>
 80147fc:	3fe00000 	.word	0x3fe00000
 8014800:	40240000 	.word	0x40240000
 8014804:	9b03      	ldr	r3, [sp, #12]
 8014806:	1e5c      	subs	r4, r3, #1
 8014808:	9b08      	ldr	r3, [sp, #32]
 801480a:	42a3      	cmp	r3, r4
 801480c:	db09      	blt.n	8014822 <_dtoa_r+0x8c2>
 801480e:	1b1c      	subs	r4, r3, r4
 8014810:	9b03      	ldr	r3, [sp, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	f6bf af30 	bge.w	8014678 <_dtoa_r+0x718>
 8014818:	9b00      	ldr	r3, [sp, #0]
 801481a:	9a03      	ldr	r2, [sp, #12]
 801481c:	1a9e      	subs	r6, r3, r2
 801481e:	2300      	movs	r3, #0
 8014820:	e72b      	b.n	801467a <_dtoa_r+0x71a>
 8014822:	9b08      	ldr	r3, [sp, #32]
 8014824:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014826:	9408      	str	r4, [sp, #32]
 8014828:	1ae3      	subs	r3, r4, r3
 801482a:	441a      	add	r2, r3
 801482c:	9e00      	ldr	r6, [sp, #0]
 801482e:	9b03      	ldr	r3, [sp, #12]
 8014830:	920d      	str	r2, [sp, #52]	@ 0x34
 8014832:	2400      	movs	r4, #0
 8014834:	e721      	b.n	801467a <_dtoa_r+0x71a>
 8014836:	9c08      	ldr	r4, [sp, #32]
 8014838:	9e00      	ldr	r6, [sp, #0]
 801483a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801483c:	e728      	b.n	8014690 <_dtoa_r+0x730>
 801483e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014842:	e751      	b.n	80146e8 <_dtoa_r+0x788>
 8014844:	9a08      	ldr	r2, [sp, #32]
 8014846:	9902      	ldr	r1, [sp, #8]
 8014848:	e750      	b.n	80146ec <_dtoa_r+0x78c>
 801484a:	f8cd 8008 	str.w	r8, [sp, #8]
 801484e:	e751      	b.n	80146f4 <_dtoa_r+0x794>
 8014850:	2300      	movs	r3, #0
 8014852:	e779      	b.n	8014748 <_dtoa_r+0x7e8>
 8014854:	9b04      	ldr	r3, [sp, #16]
 8014856:	e777      	b.n	8014748 <_dtoa_r+0x7e8>
 8014858:	2300      	movs	r3, #0
 801485a:	9308      	str	r3, [sp, #32]
 801485c:	e779      	b.n	8014752 <_dtoa_r+0x7f2>
 801485e:	d093      	beq.n	8014788 <_dtoa_r+0x828>
 8014860:	9a00      	ldr	r2, [sp, #0]
 8014862:	331c      	adds	r3, #28
 8014864:	441a      	add	r2, r3
 8014866:	9200      	str	r2, [sp, #0]
 8014868:	9a06      	ldr	r2, [sp, #24]
 801486a:	441a      	add	r2, r3
 801486c:	441e      	add	r6, r3
 801486e:	9206      	str	r2, [sp, #24]
 8014870:	e78a      	b.n	8014788 <_dtoa_r+0x828>
 8014872:	4603      	mov	r3, r0
 8014874:	e7f4      	b.n	8014860 <_dtoa_r+0x900>
 8014876:	9b03      	ldr	r3, [sp, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	46b8      	mov	r8, r7
 801487c:	dc20      	bgt.n	80148c0 <_dtoa_r+0x960>
 801487e:	469b      	mov	fp, r3
 8014880:	9b07      	ldr	r3, [sp, #28]
 8014882:	2b02      	cmp	r3, #2
 8014884:	dd1e      	ble.n	80148c4 <_dtoa_r+0x964>
 8014886:	f1bb 0f00 	cmp.w	fp, #0
 801488a:	f47f adb1 	bne.w	80143f0 <_dtoa_r+0x490>
 801488e:	4621      	mov	r1, r4
 8014890:	465b      	mov	r3, fp
 8014892:	2205      	movs	r2, #5
 8014894:	4648      	mov	r0, r9
 8014896:	f001 f86f 	bl	8015978 <__multadd>
 801489a:	4601      	mov	r1, r0
 801489c:	4604      	mov	r4, r0
 801489e:	9802      	ldr	r0, [sp, #8]
 80148a0:	f001 fac4 	bl	8015e2c <__mcmp>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f77f ada3 	ble.w	80143f0 <_dtoa_r+0x490>
 80148aa:	4656      	mov	r6, sl
 80148ac:	2331      	movs	r3, #49	@ 0x31
 80148ae:	f806 3b01 	strb.w	r3, [r6], #1
 80148b2:	f108 0801 	add.w	r8, r8, #1
 80148b6:	e59f      	b.n	80143f8 <_dtoa_r+0x498>
 80148b8:	9c03      	ldr	r4, [sp, #12]
 80148ba:	46b8      	mov	r8, r7
 80148bc:	4625      	mov	r5, r4
 80148be:	e7f4      	b.n	80148aa <_dtoa_r+0x94a>
 80148c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80148c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	f000 8101 	beq.w	8014ace <_dtoa_r+0xb6e>
 80148cc:	2e00      	cmp	r6, #0
 80148ce:	dd05      	ble.n	80148dc <_dtoa_r+0x97c>
 80148d0:	4629      	mov	r1, r5
 80148d2:	4632      	mov	r2, r6
 80148d4:	4648      	mov	r0, r9
 80148d6:	f001 fa3d 	bl	8015d54 <__lshift>
 80148da:	4605      	mov	r5, r0
 80148dc:	9b08      	ldr	r3, [sp, #32]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d05c      	beq.n	801499c <_dtoa_r+0xa3c>
 80148e2:	6869      	ldr	r1, [r5, #4]
 80148e4:	4648      	mov	r0, r9
 80148e6:	f000 ffe5 	bl	80158b4 <_Balloc>
 80148ea:	4606      	mov	r6, r0
 80148ec:	b928      	cbnz	r0, 80148fa <_dtoa_r+0x99a>
 80148ee:	4b82      	ldr	r3, [pc, #520]	@ (8014af8 <_dtoa_r+0xb98>)
 80148f0:	4602      	mov	r2, r0
 80148f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80148f6:	f7ff bb4a 	b.w	8013f8e <_dtoa_r+0x2e>
 80148fa:	692a      	ldr	r2, [r5, #16]
 80148fc:	3202      	adds	r2, #2
 80148fe:	0092      	lsls	r2, r2, #2
 8014900:	f105 010c 	add.w	r1, r5, #12
 8014904:	300c      	adds	r0, #12
 8014906:	f7ff fa83 	bl	8013e10 <memcpy>
 801490a:	2201      	movs	r2, #1
 801490c:	4631      	mov	r1, r6
 801490e:	4648      	mov	r0, r9
 8014910:	f001 fa20 	bl	8015d54 <__lshift>
 8014914:	f10a 0301 	add.w	r3, sl, #1
 8014918:	9300      	str	r3, [sp, #0]
 801491a:	eb0a 030b 	add.w	r3, sl, fp
 801491e:	9308      	str	r3, [sp, #32]
 8014920:	9b04      	ldr	r3, [sp, #16]
 8014922:	f003 0301 	and.w	r3, r3, #1
 8014926:	462f      	mov	r7, r5
 8014928:	9306      	str	r3, [sp, #24]
 801492a:	4605      	mov	r5, r0
 801492c:	9b00      	ldr	r3, [sp, #0]
 801492e:	9802      	ldr	r0, [sp, #8]
 8014930:	4621      	mov	r1, r4
 8014932:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8014936:	f7ff fa89 	bl	8013e4c <quorem>
 801493a:	4603      	mov	r3, r0
 801493c:	3330      	adds	r3, #48	@ 0x30
 801493e:	9003      	str	r0, [sp, #12]
 8014940:	4639      	mov	r1, r7
 8014942:	9802      	ldr	r0, [sp, #8]
 8014944:	9309      	str	r3, [sp, #36]	@ 0x24
 8014946:	f001 fa71 	bl	8015e2c <__mcmp>
 801494a:	462a      	mov	r2, r5
 801494c:	9004      	str	r0, [sp, #16]
 801494e:	4621      	mov	r1, r4
 8014950:	4648      	mov	r0, r9
 8014952:	f001 fa87 	bl	8015e64 <__mdiff>
 8014956:	68c2      	ldr	r2, [r0, #12]
 8014958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801495a:	4606      	mov	r6, r0
 801495c:	bb02      	cbnz	r2, 80149a0 <_dtoa_r+0xa40>
 801495e:	4601      	mov	r1, r0
 8014960:	9802      	ldr	r0, [sp, #8]
 8014962:	f001 fa63 	bl	8015e2c <__mcmp>
 8014966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014968:	4602      	mov	r2, r0
 801496a:	4631      	mov	r1, r6
 801496c:	4648      	mov	r0, r9
 801496e:	920c      	str	r2, [sp, #48]	@ 0x30
 8014970:	9309      	str	r3, [sp, #36]	@ 0x24
 8014972:	f000 ffdf 	bl	8015934 <_Bfree>
 8014976:	9b07      	ldr	r3, [sp, #28]
 8014978:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801497a:	9e00      	ldr	r6, [sp, #0]
 801497c:	ea42 0103 	orr.w	r1, r2, r3
 8014980:	9b06      	ldr	r3, [sp, #24]
 8014982:	4319      	orrs	r1, r3
 8014984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014986:	d10d      	bne.n	80149a4 <_dtoa_r+0xa44>
 8014988:	2b39      	cmp	r3, #57	@ 0x39
 801498a:	d027      	beq.n	80149dc <_dtoa_r+0xa7c>
 801498c:	9a04      	ldr	r2, [sp, #16]
 801498e:	2a00      	cmp	r2, #0
 8014990:	dd01      	ble.n	8014996 <_dtoa_r+0xa36>
 8014992:	9b03      	ldr	r3, [sp, #12]
 8014994:	3331      	adds	r3, #49	@ 0x31
 8014996:	f88b 3000 	strb.w	r3, [fp]
 801499a:	e52e      	b.n	80143fa <_dtoa_r+0x49a>
 801499c:	4628      	mov	r0, r5
 801499e:	e7b9      	b.n	8014914 <_dtoa_r+0x9b4>
 80149a0:	2201      	movs	r2, #1
 80149a2:	e7e2      	b.n	801496a <_dtoa_r+0xa0a>
 80149a4:	9904      	ldr	r1, [sp, #16]
 80149a6:	2900      	cmp	r1, #0
 80149a8:	db04      	blt.n	80149b4 <_dtoa_r+0xa54>
 80149aa:	9807      	ldr	r0, [sp, #28]
 80149ac:	4301      	orrs	r1, r0
 80149ae:	9806      	ldr	r0, [sp, #24]
 80149b0:	4301      	orrs	r1, r0
 80149b2:	d120      	bne.n	80149f6 <_dtoa_r+0xa96>
 80149b4:	2a00      	cmp	r2, #0
 80149b6:	ddee      	ble.n	8014996 <_dtoa_r+0xa36>
 80149b8:	9902      	ldr	r1, [sp, #8]
 80149ba:	9300      	str	r3, [sp, #0]
 80149bc:	2201      	movs	r2, #1
 80149be:	4648      	mov	r0, r9
 80149c0:	f001 f9c8 	bl	8015d54 <__lshift>
 80149c4:	4621      	mov	r1, r4
 80149c6:	9002      	str	r0, [sp, #8]
 80149c8:	f001 fa30 	bl	8015e2c <__mcmp>
 80149cc:	2800      	cmp	r0, #0
 80149ce:	9b00      	ldr	r3, [sp, #0]
 80149d0:	dc02      	bgt.n	80149d8 <_dtoa_r+0xa78>
 80149d2:	d1e0      	bne.n	8014996 <_dtoa_r+0xa36>
 80149d4:	07da      	lsls	r2, r3, #31
 80149d6:	d5de      	bpl.n	8014996 <_dtoa_r+0xa36>
 80149d8:	2b39      	cmp	r3, #57	@ 0x39
 80149da:	d1da      	bne.n	8014992 <_dtoa_r+0xa32>
 80149dc:	2339      	movs	r3, #57	@ 0x39
 80149de:	f88b 3000 	strb.w	r3, [fp]
 80149e2:	4633      	mov	r3, r6
 80149e4:	461e      	mov	r6, r3
 80149e6:	3b01      	subs	r3, #1
 80149e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80149ec:	2a39      	cmp	r2, #57	@ 0x39
 80149ee:	d04e      	beq.n	8014a8e <_dtoa_r+0xb2e>
 80149f0:	3201      	adds	r2, #1
 80149f2:	701a      	strb	r2, [r3, #0]
 80149f4:	e501      	b.n	80143fa <_dtoa_r+0x49a>
 80149f6:	2a00      	cmp	r2, #0
 80149f8:	dd03      	ble.n	8014a02 <_dtoa_r+0xaa2>
 80149fa:	2b39      	cmp	r3, #57	@ 0x39
 80149fc:	d0ee      	beq.n	80149dc <_dtoa_r+0xa7c>
 80149fe:	3301      	adds	r3, #1
 8014a00:	e7c9      	b.n	8014996 <_dtoa_r+0xa36>
 8014a02:	9a00      	ldr	r2, [sp, #0]
 8014a04:	9908      	ldr	r1, [sp, #32]
 8014a06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014a0a:	428a      	cmp	r2, r1
 8014a0c:	d028      	beq.n	8014a60 <_dtoa_r+0xb00>
 8014a0e:	9902      	ldr	r1, [sp, #8]
 8014a10:	2300      	movs	r3, #0
 8014a12:	220a      	movs	r2, #10
 8014a14:	4648      	mov	r0, r9
 8014a16:	f000 ffaf 	bl	8015978 <__multadd>
 8014a1a:	42af      	cmp	r7, r5
 8014a1c:	9002      	str	r0, [sp, #8]
 8014a1e:	f04f 0300 	mov.w	r3, #0
 8014a22:	f04f 020a 	mov.w	r2, #10
 8014a26:	4639      	mov	r1, r7
 8014a28:	4648      	mov	r0, r9
 8014a2a:	d107      	bne.n	8014a3c <_dtoa_r+0xadc>
 8014a2c:	f000 ffa4 	bl	8015978 <__multadd>
 8014a30:	4607      	mov	r7, r0
 8014a32:	4605      	mov	r5, r0
 8014a34:	9b00      	ldr	r3, [sp, #0]
 8014a36:	3301      	adds	r3, #1
 8014a38:	9300      	str	r3, [sp, #0]
 8014a3a:	e777      	b.n	801492c <_dtoa_r+0x9cc>
 8014a3c:	f000 ff9c 	bl	8015978 <__multadd>
 8014a40:	4629      	mov	r1, r5
 8014a42:	4607      	mov	r7, r0
 8014a44:	2300      	movs	r3, #0
 8014a46:	220a      	movs	r2, #10
 8014a48:	4648      	mov	r0, r9
 8014a4a:	f000 ff95 	bl	8015978 <__multadd>
 8014a4e:	4605      	mov	r5, r0
 8014a50:	e7f0      	b.n	8014a34 <_dtoa_r+0xad4>
 8014a52:	f1bb 0f00 	cmp.w	fp, #0
 8014a56:	bfcc      	ite	gt
 8014a58:	465e      	movgt	r6, fp
 8014a5a:	2601      	movle	r6, #1
 8014a5c:	4456      	add	r6, sl
 8014a5e:	2700      	movs	r7, #0
 8014a60:	9902      	ldr	r1, [sp, #8]
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	2201      	movs	r2, #1
 8014a66:	4648      	mov	r0, r9
 8014a68:	f001 f974 	bl	8015d54 <__lshift>
 8014a6c:	4621      	mov	r1, r4
 8014a6e:	9002      	str	r0, [sp, #8]
 8014a70:	f001 f9dc 	bl	8015e2c <__mcmp>
 8014a74:	2800      	cmp	r0, #0
 8014a76:	dcb4      	bgt.n	80149e2 <_dtoa_r+0xa82>
 8014a78:	d102      	bne.n	8014a80 <_dtoa_r+0xb20>
 8014a7a:	9b00      	ldr	r3, [sp, #0]
 8014a7c:	07db      	lsls	r3, r3, #31
 8014a7e:	d4b0      	bmi.n	80149e2 <_dtoa_r+0xa82>
 8014a80:	4633      	mov	r3, r6
 8014a82:	461e      	mov	r6, r3
 8014a84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014a88:	2a30      	cmp	r2, #48	@ 0x30
 8014a8a:	d0fa      	beq.n	8014a82 <_dtoa_r+0xb22>
 8014a8c:	e4b5      	b.n	80143fa <_dtoa_r+0x49a>
 8014a8e:	459a      	cmp	sl, r3
 8014a90:	d1a8      	bne.n	80149e4 <_dtoa_r+0xa84>
 8014a92:	2331      	movs	r3, #49	@ 0x31
 8014a94:	f108 0801 	add.w	r8, r8, #1
 8014a98:	f88a 3000 	strb.w	r3, [sl]
 8014a9c:	e4ad      	b.n	80143fa <_dtoa_r+0x49a>
 8014a9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014aa0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014afc <_dtoa_r+0xb9c>
 8014aa4:	b11b      	cbz	r3, 8014aae <_dtoa_r+0xb4e>
 8014aa6:	f10a 0308 	add.w	r3, sl, #8
 8014aaa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014aac:	6013      	str	r3, [r2, #0]
 8014aae:	4650      	mov	r0, sl
 8014ab0:	b017      	add	sp, #92	@ 0x5c
 8014ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ab6:	9b07      	ldr	r3, [sp, #28]
 8014ab8:	2b01      	cmp	r3, #1
 8014aba:	f77f ae2e 	ble.w	801471a <_dtoa_r+0x7ba>
 8014abe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014ac0:	9308      	str	r3, [sp, #32]
 8014ac2:	2001      	movs	r0, #1
 8014ac4:	e64d      	b.n	8014762 <_dtoa_r+0x802>
 8014ac6:	f1bb 0f00 	cmp.w	fp, #0
 8014aca:	f77f aed9 	ble.w	8014880 <_dtoa_r+0x920>
 8014ace:	4656      	mov	r6, sl
 8014ad0:	9802      	ldr	r0, [sp, #8]
 8014ad2:	4621      	mov	r1, r4
 8014ad4:	f7ff f9ba 	bl	8013e4c <quorem>
 8014ad8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014adc:	f806 3b01 	strb.w	r3, [r6], #1
 8014ae0:	eba6 020a 	sub.w	r2, r6, sl
 8014ae4:	4593      	cmp	fp, r2
 8014ae6:	ddb4      	ble.n	8014a52 <_dtoa_r+0xaf2>
 8014ae8:	9902      	ldr	r1, [sp, #8]
 8014aea:	2300      	movs	r3, #0
 8014aec:	220a      	movs	r2, #10
 8014aee:	4648      	mov	r0, r9
 8014af0:	f000 ff42 	bl	8015978 <__multadd>
 8014af4:	9002      	str	r0, [sp, #8]
 8014af6:	e7eb      	b.n	8014ad0 <_dtoa_r+0xb70>
 8014af8:	08017c73 	.word	0x08017c73
 8014afc:	08017bf7 	.word	0x08017bf7

08014b00 <_free_r>:
 8014b00:	b538      	push	{r3, r4, r5, lr}
 8014b02:	4605      	mov	r5, r0
 8014b04:	2900      	cmp	r1, #0
 8014b06:	d041      	beq.n	8014b8c <_free_r+0x8c>
 8014b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b0c:	1f0c      	subs	r4, r1, #4
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	bfb8      	it	lt
 8014b12:	18e4      	addlt	r4, r4, r3
 8014b14:	f7fe f932 	bl	8012d7c <__malloc_lock>
 8014b18:	4a1d      	ldr	r2, [pc, #116]	@ (8014b90 <_free_r+0x90>)
 8014b1a:	6813      	ldr	r3, [r2, #0]
 8014b1c:	b933      	cbnz	r3, 8014b2c <_free_r+0x2c>
 8014b1e:	6063      	str	r3, [r4, #4]
 8014b20:	6014      	str	r4, [r2, #0]
 8014b22:	4628      	mov	r0, r5
 8014b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b28:	f7fe b92e 	b.w	8012d88 <__malloc_unlock>
 8014b2c:	42a3      	cmp	r3, r4
 8014b2e:	d908      	bls.n	8014b42 <_free_r+0x42>
 8014b30:	6820      	ldr	r0, [r4, #0]
 8014b32:	1821      	adds	r1, r4, r0
 8014b34:	428b      	cmp	r3, r1
 8014b36:	bf01      	itttt	eq
 8014b38:	6819      	ldreq	r1, [r3, #0]
 8014b3a:	685b      	ldreq	r3, [r3, #4]
 8014b3c:	1809      	addeq	r1, r1, r0
 8014b3e:	6021      	streq	r1, [r4, #0]
 8014b40:	e7ed      	b.n	8014b1e <_free_r+0x1e>
 8014b42:	461a      	mov	r2, r3
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	b10b      	cbz	r3, 8014b4c <_free_r+0x4c>
 8014b48:	42a3      	cmp	r3, r4
 8014b4a:	d9fa      	bls.n	8014b42 <_free_r+0x42>
 8014b4c:	6811      	ldr	r1, [r2, #0]
 8014b4e:	1850      	adds	r0, r2, r1
 8014b50:	42a0      	cmp	r0, r4
 8014b52:	d10b      	bne.n	8014b6c <_free_r+0x6c>
 8014b54:	6820      	ldr	r0, [r4, #0]
 8014b56:	4401      	add	r1, r0
 8014b58:	1850      	adds	r0, r2, r1
 8014b5a:	4283      	cmp	r3, r0
 8014b5c:	6011      	str	r1, [r2, #0]
 8014b5e:	d1e0      	bne.n	8014b22 <_free_r+0x22>
 8014b60:	6818      	ldr	r0, [r3, #0]
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	6053      	str	r3, [r2, #4]
 8014b66:	4408      	add	r0, r1
 8014b68:	6010      	str	r0, [r2, #0]
 8014b6a:	e7da      	b.n	8014b22 <_free_r+0x22>
 8014b6c:	d902      	bls.n	8014b74 <_free_r+0x74>
 8014b6e:	230c      	movs	r3, #12
 8014b70:	602b      	str	r3, [r5, #0]
 8014b72:	e7d6      	b.n	8014b22 <_free_r+0x22>
 8014b74:	6820      	ldr	r0, [r4, #0]
 8014b76:	1821      	adds	r1, r4, r0
 8014b78:	428b      	cmp	r3, r1
 8014b7a:	bf04      	itt	eq
 8014b7c:	6819      	ldreq	r1, [r3, #0]
 8014b7e:	685b      	ldreq	r3, [r3, #4]
 8014b80:	6063      	str	r3, [r4, #4]
 8014b82:	bf04      	itt	eq
 8014b84:	1809      	addeq	r1, r1, r0
 8014b86:	6021      	streq	r1, [r4, #0]
 8014b88:	6054      	str	r4, [r2, #4]
 8014b8a:	e7ca      	b.n	8014b22 <_free_r+0x22>
 8014b8c:	bd38      	pop	{r3, r4, r5, pc}
 8014b8e:	bf00      	nop
 8014b90:	20002378 	.word	0x20002378

08014b94 <rshift>:
 8014b94:	6903      	ldr	r3, [r0, #16]
 8014b96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014b9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014ba2:	f100 0414 	add.w	r4, r0, #20
 8014ba6:	dd45      	ble.n	8014c34 <rshift+0xa0>
 8014ba8:	f011 011f 	ands.w	r1, r1, #31
 8014bac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014bb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014bb4:	d10c      	bne.n	8014bd0 <rshift+0x3c>
 8014bb6:	f100 0710 	add.w	r7, r0, #16
 8014bba:	4629      	mov	r1, r5
 8014bbc:	42b1      	cmp	r1, r6
 8014bbe:	d334      	bcc.n	8014c2a <rshift+0x96>
 8014bc0:	1a9b      	subs	r3, r3, r2
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	1eea      	subs	r2, r5, #3
 8014bc6:	4296      	cmp	r6, r2
 8014bc8:	bf38      	it	cc
 8014bca:	2300      	movcc	r3, #0
 8014bcc:	4423      	add	r3, r4
 8014bce:	e015      	b.n	8014bfc <rshift+0x68>
 8014bd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014bd4:	f1c1 0820 	rsb	r8, r1, #32
 8014bd8:	40cf      	lsrs	r7, r1
 8014bda:	f105 0e04 	add.w	lr, r5, #4
 8014bde:	46a1      	mov	r9, r4
 8014be0:	4576      	cmp	r6, lr
 8014be2:	46f4      	mov	ip, lr
 8014be4:	d815      	bhi.n	8014c12 <rshift+0x7e>
 8014be6:	1a9a      	subs	r2, r3, r2
 8014be8:	0092      	lsls	r2, r2, #2
 8014bea:	3a04      	subs	r2, #4
 8014bec:	3501      	adds	r5, #1
 8014bee:	42ae      	cmp	r6, r5
 8014bf0:	bf38      	it	cc
 8014bf2:	2200      	movcc	r2, #0
 8014bf4:	18a3      	adds	r3, r4, r2
 8014bf6:	50a7      	str	r7, [r4, r2]
 8014bf8:	b107      	cbz	r7, 8014bfc <rshift+0x68>
 8014bfa:	3304      	adds	r3, #4
 8014bfc:	1b1a      	subs	r2, r3, r4
 8014bfe:	42a3      	cmp	r3, r4
 8014c00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014c04:	bf08      	it	eq
 8014c06:	2300      	moveq	r3, #0
 8014c08:	6102      	str	r2, [r0, #16]
 8014c0a:	bf08      	it	eq
 8014c0c:	6143      	streq	r3, [r0, #20]
 8014c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c12:	f8dc c000 	ldr.w	ip, [ip]
 8014c16:	fa0c fc08 	lsl.w	ip, ip, r8
 8014c1a:	ea4c 0707 	orr.w	r7, ip, r7
 8014c1e:	f849 7b04 	str.w	r7, [r9], #4
 8014c22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014c26:	40cf      	lsrs	r7, r1
 8014c28:	e7da      	b.n	8014be0 <rshift+0x4c>
 8014c2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8014c2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8014c32:	e7c3      	b.n	8014bbc <rshift+0x28>
 8014c34:	4623      	mov	r3, r4
 8014c36:	e7e1      	b.n	8014bfc <rshift+0x68>

08014c38 <__hexdig_fun>:
 8014c38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014c3c:	2b09      	cmp	r3, #9
 8014c3e:	d802      	bhi.n	8014c46 <__hexdig_fun+0xe>
 8014c40:	3820      	subs	r0, #32
 8014c42:	b2c0      	uxtb	r0, r0
 8014c44:	4770      	bx	lr
 8014c46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014c4a:	2b05      	cmp	r3, #5
 8014c4c:	d801      	bhi.n	8014c52 <__hexdig_fun+0x1a>
 8014c4e:	3847      	subs	r0, #71	@ 0x47
 8014c50:	e7f7      	b.n	8014c42 <__hexdig_fun+0xa>
 8014c52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014c56:	2b05      	cmp	r3, #5
 8014c58:	d801      	bhi.n	8014c5e <__hexdig_fun+0x26>
 8014c5a:	3827      	subs	r0, #39	@ 0x27
 8014c5c:	e7f1      	b.n	8014c42 <__hexdig_fun+0xa>
 8014c5e:	2000      	movs	r0, #0
 8014c60:	4770      	bx	lr
	...

08014c64 <__gethex>:
 8014c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c68:	b085      	sub	sp, #20
 8014c6a:	468a      	mov	sl, r1
 8014c6c:	9302      	str	r3, [sp, #8]
 8014c6e:	680b      	ldr	r3, [r1, #0]
 8014c70:	9001      	str	r0, [sp, #4]
 8014c72:	4690      	mov	r8, r2
 8014c74:	1c9c      	adds	r4, r3, #2
 8014c76:	46a1      	mov	r9, r4
 8014c78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014c7c:	2830      	cmp	r0, #48	@ 0x30
 8014c7e:	d0fa      	beq.n	8014c76 <__gethex+0x12>
 8014c80:	eba9 0303 	sub.w	r3, r9, r3
 8014c84:	f1a3 0b02 	sub.w	fp, r3, #2
 8014c88:	f7ff ffd6 	bl	8014c38 <__hexdig_fun>
 8014c8c:	4605      	mov	r5, r0
 8014c8e:	2800      	cmp	r0, #0
 8014c90:	d168      	bne.n	8014d64 <__gethex+0x100>
 8014c92:	49a0      	ldr	r1, [pc, #640]	@ (8014f14 <__gethex+0x2b0>)
 8014c94:	2201      	movs	r2, #1
 8014c96:	4648      	mov	r0, r9
 8014c98:	f7ff f866 	bl	8013d68 <strncmp>
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	2800      	cmp	r0, #0
 8014ca0:	d167      	bne.n	8014d72 <__gethex+0x10e>
 8014ca2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014ca6:	4626      	mov	r6, r4
 8014ca8:	f7ff ffc6 	bl	8014c38 <__hexdig_fun>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d062      	beq.n	8014d76 <__gethex+0x112>
 8014cb0:	4623      	mov	r3, r4
 8014cb2:	7818      	ldrb	r0, [r3, #0]
 8014cb4:	2830      	cmp	r0, #48	@ 0x30
 8014cb6:	4699      	mov	r9, r3
 8014cb8:	f103 0301 	add.w	r3, r3, #1
 8014cbc:	d0f9      	beq.n	8014cb2 <__gethex+0x4e>
 8014cbe:	f7ff ffbb 	bl	8014c38 <__hexdig_fun>
 8014cc2:	fab0 f580 	clz	r5, r0
 8014cc6:	096d      	lsrs	r5, r5, #5
 8014cc8:	f04f 0b01 	mov.w	fp, #1
 8014ccc:	464a      	mov	r2, r9
 8014cce:	4616      	mov	r6, r2
 8014cd0:	3201      	adds	r2, #1
 8014cd2:	7830      	ldrb	r0, [r6, #0]
 8014cd4:	f7ff ffb0 	bl	8014c38 <__hexdig_fun>
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	d1f8      	bne.n	8014cce <__gethex+0x6a>
 8014cdc:	498d      	ldr	r1, [pc, #564]	@ (8014f14 <__gethex+0x2b0>)
 8014cde:	2201      	movs	r2, #1
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	f7ff f841 	bl	8013d68 <strncmp>
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d13f      	bne.n	8014d6a <__gethex+0x106>
 8014cea:	b944      	cbnz	r4, 8014cfe <__gethex+0x9a>
 8014cec:	1c74      	adds	r4, r6, #1
 8014cee:	4622      	mov	r2, r4
 8014cf0:	4616      	mov	r6, r2
 8014cf2:	3201      	adds	r2, #1
 8014cf4:	7830      	ldrb	r0, [r6, #0]
 8014cf6:	f7ff ff9f 	bl	8014c38 <__hexdig_fun>
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	d1f8      	bne.n	8014cf0 <__gethex+0x8c>
 8014cfe:	1ba4      	subs	r4, r4, r6
 8014d00:	00a7      	lsls	r7, r4, #2
 8014d02:	7833      	ldrb	r3, [r6, #0]
 8014d04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014d08:	2b50      	cmp	r3, #80	@ 0x50
 8014d0a:	d13e      	bne.n	8014d8a <__gethex+0x126>
 8014d0c:	7873      	ldrb	r3, [r6, #1]
 8014d0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8014d10:	d033      	beq.n	8014d7a <__gethex+0x116>
 8014d12:	2b2d      	cmp	r3, #45	@ 0x2d
 8014d14:	d034      	beq.n	8014d80 <__gethex+0x11c>
 8014d16:	1c71      	adds	r1, r6, #1
 8014d18:	2400      	movs	r4, #0
 8014d1a:	7808      	ldrb	r0, [r1, #0]
 8014d1c:	f7ff ff8c 	bl	8014c38 <__hexdig_fun>
 8014d20:	1e43      	subs	r3, r0, #1
 8014d22:	b2db      	uxtb	r3, r3
 8014d24:	2b18      	cmp	r3, #24
 8014d26:	d830      	bhi.n	8014d8a <__gethex+0x126>
 8014d28:	f1a0 0210 	sub.w	r2, r0, #16
 8014d2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014d30:	f7ff ff82 	bl	8014c38 <__hexdig_fun>
 8014d34:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8014d38:	fa5f fc8c 	uxtb.w	ip, ip
 8014d3c:	f1bc 0f18 	cmp.w	ip, #24
 8014d40:	f04f 030a 	mov.w	r3, #10
 8014d44:	d91e      	bls.n	8014d84 <__gethex+0x120>
 8014d46:	b104      	cbz	r4, 8014d4a <__gethex+0xe6>
 8014d48:	4252      	negs	r2, r2
 8014d4a:	4417      	add	r7, r2
 8014d4c:	f8ca 1000 	str.w	r1, [sl]
 8014d50:	b1ed      	cbz	r5, 8014d8e <__gethex+0x12a>
 8014d52:	f1bb 0f00 	cmp.w	fp, #0
 8014d56:	bf0c      	ite	eq
 8014d58:	2506      	moveq	r5, #6
 8014d5a:	2500      	movne	r5, #0
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	b005      	add	sp, #20
 8014d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d64:	2500      	movs	r5, #0
 8014d66:	462c      	mov	r4, r5
 8014d68:	e7b0      	b.n	8014ccc <__gethex+0x68>
 8014d6a:	2c00      	cmp	r4, #0
 8014d6c:	d1c7      	bne.n	8014cfe <__gethex+0x9a>
 8014d6e:	4627      	mov	r7, r4
 8014d70:	e7c7      	b.n	8014d02 <__gethex+0x9e>
 8014d72:	464e      	mov	r6, r9
 8014d74:	462f      	mov	r7, r5
 8014d76:	2501      	movs	r5, #1
 8014d78:	e7c3      	b.n	8014d02 <__gethex+0x9e>
 8014d7a:	2400      	movs	r4, #0
 8014d7c:	1cb1      	adds	r1, r6, #2
 8014d7e:	e7cc      	b.n	8014d1a <__gethex+0xb6>
 8014d80:	2401      	movs	r4, #1
 8014d82:	e7fb      	b.n	8014d7c <__gethex+0x118>
 8014d84:	fb03 0002 	mla	r0, r3, r2, r0
 8014d88:	e7ce      	b.n	8014d28 <__gethex+0xc4>
 8014d8a:	4631      	mov	r1, r6
 8014d8c:	e7de      	b.n	8014d4c <__gethex+0xe8>
 8014d8e:	eba6 0309 	sub.w	r3, r6, r9
 8014d92:	3b01      	subs	r3, #1
 8014d94:	4629      	mov	r1, r5
 8014d96:	2b07      	cmp	r3, #7
 8014d98:	dc0a      	bgt.n	8014db0 <__gethex+0x14c>
 8014d9a:	9801      	ldr	r0, [sp, #4]
 8014d9c:	f000 fd8a 	bl	80158b4 <_Balloc>
 8014da0:	4604      	mov	r4, r0
 8014da2:	b940      	cbnz	r0, 8014db6 <__gethex+0x152>
 8014da4:	4b5c      	ldr	r3, [pc, #368]	@ (8014f18 <__gethex+0x2b4>)
 8014da6:	4602      	mov	r2, r0
 8014da8:	21e4      	movs	r1, #228	@ 0xe4
 8014daa:	485c      	ldr	r0, [pc, #368]	@ (8014f1c <__gethex+0x2b8>)
 8014dac:	f001 fc58 	bl	8016660 <__assert_func>
 8014db0:	3101      	adds	r1, #1
 8014db2:	105b      	asrs	r3, r3, #1
 8014db4:	e7ef      	b.n	8014d96 <__gethex+0x132>
 8014db6:	f100 0a14 	add.w	sl, r0, #20
 8014dba:	2300      	movs	r3, #0
 8014dbc:	4655      	mov	r5, sl
 8014dbe:	469b      	mov	fp, r3
 8014dc0:	45b1      	cmp	r9, r6
 8014dc2:	d337      	bcc.n	8014e34 <__gethex+0x1d0>
 8014dc4:	f845 bb04 	str.w	fp, [r5], #4
 8014dc8:	eba5 050a 	sub.w	r5, r5, sl
 8014dcc:	10ad      	asrs	r5, r5, #2
 8014dce:	6125      	str	r5, [r4, #16]
 8014dd0:	4658      	mov	r0, fp
 8014dd2:	f000 fe61 	bl	8015a98 <__hi0bits>
 8014dd6:	016d      	lsls	r5, r5, #5
 8014dd8:	f8d8 6000 	ldr.w	r6, [r8]
 8014ddc:	1a2d      	subs	r5, r5, r0
 8014dde:	42b5      	cmp	r5, r6
 8014de0:	dd54      	ble.n	8014e8c <__gethex+0x228>
 8014de2:	1bad      	subs	r5, r5, r6
 8014de4:	4629      	mov	r1, r5
 8014de6:	4620      	mov	r0, r4
 8014de8:	f001 f9ed 	bl	80161c6 <__any_on>
 8014dec:	4681      	mov	r9, r0
 8014dee:	b178      	cbz	r0, 8014e10 <__gethex+0x1ac>
 8014df0:	1e6b      	subs	r3, r5, #1
 8014df2:	1159      	asrs	r1, r3, #5
 8014df4:	f003 021f 	and.w	r2, r3, #31
 8014df8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014dfc:	f04f 0901 	mov.w	r9, #1
 8014e00:	fa09 f202 	lsl.w	r2, r9, r2
 8014e04:	420a      	tst	r2, r1
 8014e06:	d003      	beq.n	8014e10 <__gethex+0x1ac>
 8014e08:	454b      	cmp	r3, r9
 8014e0a:	dc36      	bgt.n	8014e7a <__gethex+0x216>
 8014e0c:	f04f 0902 	mov.w	r9, #2
 8014e10:	4629      	mov	r1, r5
 8014e12:	4620      	mov	r0, r4
 8014e14:	f7ff febe 	bl	8014b94 <rshift>
 8014e18:	442f      	add	r7, r5
 8014e1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e1e:	42bb      	cmp	r3, r7
 8014e20:	da42      	bge.n	8014ea8 <__gethex+0x244>
 8014e22:	9801      	ldr	r0, [sp, #4]
 8014e24:	4621      	mov	r1, r4
 8014e26:	f000 fd85 	bl	8015934 <_Bfree>
 8014e2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	6013      	str	r3, [r2, #0]
 8014e30:	25a3      	movs	r5, #163	@ 0xa3
 8014e32:	e793      	b.n	8014d5c <__gethex+0xf8>
 8014e34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014e38:	2a2e      	cmp	r2, #46	@ 0x2e
 8014e3a:	d012      	beq.n	8014e62 <__gethex+0x1fe>
 8014e3c:	2b20      	cmp	r3, #32
 8014e3e:	d104      	bne.n	8014e4a <__gethex+0x1e6>
 8014e40:	f845 bb04 	str.w	fp, [r5], #4
 8014e44:	f04f 0b00 	mov.w	fp, #0
 8014e48:	465b      	mov	r3, fp
 8014e4a:	7830      	ldrb	r0, [r6, #0]
 8014e4c:	9303      	str	r3, [sp, #12]
 8014e4e:	f7ff fef3 	bl	8014c38 <__hexdig_fun>
 8014e52:	9b03      	ldr	r3, [sp, #12]
 8014e54:	f000 000f 	and.w	r0, r0, #15
 8014e58:	4098      	lsls	r0, r3
 8014e5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8014e5e:	3304      	adds	r3, #4
 8014e60:	e7ae      	b.n	8014dc0 <__gethex+0x15c>
 8014e62:	45b1      	cmp	r9, r6
 8014e64:	d8ea      	bhi.n	8014e3c <__gethex+0x1d8>
 8014e66:	492b      	ldr	r1, [pc, #172]	@ (8014f14 <__gethex+0x2b0>)
 8014e68:	9303      	str	r3, [sp, #12]
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	4630      	mov	r0, r6
 8014e6e:	f7fe ff7b 	bl	8013d68 <strncmp>
 8014e72:	9b03      	ldr	r3, [sp, #12]
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d1e1      	bne.n	8014e3c <__gethex+0x1d8>
 8014e78:	e7a2      	b.n	8014dc0 <__gethex+0x15c>
 8014e7a:	1ea9      	subs	r1, r5, #2
 8014e7c:	4620      	mov	r0, r4
 8014e7e:	f001 f9a2 	bl	80161c6 <__any_on>
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d0c2      	beq.n	8014e0c <__gethex+0x1a8>
 8014e86:	f04f 0903 	mov.w	r9, #3
 8014e8a:	e7c1      	b.n	8014e10 <__gethex+0x1ac>
 8014e8c:	da09      	bge.n	8014ea2 <__gethex+0x23e>
 8014e8e:	1b75      	subs	r5, r6, r5
 8014e90:	4621      	mov	r1, r4
 8014e92:	9801      	ldr	r0, [sp, #4]
 8014e94:	462a      	mov	r2, r5
 8014e96:	f000 ff5d 	bl	8015d54 <__lshift>
 8014e9a:	1b7f      	subs	r7, r7, r5
 8014e9c:	4604      	mov	r4, r0
 8014e9e:	f100 0a14 	add.w	sl, r0, #20
 8014ea2:	f04f 0900 	mov.w	r9, #0
 8014ea6:	e7b8      	b.n	8014e1a <__gethex+0x1b6>
 8014ea8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014eac:	42bd      	cmp	r5, r7
 8014eae:	dd6f      	ble.n	8014f90 <__gethex+0x32c>
 8014eb0:	1bed      	subs	r5, r5, r7
 8014eb2:	42ae      	cmp	r6, r5
 8014eb4:	dc34      	bgt.n	8014f20 <__gethex+0x2bc>
 8014eb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014eba:	2b02      	cmp	r3, #2
 8014ebc:	d022      	beq.n	8014f04 <__gethex+0x2a0>
 8014ebe:	2b03      	cmp	r3, #3
 8014ec0:	d024      	beq.n	8014f0c <__gethex+0x2a8>
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d115      	bne.n	8014ef2 <__gethex+0x28e>
 8014ec6:	42ae      	cmp	r6, r5
 8014ec8:	d113      	bne.n	8014ef2 <__gethex+0x28e>
 8014eca:	2e01      	cmp	r6, #1
 8014ecc:	d10b      	bne.n	8014ee6 <__gethex+0x282>
 8014ece:	9a02      	ldr	r2, [sp, #8]
 8014ed0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ed4:	6013      	str	r3, [r2, #0]
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	6123      	str	r3, [r4, #16]
 8014eda:	f8ca 3000 	str.w	r3, [sl]
 8014ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ee0:	2562      	movs	r5, #98	@ 0x62
 8014ee2:	601c      	str	r4, [r3, #0]
 8014ee4:	e73a      	b.n	8014d5c <__gethex+0xf8>
 8014ee6:	1e71      	subs	r1, r6, #1
 8014ee8:	4620      	mov	r0, r4
 8014eea:	f001 f96c 	bl	80161c6 <__any_on>
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	d1ed      	bne.n	8014ece <__gethex+0x26a>
 8014ef2:	9801      	ldr	r0, [sp, #4]
 8014ef4:	4621      	mov	r1, r4
 8014ef6:	f000 fd1d 	bl	8015934 <_Bfree>
 8014efa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014efc:	2300      	movs	r3, #0
 8014efe:	6013      	str	r3, [r2, #0]
 8014f00:	2550      	movs	r5, #80	@ 0x50
 8014f02:	e72b      	b.n	8014d5c <__gethex+0xf8>
 8014f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d1f3      	bne.n	8014ef2 <__gethex+0x28e>
 8014f0a:	e7e0      	b.n	8014ece <__gethex+0x26a>
 8014f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d1dd      	bne.n	8014ece <__gethex+0x26a>
 8014f12:	e7ee      	b.n	8014ef2 <__gethex+0x28e>
 8014f14:	08017bed 	.word	0x08017bed
 8014f18:	08017c73 	.word	0x08017c73
 8014f1c:	08017c84 	.word	0x08017c84
 8014f20:	1e6f      	subs	r7, r5, #1
 8014f22:	f1b9 0f00 	cmp.w	r9, #0
 8014f26:	d130      	bne.n	8014f8a <__gethex+0x326>
 8014f28:	b127      	cbz	r7, 8014f34 <__gethex+0x2d0>
 8014f2a:	4639      	mov	r1, r7
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	f001 f94a 	bl	80161c6 <__any_on>
 8014f32:	4681      	mov	r9, r0
 8014f34:	117a      	asrs	r2, r7, #5
 8014f36:	2301      	movs	r3, #1
 8014f38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014f3c:	f007 071f 	and.w	r7, r7, #31
 8014f40:	40bb      	lsls	r3, r7
 8014f42:	4213      	tst	r3, r2
 8014f44:	4629      	mov	r1, r5
 8014f46:	4620      	mov	r0, r4
 8014f48:	bf18      	it	ne
 8014f4a:	f049 0902 	orrne.w	r9, r9, #2
 8014f4e:	f7ff fe21 	bl	8014b94 <rshift>
 8014f52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014f56:	1b76      	subs	r6, r6, r5
 8014f58:	2502      	movs	r5, #2
 8014f5a:	f1b9 0f00 	cmp.w	r9, #0
 8014f5e:	d047      	beq.n	8014ff0 <__gethex+0x38c>
 8014f60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f64:	2b02      	cmp	r3, #2
 8014f66:	d015      	beq.n	8014f94 <__gethex+0x330>
 8014f68:	2b03      	cmp	r3, #3
 8014f6a:	d017      	beq.n	8014f9c <__gethex+0x338>
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d109      	bne.n	8014f84 <__gethex+0x320>
 8014f70:	f019 0f02 	tst.w	r9, #2
 8014f74:	d006      	beq.n	8014f84 <__gethex+0x320>
 8014f76:	f8da 3000 	ldr.w	r3, [sl]
 8014f7a:	ea49 0903 	orr.w	r9, r9, r3
 8014f7e:	f019 0f01 	tst.w	r9, #1
 8014f82:	d10e      	bne.n	8014fa2 <__gethex+0x33e>
 8014f84:	f045 0510 	orr.w	r5, r5, #16
 8014f88:	e032      	b.n	8014ff0 <__gethex+0x38c>
 8014f8a:	f04f 0901 	mov.w	r9, #1
 8014f8e:	e7d1      	b.n	8014f34 <__gethex+0x2d0>
 8014f90:	2501      	movs	r5, #1
 8014f92:	e7e2      	b.n	8014f5a <__gethex+0x2f6>
 8014f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f96:	f1c3 0301 	rsb	r3, r3, #1
 8014f9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d0f0      	beq.n	8014f84 <__gethex+0x320>
 8014fa2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014fa6:	f104 0314 	add.w	r3, r4, #20
 8014faa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014fae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014fb2:	f04f 0c00 	mov.w	ip, #0
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fbc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8014fc0:	d01b      	beq.n	8014ffa <__gethex+0x396>
 8014fc2:	3201      	adds	r2, #1
 8014fc4:	6002      	str	r2, [r0, #0]
 8014fc6:	2d02      	cmp	r5, #2
 8014fc8:	f104 0314 	add.w	r3, r4, #20
 8014fcc:	d13c      	bne.n	8015048 <__gethex+0x3e4>
 8014fce:	f8d8 2000 	ldr.w	r2, [r8]
 8014fd2:	3a01      	subs	r2, #1
 8014fd4:	42b2      	cmp	r2, r6
 8014fd6:	d109      	bne.n	8014fec <__gethex+0x388>
 8014fd8:	1171      	asrs	r1, r6, #5
 8014fda:	2201      	movs	r2, #1
 8014fdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014fe0:	f006 061f 	and.w	r6, r6, #31
 8014fe4:	fa02 f606 	lsl.w	r6, r2, r6
 8014fe8:	421e      	tst	r6, r3
 8014fea:	d13a      	bne.n	8015062 <__gethex+0x3fe>
 8014fec:	f045 0520 	orr.w	r5, r5, #32
 8014ff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ff2:	601c      	str	r4, [r3, #0]
 8014ff4:	9b02      	ldr	r3, [sp, #8]
 8014ff6:	601f      	str	r7, [r3, #0]
 8014ff8:	e6b0      	b.n	8014d5c <__gethex+0xf8>
 8014ffa:	4299      	cmp	r1, r3
 8014ffc:	f843 cc04 	str.w	ip, [r3, #-4]
 8015000:	d8d9      	bhi.n	8014fb6 <__gethex+0x352>
 8015002:	68a3      	ldr	r3, [r4, #8]
 8015004:	459b      	cmp	fp, r3
 8015006:	db17      	blt.n	8015038 <__gethex+0x3d4>
 8015008:	6861      	ldr	r1, [r4, #4]
 801500a:	9801      	ldr	r0, [sp, #4]
 801500c:	3101      	adds	r1, #1
 801500e:	f000 fc51 	bl	80158b4 <_Balloc>
 8015012:	4681      	mov	r9, r0
 8015014:	b918      	cbnz	r0, 801501e <__gethex+0x3ba>
 8015016:	4b1a      	ldr	r3, [pc, #104]	@ (8015080 <__gethex+0x41c>)
 8015018:	4602      	mov	r2, r0
 801501a:	2184      	movs	r1, #132	@ 0x84
 801501c:	e6c5      	b.n	8014daa <__gethex+0x146>
 801501e:	6922      	ldr	r2, [r4, #16]
 8015020:	3202      	adds	r2, #2
 8015022:	f104 010c 	add.w	r1, r4, #12
 8015026:	0092      	lsls	r2, r2, #2
 8015028:	300c      	adds	r0, #12
 801502a:	f7fe fef1 	bl	8013e10 <memcpy>
 801502e:	4621      	mov	r1, r4
 8015030:	9801      	ldr	r0, [sp, #4]
 8015032:	f000 fc7f 	bl	8015934 <_Bfree>
 8015036:	464c      	mov	r4, r9
 8015038:	6923      	ldr	r3, [r4, #16]
 801503a:	1c5a      	adds	r2, r3, #1
 801503c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015040:	6122      	str	r2, [r4, #16]
 8015042:	2201      	movs	r2, #1
 8015044:	615a      	str	r2, [r3, #20]
 8015046:	e7be      	b.n	8014fc6 <__gethex+0x362>
 8015048:	6922      	ldr	r2, [r4, #16]
 801504a:	455a      	cmp	r2, fp
 801504c:	dd0b      	ble.n	8015066 <__gethex+0x402>
 801504e:	2101      	movs	r1, #1
 8015050:	4620      	mov	r0, r4
 8015052:	f7ff fd9f 	bl	8014b94 <rshift>
 8015056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801505a:	3701      	adds	r7, #1
 801505c:	42bb      	cmp	r3, r7
 801505e:	f6ff aee0 	blt.w	8014e22 <__gethex+0x1be>
 8015062:	2501      	movs	r5, #1
 8015064:	e7c2      	b.n	8014fec <__gethex+0x388>
 8015066:	f016 061f 	ands.w	r6, r6, #31
 801506a:	d0fa      	beq.n	8015062 <__gethex+0x3fe>
 801506c:	4453      	add	r3, sl
 801506e:	f1c6 0620 	rsb	r6, r6, #32
 8015072:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015076:	f000 fd0f 	bl	8015a98 <__hi0bits>
 801507a:	42b0      	cmp	r0, r6
 801507c:	dbe7      	blt.n	801504e <__gethex+0x3ea>
 801507e:	e7f0      	b.n	8015062 <__gethex+0x3fe>
 8015080:	08017c73 	.word	0x08017c73

08015084 <L_shift>:
 8015084:	f1c2 0208 	rsb	r2, r2, #8
 8015088:	0092      	lsls	r2, r2, #2
 801508a:	b570      	push	{r4, r5, r6, lr}
 801508c:	f1c2 0620 	rsb	r6, r2, #32
 8015090:	6843      	ldr	r3, [r0, #4]
 8015092:	6804      	ldr	r4, [r0, #0]
 8015094:	fa03 f506 	lsl.w	r5, r3, r6
 8015098:	432c      	orrs	r4, r5
 801509a:	40d3      	lsrs	r3, r2
 801509c:	6004      	str	r4, [r0, #0]
 801509e:	f840 3f04 	str.w	r3, [r0, #4]!
 80150a2:	4288      	cmp	r0, r1
 80150a4:	d3f4      	bcc.n	8015090 <L_shift+0xc>
 80150a6:	bd70      	pop	{r4, r5, r6, pc}

080150a8 <__match>:
 80150a8:	b530      	push	{r4, r5, lr}
 80150aa:	6803      	ldr	r3, [r0, #0]
 80150ac:	3301      	adds	r3, #1
 80150ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150b2:	b914      	cbnz	r4, 80150ba <__match+0x12>
 80150b4:	6003      	str	r3, [r0, #0]
 80150b6:	2001      	movs	r0, #1
 80150b8:	bd30      	pop	{r4, r5, pc}
 80150ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80150c2:	2d19      	cmp	r5, #25
 80150c4:	bf98      	it	ls
 80150c6:	3220      	addls	r2, #32
 80150c8:	42a2      	cmp	r2, r4
 80150ca:	d0f0      	beq.n	80150ae <__match+0x6>
 80150cc:	2000      	movs	r0, #0
 80150ce:	e7f3      	b.n	80150b8 <__match+0x10>

080150d0 <__hexnan>:
 80150d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d4:	680b      	ldr	r3, [r1, #0]
 80150d6:	6801      	ldr	r1, [r0, #0]
 80150d8:	115e      	asrs	r6, r3, #5
 80150da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80150de:	f013 031f 	ands.w	r3, r3, #31
 80150e2:	b087      	sub	sp, #28
 80150e4:	bf18      	it	ne
 80150e6:	3604      	addne	r6, #4
 80150e8:	2500      	movs	r5, #0
 80150ea:	1f37      	subs	r7, r6, #4
 80150ec:	4682      	mov	sl, r0
 80150ee:	4690      	mov	r8, r2
 80150f0:	9301      	str	r3, [sp, #4]
 80150f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80150f6:	46b9      	mov	r9, r7
 80150f8:	463c      	mov	r4, r7
 80150fa:	9502      	str	r5, [sp, #8]
 80150fc:	46ab      	mov	fp, r5
 80150fe:	784a      	ldrb	r2, [r1, #1]
 8015100:	1c4b      	adds	r3, r1, #1
 8015102:	9303      	str	r3, [sp, #12]
 8015104:	b342      	cbz	r2, 8015158 <__hexnan+0x88>
 8015106:	4610      	mov	r0, r2
 8015108:	9105      	str	r1, [sp, #20]
 801510a:	9204      	str	r2, [sp, #16]
 801510c:	f7ff fd94 	bl	8014c38 <__hexdig_fun>
 8015110:	2800      	cmp	r0, #0
 8015112:	d151      	bne.n	80151b8 <__hexnan+0xe8>
 8015114:	9a04      	ldr	r2, [sp, #16]
 8015116:	9905      	ldr	r1, [sp, #20]
 8015118:	2a20      	cmp	r2, #32
 801511a:	d818      	bhi.n	801514e <__hexnan+0x7e>
 801511c:	9b02      	ldr	r3, [sp, #8]
 801511e:	459b      	cmp	fp, r3
 8015120:	dd13      	ble.n	801514a <__hexnan+0x7a>
 8015122:	454c      	cmp	r4, r9
 8015124:	d206      	bcs.n	8015134 <__hexnan+0x64>
 8015126:	2d07      	cmp	r5, #7
 8015128:	dc04      	bgt.n	8015134 <__hexnan+0x64>
 801512a:	462a      	mov	r2, r5
 801512c:	4649      	mov	r1, r9
 801512e:	4620      	mov	r0, r4
 8015130:	f7ff ffa8 	bl	8015084 <L_shift>
 8015134:	4544      	cmp	r4, r8
 8015136:	d952      	bls.n	80151de <__hexnan+0x10e>
 8015138:	2300      	movs	r3, #0
 801513a:	f1a4 0904 	sub.w	r9, r4, #4
 801513e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015142:	f8cd b008 	str.w	fp, [sp, #8]
 8015146:	464c      	mov	r4, r9
 8015148:	461d      	mov	r5, r3
 801514a:	9903      	ldr	r1, [sp, #12]
 801514c:	e7d7      	b.n	80150fe <__hexnan+0x2e>
 801514e:	2a29      	cmp	r2, #41	@ 0x29
 8015150:	d157      	bne.n	8015202 <__hexnan+0x132>
 8015152:	3102      	adds	r1, #2
 8015154:	f8ca 1000 	str.w	r1, [sl]
 8015158:	f1bb 0f00 	cmp.w	fp, #0
 801515c:	d051      	beq.n	8015202 <__hexnan+0x132>
 801515e:	454c      	cmp	r4, r9
 8015160:	d206      	bcs.n	8015170 <__hexnan+0xa0>
 8015162:	2d07      	cmp	r5, #7
 8015164:	dc04      	bgt.n	8015170 <__hexnan+0xa0>
 8015166:	462a      	mov	r2, r5
 8015168:	4649      	mov	r1, r9
 801516a:	4620      	mov	r0, r4
 801516c:	f7ff ff8a 	bl	8015084 <L_shift>
 8015170:	4544      	cmp	r4, r8
 8015172:	d936      	bls.n	80151e2 <__hexnan+0x112>
 8015174:	f1a8 0204 	sub.w	r2, r8, #4
 8015178:	4623      	mov	r3, r4
 801517a:	f853 1b04 	ldr.w	r1, [r3], #4
 801517e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015182:	429f      	cmp	r7, r3
 8015184:	d2f9      	bcs.n	801517a <__hexnan+0xaa>
 8015186:	1b3b      	subs	r3, r7, r4
 8015188:	f023 0303 	bic.w	r3, r3, #3
 801518c:	3304      	adds	r3, #4
 801518e:	3401      	adds	r4, #1
 8015190:	3e03      	subs	r6, #3
 8015192:	42b4      	cmp	r4, r6
 8015194:	bf88      	it	hi
 8015196:	2304      	movhi	r3, #4
 8015198:	4443      	add	r3, r8
 801519a:	2200      	movs	r2, #0
 801519c:	f843 2b04 	str.w	r2, [r3], #4
 80151a0:	429f      	cmp	r7, r3
 80151a2:	d2fb      	bcs.n	801519c <__hexnan+0xcc>
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	b91b      	cbnz	r3, 80151b0 <__hexnan+0xe0>
 80151a8:	4547      	cmp	r7, r8
 80151aa:	d128      	bne.n	80151fe <__hexnan+0x12e>
 80151ac:	2301      	movs	r3, #1
 80151ae:	603b      	str	r3, [r7, #0]
 80151b0:	2005      	movs	r0, #5
 80151b2:	b007      	add	sp, #28
 80151b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b8:	3501      	adds	r5, #1
 80151ba:	2d08      	cmp	r5, #8
 80151bc:	f10b 0b01 	add.w	fp, fp, #1
 80151c0:	dd06      	ble.n	80151d0 <__hexnan+0x100>
 80151c2:	4544      	cmp	r4, r8
 80151c4:	d9c1      	bls.n	801514a <__hexnan+0x7a>
 80151c6:	2300      	movs	r3, #0
 80151c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80151cc:	2501      	movs	r5, #1
 80151ce:	3c04      	subs	r4, #4
 80151d0:	6822      	ldr	r2, [r4, #0]
 80151d2:	f000 000f 	and.w	r0, r0, #15
 80151d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80151da:	6020      	str	r0, [r4, #0]
 80151dc:	e7b5      	b.n	801514a <__hexnan+0x7a>
 80151de:	2508      	movs	r5, #8
 80151e0:	e7b3      	b.n	801514a <__hexnan+0x7a>
 80151e2:	9b01      	ldr	r3, [sp, #4]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d0dd      	beq.n	80151a4 <__hexnan+0xd4>
 80151e8:	f1c3 0320 	rsb	r3, r3, #32
 80151ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80151f0:	40da      	lsrs	r2, r3
 80151f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80151f6:	4013      	ands	r3, r2
 80151f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80151fc:	e7d2      	b.n	80151a4 <__hexnan+0xd4>
 80151fe:	3f04      	subs	r7, #4
 8015200:	e7d0      	b.n	80151a4 <__hexnan+0xd4>
 8015202:	2004      	movs	r0, #4
 8015204:	e7d5      	b.n	80151b2 <__hexnan+0xe2>

08015206 <__ssputs_r>:
 8015206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801520a:	688e      	ldr	r6, [r1, #8]
 801520c:	461f      	mov	r7, r3
 801520e:	42be      	cmp	r6, r7
 8015210:	680b      	ldr	r3, [r1, #0]
 8015212:	4682      	mov	sl, r0
 8015214:	460c      	mov	r4, r1
 8015216:	4690      	mov	r8, r2
 8015218:	d82d      	bhi.n	8015276 <__ssputs_r+0x70>
 801521a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801521e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015222:	d026      	beq.n	8015272 <__ssputs_r+0x6c>
 8015224:	6965      	ldr	r5, [r4, #20]
 8015226:	6909      	ldr	r1, [r1, #16]
 8015228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801522c:	eba3 0901 	sub.w	r9, r3, r1
 8015230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015234:	1c7b      	adds	r3, r7, #1
 8015236:	444b      	add	r3, r9
 8015238:	106d      	asrs	r5, r5, #1
 801523a:	429d      	cmp	r5, r3
 801523c:	bf38      	it	cc
 801523e:	461d      	movcc	r5, r3
 8015240:	0553      	lsls	r3, r2, #21
 8015242:	d527      	bpl.n	8015294 <__ssputs_r+0x8e>
 8015244:	4629      	mov	r1, r5
 8015246:	f7fd f97f 	bl	8012548 <_malloc_r>
 801524a:	4606      	mov	r6, r0
 801524c:	b360      	cbz	r0, 80152a8 <__ssputs_r+0xa2>
 801524e:	6921      	ldr	r1, [r4, #16]
 8015250:	464a      	mov	r2, r9
 8015252:	f7fe fddd 	bl	8013e10 <memcpy>
 8015256:	89a3      	ldrh	r3, [r4, #12]
 8015258:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801525c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015260:	81a3      	strh	r3, [r4, #12]
 8015262:	6126      	str	r6, [r4, #16]
 8015264:	6165      	str	r5, [r4, #20]
 8015266:	444e      	add	r6, r9
 8015268:	eba5 0509 	sub.w	r5, r5, r9
 801526c:	6026      	str	r6, [r4, #0]
 801526e:	60a5      	str	r5, [r4, #8]
 8015270:	463e      	mov	r6, r7
 8015272:	42be      	cmp	r6, r7
 8015274:	d900      	bls.n	8015278 <__ssputs_r+0x72>
 8015276:	463e      	mov	r6, r7
 8015278:	6820      	ldr	r0, [r4, #0]
 801527a:	4632      	mov	r2, r6
 801527c:	4641      	mov	r1, r8
 801527e:	f001 f96c 	bl	801655a <memmove>
 8015282:	68a3      	ldr	r3, [r4, #8]
 8015284:	1b9b      	subs	r3, r3, r6
 8015286:	60a3      	str	r3, [r4, #8]
 8015288:	6823      	ldr	r3, [r4, #0]
 801528a:	4433      	add	r3, r6
 801528c:	6023      	str	r3, [r4, #0]
 801528e:	2000      	movs	r0, #0
 8015290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015294:	462a      	mov	r2, r5
 8015296:	f000 fffa 	bl	801628e <_realloc_r>
 801529a:	4606      	mov	r6, r0
 801529c:	2800      	cmp	r0, #0
 801529e:	d1e0      	bne.n	8015262 <__ssputs_r+0x5c>
 80152a0:	6921      	ldr	r1, [r4, #16]
 80152a2:	4650      	mov	r0, sl
 80152a4:	f7ff fc2c 	bl	8014b00 <_free_r>
 80152a8:	230c      	movs	r3, #12
 80152aa:	f8ca 3000 	str.w	r3, [sl]
 80152ae:	89a3      	ldrh	r3, [r4, #12]
 80152b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152b4:	81a3      	strh	r3, [r4, #12]
 80152b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152ba:	e7e9      	b.n	8015290 <__ssputs_r+0x8a>

080152bc <_svfiprintf_r>:
 80152bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152c0:	4698      	mov	r8, r3
 80152c2:	898b      	ldrh	r3, [r1, #12]
 80152c4:	061b      	lsls	r3, r3, #24
 80152c6:	b09d      	sub	sp, #116	@ 0x74
 80152c8:	4607      	mov	r7, r0
 80152ca:	460d      	mov	r5, r1
 80152cc:	4614      	mov	r4, r2
 80152ce:	d510      	bpl.n	80152f2 <_svfiprintf_r+0x36>
 80152d0:	690b      	ldr	r3, [r1, #16]
 80152d2:	b973      	cbnz	r3, 80152f2 <_svfiprintf_r+0x36>
 80152d4:	2140      	movs	r1, #64	@ 0x40
 80152d6:	f7fd f937 	bl	8012548 <_malloc_r>
 80152da:	6028      	str	r0, [r5, #0]
 80152dc:	6128      	str	r0, [r5, #16]
 80152de:	b930      	cbnz	r0, 80152ee <_svfiprintf_r+0x32>
 80152e0:	230c      	movs	r3, #12
 80152e2:	603b      	str	r3, [r7, #0]
 80152e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152e8:	b01d      	add	sp, #116	@ 0x74
 80152ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ee:	2340      	movs	r3, #64	@ 0x40
 80152f0:	616b      	str	r3, [r5, #20]
 80152f2:	2300      	movs	r3, #0
 80152f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80152f6:	2320      	movs	r3, #32
 80152f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80152fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015300:	2330      	movs	r3, #48	@ 0x30
 8015302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80154a0 <_svfiprintf_r+0x1e4>
 8015306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801530a:	f04f 0901 	mov.w	r9, #1
 801530e:	4623      	mov	r3, r4
 8015310:	469a      	mov	sl, r3
 8015312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015316:	b10a      	cbz	r2, 801531c <_svfiprintf_r+0x60>
 8015318:	2a25      	cmp	r2, #37	@ 0x25
 801531a:	d1f9      	bne.n	8015310 <_svfiprintf_r+0x54>
 801531c:	ebba 0b04 	subs.w	fp, sl, r4
 8015320:	d00b      	beq.n	801533a <_svfiprintf_r+0x7e>
 8015322:	465b      	mov	r3, fp
 8015324:	4622      	mov	r2, r4
 8015326:	4629      	mov	r1, r5
 8015328:	4638      	mov	r0, r7
 801532a:	f7ff ff6c 	bl	8015206 <__ssputs_r>
 801532e:	3001      	adds	r0, #1
 8015330:	f000 80a7 	beq.w	8015482 <_svfiprintf_r+0x1c6>
 8015334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015336:	445a      	add	r2, fp
 8015338:	9209      	str	r2, [sp, #36]	@ 0x24
 801533a:	f89a 3000 	ldrb.w	r3, [sl]
 801533e:	2b00      	cmp	r3, #0
 8015340:	f000 809f 	beq.w	8015482 <_svfiprintf_r+0x1c6>
 8015344:	2300      	movs	r3, #0
 8015346:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801534a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801534e:	f10a 0a01 	add.w	sl, sl, #1
 8015352:	9304      	str	r3, [sp, #16]
 8015354:	9307      	str	r3, [sp, #28]
 8015356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801535a:	931a      	str	r3, [sp, #104]	@ 0x68
 801535c:	4654      	mov	r4, sl
 801535e:	2205      	movs	r2, #5
 8015360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015364:	484e      	ldr	r0, [pc, #312]	@ (80154a0 <_svfiprintf_r+0x1e4>)
 8015366:	f7ea ff3b 	bl	80001e0 <memchr>
 801536a:	9a04      	ldr	r2, [sp, #16]
 801536c:	b9d8      	cbnz	r0, 80153a6 <_svfiprintf_r+0xea>
 801536e:	06d0      	lsls	r0, r2, #27
 8015370:	bf44      	itt	mi
 8015372:	2320      	movmi	r3, #32
 8015374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015378:	0711      	lsls	r1, r2, #28
 801537a:	bf44      	itt	mi
 801537c:	232b      	movmi	r3, #43	@ 0x2b
 801537e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015382:	f89a 3000 	ldrb.w	r3, [sl]
 8015386:	2b2a      	cmp	r3, #42	@ 0x2a
 8015388:	d015      	beq.n	80153b6 <_svfiprintf_r+0xfa>
 801538a:	9a07      	ldr	r2, [sp, #28]
 801538c:	4654      	mov	r4, sl
 801538e:	2000      	movs	r0, #0
 8015390:	f04f 0c0a 	mov.w	ip, #10
 8015394:	4621      	mov	r1, r4
 8015396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801539a:	3b30      	subs	r3, #48	@ 0x30
 801539c:	2b09      	cmp	r3, #9
 801539e:	d94b      	bls.n	8015438 <_svfiprintf_r+0x17c>
 80153a0:	b1b0      	cbz	r0, 80153d0 <_svfiprintf_r+0x114>
 80153a2:	9207      	str	r2, [sp, #28]
 80153a4:	e014      	b.n	80153d0 <_svfiprintf_r+0x114>
 80153a6:	eba0 0308 	sub.w	r3, r0, r8
 80153aa:	fa09 f303 	lsl.w	r3, r9, r3
 80153ae:	4313      	orrs	r3, r2
 80153b0:	9304      	str	r3, [sp, #16]
 80153b2:	46a2      	mov	sl, r4
 80153b4:	e7d2      	b.n	801535c <_svfiprintf_r+0xa0>
 80153b6:	9b03      	ldr	r3, [sp, #12]
 80153b8:	1d19      	adds	r1, r3, #4
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	9103      	str	r1, [sp, #12]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	bfbb      	ittet	lt
 80153c2:	425b      	neglt	r3, r3
 80153c4:	f042 0202 	orrlt.w	r2, r2, #2
 80153c8:	9307      	strge	r3, [sp, #28]
 80153ca:	9307      	strlt	r3, [sp, #28]
 80153cc:	bfb8      	it	lt
 80153ce:	9204      	strlt	r2, [sp, #16]
 80153d0:	7823      	ldrb	r3, [r4, #0]
 80153d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80153d4:	d10a      	bne.n	80153ec <_svfiprintf_r+0x130>
 80153d6:	7863      	ldrb	r3, [r4, #1]
 80153d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80153da:	d132      	bne.n	8015442 <_svfiprintf_r+0x186>
 80153dc:	9b03      	ldr	r3, [sp, #12]
 80153de:	1d1a      	adds	r2, r3, #4
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	9203      	str	r2, [sp, #12]
 80153e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80153e8:	3402      	adds	r4, #2
 80153ea:	9305      	str	r3, [sp, #20]
 80153ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80154b0 <_svfiprintf_r+0x1f4>
 80153f0:	7821      	ldrb	r1, [r4, #0]
 80153f2:	2203      	movs	r2, #3
 80153f4:	4650      	mov	r0, sl
 80153f6:	f7ea fef3 	bl	80001e0 <memchr>
 80153fa:	b138      	cbz	r0, 801540c <_svfiprintf_r+0x150>
 80153fc:	9b04      	ldr	r3, [sp, #16]
 80153fe:	eba0 000a 	sub.w	r0, r0, sl
 8015402:	2240      	movs	r2, #64	@ 0x40
 8015404:	4082      	lsls	r2, r0
 8015406:	4313      	orrs	r3, r2
 8015408:	3401      	adds	r4, #1
 801540a:	9304      	str	r3, [sp, #16]
 801540c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015410:	4824      	ldr	r0, [pc, #144]	@ (80154a4 <_svfiprintf_r+0x1e8>)
 8015412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015416:	2206      	movs	r2, #6
 8015418:	f7ea fee2 	bl	80001e0 <memchr>
 801541c:	2800      	cmp	r0, #0
 801541e:	d036      	beq.n	801548e <_svfiprintf_r+0x1d2>
 8015420:	4b21      	ldr	r3, [pc, #132]	@ (80154a8 <_svfiprintf_r+0x1ec>)
 8015422:	bb1b      	cbnz	r3, 801546c <_svfiprintf_r+0x1b0>
 8015424:	9b03      	ldr	r3, [sp, #12]
 8015426:	3307      	adds	r3, #7
 8015428:	f023 0307 	bic.w	r3, r3, #7
 801542c:	3308      	adds	r3, #8
 801542e:	9303      	str	r3, [sp, #12]
 8015430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015432:	4433      	add	r3, r6
 8015434:	9309      	str	r3, [sp, #36]	@ 0x24
 8015436:	e76a      	b.n	801530e <_svfiprintf_r+0x52>
 8015438:	fb0c 3202 	mla	r2, ip, r2, r3
 801543c:	460c      	mov	r4, r1
 801543e:	2001      	movs	r0, #1
 8015440:	e7a8      	b.n	8015394 <_svfiprintf_r+0xd8>
 8015442:	2300      	movs	r3, #0
 8015444:	3401      	adds	r4, #1
 8015446:	9305      	str	r3, [sp, #20]
 8015448:	4619      	mov	r1, r3
 801544a:	f04f 0c0a 	mov.w	ip, #10
 801544e:	4620      	mov	r0, r4
 8015450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015454:	3a30      	subs	r2, #48	@ 0x30
 8015456:	2a09      	cmp	r2, #9
 8015458:	d903      	bls.n	8015462 <_svfiprintf_r+0x1a6>
 801545a:	2b00      	cmp	r3, #0
 801545c:	d0c6      	beq.n	80153ec <_svfiprintf_r+0x130>
 801545e:	9105      	str	r1, [sp, #20]
 8015460:	e7c4      	b.n	80153ec <_svfiprintf_r+0x130>
 8015462:	fb0c 2101 	mla	r1, ip, r1, r2
 8015466:	4604      	mov	r4, r0
 8015468:	2301      	movs	r3, #1
 801546a:	e7f0      	b.n	801544e <_svfiprintf_r+0x192>
 801546c:	ab03      	add	r3, sp, #12
 801546e:	9300      	str	r3, [sp, #0]
 8015470:	462a      	mov	r2, r5
 8015472:	4b0e      	ldr	r3, [pc, #56]	@ (80154ac <_svfiprintf_r+0x1f0>)
 8015474:	a904      	add	r1, sp, #16
 8015476:	4638      	mov	r0, r7
 8015478:	f7fc fe0a 	bl	8012090 <_printf_float>
 801547c:	1c42      	adds	r2, r0, #1
 801547e:	4606      	mov	r6, r0
 8015480:	d1d6      	bne.n	8015430 <_svfiprintf_r+0x174>
 8015482:	89ab      	ldrh	r3, [r5, #12]
 8015484:	065b      	lsls	r3, r3, #25
 8015486:	f53f af2d 	bmi.w	80152e4 <_svfiprintf_r+0x28>
 801548a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801548c:	e72c      	b.n	80152e8 <_svfiprintf_r+0x2c>
 801548e:	ab03      	add	r3, sp, #12
 8015490:	9300      	str	r3, [sp, #0]
 8015492:	462a      	mov	r2, r5
 8015494:	4b05      	ldr	r3, [pc, #20]	@ (80154ac <_svfiprintf_r+0x1f0>)
 8015496:	a904      	add	r1, sp, #16
 8015498:	4638      	mov	r0, r7
 801549a:	f7fd f943 	bl	8012724 <_printf_i>
 801549e:	e7ed      	b.n	801547c <_svfiprintf_r+0x1c0>
 80154a0:	08017ce4 	.word	0x08017ce4
 80154a4:	08017cee 	.word	0x08017cee
 80154a8:	08012091 	.word	0x08012091
 80154ac:	08015207 	.word	0x08015207
 80154b0:	08017cea 	.word	0x08017cea

080154b4 <__sfputc_r>:
 80154b4:	6893      	ldr	r3, [r2, #8]
 80154b6:	3b01      	subs	r3, #1
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	b410      	push	{r4}
 80154bc:	6093      	str	r3, [r2, #8]
 80154be:	da08      	bge.n	80154d2 <__sfputc_r+0x1e>
 80154c0:	6994      	ldr	r4, [r2, #24]
 80154c2:	42a3      	cmp	r3, r4
 80154c4:	db01      	blt.n	80154ca <__sfputc_r+0x16>
 80154c6:	290a      	cmp	r1, #10
 80154c8:	d103      	bne.n	80154d2 <__sfputc_r+0x1e>
 80154ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154ce:	f000 bf0c 	b.w	80162ea <__swbuf_r>
 80154d2:	6813      	ldr	r3, [r2, #0]
 80154d4:	1c58      	adds	r0, r3, #1
 80154d6:	6010      	str	r0, [r2, #0]
 80154d8:	7019      	strb	r1, [r3, #0]
 80154da:	4608      	mov	r0, r1
 80154dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154e0:	4770      	bx	lr

080154e2 <__sfputs_r>:
 80154e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154e4:	4606      	mov	r6, r0
 80154e6:	460f      	mov	r7, r1
 80154e8:	4614      	mov	r4, r2
 80154ea:	18d5      	adds	r5, r2, r3
 80154ec:	42ac      	cmp	r4, r5
 80154ee:	d101      	bne.n	80154f4 <__sfputs_r+0x12>
 80154f0:	2000      	movs	r0, #0
 80154f2:	e007      	b.n	8015504 <__sfputs_r+0x22>
 80154f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154f8:	463a      	mov	r2, r7
 80154fa:	4630      	mov	r0, r6
 80154fc:	f7ff ffda 	bl	80154b4 <__sfputc_r>
 8015500:	1c43      	adds	r3, r0, #1
 8015502:	d1f3      	bne.n	80154ec <__sfputs_r+0xa>
 8015504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015508 <_vfiprintf_r>:
 8015508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550c:	460d      	mov	r5, r1
 801550e:	b09d      	sub	sp, #116	@ 0x74
 8015510:	4614      	mov	r4, r2
 8015512:	4698      	mov	r8, r3
 8015514:	4606      	mov	r6, r0
 8015516:	b118      	cbz	r0, 8015520 <_vfiprintf_r+0x18>
 8015518:	6a03      	ldr	r3, [r0, #32]
 801551a:	b90b      	cbnz	r3, 8015520 <_vfiprintf_r+0x18>
 801551c:	f7fd fce8 	bl	8012ef0 <__sinit>
 8015520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015522:	07d9      	lsls	r1, r3, #31
 8015524:	d405      	bmi.n	8015532 <_vfiprintf_r+0x2a>
 8015526:	89ab      	ldrh	r3, [r5, #12]
 8015528:	059a      	lsls	r2, r3, #22
 801552a:	d402      	bmi.n	8015532 <_vfiprintf_r+0x2a>
 801552c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801552e:	f7fe fc68 	bl	8013e02 <__retarget_lock_acquire_recursive>
 8015532:	89ab      	ldrh	r3, [r5, #12]
 8015534:	071b      	lsls	r3, r3, #28
 8015536:	d501      	bpl.n	801553c <_vfiprintf_r+0x34>
 8015538:	692b      	ldr	r3, [r5, #16]
 801553a:	b99b      	cbnz	r3, 8015564 <_vfiprintf_r+0x5c>
 801553c:	4629      	mov	r1, r5
 801553e:	4630      	mov	r0, r6
 8015540:	f000 ff12 	bl	8016368 <__swsetup_r>
 8015544:	b170      	cbz	r0, 8015564 <_vfiprintf_r+0x5c>
 8015546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015548:	07dc      	lsls	r4, r3, #31
 801554a:	d504      	bpl.n	8015556 <_vfiprintf_r+0x4e>
 801554c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015550:	b01d      	add	sp, #116	@ 0x74
 8015552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015556:	89ab      	ldrh	r3, [r5, #12]
 8015558:	0598      	lsls	r0, r3, #22
 801555a:	d4f7      	bmi.n	801554c <_vfiprintf_r+0x44>
 801555c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801555e:	f7fe fc51 	bl	8013e04 <__retarget_lock_release_recursive>
 8015562:	e7f3      	b.n	801554c <_vfiprintf_r+0x44>
 8015564:	2300      	movs	r3, #0
 8015566:	9309      	str	r3, [sp, #36]	@ 0x24
 8015568:	2320      	movs	r3, #32
 801556a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801556e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015572:	2330      	movs	r3, #48	@ 0x30
 8015574:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015724 <_vfiprintf_r+0x21c>
 8015578:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801557c:	f04f 0901 	mov.w	r9, #1
 8015580:	4623      	mov	r3, r4
 8015582:	469a      	mov	sl, r3
 8015584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015588:	b10a      	cbz	r2, 801558e <_vfiprintf_r+0x86>
 801558a:	2a25      	cmp	r2, #37	@ 0x25
 801558c:	d1f9      	bne.n	8015582 <_vfiprintf_r+0x7a>
 801558e:	ebba 0b04 	subs.w	fp, sl, r4
 8015592:	d00b      	beq.n	80155ac <_vfiprintf_r+0xa4>
 8015594:	465b      	mov	r3, fp
 8015596:	4622      	mov	r2, r4
 8015598:	4629      	mov	r1, r5
 801559a:	4630      	mov	r0, r6
 801559c:	f7ff ffa1 	bl	80154e2 <__sfputs_r>
 80155a0:	3001      	adds	r0, #1
 80155a2:	f000 80a7 	beq.w	80156f4 <_vfiprintf_r+0x1ec>
 80155a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80155a8:	445a      	add	r2, fp
 80155aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80155ac:	f89a 3000 	ldrb.w	r3, [sl]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f000 809f 	beq.w	80156f4 <_vfiprintf_r+0x1ec>
 80155b6:	2300      	movs	r3, #0
 80155b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80155bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155c0:	f10a 0a01 	add.w	sl, sl, #1
 80155c4:	9304      	str	r3, [sp, #16]
 80155c6:	9307      	str	r3, [sp, #28]
 80155c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80155cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80155ce:	4654      	mov	r4, sl
 80155d0:	2205      	movs	r2, #5
 80155d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155d6:	4853      	ldr	r0, [pc, #332]	@ (8015724 <_vfiprintf_r+0x21c>)
 80155d8:	f7ea fe02 	bl	80001e0 <memchr>
 80155dc:	9a04      	ldr	r2, [sp, #16]
 80155de:	b9d8      	cbnz	r0, 8015618 <_vfiprintf_r+0x110>
 80155e0:	06d1      	lsls	r1, r2, #27
 80155e2:	bf44      	itt	mi
 80155e4:	2320      	movmi	r3, #32
 80155e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155ea:	0713      	lsls	r3, r2, #28
 80155ec:	bf44      	itt	mi
 80155ee:	232b      	movmi	r3, #43	@ 0x2b
 80155f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80155f4:	f89a 3000 	ldrb.w	r3, [sl]
 80155f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80155fa:	d015      	beq.n	8015628 <_vfiprintf_r+0x120>
 80155fc:	9a07      	ldr	r2, [sp, #28]
 80155fe:	4654      	mov	r4, sl
 8015600:	2000      	movs	r0, #0
 8015602:	f04f 0c0a 	mov.w	ip, #10
 8015606:	4621      	mov	r1, r4
 8015608:	f811 3b01 	ldrb.w	r3, [r1], #1
 801560c:	3b30      	subs	r3, #48	@ 0x30
 801560e:	2b09      	cmp	r3, #9
 8015610:	d94b      	bls.n	80156aa <_vfiprintf_r+0x1a2>
 8015612:	b1b0      	cbz	r0, 8015642 <_vfiprintf_r+0x13a>
 8015614:	9207      	str	r2, [sp, #28]
 8015616:	e014      	b.n	8015642 <_vfiprintf_r+0x13a>
 8015618:	eba0 0308 	sub.w	r3, r0, r8
 801561c:	fa09 f303 	lsl.w	r3, r9, r3
 8015620:	4313      	orrs	r3, r2
 8015622:	9304      	str	r3, [sp, #16]
 8015624:	46a2      	mov	sl, r4
 8015626:	e7d2      	b.n	80155ce <_vfiprintf_r+0xc6>
 8015628:	9b03      	ldr	r3, [sp, #12]
 801562a:	1d19      	adds	r1, r3, #4
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	9103      	str	r1, [sp, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	bfbb      	ittet	lt
 8015634:	425b      	neglt	r3, r3
 8015636:	f042 0202 	orrlt.w	r2, r2, #2
 801563a:	9307      	strge	r3, [sp, #28]
 801563c:	9307      	strlt	r3, [sp, #28]
 801563e:	bfb8      	it	lt
 8015640:	9204      	strlt	r2, [sp, #16]
 8015642:	7823      	ldrb	r3, [r4, #0]
 8015644:	2b2e      	cmp	r3, #46	@ 0x2e
 8015646:	d10a      	bne.n	801565e <_vfiprintf_r+0x156>
 8015648:	7863      	ldrb	r3, [r4, #1]
 801564a:	2b2a      	cmp	r3, #42	@ 0x2a
 801564c:	d132      	bne.n	80156b4 <_vfiprintf_r+0x1ac>
 801564e:	9b03      	ldr	r3, [sp, #12]
 8015650:	1d1a      	adds	r2, r3, #4
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	9203      	str	r2, [sp, #12]
 8015656:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801565a:	3402      	adds	r4, #2
 801565c:	9305      	str	r3, [sp, #20]
 801565e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015734 <_vfiprintf_r+0x22c>
 8015662:	7821      	ldrb	r1, [r4, #0]
 8015664:	2203      	movs	r2, #3
 8015666:	4650      	mov	r0, sl
 8015668:	f7ea fdba 	bl	80001e0 <memchr>
 801566c:	b138      	cbz	r0, 801567e <_vfiprintf_r+0x176>
 801566e:	9b04      	ldr	r3, [sp, #16]
 8015670:	eba0 000a 	sub.w	r0, r0, sl
 8015674:	2240      	movs	r2, #64	@ 0x40
 8015676:	4082      	lsls	r2, r0
 8015678:	4313      	orrs	r3, r2
 801567a:	3401      	adds	r4, #1
 801567c:	9304      	str	r3, [sp, #16]
 801567e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015682:	4829      	ldr	r0, [pc, #164]	@ (8015728 <_vfiprintf_r+0x220>)
 8015684:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015688:	2206      	movs	r2, #6
 801568a:	f7ea fda9 	bl	80001e0 <memchr>
 801568e:	2800      	cmp	r0, #0
 8015690:	d03f      	beq.n	8015712 <_vfiprintf_r+0x20a>
 8015692:	4b26      	ldr	r3, [pc, #152]	@ (801572c <_vfiprintf_r+0x224>)
 8015694:	bb1b      	cbnz	r3, 80156de <_vfiprintf_r+0x1d6>
 8015696:	9b03      	ldr	r3, [sp, #12]
 8015698:	3307      	adds	r3, #7
 801569a:	f023 0307 	bic.w	r3, r3, #7
 801569e:	3308      	adds	r3, #8
 80156a0:	9303      	str	r3, [sp, #12]
 80156a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156a4:	443b      	add	r3, r7
 80156a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80156a8:	e76a      	b.n	8015580 <_vfiprintf_r+0x78>
 80156aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80156ae:	460c      	mov	r4, r1
 80156b0:	2001      	movs	r0, #1
 80156b2:	e7a8      	b.n	8015606 <_vfiprintf_r+0xfe>
 80156b4:	2300      	movs	r3, #0
 80156b6:	3401      	adds	r4, #1
 80156b8:	9305      	str	r3, [sp, #20]
 80156ba:	4619      	mov	r1, r3
 80156bc:	f04f 0c0a 	mov.w	ip, #10
 80156c0:	4620      	mov	r0, r4
 80156c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156c6:	3a30      	subs	r2, #48	@ 0x30
 80156c8:	2a09      	cmp	r2, #9
 80156ca:	d903      	bls.n	80156d4 <_vfiprintf_r+0x1cc>
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d0c6      	beq.n	801565e <_vfiprintf_r+0x156>
 80156d0:	9105      	str	r1, [sp, #20]
 80156d2:	e7c4      	b.n	801565e <_vfiprintf_r+0x156>
 80156d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80156d8:	4604      	mov	r4, r0
 80156da:	2301      	movs	r3, #1
 80156dc:	e7f0      	b.n	80156c0 <_vfiprintf_r+0x1b8>
 80156de:	ab03      	add	r3, sp, #12
 80156e0:	9300      	str	r3, [sp, #0]
 80156e2:	462a      	mov	r2, r5
 80156e4:	4b12      	ldr	r3, [pc, #72]	@ (8015730 <_vfiprintf_r+0x228>)
 80156e6:	a904      	add	r1, sp, #16
 80156e8:	4630      	mov	r0, r6
 80156ea:	f7fc fcd1 	bl	8012090 <_printf_float>
 80156ee:	4607      	mov	r7, r0
 80156f0:	1c78      	adds	r0, r7, #1
 80156f2:	d1d6      	bne.n	80156a2 <_vfiprintf_r+0x19a>
 80156f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156f6:	07d9      	lsls	r1, r3, #31
 80156f8:	d405      	bmi.n	8015706 <_vfiprintf_r+0x1fe>
 80156fa:	89ab      	ldrh	r3, [r5, #12]
 80156fc:	059a      	lsls	r2, r3, #22
 80156fe:	d402      	bmi.n	8015706 <_vfiprintf_r+0x1fe>
 8015700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015702:	f7fe fb7f 	bl	8013e04 <__retarget_lock_release_recursive>
 8015706:	89ab      	ldrh	r3, [r5, #12]
 8015708:	065b      	lsls	r3, r3, #25
 801570a:	f53f af1f 	bmi.w	801554c <_vfiprintf_r+0x44>
 801570e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015710:	e71e      	b.n	8015550 <_vfiprintf_r+0x48>
 8015712:	ab03      	add	r3, sp, #12
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	462a      	mov	r2, r5
 8015718:	4b05      	ldr	r3, [pc, #20]	@ (8015730 <_vfiprintf_r+0x228>)
 801571a:	a904      	add	r1, sp, #16
 801571c:	4630      	mov	r0, r6
 801571e:	f7fd f801 	bl	8012724 <_printf_i>
 8015722:	e7e4      	b.n	80156ee <_vfiprintf_r+0x1e6>
 8015724:	08017ce4 	.word	0x08017ce4
 8015728:	08017cee 	.word	0x08017cee
 801572c:	08012091 	.word	0x08012091
 8015730:	080154e3 	.word	0x080154e3
 8015734:	08017cea 	.word	0x08017cea

08015738 <__ascii_mbtowc>:
 8015738:	b082      	sub	sp, #8
 801573a:	b901      	cbnz	r1, 801573e <__ascii_mbtowc+0x6>
 801573c:	a901      	add	r1, sp, #4
 801573e:	b142      	cbz	r2, 8015752 <__ascii_mbtowc+0x1a>
 8015740:	b14b      	cbz	r3, 8015756 <__ascii_mbtowc+0x1e>
 8015742:	7813      	ldrb	r3, [r2, #0]
 8015744:	600b      	str	r3, [r1, #0]
 8015746:	7812      	ldrb	r2, [r2, #0]
 8015748:	1e10      	subs	r0, r2, #0
 801574a:	bf18      	it	ne
 801574c:	2001      	movne	r0, #1
 801574e:	b002      	add	sp, #8
 8015750:	4770      	bx	lr
 8015752:	4610      	mov	r0, r2
 8015754:	e7fb      	b.n	801574e <__ascii_mbtowc+0x16>
 8015756:	f06f 0001 	mvn.w	r0, #1
 801575a:	e7f8      	b.n	801574e <__ascii_mbtowc+0x16>

0801575c <__sflush_r>:
 801575c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015764:	0716      	lsls	r6, r2, #28
 8015766:	4605      	mov	r5, r0
 8015768:	460c      	mov	r4, r1
 801576a:	d454      	bmi.n	8015816 <__sflush_r+0xba>
 801576c:	684b      	ldr	r3, [r1, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	dc02      	bgt.n	8015778 <__sflush_r+0x1c>
 8015772:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015774:	2b00      	cmp	r3, #0
 8015776:	dd48      	ble.n	801580a <__sflush_r+0xae>
 8015778:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801577a:	2e00      	cmp	r6, #0
 801577c:	d045      	beq.n	801580a <__sflush_r+0xae>
 801577e:	2300      	movs	r3, #0
 8015780:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015784:	682f      	ldr	r7, [r5, #0]
 8015786:	6a21      	ldr	r1, [r4, #32]
 8015788:	602b      	str	r3, [r5, #0]
 801578a:	d030      	beq.n	80157ee <__sflush_r+0x92>
 801578c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801578e:	89a3      	ldrh	r3, [r4, #12]
 8015790:	0759      	lsls	r1, r3, #29
 8015792:	d505      	bpl.n	80157a0 <__sflush_r+0x44>
 8015794:	6863      	ldr	r3, [r4, #4]
 8015796:	1ad2      	subs	r2, r2, r3
 8015798:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801579a:	b10b      	cbz	r3, 80157a0 <__sflush_r+0x44>
 801579c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801579e:	1ad2      	subs	r2, r2, r3
 80157a0:	2300      	movs	r3, #0
 80157a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80157a4:	6a21      	ldr	r1, [r4, #32]
 80157a6:	4628      	mov	r0, r5
 80157a8:	47b0      	blx	r6
 80157aa:	1c43      	adds	r3, r0, #1
 80157ac:	89a3      	ldrh	r3, [r4, #12]
 80157ae:	d106      	bne.n	80157be <__sflush_r+0x62>
 80157b0:	6829      	ldr	r1, [r5, #0]
 80157b2:	291d      	cmp	r1, #29
 80157b4:	d82b      	bhi.n	801580e <__sflush_r+0xb2>
 80157b6:	4a2a      	ldr	r2, [pc, #168]	@ (8015860 <__sflush_r+0x104>)
 80157b8:	40ca      	lsrs	r2, r1
 80157ba:	07d6      	lsls	r6, r2, #31
 80157bc:	d527      	bpl.n	801580e <__sflush_r+0xb2>
 80157be:	2200      	movs	r2, #0
 80157c0:	6062      	str	r2, [r4, #4]
 80157c2:	04d9      	lsls	r1, r3, #19
 80157c4:	6922      	ldr	r2, [r4, #16]
 80157c6:	6022      	str	r2, [r4, #0]
 80157c8:	d504      	bpl.n	80157d4 <__sflush_r+0x78>
 80157ca:	1c42      	adds	r2, r0, #1
 80157cc:	d101      	bne.n	80157d2 <__sflush_r+0x76>
 80157ce:	682b      	ldr	r3, [r5, #0]
 80157d0:	b903      	cbnz	r3, 80157d4 <__sflush_r+0x78>
 80157d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80157d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80157d6:	602f      	str	r7, [r5, #0]
 80157d8:	b1b9      	cbz	r1, 801580a <__sflush_r+0xae>
 80157da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80157de:	4299      	cmp	r1, r3
 80157e0:	d002      	beq.n	80157e8 <__sflush_r+0x8c>
 80157e2:	4628      	mov	r0, r5
 80157e4:	f7ff f98c 	bl	8014b00 <_free_r>
 80157e8:	2300      	movs	r3, #0
 80157ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80157ec:	e00d      	b.n	801580a <__sflush_r+0xae>
 80157ee:	2301      	movs	r3, #1
 80157f0:	4628      	mov	r0, r5
 80157f2:	47b0      	blx	r6
 80157f4:	4602      	mov	r2, r0
 80157f6:	1c50      	adds	r0, r2, #1
 80157f8:	d1c9      	bne.n	801578e <__sflush_r+0x32>
 80157fa:	682b      	ldr	r3, [r5, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d0c6      	beq.n	801578e <__sflush_r+0x32>
 8015800:	2b1d      	cmp	r3, #29
 8015802:	d001      	beq.n	8015808 <__sflush_r+0xac>
 8015804:	2b16      	cmp	r3, #22
 8015806:	d11e      	bne.n	8015846 <__sflush_r+0xea>
 8015808:	602f      	str	r7, [r5, #0]
 801580a:	2000      	movs	r0, #0
 801580c:	e022      	b.n	8015854 <__sflush_r+0xf8>
 801580e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015812:	b21b      	sxth	r3, r3
 8015814:	e01b      	b.n	801584e <__sflush_r+0xf2>
 8015816:	690f      	ldr	r7, [r1, #16]
 8015818:	2f00      	cmp	r7, #0
 801581a:	d0f6      	beq.n	801580a <__sflush_r+0xae>
 801581c:	0793      	lsls	r3, r2, #30
 801581e:	680e      	ldr	r6, [r1, #0]
 8015820:	bf08      	it	eq
 8015822:	694b      	ldreq	r3, [r1, #20]
 8015824:	600f      	str	r7, [r1, #0]
 8015826:	bf18      	it	ne
 8015828:	2300      	movne	r3, #0
 801582a:	eba6 0807 	sub.w	r8, r6, r7
 801582e:	608b      	str	r3, [r1, #8]
 8015830:	f1b8 0f00 	cmp.w	r8, #0
 8015834:	dde9      	ble.n	801580a <__sflush_r+0xae>
 8015836:	6a21      	ldr	r1, [r4, #32]
 8015838:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801583a:	4643      	mov	r3, r8
 801583c:	463a      	mov	r2, r7
 801583e:	4628      	mov	r0, r5
 8015840:	47b0      	blx	r6
 8015842:	2800      	cmp	r0, #0
 8015844:	dc08      	bgt.n	8015858 <__sflush_r+0xfc>
 8015846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801584a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801584e:	81a3      	strh	r3, [r4, #12]
 8015850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015858:	4407      	add	r7, r0
 801585a:	eba8 0800 	sub.w	r8, r8, r0
 801585e:	e7e7      	b.n	8015830 <__sflush_r+0xd4>
 8015860:	20400001 	.word	0x20400001

08015864 <_fflush_r>:
 8015864:	b538      	push	{r3, r4, r5, lr}
 8015866:	690b      	ldr	r3, [r1, #16]
 8015868:	4605      	mov	r5, r0
 801586a:	460c      	mov	r4, r1
 801586c:	b913      	cbnz	r3, 8015874 <_fflush_r+0x10>
 801586e:	2500      	movs	r5, #0
 8015870:	4628      	mov	r0, r5
 8015872:	bd38      	pop	{r3, r4, r5, pc}
 8015874:	b118      	cbz	r0, 801587e <_fflush_r+0x1a>
 8015876:	6a03      	ldr	r3, [r0, #32]
 8015878:	b90b      	cbnz	r3, 801587e <_fflush_r+0x1a>
 801587a:	f7fd fb39 	bl	8012ef0 <__sinit>
 801587e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d0f3      	beq.n	801586e <_fflush_r+0xa>
 8015886:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015888:	07d0      	lsls	r0, r2, #31
 801588a:	d404      	bmi.n	8015896 <_fflush_r+0x32>
 801588c:	0599      	lsls	r1, r3, #22
 801588e:	d402      	bmi.n	8015896 <_fflush_r+0x32>
 8015890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015892:	f7fe fab6 	bl	8013e02 <__retarget_lock_acquire_recursive>
 8015896:	4628      	mov	r0, r5
 8015898:	4621      	mov	r1, r4
 801589a:	f7ff ff5f 	bl	801575c <__sflush_r>
 801589e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80158a0:	07da      	lsls	r2, r3, #31
 80158a2:	4605      	mov	r5, r0
 80158a4:	d4e4      	bmi.n	8015870 <_fflush_r+0xc>
 80158a6:	89a3      	ldrh	r3, [r4, #12]
 80158a8:	059b      	lsls	r3, r3, #22
 80158aa:	d4e1      	bmi.n	8015870 <_fflush_r+0xc>
 80158ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80158ae:	f7fe faa9 	bl	8013e04 <__retarget_lock_release_recursive>
 80158b2:	e7dd      	b.n	8015870 <_fflush_r+0xc>

080158b4 <_Balloc>:
 80158b4:	b570      	push	{r4, r5, r6, lr}
 80158b6:	69c6      	ldr	r6, [r0, #28]
 80158b8:	4604      	mov	r4, r0
 80158ba:	460d      	mov	r5, r1
 80158bc:	b976      	cbnz	r6, 80158dc <_Balloc+0x28>
 80158be:	2010      	movs	r0, #16
 80158c0:	f7fc fe10 	bl	80124e4 <malloc>
 80158c4:	4602      	mov	r2, r0
 80158c6:	61e0      	str	r0, [r4, #28]
 80158c8:	b920      	cbnz	r0, 80158d4 <_Balloc+0x20>
 80158ca:	4b18      	ldr	r3, [pc, #96]	@ (801592c <_Balloc+0x78>)
 80158cc:	4818      	ldr	r0, [pc, #96]	@ (8015930 <_Balloc+0x7c>)
 80158ce:	216b      	movs	r1, #107	@ 0x6b
 80158d0:	f000 fec6 	bl	8016660 <__assert_func>
 80158d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80158d8:	6006      	str	r6, [r0, #0]
 80158da:	60c6      	str	r6, [r0, #12]
 80158dc:	69e6      	ldr	r6, [r4, #28]
 80158de:	68f3      	ldr	r3, [r6, #12]
 80158e0:	b183      	cbz	r3, 8015904 <_Balloc+0x50>
 80158e2:	69e3      	ldr	r3, [r4, #28]
 80158e4:	68db      	ldr	r3, [r3, #12]
 80158e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80158ea:	b9b8      	cbnz	r0, 801591c <_Balloc+0x68>
 80158ec:	2101      	movs	r1, #1
 80158ee:	fa01 f605 	lsl.w	r6, r1, r5
 80158f2:	1d72      	adds	r2, r6, #5
 80158f4:	0092      	lsls	r2, r2, #2
 80158f6:	4620      	mov	r0, r4
 80158f8:	f7fc fb04 	bl	8011f04 <_calloc_r>
 80158fc:	b160      	cbz	r0, 8015918 <_Balloc+0x64>
 80158fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015902:	e00e      	b.n	8015922 <_Balloc+0x6e>
 8015904:	2221      	movs	r2, #33	@ 0x21
 8015906:	2104      	movs	r1, #4
 8015908:	4620      	mov	r0, r4
 801590a:	f7fc fafb 	bl	8011f04 <_calloc_r>
 801590e:	69e3      	ldr	r3, [r4, #28]
 8015910:	60f0      	str	r0, [r6, #12]
 8015912:	68db      	ldr	r3, [r3, #12]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d1e4      	bne.n	80158e2 <_Balloc+0x2e>
 8015918:	2000      	movs	r0, #0
 801591a:	bd70      	pop	{r4, r5, r6, pc}
 801591c:	6802      	ldr	r2, [r0, #0]
 801591e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015922:	2300      	movs	r3, #0
 8015924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015928:	e7f7      	b.n	801591a <_Balloc+0x66>
 801592a:	bf00      	nop
 801592c:	08017c04 	.word	0x08017c04
 8015930:	08017cf5 	.word	0x08017cf5

08015934 <_Bfree>:
 8015934:	b570      	push	{r4, r5, r6, lr}
 8015936:	69c6      	ldr	r6, [r0, #28]
 8015938:	4605      	mov	r5, r0
 801593a:	460c      	mov	r4, r1
 801593c:	b976      	cbnz	r6, 801595c <_Bfree+0x28>
 801593e:	2010      	movs	r0, #16
 8015940:	f7fc fdd0 	bl	80124e4 <malloc>
 8015944:	4602      	mov	r2, r0
 8015946:	61e8      	str	r0, [r5, #28]
 8015948:	b920      	cbnz	r0, 8015954 <_Bfree+0x20>
 801594a:	4b09      	ldr	r3, [pc, #36]	@ (8015970 <_Bfree+0x3c>)
 801594c:	4809      	ldr	r0, [pc, #36]	@ (8015974 <_Bfree+0x40>)
 801594e:	218f      	movs	r1, #143	@ 0x8f
 8015950:	f000 fe86 	bl	8016660 <__assert_func>
 8015954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015958:	6006      	str	r6, [r0, #0]
 801595a:	60c6      	str	r6, [r0, #12]
 801595c:	b13c      	cbz	r4, 801596e <_Bfree+0x3a>
 801595e:	69eb      	ldr	r3, [r5, #28]
 8015960:	6862      	ldr	r2, [r4, #4]
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015968:	6021      	str	r1, [r4, #0]
 801596a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801596e:	bd70      	pop	{r4, r5, r6, pc}
 8015970:	08017c04 	.word	0x08017c04
 8015974:	08017cf5 	.word	0x08017cf5

08015978 <__multadd>:
 8015978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801597c:	690d      	ldr	r5, [r1, #16]
 801597e:	4607      	mov	r7, r0
 8015980:	460c      	mov	r4, r1
 8015982:	461e      	mov	r6, r3
 8015984:	f101 0c14 	add.w	ip, r1, #20
 8015988:	2000      	movs	r0, #0
 801598a:	f8dc 3000 	ldr.w	r3, [ip]
 801598e:	b299      	uxth	r1, r3
 8015990:	fb02 6101 	mla	r1, r2, r1, r6
 8015994:	0c1e      	lsrs	r6, r3, #16
 8015996:	0c0b      	lsrs	r3, r1, #16
 8015998:	fb02 3306 	mla	r3, r2, r6, r3
 801599c:	b289      	uxth	r1, r1
 801599e:	3001      	adds	r0, #1
 80159a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80159a4:	4285      	cmp	r5, r0
 80159a6:	f84c 1b04 	str.w	r1, [ip], #4
 80159aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80159ae:	dcec      	bgt.n	801598a <__multadd+0x12>
 80159b0:	b30e      	cbz	r6, 80159f6 <__multadd+0x7e>
 80159b2:	68a3      	ldr	r3, [r4, #8]
 80159b4:	42ab      	cmp	r3, r5
 80159b6:	dc19      	bgt.n	80159ec <__multadd+0x74>
 80159b8:	6861      	ldr	r1, [r4, #4]
 80159ba:	4638      	mov	r0, r7
 80159bc:	3101      	adds	r1, #1
 80159be:	f7ff ff79 	bl	80158b4 <_Balloc>
 80159c2:	4680      	mov	r8, r0
 80159c4:	b928      	cbnz	r0, 80159d2 <__multadd+0x5a>
 80159c6:	4602      	mov	r2, r0
 80159c8:	4b0c      	ldr	r3, [pc, #48]	@ (80159fc <__multadd+0x84>)
 80159ca:	480d      	ldr	r0, [pc, #52]	@ (8015a00 <__multadd+0x88>)
 80159cc:	21ba      	movs	r1, #186	@ 0xba
 80159ce:	f000 fe47 	bl	8016660 <__assert_func>
 80159d2:	6922      	ldr	r2, [r4, #16]
 80159d4:	3202      	adds	r2, #2
 80159d6:	f104 010c 	add.w	r1, r4, #12
 80159da:	0092      	lsls	r2, r2, #2
 80159dc:	300c      	adds	r0, #12
 80159de:	f7fe fa17 	bl	8013e10 <memcpy>
 80159e2:	4621      	mov	r1, r4
 80159e4:	4638      	mov	r0, r7
 80159e6:	f7ff ffa5 	bl	8015934 <_Bfree>
 80159ea:	4644      	mov	r4, r8
 80159ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80159f0:	3501      	adds	r5, #1
 80159f2:	615e      	str	r6, [r3, #20]
 80159f4:	6125      	str	r5, [r4, #16]
 80159f6:	4620      	mov	r0, r4
 80159f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159fc:	08017c73 	.word	0x08017c73
 8015a00:	08017cf5 	.word	0x08017cf5

08015a04 <__s2b>:
 8015a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a08:	460c      	mov	r4, r1
 8015a0a:	4615      	mov	r5, r2
 8015a0c:	461f      	mov	r7, r3
 8015a0e:	2209      	movs	r2, #9
 8015a10:	3308      	adds	r3, #8
 8015a12:	4606      	mov	r6, r0
 8015a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a18:	2100      	movs	r1, #0
 8015a1a:	2201      	movs	r2, #1
 8015a1c:	429a      	cmp	r2, r3
 8015a1e:	db09      	blt.n	8015a34 <__s2b+0x30>
 8015a20:	4630      	mov	r0, r6
 8015a22:	f7ff ff47 	bl	80158b4 <_Balloc>
 8015a26:	b940      	cbnz	r0, 8015a3a <__s2b+0x36>
 8015a28:	4602      	mov	r2, r0
 8015a2a:	4b19      	ldr	r3, [pc, #100]	@ (8015a90 <__s2b+0x8c>)
 8015a2c:	4819      	ldr	r0, [pc, #100]	@ (8015a94 <__s2b+0x90>)
 8015a2e:	21d3      	movs	r1, #211	@ 0xd3
 8015a30:	f000 fe16 	bl	8016660 <__assert_func>
 8015a34:	0052      	lsls	r2, r2, #1
 8015a36:	3101      	adds	r1, #1
 8015a38:	e7f0      	b.n	8015a1c <__s2b+0x18>
 8015a3a:	9b08      	ldr	r3, [sp, #32]
 8015a3c:	6143      	str	r3, [r0, #20]
 8015a3e:	2d09      	cmp	r5, #9
 8015a40:	f04f 0301 	mov.w	r3, #1
 8015a44:	6103      	str	r3, [r0, #16]
 8015a46:	dd16      	ble.n	8015a76 <__s2b+0x72>
 8015a48:	f104 0909 	add.w	r9, r4, #9
 8015a4c:	46c8      	mov	r8, r9
 8015a4e:	442c      	add	r4, r5
 8015a50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015a54:	4601      	mov	r1, r0
 8015a56:	3b30      	subs	r3, #48	@ 0x30
 8015a58:	220a      	movs	r2, #10
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	f7ff ff8c 	bl	8015978 <__multadd>
 8015a60:	45a0      	cmp	r8, r4
 8015a62:	d1f5      	bne.n	8015a50 <__s2b+0x4c>
 8015a64:	f1a5 0408 	sub.w	r4, r5, #8
 8015a68:	444c      	add	r4, r9
 8015a6a:	1b2d      	subs	r5, r5, r4
 8015a6c:	1963      	adds	r3, r4, r5
 8015a6e:	42bb      	cmp	r3, r7
 8015a70:	db04      	blt.n	8015a7c <__s2b+0x78>
 8015a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a76:	340a      	adds	r4, #10
 8015a78:	2509      	movs	r5, #9
 8015a7a:	e7f6      	b.n	8015a6a <__s2b+0x66>
 8015a7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015a80:	4601      	mov	r1, r0
 8015a82:	3b30      	subs	r3, #48	@ 0x30
 8015a84:	220a      	movs	r2, #10
 8015a86:	4630      	mov	r0, r6
 8015a88:	f7ff ff76 	bl	8015978 <__multadd>
 8015a8c:	e7ee      	b.n	8015a6c <__s2b+0x68>
 8015a8e:	bf00      	nop
 8015a90:	08017c73 	.word	0x08017c73
 8015a94:	08017cf5 	.word	0x08017cf5

08015a98 <__hi0bits>:
 8015a98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	bf36      	itet	cc
 8015aa0:	0403      	lslcc	r3, r0, #16
 8015aa2:	2000      	movcs	r0, #0
 8015aa4:	2010      	movcc	r0, #16
 8015aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015aaa:	bf3c      	itt	cc
 8015aac:	021b      	lslcc	r3, r3, #8
 8015aae:	3008      	addcc	r0, #8
 8015ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015ab4:	bf3c      	itt	cc
 8015ab6:	011b      	lslcc	r3, r3, #4
 8015ab8:	3004      	addcc	r0, #4
 8015aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015abe:	bf3c      	itt	cc
 8015ac0:	009b      	lslcc	r3, r3, #2
 8015ac2:	3002      	addcc	r0, #2
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	db05      	blt.n	8015ad4 <__hi0bits+0x3c>
 8015ac8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015acc:	f100 0001 	add.w	r0, r0, #1
 8015ad0:	bf08      	it	eq
 8015ad2:	2020      	moveq	r0, #32
 8015ad4:	4770      	bx	lr

08015ad6 <__lo0bits>:
 8015ad6:	6803      	ldr	r3, [r0, #0]
 8015ad8:	4602      	mov	r2, r0
 8015ada:	f013 0007 	ands.w	r0, r3, #7
 8015ade:	d00b      	beq.n	8015af8 <__lo0bits+0x22>
 8015ae0:	07d9      	lsls	r1, r3, #31
 8015ae2:	d421      	bmi.n	8015b28 <__lo0bits+0x52>
 8015ae4:	0798      	lsls	r0, r3, #30
 8015ae6:	bf49      	itett	mi
 8015ae8:	085b      	lsrmi	r3, r3, #1
 8015aea:	089b      	lsrpl	r3, r3, #2
 8015aec:	2001      	movmi	r0, #1
 8015aee:	6013      	strmi	r3, [r2, #0]
 8015af0:	bf5c      	itt	pl
 8015af2:	6013      	strpl	r3, [r2, #0]
 8015af4:	2002      	movpl	r0, #2
 8015af6:	4770      	bx	lr
 8015af8:	b299      	uxth	r1, r3
 8015afa:	b909      	cbnz	r1, 8015b00 <__lo0bits+0x2a>
 8015afc:	0c1b      	lsrs	r3, r3, #16
 8015afe:	2010      	movs	r0, #16
 8015b00:	b2d9      	uxtb	r1, r3
 8015b02:	b909      	cbnz	r1, 8015b08 <__lo0bits+0x32>
 8015b04:	3008      	adds	r0, #8
 8015b06:	0a1b      	lsrs	r3, r3, #8
 8015b08:	0719      	lsls	r1, r3, #28
 8015b0a:	bf04      	itt	eq
 8015b0c:	091b      	lsreq	r3, r3, #4
 8015b0e:	3004      	addeq	r0, #4
 8015b10:	0799      	lsls	r1, r3, #30
 8015b12:	bf04      	itt	eq
 8015b14:	089b      	lsreq	r3, r3, #2
 8015b16:	3002      	addeq	r0, #2
 8015b18:	07d9      	lsls	r1, r3, #31
 8015b1a:	d403      	bmi.n	8015b24 <__lo0bits+0x4e>
 8015b1c:	085b      	lsrs	r3, r3, #1
 8015b1e:	f100 0001 	add.w	r0, r0, #1
 8015b22:	d003      	beq.n	8015b2c <__lo0bits+0x56>
 8015b24:	6013      	str	r3, [r2, #0]
 8015b26:	4770      	bx	lr
 8015b28:	2000      	movs	r0, #0
 8015b2a:	4770      	bx	lr
 8015b2c:	2020      	movs	r0, #32
 8015b2e:	4770      	bx	lr

08015b30 <__i2b>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	460c      	mov	r4, r1
 8015b34:	2101      	movs	r1, #1
 8015b36:	f7ff febd 	bl	80158b4 <_Balloc>
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	b928      	cbnz	r0, 8015b4a <__i2b+0x1a>
 8015b3e:	4b05      	ldr	r3, [pc, #20]	@ (8015b54 <__i2b+0x24>)
 8015b40:	4805      	ldr	r0, [pc, #20]	@ (8015b58 <__i2b+0x28>)
 8015b42:	f240 1145 	movw	r1, #325	@ 0x145
 8015b46:	f000 fd8b 	bl	8016660 <__assert_func>
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	6144      	str	r4, [r0, #20]
 8015b4e:	6103      	str	r3, [r0, #16]
 8015b50:	bd10      	pop	{r4, pc}
 8015b52:	bf00      	nop
 8015b54:	08017c73 	.word	0x08017c73
 8015b58:	08017cf5 	.word	0x08017cf5

08015b5c <__multiply>:
 8015b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b60:	4617      	mov	r7, r2
 8015b62:	690a      	ldr	r2, [r1, #16]
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	429a      	cmp	r2, r3
 8015b68:	bfa8      	it	ge
 8015b6a:	463b      	movge	r3, r7
 8015b6c:	4689      	mov	r9, r1
 8015b6e:	bfa4      	itt	ge
 8015b70:	460f      	movge	r7, r1
 8015b72:	4699      	movge	r9, r3
 8015b74:	693d      	ldr	r5, [r7, #16]
 8015b76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	6879      	ldr	r1, [r7, #4]
 8015b7e:	eb05 060a 	add.w	r6, r5, sl
 8015b82:	42b3      	cmp	r3, r6
 8015b84:	b085      	sub	sp, #20
 8015b86:	bfb8      	it	lt
 8015b88:	3101      	addlt	r1, #1
 8015b8a:	f7ff fe93 	bl	80158b4 <_Balloc>
 8015b8e:	b930      	cbnz	r0, 8015b9e <__multiply+0x42>
 8015b90:	4602      	mov	r2, r0
 8015b92:	4b41      	ldr	r3, [pc, #260]	@ (8015c98 <__multiply+0x13c>)
 8015b94:	4841      	ldr	r0, [pc, #260]	@ (8015c9c <__multiply+0x140>)
 8015b96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015b9a:	f000 fd61 	bl	8016660 <__assert_func>
 8015b9e:	f100 0414 	add.w	r4, r0, #20
 8015ba2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015ba6:	4623      	mov	r3, r4
 8015ba8:	2200      	movs	r2, #0
 8015baa:	4573      	cmp	r3, lr
 8015bac:	d320      	bcc.n	8015bf0 <__multiply+0x94>
 8015bae:	f107 0814 	add.w	r8, r7, #20
 8015bb2:	f109 0114 	add.w	r1, r9, #20
 8015bb6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015bba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015bbe:	9302      	str	r3, [sp, #8]
 8015bc0:	1beb      	subs	r3, r5, r7
 8015bc2:	3b15      	subs	r3, #21
 8015bc4:	f023 0303 	bic.w	r3, r3, #3
 8015bc8:	3304      	adds	r3, #4
 8015bca:	3715      	adds	r7, #21
 8015bcc:	42bd      	cmp	r5, r7
 8015bce:	bf38      	it	cc
 8015bd0:	2304      	movcc	r3, #4
 8015bd2:	9301      	str	r3, [sp, #4]
 8015bd4:	9b02      	ldr	r3, [sp, #8]
 8015bd6:	9103      	str	r1, [sp, #12]
 8015bd8:	428b      	cmp	r3, r1
 8015bda:	d80c      	bhi.n	8015bf6 <__multiply+0x9a>
 8015bdc:	2e00      	cmp	r6, #0
 8015bde:	dd03      	ble.n	8015be8 <__multiply+0x8c>
 8015be0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d055      	beq.n	8015c94 <__multiply+0x138>
 8015be8:	6106      	str	r6, [r0, #16]
 8015bea:	b005      	add	sp, #20
 8015bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bf0:	f843 2b04 	str.w	r2, [r3], #4
 8015bf4:	e7d9      	b.n	8015baa <__multiply+0x4e>
 8015bf6:	f8b1 a000 	ldrh.w	sl, [r1]
 8015bfa:	f1ba 0f00 	cmp.w	sl, #0
 8015bfe:	d01f      	beq.n	8015c40 <__multiply+0xe4>
 8015c00:	46c4      	mov	ip, r8
 8015c02:	46a1      	mov	r9, r4
 8015c04:	2700      	movs	r7, #0
 8015c06:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015c0a:	f8d9 3000 	ldr.w	r3, [r9]
 8015c0e:	fa1f fb82 	uxth.w	fp, r2
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	fb0a 330b 	mla	r3, sl, fp, r3
 8015c18:	443b      	add	r3, r7
 8015c1a:	f8d9 7000 	ldr.w	r7, [r9]
 8015c1e:	0c12      	lsrs	r2, r2, #16
 8015c20:	0c3f      	lsrs	r7, r7, #16
 8015c22:	fb0a 7202 	mla	r2, sl, r2, r7
 8015c26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c30:	4565      	cmp	r5, ip
 8015c32:	f849 3b04 	str.w	r3, [r9], #4
 8015c36:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015c3a:	d8e4      	bhi.n	8015c06 <__multiply+0xaa>
 8015c3c:	9b01      	ldr	r3, [sp, #4]
 8015c3e:	50e7      	str	r7, [r4, r3]
 8015c40:	9b03      	ldr	r3, [sp, #12]
 8015c42:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015c46:	3104      	adds	r1, #4
 8015c48:	f1b9 0f00 	cmp.w	r9, #0
 8015c4c:	d020      	beq.n	8015c90 <__multiply+0x134>
 8015c4e:	6823      	ldr	r3, [r4, #0]
 8015c50:	4647      	mov	r7, r8
 8015c52:	46a4      	mov	ip, r4
 8015c54:	f04f 0a00 	mov.w	sl, #0
 8015c58:	f8b7 b000 	ldrh.w	fp, [r7]
 8015c5c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015c60:	fb09 220b 	mla	r2, r9, fp, r2
 8015c64:	4452      	add	r2, sl
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c6c:	f84c 3b04 	str.w	r3, [ip], #4
 8015c70:	f857 3b04 	ldr.w	r3, [r7], #4
 8015c74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c78:	f8bc 3000 	ldrh.w	r3, [ip]
 8015c7c:	fb09 330a 	mla	r3, r9, sl, r3
 8015c80:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015c84:	42bd      	cmp	r5, r7
 8015c86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c8a:	d8e5      	bhi.n	8015c58 <__multiply+0xfc>
 8015c8c:	9a01      	ldr	r2, [sp, #4]
 8015c8e:	50a3      	str	r3, [r4, r2]
 8015c90:	3404      	adds	r4, #4
 8015c92:	e79f      	b.n	8015bd4 <__multiply+0x78>
 8015c94:	3e01      	subs	r6, #1
 8015c96:	e7a1      	b.n	8015bdc <__multiply+0x80>
 8015c98:	08017c73 	.word	0x08017c73
 8015c9c:	08017cf5 	.word	0x08017cf5

08015ca0 <__pow5mult>:
 8015ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ca4:	4615      	mov	r5, r2
 8015ca6:	f012 0203 	ands.w	r2, r2, #3
 8015caa:	4607      	mov	r7, r0
 8015cac:	460e      	mov	r6, r1
 8015cae:	d007      	beq.n	8015cc0 <__pow5mult+0x20>
 8015cb0:	4c25      	ldr	r4, [pc, #148]	@ (8015d48 <__pow5mult+0xa8>)
 8015cb2:	3a01      	subs	r2, #1
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015cba:	f7ff fe5d 	bl	8015978 <__multadd>
 8015cbe:	4606      	mov	r6, r0
 8015cc0:	10ad      	asrs	r5, r5, #2
 8015cc2:	d03d      	beq.n	8015d40 <__pow5mult+0xa0>
 8015cc4:	69fc      	ldr	r4, [r7, #28]
 8015cc6:	b97c      	cbnz	r4, 8015ce8 <__pow5mult+0x48>
 8015cc8:	2010      	movs	r0, #16
 8015cca:	f7fc fc0b 	bl	80124e4 <malloc>
 8015cce:	4602      	mov	r2, r0
 8015cd0:	61f8      	str	r0, [r7, #28]
 8015cd2:	b928      	cbnz	r0, 8015ce0 <__pow5mult+0x40>
 8015cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8015d4c <__pow5mult+0xac>)
 8015cd6:	481e      	ldr	r0, [pc, #120]	@ (8015d50 <__pow5mult+0xb0>)
 8015cd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015cdc:	f000 fcc0 	bl	8016660 <__assert_func>
 8015ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015ce4:	6004      	str	r4, [r0, #0]
 8015ce6:	60c4      	str	r4, [r0, #12]
 8015ce8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015cf0:	b94c      	cbnz	r4, 8015d06 <__pow5mult+0x66>
 8015cf2:	f240 2171 	movw	r1, #625	@ 0x271
 8015cf6:	4638      	mov	r0, r7
 8015cf8:	f7ff ff1a 	bl	8015b30 <__i2b>
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8015d02:	4604      	mov	r4, r0
 8015d04:	6003      	str	r3, [r0, #0]
 8015d06:	f04f 0900 	mov.w	r9, #0
 8015d0a:	07eb      	lsls	r3, r5, #31
 8015d0c:	d50a      	bpl.n	8015d24 <__pow5mult+0x84>
 8015d0e:	4631      	mov	r1, r6
 8015d10:	4622      	mov	r2, r4
 8015d12:	4638      	mov	r0, r7
 8015d14:	f7ff ff22 	bl	8015b5c <__multiply>
 8015d18:	4631      	mov	r1, r6
 8015d1a:	4680      	mov	r8, r0
 8015d1c:	4638      	mov	r0, r7
 8015d1e:	f7ff fe09 	bl	8015934 <_Bfree>
 8015d22:	4646      	mov	r6, r8
 8015d24:	106d      	asrs	r5, r5, #1
 8015d26:	d00b      	beq.n	8015d40 <__pow5mult+0xa0>
 8015d28:	6820      	ldr	r0, [r4, #0]
 8015d2a:	b938      	cbnz	r0, 8015d3c <__pow5mult+0x9c>
 8015d2c:	4622      	mov	r2, r4
 8015d2e:	4621      	mov	r1, r4
 8015d30:	4638      	mov	r0, r7
 8015d32:	f7ff ff13 	bl	8015b5c <__multiply>
 8015d36:	6020      	str	r0, [r4, #0]
 8015d38:	f8c0 9000 	str.w	r9, [r0]
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	e7e4      	b.n	8015d0a <__pow5mult+0x6a>
 8015d40:	4630      	mov	r0, r6
 8015d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d46:	bf00      	nop
 8015d48:	08017ee4 	.word	0x08017ee4
 8015d4c:	08017c04 	.word	0x08017c04
 8015d50:	08017cf5 	.word	0x08017cf5

08015d54 <__lshift>:
 8015d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d58:	460c      	mov	r4, r1
 8015d5a:	6849      	ldr	r1, [r1, #4]
 8015d5c:	6923      	ldr	r3, [r4, #16]
 8015d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d62:	68a3      	ldr	r3, [r4, #8]
 8015d64:	4607      	mov	r7, r0
 8015d66:	4691      	mov	r9, r2
 8015d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d6c:	f108 0601 	add.w	r6, r8, #1
 8015d70:	42b3      	cmp	r3, r6
 8015d72:	db0b      	blt.n	8015d8c <__lshift+0x38>
 8015d74:	4638      	mov	r0, r7
 8015d76:	f7ff fd9d 	bl	80158b4 <_Balloc>
 8015d7a:	4605      	mov	r5, r0
 8015d7c:	b948      	cbnz	r0, 8015d92 <__lshift+0x3e>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	4b28      	ldr	r3, [pc, #160]	@ (8015e24 <__lshift+0xd0>)
 8015d82:	4829      	ldr	r0, [pc, #164]	@ (8015e28 <__lshift+0xd4>)
 8015d84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015d88:	f000 fc6a 	bl	8016660 <__assert_func>
 8015d8c:	3101      	adds	r1, #1
 8015d8e:	005b      	lsls	r3, r3, #1
 8015d90:	e7ee      	b.n	8015d70 <__lshift+0x1c>
 8015d92:	2300      	movs	r3, #0
 8015d94:	f100 0114 	add.w	r1, r0, #20
 8015d98:	f100 0210 	add.w	r2, r0, #16
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	4553      	cmp	r3, sl
 8015da0:	db33      	blt.n	8015e0a <__lshift+0xb6>
 8015da2:	6920      	ldr	r0, [r4, #16]
 8015da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015da8:	f104 0314 	add.w	r3, r4, #20
 8015dac:	f019 091f 	ands.w	r9, r9, #31
 8015db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015db4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015db8:	d02b      	beq.n	8015e12 <__lshift+0xbe>
 8015dba:	f1c9 0e20 	rsb	lr, r9, #32
 8015dbe:	468a      	mov	sl, r1
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	6818      	ldr	r0, [r3, #0]
 8015dc4:	fa00 f009 	lsl.w	r0, r0, r9
 8015dc8:	4310      	orrs	r0, r2
 8015dca:	f84a 0b04 	str.w	r0, [sl], #4
 8015dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dd2:	459c      	cmp	ip, r3
 8015dd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015dd8:	d8f3      	bhi.n	8015dc2 <__lshift+0x6e>
 8015dda:	ebac 0304 	sub.w	r3, ip, r4
 8015dde:	3b15      	subs	r3, #21
 8015de0:	f023 0303 	bic.w	r3, r3, #3
 8015de4:	3304      	adds	r3, #4
 8015de6:	f104 0015 	add.w	r0, r4, #21
 8015dea:	4560      	cmp	r0, ip
 8015dec:	bf88      	it	hi
 8015dee:	2304      	movhi	r3, #4
 8015df0:	50ca      	str	r2, [r1, r3]
 8015df2:	b10a      	cbz	r2, 8015df8 <__lshift+0xa4>
 8015df4:	f108 0602 	add.w	r6, r8, #2
 8015df8:	3e01      	subs	r6, #1
 8015dfa:	4638      	mov	r0, r7
 8015dfc:	612e      	str	r6, [r5, #16]
 8015dfe:	4621      	mov	r1, r4
 8015e00:	f7ff fd98 	bl	8015934 <_Bfree>
 8015e04:	4628      	mov	r0, r5
 8015e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015e0e:	3301      	adds	r3, #1
 8015e10:	e7c5      	b.n	8015d9e <__lshift+0x4a>
 8015e12:	3904      	subs	r1, #4
 8015e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e18:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e1c:	459c      	cmp	ip, r3
 8015e1e:	d8f9      	bhi.n	8015e14 <__lshift+0xc0>
 8015e20:	e7ea      	b.n	8015df8 <__lshift+0xa4>
 8015e22:	bf00      	nop
 8015e24:	08017c73 	.word	0x08017c73
 8015e28:	08017cf5 	.word	0x08017cf5

08015e2c <__mcmp>:
 8015e2c:	690a      	ldr	r2, [r1, #16]
 8015e2e:	4603      	mov	r3, r0
 8015e30:	6900      	ldr	r0, [r0, #16]
 8015e32:	1a80      	subs	r0, r0, r2
 8015e34:	b530      	push	{r4, r5, lr}
 8015e36:	d10e      	bne.n	8015e56 <__mcmp+0x2a>
 8015e38:	3314      	adds	r3, #20
 8015e3a:	3114      	adds	r1, #20
 8015e3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015e40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015e48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015e4c:	4295      	cmp	r5, r2
 8015e4e:	d003      	beq.n	8015e58 <__mcmp+0x2c>
 8015e50:	d205      	bcs.n	8015e5e <__mcmp+0x32>
 8015e52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e56:	bd30      	pop	{r4, r5, pc}
 8015e58:	42a3      	cmp	r3, r4
 8015e5a:	d3f3      	bcc.n	8015e44 <__mcmp+0x18>
 8015e5c:	e7fb      	b.n	8015e56 <__mcmp+0x2a>
 8015e5e:	2001      	movs	r0, #1
 8015e60:	e7f9      	b.n	8015e56 <__mcmp+0x2a>
	...

08015e64 <__mdiff>:
 8015e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e68:	4689      	mov	r9, r1
 8015e6a:	4606      	mov	r6, r0
 8015e6c:	4611      	mov	r1, r2
 8015e6e:	4648      	mov	r0, r9
 8015e70:	4614      	mov	r4, r2
 8015e72:	f7ff ffdb 	bl	8015e2c <__mcmp>
 8015e76:	1e05      	subs	r5, r0, #0
 8015e78:	d112      	bne.n	8015ea0 <__mdiff+0x3c>
 8015e7a:	4629      	mov	r1, r5
 8015e7c:	4630      	mov	r0, r6
 8015e7e:	f7ff fd19 	bl	80158b4 <_Balloc>
 8015e82:	4602      	mov	r2, r0
 8015e84:	b928      	cbnz	r0, 8015e92 <__mdiff+0x2e>
 8015e86:	4b3f      	ldr	r3, [pc, #252]	@ (8015f84 <__mdiff+0x120>)
 8015e88:	f240 2137 	movw	r1, #567	@ 0x237
 8015e8c:	483e      	ldr	r0, [pc, #248]	@ (8015f88 <__mdiff+0x124>)
 8015e8e:	f000 fbe7 	bl	8016660 <__assert_func>
 8015e92:	2301      	movs	r3, #1
 8015e94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e98:	4610      	mov	r0, r2
 8015e9a:	b003      	add	sp, #12
 8015e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ea0:	bfbc      	itt	lt
 8015ea2:	464b      	movlt	r3, r9
 8015ea4:	46a1      	movlt	r9, r4
 8015ea6:	4630      	mov	r0, r6
 8015ea8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015eac:	bfba      	itte	lt
 8015eae:	461c      	movlt	r4, r3
 8015eb0:	2501      	movlt	r5, #1
 8015eb2:	2500      	movge	r5, #0
 8015eb4:	f7ff fcfe 	bl	80158b4 <_Balloc>
 8015eb8:	4602      	mov	r2, r0
 8015eba:	b918      	cbnz	r0, 8015ec4 <__mdiff+0x60>
 8015ebc:	4b31      	ldr	r3, [pc, #196]	@ (8015f84 <__mdiff+0x120>)
 8015ebe:	f240 2145 	movw	r1, #581	@ 0x245
 8015ec2:	e7e3      	b.n	8015e8c <__mdiff+0x28>
 8015ec4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015ec8:	6926      	ldr	r6, [r4, #16]
 8015eca:	60c5      	str	r5, [r0, #12]
 8015ecc:	f109 0310 	add.w	r3, r9, #16
 8015ed0:	f109 0514 	add.w	r5, r9, #20
 8015ed4:	f104 0e14 	add.w	lr, r4, #20
 8015ed8:	f100 0b14 	add.w	fp, r0, #20
 8015edc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015ee0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015ee4:	9301      	str	r3, [sp, #4]
 8015ee6:	46d9      	mov	r9, fp
 8015ee8:	f04f 0c00 	mov.w	ip, #0
 8015eec:	9b01      	ldr	r3, [sp, #4]
 8015eee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015ef2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015ef6:	9301      	str	r3, [sp, #4]
 8015ef8:	fa1f f38a 	uxth.w	r3, sl
 8015efc:	4619      	mov	r1, r3
 8015efe:	b283      	uxth	r3, r0
 8015f00:	1acb      	subs	r3, r1, r3
 8015f02:	0c00      	lsrs	r0, r0, #16
 8015f04:	4463      	add	r3, ip
 8015f06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015f0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015f14:	4576      	cmp	r6, lr
 8015f16:	f849 3b04 	str.w	r3, [r9], #4
 8015f1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f1e:	d8e5      	bhi.n	8015eec <__mdiff+0x88>
 8015f20:	1b33      	subs	r3, r6, r4
 8015f22:	3b15      	subs	r3, #21
 8015f24:	f023 0303 	bic.w	r3, r3, #3
 8015f28:	3415      	adds	r4, #21
 8015f2a:	3304      	adds	r3, #4
 8015f2c:	42a6      	cmp	r6, r4
 8015f2e:	bf38      	it	cc
 8015f30:	2304      	movcc	r3, #4
 8015f32:	441d      	add	r5, r3
 8015f34:	445b      	add	r3, fp
 8015f36:	461e      	mov	r6, r3
 8015f38:	462c      	mov	r4, r5
 8015f3a:	4544      	cmp	r4, r8
 8015f3c:	d30e      	bcc.n	8015f5c <__mdiff+0xf8>
 8015f3e:	f108 0103 	add.w	r1, r8, #3
 8015f42:	1b49      	subs	r1, r1, r5
 8015f44:	f021 0103 	bic.w	r1, r1, #3
 8015f48:	3d03      	subs	r5, #3
 8015f4a:	45a8      	cmp	r8, r5
 8015f4c:	bf38      	it	cc
 8015f4e:	2100      	movcc	r1, #0
 8015f50:	440b      	add	r3, r1
 8015f52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015f56:	b191      	cbz	r1, 8015f7e <__mdiff+0x11a>
 8015f58:	6117      	str	r7, [r2, #16]
 8015f5a:	e79d      	b.n	8015e98 <__mdiff+0x34>
 8015f5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015f60:	46e6      	mov	lr, ip
 8015f62:	0c08      	lsrs	r0, r1, #16
 8015f64:	fa1c fc81 	uxtah	ip, ip, r1
 8015f68:	4471      	add	r1, lr
 8015f6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015f6e:	b289      	uxth	r1, r1
 8015f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015f74:	f846 1b04 	str.w	r1, [r6], #4
 8015f78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f7c:	e7dd      	b.n	8015f3a <__mdiff+0xd6>
 8015f7e:	3f01      	subs	r7, #1
 8015f80:	e7e7      	b.n	8015f52 <__mdiff+0xee>
 8015f82:	bf00      	nop
 8015f84:	08017c73 	.word	0x08017c73
 8015f88:	08017cf5 	.word	0x08017cf5

08015f8c <__ulp>:
 8015f8c:	b082      	sub	sp, #8
 8015f8e:	ed8d 0b00 	vstr	d0, [sp]
 8015f92:	9a01      	ldr	r2, [sp, #4]
 8015f94:	4b0f      	ldr	r3, [pc, #60]	@ (8015fd4 <__ulp+0x48>)
 8015f96:	4013      	ands	r3, r2
 8015f98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	dc08      	bgt.n	8015fb2 <__ulp+0x26>
 8015fa0:	425b      	negs	r3, r3
 8015fa2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8015fa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015faa:	da04      	bge.n	8015fb6 <__ulp+0x2a>
 8015fac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015fb0:	4113      	asrs	r3, r2
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	e008      	b.n	8015fc8 <__ulp+0x3c>
 8015fb6:	f1a2 0314 	sub.w	r3, r2, #20
 8015fba:	2b1e      	cmp	r3, #30
 8015fbc:	bfda      	itte	le
 8015fbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015fc2:	40da      	lsrle	r2, r3
 8015fc4:	2201      	movgt	r2, #1
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	4619      	mov	r1, r3
 8015fca:	4610      	mov	r0, r2
 8015fcc:	ec41 0b10 	vmov	d0, r0, r1
 8015fd0:	b002      	add	sp, #8
 8015fd2:	4770      	bx	lr
 8015fd4:	7ff00000 	.word	0x7ff00000

08015fd8 <__b2d>:
 8015fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fdc:	6906      	ldr	r6, [r0, #16]
 8015fde:	f100 0814 	add.w	r8, r0, #20
 8015fe2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015fe6:	1f37      	subs	r7, r6, #4
 8015fe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015fec:	4610      	mov	r0, r2
 8015fee:	f7ff fd53 	bl	8015a98 <__hi0bits>
 8015ff2:	f1c0 0320 	rsb	r3, r0, #32
 8015ff6:	280a      	cmp	r0, #10
 8015ff8:	600b      	str	r3, [r1, #0]
 8015ffa:	491b      	ldr	r1, [pc, #108]	@ (8016068 <__b2d+0x90>)
 8015ffc:	dc15      	bgt.n	801602a <__b2d+0x52>
 8015ffe:	f1c0 0c0b 	rsb	ip, r0, #11
 8016002:	fa22 f30c 	lsr.w	r3, r2, ip
 8016006:	45b8      	cmp	r8, r7
 8016008:	ea43 0501 	orr.w	r5, r3, r1
 801600c:	bf34      	ite	cc
 801600e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016012:	2300      	movcs	r3, #0
 8016014:	3015      	adds	r0, #21
 8016016:	fa02 f000 	lsl.w	r0, r2, r0
 801601a:	fa23 f30c 	lsr.w	r3, r3, ip
 801601e:	4303      	orrs	r3, r0
 8016020:	461c      	mov	r4, r3
 8016022:	ec45 4b10 	vmov	d0, r4, r5
 8016026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801602a:	45b8      	cmp	r8, r7
 801602c:	bf3a      	itte	cc
 801602e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016032:	f1a6 0708 	subcc.w	r7, r6, #8
 8016036:	2300      	movcs	r3, #0
 8016038:	380b      	subs	r0, #11
 801603a:	d012      	beq.n	8016062 <__b2d+0x8a>
 801603c:	f1c0 0120 	rsb	r1, r0, #32
 8016040:	fa23 f401 	lsr.w	r4, r3, r1
 8016044:	4082      	lsls	r2, r0
 8016046:	4322      	orrs	r2, r4
 8016048:	4547      	cmp	r7, r8
 801604a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801604e:	bf8c      	ite	hi
 8016050:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016054:	2200      	movls	r2, #0
 8016056:	4083      	lsls	r3, r0
 8016058:	40ca      	lsrs	r2, r1
 801605a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801605e:	4313      	orrs	r3, r2
 8016060:	e7de      	b.n	8016020 <__b2d+0x48>
 8016062:	ea42 0501 	orr.w	r5, r2, r1
 8016066:	e7db      	b.n	8016020 <__b2d+0x48>
 8016068:	3ff00000 	.word	0x3ff00000

0801606c <__d2b>:
 801606c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016070:	460f      	mov	r7, r1
 8016072:	2101      	movs	r1, #1
 8016074:	ec59 8b10 	vmov	r8, r9, d0
 8016078:	4616      	mov	r6, r2
 801607a:	f7ff fc1b 	bl	80158b4 <_Balloc>
 801607e:	4604      	mov	r4, r0
 8016080:	b930      	cbnz	r0, 8016090 <__d2b+0x24>
 8016082:	4602      	mov	r2, r0
 8016084:	4b23      	ldr	r3, [pc, #140]	@ (8016114 <__d2b+0xa8>)
 8016086:	4824      	ldr	r0, [pc, #144]	@ (8016118 <__d2b+0xac>)
 8016088:	f240 310f 	movw	r1, #783	@ 0x30f
 801608c:	f000 fae8 	bl	8016660 <__assert_func>
 8016090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016098:	b10d      	cbz	r5, 801609e <__d2b+0x32>
 801609a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801609e:	9301      	str	r3, [sp, #4]
 80160a0:	f1b8 0300 	subs.w	r3, r8, #0
 80160a4:	d023      	beq.n	80160ee <__d2b+0x82>
 80160a6:	4668      	mov	r0, sp
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	f7ff fd14 	bl	8015ad6 <__lo0bits>
 80160ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80160b2:	b1d0      	cbz	r0, 80160ea <__d2b+0x7e>
 80160b4:	f1c0 0320 	rsb	r3, r0, #32
 80160b8:	fa02 f303 	lsl.w	r3, r2, r3
 80160bc:	430b      	orrs	r3, r1
 80160be:	40c2      	lsrs	r2, r0
 80160c0:	6163      	str	r3, [r4, #20]
 80160c2:	9201      	str	r2, [sp, #4]
 80160c4:	9b01      	ldr	r3, [sp, #4]
 80160c6:	61a3      	str	r3, [r4, #24]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	bf0c      	ite	eq
 80160cc:	2201      	moveq	r2, #1
 80160ce:	2202      	movne	r2, #2
 80160d0:	6122      	str	r2, [r4, #16]
 80160d2:	b1a5      	cbz	r5, 80160fe <__d2b+0x92>
 80160d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80160d8:	4405      	add	r5, r0
 80160da:	603d      	str	r5, [r7, #0]
 80160dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80160e0:	6030      	str	r0, [r6, #0]
 80160e2:	4620      	mov	r0, r4
 80160e4:	b003      	add	sp, #12
 80160e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160ea:	6161      	str	r1, [r4, #20]
 80160ec:	e7ea      	b.n	80160c4 <__d2b+0x58>
 80160ee:	a801      	add	r0, sp, #4
 80160f0:	f7ff fcf1 	bl	8015ad6 <__lo0bits>
 80160f4:	9b01      	ldr	r3, [sp, #4]
 80160f6:	6163      	str	r3, [r4, #20]
 80160f8:	3020      	adds	r0, #32
 80160fa:	2201      	movs	r2, #1
 80160fc:	e7e8      	b.n	80160d0 <__d2b+0x64>
 80160fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016106:	6038      	str	r0, [r7, #0]
 8016108:	6918      	ldr	r0, [r3, #16]
 801610a:	f7ff fcc5 	bl	8015a98 <__hi0bits>
 801610e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016112:	e7e5      	b.n	80160e0 <__d2b+0x74>
 8016114:	08017c73 	.word	0x08017c73
 8016118:	08017cf5 	.word	0x08017cf5

0801611c <__ratio>:
 801611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016120:	b085      	sub	sp, #20
 8016122:	e9cd 1000 	strd	r1, r0, [sp]
 8016126:	a902      	add	r1, sp, #8
 8016128:	f7ff ff56 	bl	8015fd8 <__b2d>
 801612c:	9800      	ldr	r0, [sp, #0]
 801612e:	a903      	add	r1, sp, #12
 8016130:	ec55 4b10 	vmov	r4, r5, d0
 8016134:	f7ff ff50 	bl	8015fd8 <__b2d>
 8016138:	9b01      	ldr	r3, [sp, #4]
 801613a:	6919      	ldr	r1, [r3, #16]
 801613c:	9b00      	ldr	r3, [sp, #0]
 801613e:	691b      	ldr	r3, [r3, #16]
 8016140:	1ac9      	subs	r1, r1, r3
 8016142:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016146:	1a9b      	subs	r3, r3, r2
 8016148:	ec5b ab10 	vmov	sl, fp, d0
 801614c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016150:	2b00      	cmp	r3, #0
 8016152:	bfce      	itee	gt
 8016154:	462a      	movgt	r2, r5
 8016156:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801615a:	465a      	movle	r2, fp
 801615c:	462f      	mov	r7, r5
 801615e:	46d9      	mov	r9, fp
 8016160:	bfcc      	ite	gt
 8016162:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016166:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801616a:	464b      	mov	r3, r9
 801616c:	4652      	mov	r2, sl
 801616e:	4620      	mov	r0, r4
 8016170:	4639      	mov	r1, r7
 8016172:	f7ea fb73 	bl	800085c <__aeabi_ddiv>
 8016176:	ec41 0b10 	vmov	d0, r0, r1
 801617a:	b005      	add	sp, #20
 801617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016180 <__copybits>:
 8016180:	3901      	subs	r1, #1
 8016182:	b570      	push	{r4, r5, r6, lr}
 8016184:	1149      	asrs	r1, r1, #5
 8016186:	6914      	ldr	r4, [r2, #16]
 8016188:	3101      	adds	r1, #1
 801618a:	f102 0314 	add.w	r3, r2, #20
 801618e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016192:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016196:	1f05      	subs	r5, r0, #4
 8016198:	42a3      	cmp	r3, r4
 801619a:	d30c      	bcc.n	80161b6 <__copybits+0x36>
 801619c:	1aa3      	subs	r3, r4, r2
 801619e:	3b11      	subs	r3, #17
 80161a0:	f023 0303 	bic.w	r3, r3, #3
 80161a4:	3211      	adds	r2, #17
 80161a6:	42a2      	cmp	r2, r4
 80161a8:	bf88      	it	hi
 80161aa:	2300      	movhi	r3, #0
 80161ac:	4418      	add	r0, r3
 80161ae:	2300      	movs	r3, #0
 80161b0:	4288      	cmp	r0, r1
 80161b2:	d305      	bcc.n	80161c0 <__copybits+0x40>
 80161b4:	bd70      	pop	{r4, r5, r6, pc}
 80161b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80161ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80161be:	e7eb      	b.n	8016198 <__copybits+0x18>
 80161c0:	f840 3b04 	str.w	r3, [r0], #4
 80161c4:	e7f4      	b.n	80161b0 <__copybits+0x30>

080161c6 <__any_on>:
 80161c6:	f100 0214 	add.w	r2, r0, #20
 80161ca:	6900      	ldr	r0, [r0, #16]
 80161cc:	114b      	asrs	r3, r1, #5
 80161ce:	4298      	cmp	r0, r3
 80161d0:	b510      	push	{r4, lr}
 80161d2:	db11      	blt.n	80161f8 <__any_on+0x32>
 80161d4:	dd0a      	ble.n	80161ec <__any_on+0x26>
 80161d6:	f011 011f 	ands.w	r1, r1, #31
 80161da:	d007      	beq.n	80161ec <__any_on+0x26>
 80161dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80161e0:	fa24 f001 	lsr.w	r0, r4, r1
 80161e4:	fa00 f101 	lsl.w	r1, r0, r1
 80161e8:	428c      	cmp	r4, r1
 80161ea:	d10b      	bne.n	8016204 <__any_on+0x3e>
 80161ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80161f0:	4293      	cmp	r3, r2
 80161f2:	d803      	bhi.n	80161fc <__any_on+0x36>
 80161f4:	2000      	movs	r0, #0
 80161f6:	bd10      	pop	{r4, pc}
 80161f8:	4603      	mov	r3, r0
 80161fa:	e7f7      	b.n	80161ec <__any_on+0x26>
 80161fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016200:	2900      	cmp	r1, #0
 8016202:	d0f5      	beq.n	80161f0 <__any_on+0x2a>
 8016204:	2001      	movs	r0, #1
 8016206:	e7f6      	b.n	80161f6 <__any_on+0x30>

08016208 <__sread>:
 8016208:	b510      	push	{r4, lr}
 801620a:	460c      	mov	r4, r1
 801620c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016210:	f000 f9e0 	bl	80165d4 <_read_r>
 8016214:	2800      	cmp	r0, #0
 8016216:	bfab      	itete	ge
 8016218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801621a:	89a3      	ldrhlt	r3, [r4, #12]
 801621c:	181b      	addge	r3, r3, r0
 801621e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016222:	bfac      	ite	ge
 8016224:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016226:	81a3      	strhlt	r3, [r4, #12]
 8016228:	bd10      	pop	{r4, pc}

0801622a <__swrite>:
 801622a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801622e:	461f      	mov	r7, r3
 8016230:	898b      	ldrh	r3, [r1, #12]
 8016232:	05db      	lsls	r3, r3, #23
 8016234:	4605      	mov	r5, r0
 8016236:	460c      	mov	r4, r1
 8016238:	4616      	mov	r6, r2
 801623a:	d505      	bpl.n	8016248 <__swrite+0x1e>
 801623c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016240:	2302      	movs	r3, #2
 8016242:	2200      	movs	r2, #0
 8016244:	f000 f9b4 	bl	80165b0 <_lseek_r>
 8016248:	89a3      	ldrh	r3, [r4, #12]
 801624a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801624e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016252:	81a3      	strh	r3, [r4, #12]
 8016254:	4632      	mov	r2, r6
 8016256:	463b      	mov	r3, r7
 8016258:	4628      	mov	r0, r5
 801625a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801625e:	f000 b9cb 	b.w	80165f8 <_write_r>

08016262 <__sseek>:
 8016262:	b510      	push	{r4, lr}
 8016264:	460c      	mov	r4, r1
 8016266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801626a:	f000 f9a1 	bl	80165b0 <_lseek_r>
 801626e:	1c43      	adds	r3, r0, #1
 8016270:	89a3      	ldrh	r3, [r4, #12]
 8016272:	bf15      	itete	ne
 8016274:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801627a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801627e:	81a3      	strheq	r3, [r4, #12]
 8016280:	bf18      	it	ne
 8016282:	81a3      	strhne	r3, [r4, #12]
 8016284:	bd10      	pop	{r4, pc}

08016286 <__sclose>:
 8016286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801628a:	f000 b9c7 	b.w	801661c <_close_r>

0801628e <_realloc_r>:
 801628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016292:	4607      	mov	r7, r0
 8016294:	4614      	mov	r4, r2
 8016296:	460d      	mov	r5, r1
 8016298:	b921      	cbnz	r1, 80162a4 <_realloc_r+0x16>
 801629a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801629e:	4611      	mov	r1, r2
 80162a0:	f7fc b952 	b.w	8012548 <_malloc_r>
 80162a4:	b92a      	cbnz	r2, 80162b2 <_realloc_r+0x24>
 80162a6:	f7fe fc2b 	bl	8014b00 <_free_r>
 80162aa:	4625      	mov	r5, r4
 80162ac:	4628      	mov	r0, r5
 80162ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162b2:	f000 f9f3 	bl	801669c <_malloc_usable_size_r>
 80162b6:	4284      	cmp	r4, r0
 80162b8:	4606      	mov	r6, r0
 80162ba:	d802      	bhi.n	80162c2 <_realloc_r+0x34>
 80162bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162c0:	d8f4      	bhi.n	80162ac <_realloc_r+0x1e>
 80162c2:	4621      	mov	r1, r4
 80162c4:	4638      	mov	r0, r7
 80162c6:	f7fc f93f 	bl	8012548 <_malloc_r>
 80162ca:	4680      	mov	r8, r0
 80162cc:	b908      	cbnz	r0, 80162d2 <_realloc_r+0x44>
 80162ce:	4645      	mov	r5, r8
 80162d0:	e7ec      	b.n	80162ac <_realloc_r+0x1e>
 80162d2:	42b4      	cmp	r4, r6
 80162d4:	4622      	mov	r2, r4
 80162d6:	4629      	mov	r1, r5
 80162d8:	bf28      	it	cs
 80162da:	4632      	movcs	r2, r6
 80162dc:	f7fd fd98 	bl	8013e10 <memcpy>
 80162e0:	4629      	mov	r1, r5
 80162e2:	4638      	mov	r0, r7
 80162e4:	f7fe fc0c 	bl	8014b00 <_free_r>
 80162e8:	e7f1      	b.n	80162ce <_realloc_r+0x40>

080162ea <__swbuf_r>:
 80162ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ec:	460e      	mov	r6, r1
 80162ee:	4614      	mov	r4, r2
 80162f0:	4605      	mov	r5, r0
 80162f2:	b118      	cbz	r0, 80162fc <__swbuf_r+0x12>
 80162f4:	6a03      	ldr	r3, [r0, #32]
 80162f6:	b90b      	cbnz	r3, 80162fc <__swbuf_r+0x12>
 80162f8:	f7fc fdfa 	bl	8012ef0 <__sinit>
 80162fc:	69a3      	ldr	r3, [r4, #24]
 80162fe:	60a3      	str	r3, [r4, #8]
 8016300:	89a3      	ldrh	r3, [r4, #12]
 8016302:	071a      	lsls	r2, r3, #28
 8016304:	d501      	bpl.n	801630a <__swbuf_r+0x20>
 8016306:	6923      	ldr	r3, [r4, #16]
 8016308:	b943      	cbnz	r3, 801631c <__swbuf_r+0x32>
 801630a:	4621      	mov	r1, r4
 801630c:	4628      	mov	r0, r5
 801630e:	f000 f82b 	bl	8016368 <__swsetup_r>
 8016312:	b118      	cbz	r0, 801631c <__swbuf_r+0x32>
 8016314:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016318:	4638      	mov	r0, r7
 801631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	6922      	ldr	r2, [r4, #16]
 8016320:	1a98      	subs	r0, r3, r2
 8016322:	6963      	ldr	r3, [r4, #20]
 8016324:	b2f6      	uxtb	r6, r6
 8016326:	4283      	cmp	r3, r0
 8016328:	4637      	mov	r7, r6
 801632a:	dc05      	bgt.n	8016338 <__swbuf_r+0x4e>
 801632c:	4621      	mov	r1, r4
 801632e:	4628      	mov	r0, r5
 8016330:	f7ff fa98 	bl	8015864 <_fflush_r>
 8016334:	2800      	cmp	r0, #0
 8016336:	d1ed      	bne.n	8016314 <__swbuf_r+0x2a>
 8016338:	68a3      	ldr	r3, [r4, #8]
 801633a:	3b01      	subs	r3, #1
 801633c:	60a3      	str	r3, [r4, #8]
 801633e:	6823      	ldr	r3, [r4, #0]
 8016340:	1c5a      	adds	r2, r3, #1
 8016342:	6022      	str	r2, [r4, #0]
 8016344:	701e      	strb	r6, [r3, #0]
 8016346:	6962      	ldr	r2, [r4, #20]
 8016348:	1c43      	adds	r3, r0, #1
 801634a:	429a      	cmp	r2, r3
 801634c:	d004      	beq.n	8016358 <__swbuf_r+0x6e>
 801634e:	89a3      	ldrh	r3, [r4, #12]
 8016350:	07db      	lsls	r3, r3, #31
 8016352:	d5e1      	bpl.n	8016318 <__swbuf_r+0x2e>
 8016354:	2e0a      	cmp	r6, #10
 8016356:	d1df      	bne.n	8016318 <__swbuf_r+0x2e>
 8016358:	4621      	mov	r1, r4
 801635a:	4628      	mov	r0, r5
 801635c:	f7ff fa82 	bl	8015864 <_fflush_r>
 8016360:	2800      	cmp	r0, #0
 8016362:	d0d9      	beq.n	8016318 <__swbuf_r+0x2e>
 8016364:	e7d6      	b.n	8016314 <__swbuf_r+0x2a>
	...

08016368 <__swsetup_r>:
 8016368:	b538      	push	{r3, r4, r5, lr}
 801636a:	4b29      	ldr	r3, [pc, #164]	@ (8016410 <__swsetup_r+0xa8>)
 801636c:	4605      	mov	r5, r0
 801636e:	6818      	ldr	r0, [r3, #0]
 8016370:	460c      	mov	r4, r1
 8016372:	b118      	cbz	r0, 801637c <__swsetup_r+0x14>
 8016374:	6a03      	ldr	r3, [r0, #32]
 8016376:	b90b      	cbnz	r3, 801637c <__swsetup_r+0x14>
 8016378:	f7fc fdba 	bl	8012ef0 <__sinit>
 801637c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016380:	0719      	lsls	r1, r3, #28
 8016382:	d422      	bmi.n	80163ca <__swsetup_r+0x62>
 8016384:	06da      	lsls	r2, r3, #27
 8016386:	d407      	bmi.n	8016398 <__swsetup_r+0x30>
 8016388:	2209      	movs	r2, #9
 801638a:	602a      	str	r2, [r5, #0]
 801638c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016390:	81a3      	strh	r3, [r4, #12]
 8016392:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016396:	e033      	b.n	8016400 <__swsetup_r+0x98>
 8016398:	0758      	lsls	r0, r3, #29
 801639a:	d512      	bpl.n	80163c2 <__swsetup_r+0x5a>
 801639c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801639e:	b141      	cbz	r1, 80163b2 <__swsetup_r+0x4a>
 80163a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80163a4:	4299      	cmp	r1, r3
 80163a6:	d002      	beq.n	80163ae <__swsetup_r+0x46>
 80163a8:	4628      	mov	r0, r5
 80163aa:	f7fe fba9 	bl	8014b00 <_free_r>
 80163ae:	2300      	movs	r3, #0
 80163b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80163b2:	89a3      	ldrh	r3, [r4, #12]
 80163b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80163b8:	81a3      	strh	r3, [r4, #12]
 80163ba:	2300      	movs	r3, #0
 80163bc:	6063      	str	r3, [r4, #4]
 80163be:	6923      	ldr	r3, [r4, #16]
 80163c0:	6023      	str	r3, [r4, #0]
 80163c2:	89a3      	ldrh	r3, [r4, #12]
 80163c4:	f043 0308 	orr.w	r3, r3, #8
 80163c8:	81a3      	strh	r3, [r4, #12]
 80163ca:	6923      	ldr	r3, [r4, #16]
 80163cc:	b94b      	cbnz	r3, 80163e2 <__swsetup_r+0x7a>
 80163ce:	89a3      	ldrh	r3, [r4, #12]
 80163d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80163d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80163d8:	d003      	beq.n	80163e2 <__swsetup_r+0x7a>
 80163da:	4621      	mov	r1, r4
 80163dc:	4628      	mov	r0, r5
 80163de:	f000 f84c 	bl	801647a <__smakebuf_r>
 80163e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163e6:	f013 0201 	ands.w	r2, r3, #1
 80163ea:	d00a      	beq.n	8016402 <__swsetup_r+0x9a>
 80163ec:	2200      	movs	r2, #0
 80163ee:	60a2      	str	r2, [r4, #8]
 80163f0:	6962      	ldr	r2, [r4, #20]
 80163f2:	4252      	negs	r2, r2
 80163f4:	61a2      	str	r2, [r4, #24]
 80163f6:	6922      	ldr	r2, [r4, #16]
 80163f8:	b942      	cbnz	r2, 801640c <__swsetup_r+0xa4>
 80163fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80163fe:	d1c5      	bne.n	801638c <__swsetup_r+0x24>
 8016400:	bd38      	pop	{r3, r4, r5, pc}
 8016402:	0799      	lsls	r1, r3, #30
 8016404:	bf58      	it	pl
 8016406:	6962      	ldrpl	r2, [r4, #20]
 8016408:	60a2      	str	r2, [r4, #8]
 801640a:	e7f4      	b.n	80163f6 <__swsetup_r+0x8e>
 801640c:	2000      	movs	r0, #0
 801640e:	e7f7      	b.n	8016400 <__swsetup_r+0x98>
 8016410:	200001d4 	.word	0x200001d4

08016414 <__ascii_wctomb>:
 8016414:	4603      	mov	r3, r0
 8016416:	4608      	mov	r0, r1
 8016418:	b141      	cbz	r1, 801642c <__ascii_wctomb+0x18>
 801641a:	2aff      	cmp	r2, #255	@ 0xff
 801641c:	d904      	bls.n	8016428 <__ascii_wctomb+0x14>
 801641e:	228a      	movs	r2, #138	@ 0x8a
 8016420:	601a      	str	r2, [r3, #0]
 8016422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016426:	4770      	bx	lr
 8016428:	700a      	strb	r2, [r1, #0]
 801642a:	2001      	movs	r0, #1
 801642c:	4770      	bx	lr

0801642e <__swhatbuf_r>:
 801642e:	b570      	push	{r4, r5, r6, lr}
 8016430:	460c      	mov	r4, r1
 8016432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016436:	2900      	cmp	r1, #0
 8016438:	b096      	sub	sp, #88	@ 0x58
 801643a:	4615      	mov	r5, r2
 801643c:	461e      	mov	r6, r3
 801643e:	da0d      	bge.n	801645c <__swhatbuf_r+0x2e>
 8016440:	89a3      	ldrh	r3, [r4, #12]
 8016442:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016446:	f04f 0100 	mov.w	r1, #0
 801644a:	bf14      	ite	ne
 801644c:	2340      	movne	r3, #64	@ 0x40
 801644e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016452:	2000      	movs	r0, #0
 8016454:	6031      	str	r1, [r6, #0]
 8016456:	602b      	str	r3, [r5, #0]
 8016458:	b016      	add	sp, #88	@ 0x58
 801645a:	bd70      	pop	{r4, r5, r6, pc}
 801645c:	466a      	mov	r2, sp
 801645e:	f000 f8ed 	bl	801663c <_fstat_r>
 8016462:	2800      	cmp	r0, #0
 8016464:	dbec      	blt.n	8016440 <__swhatbuf_r+0x12>
 8016466:	9901      	ldr	r1, [sp, #4]
 8016468:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801646c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016470:	4259      	negs	r1, r3
 8016472:	4159      	adcs	r1, r3
 8016474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016478:	e7eb      	b.n	8016452 <__swhatbuf_r+0x24>

0801647a <__smakebuf_r>:
 801647a:	898b      	ldrh	r3, [r1, #12]
 801647c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801647e:	079d      	lsls	r5, r3, #30
 8016480:	4606      	mov	r6, r0
 8016482:	460c      	mov	r4, r1
 8016484:	d507      	bpl.n	8016496 <__smakebuf_r+0x1c>
 8016486:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801648a:	6023      	str	r3, [r4, #0]
 801648c:	6123      	str	r3, [r4, #16]
 801648e:	2301      	movs	r3, #1
 8016490:	6163      	str	r3, [r4, #20]
 8016492:	b003      	add	sp, #12
 8016494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016496:	ab01      	add	r3, sp, #4
 8016498:	466a      	mov	r2, sp
 801649a:	f7ff ffc8 	bl	801642e <__swhatbuf_r>
 801649e:	9f00      	ldr	r7, [sp, #0]
 80164a0:	4605      	mov	r5, r0
 80164a2:	4639      	mov	r1, r7
 80164a4:	4630      	mov	r0, r6
 80164a6:	f7fc f84f 	bl	8012548 <_malloc_r>
 80164aa:	b948      	cbnz	r0, 80164c0 <__smakebuf_r+0x46>
 80164ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164b0:	059a      	lsls	r2, r3, #22
 80164b2:	d4ee      	bmi.n	8016492 <__smakebuf_r+0x18>
 80164b4:	f023 0303 	bic.w	r3, r3, #3
 80164b8:	f043 0302 	orr.w	r3, r3, #2
 80164bc:	81a3      	strh	r3, [r4, #12]
 80164be:	e7e2      	b.n	8016486 <__smakebuf_r+0xc>
 80164c0:	89a3      	ldrh	r3, [r4, #12]
 80164c2:	6020      	str	r0, [r4, #0]
 80164c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80164c8:	81a3      	strh	r3, [r4, #12]
 80164ca:	9b01      	ldr	r3, [sp, #4]
 80164cc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80164d0:	b15b      	cbz	r3, 80164ea <__smakebuf_r+0x70>
 80164d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164d6:	4630      	mov	r0, r6
 80164d8:	f000 f85a 	bl	8016590 <_isatty_r>
 80164dc:	b128      	cbz	r0, 80164ea <__smakebuf_r+0x70>
 80164de:	89a3      	ldrh	r3, [r4, #12]
 80164e0:	f023 0303 	bic.w	r3, r3, #3
 80164e4:	f043 0301 	orr.w	r3, r3, #1
 80164e8:	81a3      	strh	r3, [r4, #12]
 80164ea:	89a3      	ldrh	r3, [r4, #12]
 80164ec:	431d      	orrs	r5, r3
 80164ee:	81a5      	strh	r5, [r4, #12]
 80164f0:	e7cf      	b.n	8016492 <__smakebuf_r+0x18>

080164f2 <_putc_r>:
 80164f2:	b570      	push	{r4, r5, r6, lr}
 80164f4:	460d      	mov	r5, r1
 80164f6:	4614      	mov	r4, r2
 80164f8:	4606      	mov	r6, r0
 80164fa:	b118      	cbz	r0, 8016504 <_putc_r+0x12>
 80164fc:	6a03      	ldr	r3, [r0, #32]
 80164fe:	b90b      	cbnz	r3, 8016504 <_putc_r+0x12>
 8016500:	f7fc fcf6 	bl	8012ef0 <__sinit>
 8016504:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016506:	07d8      	lsls	r0, r3, #31
 8016508:	d405      	bmi.n	8016516 <_putc_r+0x24>
 801650a:	89a3      	ldrh	r3, [r4, #12]
 801650c:	0599      	lsls	r1, r3, #22
 801650e:	d402      	bmi.n	8016516 <_putc_r+0x24>
 8016510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016512:	f7fd fc76 	bl	8013e02 <__retarget_lock_acquire_recursive>
 8016516:	68a3      	ldr	r3, [r4, #8]
 8016518:	3b01      	subs	r3, #1
 801651a:	2b00      	cmp	r3, #0
 801651c:	60a3      	str	r3, [r4, #8]
 801651e:	da05      	bge.n	801652c <_putc_r+0x3a>
 8016520:	69a2      	ldr	r2, [r4, #24]
 8016522:	4293      	cmp	r3, r2
 8016524:	db12      	blt.n	801654c <_putc_r+0x5a>
 8016526:	b2eb      	uxtb	r3, r5
 8016528:	2b0a      	cmp	r3, #10
 801652a:	d00f      	beq.n	801654c <_putc_r+0x5a>
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	1c5a      	adds	r2, r3, #1
 8016530:	6022      	str	r2, [r4, #0]
 8016532:	701d      	strb	r5, [r3, #0]
 8016534:	b2ed      	uxtb	r5, r5
 8016536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016538:	07da      	lsls	r2, r3, #31
 801653a:	d405      	bmi.n	8016548 <_putc_r+0x56>
 801653c:	89a3      	ldrh	r3, [r4, #12]
 801653e:	059b      	lsls	r3, r3, #22
 8016540:	d402      	bmi.n	8016548 <_putc_r+0x56>
 8016542:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016544:	f7fd fc5e 	bl	8013e04 <__retarget_lock_release_recursive>
 8016548:	4628      	mov	r0, r5
 801654a:	bd70      	pop	{r4, r5, r6, pc}
 801654c:	4629      	mov	r1, r5
 801654e:	4622      	mov	r2, r4
 8016550:	4630      	mov	r0, r6
 8016552:	f7ff feca 	bl	80162ea <__swbuf_r>
 8016556:	4605      	mov	r5, r0
 8016558:	e7ed      	b.n	8016536 <_putc_r+0x44>

0801655a <memmove>:
 801655a:	4288      	cmp	r0, r1
 801655c:	b510      	push	{r4, lr}
 801655e:	eb01 0402 	add.w	r4, r1, r2
 8016562:	d902      	bls.n	801656a <memmove+0x10>
 8016564:	4284      	cmp	r4, r0
 8016566:	4623      	mov	r3, r4
 8016568:	d807      	bhi.n	801657a <memmove+0x20>
 801656a:	1e43      	subs	r3, r0, #1
 801656c:	42a1      	cmp	r1, r4
 801656e:	d008      	beq.n	8016582 <memmove+0x28>
 8016570:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016574:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016578:	e7f8      	b.n	801656c <memmove+0x12>
 801657a:	4402      	add	r2, r0
 801657c:	4601      	mov	r1, r0
 801657e:	428a      	cmp	r2, r1
 8016580:	d100      	bne.n	8016584 <memmove+0x2a>
 8016582:	bd10      	pop	{r4, pc}
 8016584:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016588:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801658c:	e7f7      	b.n	801657e <memmove+0x24>
	...

08016590 <_isatty_r>:
 8016590:	b538      	push	{r3, r4, r5, lr}
 8016592:	4d06      	ldr	r5, [pc, #24]	@ (80165ac <_isatty_r+0x1c>)
 8016594:	2300      	movs	r3, #0
 8016596:	4604      	mov	r4, r0
 8016598:	4608      	mov	r0, r1
 801659a:	602b      	str	r3, [r5, #0]
 801659c:	f7f4 fbfa 	bl	800ad94 <_isatty>
 80165a0:	1c43      	adds	r3, r0, #1
 80165a2:	d102      	bne.n	80165aa <_isatty_r+0x1a>
 80165a4:	682b      	ldr	r3, [r5, #0]
 80165a6:	b103      	cbz	r3, 80165aa <_isatty_r+0x1a>
 80165a8:	6023      	str	r3, [r4, #0]
 80165aa:	bd38      	pop	{r3, r4, r5, pc}
 80165ac:	200024bc 	.word	0x200024bc

080165b0 <_lseek_r>:
 80165b0:	b538      	push	{r3, r4, r5, lr}
 80165b2:	4d07      	ldr	r5, [pc, #28]	@ (80165d0 <_lseek_r+0x20>)
 80165b4:	4604      	mov	r4, r0
 80165b6:	4608      	mov	r0, r1
 80165b8:	4611      	mov	r1, r2
 80165ba:	2200      	movs	r2, #0
 80165bc:	602a      	str	r2, [r5, #0]
 80165be:	461a      	mov	r2, r3
 80165c0:	f7f4 fbf3 	bl	800adaa <_lseek>
 80165c4:	1c43      	adds	r3, r0, #1
 80165c6:	d102      	bne.n	80165ce <_lseek_r+0x1e>
 80165c8:	682b      	ldr	r3, [r5, #0]
 80165ca:	b103      	cbz	r3, 80165ce <_lseek_r+0x1e>
 80165cc:	6023      	str	r3, [r4, #0]
 80165ce:	bd38      	pop	{r3, r4, r5, pc}
 80165d0:	200024bc 	.word	0x200024bc

080165d4 <_read_r>:
 80165d4:	b538      	push	{r3, r4, r5, lr}
 80165d6:	4d07      	ldr	r5, [pc, #28]	@ (80165f4 <_read_r+0x20>)
 80165d8:	4604      	mov	r4, r0
 80165da:	4608      	mov	r0, r1
 80165dc:	4611      	mov	r1, r2
 80165de:	2200      	movs	r2, #0
 80165e0:	602a      	str	r2, [r5, #0]
 80165e2:	461a      	mov	r2, r3
 80165e4:	f7f4 fb81 	bl	800acea <_read>
 80165e8:	1c43      	adds	r3, r0, #1
 80165ea:	d102      	bne.n	80165f2 <_read_r+0x1e>
 80165ec:	682b      	ldr	r3, [r5, #0]
 80165ee:	b103      	cbz	r3, 80165f2 <_read_r+0x1e>
 80165f0:	6023      	str	r3, [r4, #0]
 80165f2:	bd38      	pop	{r3, r4, r5, pc}
 80165f4:	200024bc 	.word	0x200024bc

080165f8 <_write_r>:
 80165f8:	b538      	push	{r3, r4, r5, lr}
 80165fa:	4d07      	ldr	r5, [pc, #28]	@ (8016618 <_write_r+0x20>)
 80165fc:	4604      	mov	r4, r0
 80165fe:	4608      	mov	r0, r1
 8016600:	4611      	mov	r1, r2
 8016602:	2200      	movs	r2, #0
 8016604:	602a      	str	r2, [r5, #0]
 8016606:	461a      	mov	r2, r3
 8016608:	f7f4 fb8c 	bl	800ad24 <_write>
 801660c:	1c43      	adds	r3, r0, #1
 801660e:	d102      	bne.n	8016616 <_write_r+0x1e>
 8016610:	682b      	ldr	r3, [r5, #0]
 8016612:	b103      	cbz	r3, 8016616 <_write_r+0x1e>
 8016614:	6023      	str	r3, [r4, #0]
 8016616:	bd38      	pop	{r3, r4, r5, pc}
 8016618:	200024bc 	.word	0x200024bc

0801661c <_close_r>:
 801661c:	b538      	push	{r3, r4, r5, lr}
 801661e:	4d06      	ldr	r5, [pc, #24]	@ (8016638 <_close_r+0x1c>)
 8016620:	2300      	movs	r3, #0
 8016622:	4604      	mov	r4, r0
 8016624:	4608      	mov	r0, r1
 8016626:	602b      	str	r3, [r5, #0]
 8016628:	f7f4 fb98 	bl	800ad5c <_close>
 801662c:	1c43      	adds	r3, r0, #1
 801662e:	d102      	bne.n	8016636 <_close_r+0x1a>
 8016630:	682b      	ldr	r3, [r5, #0]
 8016632:	b103      	cbz	r3, 8016636 <_close_r+0x1a>
 8016634:	6023      	str	r3, [r4, #0]
 8016636:	bd38      	pop	{r3, r4, r5, pc}
 8016638:	200024bc 	.word	0x200024bc

0801663c <_fstat_r>:
 801663c:	b538      	push	{r3, r4, r5, lr}
 801663e:	4d07      	ldr	r5, [pc, #28]	@ (801665c <_fstat_r+0x20>)
 8016640:	2300      	movs	r3, #0
 8016642:	4604      	mov	r4, r0
 8016644:	4608      	mov	r0, r1
 8016646:	4611      	mov	r1, r2
 8016648:	602b      	str	r3, [r5, #0]
 801664a:	f7f4 fb93 	bl	800ad74 <_fstat>
 801664e:	1c43      	adds	r3, r0, #1
 8016650:	d102      	bne.n	8016658 <_fstat_r+0x1c>
 8016652:	682b      	ldr	r3, [r5, #0]
 8016654:	b103      	cbz	r3, 8016658 <_fstat_r+0x1c>
 8016656:	6023      	str	r3, [r4, #0]
 8016658:	bd38      	pop	{r3, r4, r5, pc}
 801665a:	bf00      	nop
 801665c:	200024bc 	.word	0x200024bc

08016660 <__assert_func>:
 8016660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016662:	4614      	mov	r4, r2
 8016664:	461a      	mov	r2, r3
 8016666:	4b09      	ldr	r3, [pc, #36]	@ (801668c <__assert_func+0x2c>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	4605      	mov	r5, r0
 801666c:	68d8      	ldr	r0, [r3, #12]
 801666e:	b14c      	cbz	r4, 8016684 <__assert_func+0x24>
 8016670:	4b07      	ldr	r3, [pc, #28]	@ (8016690 <__assert_func+0x30>)
 8016672:	9100      	str	r1, [sp, #0]
 8016674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016678:	4906      	ldr	r1, [pc, #24]	@ (8016694 <__assert_func+0x34>)
 801667a:	462b      	mov	r3, r5
 801667c:	f000 f816 	bl	80166ac <fiprintf>
 8016680:	f000 f826 	bl	80166d0 <abort>
 8016684:	4b04      	ldr	r3, [pc, #16]	@ (8016698 <__assert_func+0x38>)
 8016686:	461c      	mov	r4, r3
 8016688:	e7f3      	b.n	8016672 <__assert_func+0x12>
 801668a:	bf00      	nop
 801668c:	200001d4 	.word	0x200001d4
 8016690:	08017d4e 	.word	0x08017d4e
 8016694:	08017d5b 	.word	0x08017d5b
 8016698:	08017d89 	.word	0x08017d89

0801669c <_malloc_usable_size_r>:
 801669c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166a0:	1f18      	subs	r0, r3, #4
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	bfbc      	itt	lt
 80166a6:	580b      	ldrlt	r3, [r1, r0]
 80166a8:	18c0      	addlt	r0, r0, r3
 80166aa:	4770      	bx	lr

080166ac <fiprintf>:
 80166ac:	b40e      	push	{r1, r2, r3}
 80166ae:	b503      	push	{r0, r1, lr}
 80166b0:	4601      	mov	r1, r0
 80166b2:	ab03      	add	r3, sp, #12
 80166b4:	4805      	ldr	r0, [pc, #20]	@ (80166cc <fiprintf+0x20>)
 80166b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80166ba:	6800      	ldr	r0, [r0, #0]
 80166bc:	9301      	str	r3, [sp, #4]
 80166be:	f7fe ff23 	bl	8015508 <_vfiprintf_r>
 80166c2:	b002      	add	sp, #8
 80166c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80166c8:	b003      	add	sp, #12
 80166ca:	4770      	bx	lr
 80166cc:	200001d4 	.word	0x200001d4

080166d0 <abort>:
 80166d0:	b508      	push	{r3, lr}
 80166d2:	2006      	movs	r0, #6
 80166d4:	f000 f82c 	bl	8016730 <raise>
 80166d8:	2001      	movs	r0, #1
 80166da:	f7f4 fafb 	bl	800acd4 <_exit>

080166de <_raise_r>:
 80166de:	291f      	cmp	r1, #31
 80166e0:	b538      	push	{r3, r4, r5, lr}
 80166e2:	4605      	mov	r5, r0
 80166e4:	460c      	mov	r4, r1
 80166e6:	d904      	bls.n	80166f2 <_raise_r+0x14>
 80166e8:	2316      	movs	r3, #22
 80166ea:	6003      	str	r3, [r0, #0]
 80166ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166f0:	bd38      	pop	{r3, r4, r5, pc}
 80166f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80166f4:	b112      	cbz	r2, 80166fc <_raise_r+0x1e>
 80166f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166fa:	b94b      	cbnz	r3, 8016710 <_raise_r+0x32>
 80166fc:	4628      	mov	r0, r5
 80166fe:	f000 f831 	bl	8016764 <_getpid_r>
 8016702:	4622      	mov	r2, r4
 8016704:	4601      	mov	r1, r0
 8016706:	4628      	mov	r0, r5
 8016708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801670c:	f000 b818 	b.w	8016740 <_kill_r>
 8016710:	2b01      	cmp	r3, #1
 8016712:	d00a      	beq.n	801672a <_raise_r+0x4c>
 8016714:	1c59      	adds	r1, r3, #1
 8016716:	d103      	bne.n	8016720 <_raise_r+0x42>
 8016718:	2316      	movs	r3, #22
 801671a:	6003      	str	r3, [r0, #0]
 801671c:	2001      	movs	r0, #1
 801671e:	e7e7      	b.n	80166f0 <_raise_r+0x12>
 8016720:	2100      	movs	r1, #0
 8016722:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016726:	4620      	mov	r0, r4
 8016728:	4798      	blx	r3
 801672a:	2000      	movs	r0, #0
 801672c:	e7e0      	b.n	80166f0 <_raise_r+0x12>
	...

08016730 <raise>:
 8016730:	4b02      	ldr	r3, [pc, #8]	@ (801673c <raise+0xc>)
 8016732:	4601      	mov	r1, r0
 8016734:	6818      	ldr	r0, [r3, #0]
 8016736:	f7ff bfd2 	b.w	80166de <_raise_r>
 801673a:	bf00      	nop
 801673c:	200001d4 	.word	0x200001d4

08016740 <_kill_r>:
 8016740:	b538      	push	{r3, r4, r5, lr}
 8016742:	4d07      	ldr	r5, [pc, #28]	@ (8016760 <_kill_r+0x20>)
 8016744:	2300      	movs	r3, #0
 8016746:	4604      	mov	r4, r0
 8016748:	4608      	mov	r0, r1
 801674a:	4611      	mov	r1, r2
 801674c:	602b      	str	r3, [r5, #0]
 801674e:	f7f4 fab1 	bl	800acb4 <_kill>
 8016752:	1c43      	adds	r3, r0, #1
 8016754:	d102      	bne.n	801675c <_kill_r+0x1c>
 8016756:	682b      	ldr	r3, [r5, #0]
 8016758:	b103      	cbz	r3, 801675c <_kill_r+0x1c>
 801675a:	6023      	str	r3, [r4, #0]
 801675c:	bd38      	pop	{r3, r4, r5, pc}
 801675e:	bf00      	nop
 8016760:	200024bc 	.word	0x200024bc

08016764 <_getpid_r>:
 8016764:	f7f4 ba9e 	b.w	800aca4 <_getpid>

08016768 <_init>:
 8016768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801676a:	bf00      	nop
 801676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801676e:	bc08      	pop	{r3}
 8016770:	469e      	mov	lr, r3
 8016772:	4770      	bx	lr

08016774 <_fini>:
 8016774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016776:	bf00      	nop
 8016778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801677a:	bc08      	pop	{r3}
 801677c:	469e      	mov	lr, r3
 801677e:	4770      	bx	lr
